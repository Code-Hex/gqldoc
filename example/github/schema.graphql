
"""
Marks an element of a GraphQL schema as only available via a preview header
"""
directive @preview(
  """
  The identifier of the API preview that toggles this field.
  """
  toggledBy: String!
) on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

"""
Defines what type of global IDs are accepted for a mutation argument of type ID.
"""
directive @possibleTypes(
  """
  Abstract type of accepted global ID
  """
  abstractType: String

  """
  Accepted types of global IDs.
  """
  concreteTypes: [String!]!
) on INPUT_FIELD_DEFINITION

"""
Autogenerated input type of AbortQueuedMigrations
"""
input AbortQueuedMigrationsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization that is running the migrations.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of AbortQueuedMigrations
"""
type AbortQueuedMigrationsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Autogenerated input type of AbortRepositoryMigration
"""
input AbortRepositoryMigrationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the migration to be aborted.
  """
  migrationId: ID! @possibleTypes(concreteTypes: ["RepositoryMigration"])
}

"""
Autogenerated return type of AbortRepositoryMigration
"""
type AbortRepositoryMigrationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Autogenerated input type of AcceptEnterpriseAdministratorInvitation
"""
input AcceptEnterpriseAdministratorInvitationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the invitation being accepted
  """
  invitationId: ID! @possibleTypes(concreteTypes: ["EnterpriseAdministratorInvitation"])
}

"""
Autogenerated return type of AcceptEnterpriseAdministratorInvitation
"""
type AcceptEnterpriseAdministratorInvitationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The invitation that was accepted.
  """
  invitation: EnterpriseAdministratorInvitation

  """
  A message confirming the result of accepting an administrator invitation.
  """
  message: String
}

"""
Autogenerated input type of AcceptTopicSuggestion
"""
input AcceptTopicSuggestionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of the suggested topic.

  **Upcoming Change on 2024-04-01 UTC**
  **Description:** `name` will be removed.
  **Reason:** Suggested topics are no longer supported
  """
  name: String

  """
  The Node ID of the repository.

  **Upcoming Change on 2024-04-01 UTC**
  **Description:** `repositoryId` will be removed.
  **Reason:** Suggested topics are no longer supported
  """
  repositoryId: ID @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of AcceptTopicSuggestion
"""
type AcceptTopicSuggestionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The accepted topic.
  """
  topic: Topic @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")
}

"""
Represents an object which can take actions on GitHub. Typically a User or Bot.
"""
interface Actor {
  """
  A URL pointing to the actor's public avatar.
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The username of the actor.
  """
  login: String!

  """
  The HTTP path for this actor.
  """
  resourcePath: URI!

  """
  The HTTP URL for this actor.
  """
  url: URI!
}

"""
Location information for an actor
"""
type ActorLocation {
  """
  City
  """
  city: String

  """
  Country name
  """
  country: String

  """
  Country code
  """
  countryCode: String

  """
  Region name
  """
  region: String

  """
  Region or state code
  """
  regionCode: String
}

"""
The actor's type.
"""
enum ActorType {
  """
  Indicates a team actor.
  """
  TEAM

  """
  Indicates a user actor.
  """
  USER
}

"""
Autogenerated input type of AddAssigneesToAssignable
"""
input AddAssigneesToAssignableInput {
  """
  The id of the assignable object to add assignees to.
  """
  assignableId: ID! @possibleTypes(concreteTypes: ["Issue", "PullRequest"], abstractType: "Assignable")

  """
  The id of users to add as assignees.
  """
  assigneeIds: [ID!]! @possibleTypes(concreteTypes: ["User"])

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of AddAssigneesToAssignable
"""
type AddAssigneesToAssignablePayload {
  """
  The item that was assigned.
  """
  assignable: Assignable

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of AddComment
"""
input AddCommentInput {
  """
  The contents of the comment.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the subject to modify.
  """
  subjectId: ID! @possibleTypes(concreteTypes: ["Issue", "PullRequest"], abstractType: "IssueOrPullRequest")
}

"""
Autogenerated return type of AddComment
"""
type AddCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The edge from the subject's comment connection.
  """
  commentEdge: IssueCommentEdge

  """
  The subject
  """
  subject: Node

  """
  The edge from the subject's timeline connection.
  """
  timelineEdge: IssueTimelineItemEdge
}

"""
Autogenerated input type of AddDiscussionComment
"""
input AddDiscussionCommentInput {
  """
  The contents of the comment.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the discussion to comment on.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])

  """
  The Node ID of the discussion comment within this discussion to reply to.
  """
  replyToId: ID @possibleTypes(concreteTypes: ["DiscussionComment"])
}

"""
Autogenerated return type of AddDiscussionComment
"""
type AddDiscussionCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created discussion comment.
  """
  comment: DiscussionComment
}

"""
Autogenerated input type of AddDiscussionPollVote
"""
input AddDiscussionPollVoteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the discussion poll option to vote for.
  """
  pollOptionId: ID! @possibleTypes(concreteTypes: ["DiscussionPollOption"])
}

"""
Autogenerated return type of AddDiscussionPollVote
"""
type AddDiscussionPollVotePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The poll option that a vote was added to.
  """
  pollOption: DiscussionPollOption
}

"""
Autogenerated input type of AddEnterpriseOrganizationMember
"""
input AddEnterpriseOrganizationMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise which owns the organization.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the organization the users will be added to.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  The role to assign the users in the organization
  """
  role: OrganizationMemberRole

  """
  The IDs of the enterprise members to add.
  """
  userIds: [ID!]!
}

"""
Autogenerated return type of AddEnterpriseOrganizationMember
"""
type AddEnterpriseOrganizationMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The users who were added to the organization.
  """
  users: [User!]
}

"""
Autogenerated input type of AddEnterpriseSupportEntitlement
"""
input AddEnterpriseSupportEntitlementInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Enterprise which the admin belongs to.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of a member who will receive the support entitlement.
  """
  login: String!
}

"""
Autogenerated return type of AddEnterpriseSupportEntitlement
"""
type AddEnterpriseSupportEntitlementPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of adding the support entitlement.
  """
  message: String
}

"""
Autogenerated input type of AddLabelsToLabelable
"""
input AddLabelsToLabelableInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ids of the labels to add.
  """
  labelIds: [ID!]! @possibleTypes(concreteTypes: ["Label"])

  """
  The id of the labelable object to add labels to.
  """
  labelableId: ID! @possibleTypes(concreteTypes: ["Discussion", "Issue", "PullRequest"], abstractType: "Labelable")
}

"""
Autogenerated return type of AddLabelsToLabelable
"""
type AddLabelsToLabelablePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item that was labeled.
  """
  labelable: Labelable
}

"""
Autogenerated input type of AddProjectCard
"""
input AddProjectCardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The content of the card. Must be a member of the ProjectCardItem union
  """
  contentId: ID @possibleTypes(concreteTypes: ["Issue", "PullRequest"], abstractType: "ProjectCardItem")

  """
  The note on the card.
  """
  note: String

  """
  The Node ID of the ProjectColumn.
  """
  projectColumnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

"""
Autogenerated return type of AddProjectCard
"""
type AddProjectCardPayload {
  """
  The edge from the ProjectColumn's card connection.
  """
  cardEdge: ProjectCardEdge

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ProjectColumn
  """
  projectColumn: ProjectColumn
}

"""
Autogenerated input type of AddProjectColumn
"""
input AddProjectColumnInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of the column.
  """
  name: String!

  """
  The Node ID of the project.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])
}

"""
Autogenerated return type of AddProjectColumn
"""
type AddProjectColumnPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The edge from the project's column connection.
  """
  columnEdge: ProjectColumnEdge

  """
  The project
  """
  project: Project
}

"""
Autogenerated input type of AddProjectV2DraftIssue
"""
input AddProjectV2DraftIssueInput {
  """
  The IDs of the assignees of the draft issue.
  """
  assigneeIds: [ID!] @possibleTypes(concreteTypes: ["User"])

  """
  The body of the draft issue.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to add the draft issue to.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The title of the draft issue. A project item can also be created by providing
  the URL of an Issue or Pull Request if you have access.
  """
  title: String!
}

"""
Autogenerated return type of AddProjectV2DraftIssue
"""
type AddProjectV2DraftIssuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The draft issue added to the project.
  """
  projectItem: ProjectV2Item
}

"""
Autogenerated input type of AddProjectV2ItemById
"""
input AddProjectV2ItemByIdInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the Issue or Pull Request to add.
  """
  contentId: ID!
    @possibleTypes(concreteTypes: ["DraftIssue", "Issue", "PullRequest"], abstractType: "ProjectV2ItemContent")

  """
  The ID of the Project to add the item to.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of AddProjectV2ItemById
"""
type AddProjectV2ItemByIdPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item added to the project.
  """
  item: ProjectV2Item
}

"""
Autogenerated input type of AddPullRequestReviewComment
"""
input AddPullRequestReviewCommentInput {
  """
  The text of the comment. This field is required

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `body` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The SHA of the commit to comment on.

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `commitOID` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation
  """
  commitOID: GitObjectID

  """
  The comment id to reply to.

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `inReplyTo` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation
  """
  inReplyTo: ID @possibleTypes(concreteTypes: ["PullRequestReviewComment"])

  """
  The relative path of the file to comment on.

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `path` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation
  """
  path: String

  """
  The line index in the diff to comment on.

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `position` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation
  """
  position: Int

  """
  The node ID of the pull request reviewing

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `pullRequestId` will be removed. use
  addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation
  """
  pullRequestId: ID @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The Node ID of the review to modify.

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `pullRequestReviewId` will be removed. use
  addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation
  """
  pullRequestReviewId: ID @possibleTypes(concreteTypes: ["PullRequestReview"])
}

"""
Autogenerated return type of AddPullRequestReviewComment
"""
type AddPullRequestReviewCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created comment.
  """
  comment: PullRequestReviewComment

  """
  The edge from the review's comment connection.
  """
  commentEdge: PullRequestReviewCommentEdge
}

"""
Autogenerated input type of AddPullRequestReview
"""
input AddPullRequestReviewInput {
  """
  The contents of the review body comment.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The review line comments.

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `comments` will be removed. use the `threads` argument instead
  **Reason:** We are deprecating comment fields that use diff-relative positioning
  """
  comments: [DraftPullRequestReviewComment]

  """
  The commit OID the review pertains to.
  """
  commitOID: GitObjectID

  """
  The event to perform on the pull request review.
  """
  event: PullRequestReviewEvent

  """
  The Node ID of the pull request to modify.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The review line comment threads.
  """
  threads: [DraftPullRequestReviewThread]
}

"""
Autogenerated return type of AddPullRequestReview
"""
type AddPullRequestReviewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created pull request review.
  """
  pullRequestReview: PullRequestReview

  """
  The edge from the pull request's review connection.
  """
  reviewEdge: PullRequestReviewEdge
}

"""
Autogenerated input type of AddPullRequestReviewThread
"""
input AddPullRequestReviewThreadInput {
  """
  Body of the thread's first comment.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The line of the blob to which the thread refers, required for line-level
  threads. The end of the line range for multi-line comments.
  """
  line: Int

  """
  Path to the file being commented on.
  """
  path: String!

  """
  The node ID of the pull request reviewing
  """
  pullRequestId: ID @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The Node ID of the review to modify.
  """
  pullRequestReviewId: ID @possibleTypes(concreteTypes: ["PullRequestReview"])

  """
  The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.
  """
  side: DiffSide = RIGHT

  """
  The first line of the range to which the comment refers.
  """
  startLine: Int

  """
  The side of the diff on which the start line resides.
  """
  startSide: DiffSide = RIGHT

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType = LINE
}

"""
Autogenerated return type of AddPullRequestReviewThread
"""
type AddPullRequestReviewThreadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created thread.
  """
  thread: PullRequestReviewThread
}

"""
Autogenerated input type of AddPullRequestReviewThreadReply
"""
input AddPullRequestReviewThreadReplyInput {
  """
  The text of the reply.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the pending review to which the reply will belong.
  """
  pullRequestReviewId: ID @possibleTypes(concreteTypes: ["PullRequestReview"])

  """
  The Node ID of the thread to which this reply is being written.
  """
  pullRequestReviewThreadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
Autogenerated return type of AddPullRequestReviewThreadReply
"""
type AddPullRequestReviewThreadReplyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created reply.
  """
  comment: PullRequestReviewComment
}

"""
Autogenerated input type of AddReaction
"""
input AddReactionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of the emoji to react with.
  """
  content: ReactionContent!

  """
  The Node ID of the subject to modify.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "Discussion"
        "DiscussionComment"
        "Issue"
        "IssueComment"
        "PullRequest"
        "PullRequestReview"
        "PullRequestReviewComment"
        "Release"
        "TeamDiscussion"
        "TeamDiscussionComment"
      ]
      abstractType: "Reactable"
    )
}

"""
Autogenerated return type of AddReaction
"""
type AddReactionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The reaction object.
  """
  reaction: Reaction

  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  subject: Reactable
}

"""
Autogenerated input type of AddStar
"""
input AddStarInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Starrable ID to star.
  """
  starrableId: ID! @possibleTypes(concreteTypes: ["Gist", "Repository", "Topic"], abstractType: "Starrable")
}

"""
Autogenerated return type of AddStar
"""
type AddStarPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The starrable.
  """
  starrable: Starrable
}

"""
Autogenerated input type of AddUpvote
"""
input AddUpvoteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the discussion or comment to upvote.
  """
  subjectId: ID! @possibleTypes(concreteTypes: ["Discussion", "DiscussionComment"], abstractType: "Votable")
}

"""
Autogenerated return type of AddUpvote
"""
type AddUpvotePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The votable subject.
  """
  subject: Votable
}

"""
Autogenerated input type of AddVerifiableDomain
"""
input AddVerifiableDomainInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The URL of the domain
  """
  domain: URI!

  """
  The ID of the owner to add the domain to
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["Enterprise", "Organization"], abstractType: "VerifiableDomainOwner")
}

"""
Autogenerated return type of AddVerifiableDomain
"""
type AddVerifiableDomainPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The verifiable domain that was added.
  """
  domain: VerifiableDomain
}

"""
Represents an 'added_to_merge_queue' event on a given pull request.
"""
type AddedToMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who added this Pull Request to the merge queue
  """
  enqueuer: User

  """
  The Node ID of the AddedToMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was added to.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest
}

"""
Represents a 'added_to_project' event on a given issue or pull request.
"""
type AddedToProjectEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the AddedToProjectEvent object
  """
  id: ID!

  """
  Project referenced by event.
  """
  project: Project @preview(toggledBy: "starfox-preview")

  """
  Project card referenced by this project event.
  """
  projectCard: ProjectCard @preview(toggledBy: "starfox-preview")

  """
  Column name referenced by this project event.
  """
  projectColumnName: String! @preview(toggledBy: "starfox-preview")
}

"""
Represents an announcement banner.
"""
interface AnnouncementBanner {
  """
  The text of the announcement
  """
  announcement: String

  """
  The expiration date of the announcement, if any
  """
  announcementExpiresAt: DateTime

  """
  Whether the announcement can be dismissed by the user
  """
  announcementUserDismissible: Boolean
}

"""
A GitHub App.
"""
type App implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The description of the app.
  """
  description: String

  """
  The Node ID of the App object
  """
  id: ID!

  """
  The IP addresses of the app.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for IP allow list entries returned.
    """
    orderBy: IpAllowListEntryOrder = {field: ALLOW_LIST_VALUE, direction: ASC}
  ): IpAllowListEntryConnection!

  """
  The hex color code, without the leading '#', for the logo background.
  """
  logoBackgroundColor: String!

  """
  A URL pointing to the app's logo.
  """
  logoUrl(
    """
    The size of the resulting image.
    """
    size: Int
  ): URI!

  """
  The name of the app.
  """
  name: String!

  """
  A slug based on the name of the app for use in URLs.
  """
  slug: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The URL to the app's homepage.
  """
  url: URI!
}

"""
Autogenerated input type of ApproveDeployments
"""
input ApproveDeploymentsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Optional comment for approving deployments
  """
  comment: String = ""

  """
  The ids of environments to reject deployments
  """
  environmentIds: [ID!]!

  """
  The node ID of the workflow run containing the pending deployments.
  """
  workflowRunId: ID! @possibleTypes(concreteTypes: ["WorkflowRun"])
}

"""
Autogenerated return type of ApproveDeployments
"""
type ApproveDeploymentsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The affected deployments.
  """
  deployments: [Deployment!]
}

"""
Autogenerated input type of ApproveVerifiableDomain
"""
input ApproveVerifiableDomainInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the verifiable domain to approve.
  """
  id: ID! @possibleTypes(concreteTypes: ["VerifiableDomain"])
}

"""
Autogenerated return type of ApproveVerifiableDomain
"""
type ApproveVerifiableDomainPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The verifiable domain that was approved.
  """
  domain: VerifiableDomain
}

"""
Autogenerated input type of ArchiveProjectV2Item
"""
input ArchiveProjectV2ItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the ProjectV2Item to archive.
  """
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])

  """
  The ID of the Project to archive the item from.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of ArchiveProjectV2Item
"""
type ArchiveProjectV2ItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item archived from the project.
  """
  item: ProjectV2Item
}

"""
Autogenerated input type of ArchiveRepository
"""
input ArchiveRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the repository to mark as archived.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of ArchiveRepository
"""
type ArchiveRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that was marked as archived.
  """
  repository: Repository
}

"""
An object that can have users assigned to it.
"""
interface Assignable {
  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!
}

"""
Represents an 'assigned' event on any assignable object.
"""
type AssignedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the assignable associated with the event.
  """
  assignable: Assignable!

  """
  Identifies the user or mannequin that was assigned.
  """
  assignee: Assignee

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the AssignedEvent object
  """
  id: ID!

  """
  Identifies the user who was assigned.
  """
  user: User
    @deprecated(reason: "Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.")
}

"""
Types that can be assigned to issues.
"""
union Assignee = Bot | Mannequin | Organization | User

"""
An entry in the audit log.
"""
interface AuditEntry {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Types that can initiate an audit log event.
"""
union AuditEntryActor = Bot | Organization | User

"""
Ordering options for Audit Log connections.
"""
input AuditLogOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection

  """
  The field to order Audit Logs by.
  """
  field: AuditLogOrderField
}

"""
Properties by which Audit Log connections can be ordered.
"""
enum AuditLogOrderField {
  """
  Order audit log entries by timestamp
  """
  CREATED_AT
}

"""
Represents a 'auto_merge_disabled' event on a given pull request.
"""
type AutoMergeDisabledEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who disabled auto-merge for this Pull Request
  """
  disabler: User

  """
  The Node ID of the AutoMergeDisabledEvent object
  """
  id: ID!

  """
  PullRequest referenced by event
  """
  pullRequest: PullRequest

  """
  The reason auto-merge was disabled
  """
  reason: String

  """
  The reason_code relating to why auto-merge was disabled
  """
  reasonCode: String
}

"""
Represents a 'auto_merge_enabled' event on a given pull request.
"""
type AutoMergeEnabledEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who enabled auto-merge for this Pull Request
  """
  enabler: User

  """
  The Node ID of the AutoMergeEnabledEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest
}

"""
Represents an auto-merge request for a pull request
"""
type AutoMergeRequest {
  """
  The email address of the author of this auto-merge request.
  """
  authorEmail: String

  """
  The commit message of the auto-merge request. If a merge queue is required by
  the base branch, this value will be set by the merge queue when merging.
  """
  commitBody: String

  """
  The commit title of the auto-merge request. If a merge queue is required by
  the base branch, this value will be set by the merge queue when merging
  """
  commitHeadline: String

  """
  When was this auto-merge request was enabled.
  """
  enabledAt: DateTime

  """
  The actor who created the auto-merge request.
  """
  enabledBy: Actor

  """
  The merge method of the auto-merge request. If a merge queue is required by
  the base branch, this value will be set by the merge queue when merging.
  """
  mergeMethod: PullRequestMergeMethod!

  """
  The pull request that this auto-merge request is set against.
  """
  pullRequest: PullRequest!
}

"""
Represents a 'auto_rebase_enabled' event on a given pull request.
"""
type AutoRebaseEnabledEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who enabled auto-merge (rebase) for this Pull Request
  """
  enabler: User

  """
  The Node ID of the AutoRebaseEnabledEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest
}

"""
Represents a 'auto_squash_enabled' event on a given pull request.
"""
type AutoSquashEnabledEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who enabled auto-merge (squash) for this Pull Request
  """
  enabler: User

  """
  The Node ID of the AutoSquashEnabledEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest
}

"""
Represents a 'automatic_base_change_failed' event on a given pull request.
"""
type AutomaticBaseChangeFailedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the AutomaticBaseChangeFailedEvent object
  """
  id: ID!

  """
  The new base for this PR
  """
  newBase: String!

  """
  The old base for this PR
  """
  oldBase: String!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!
}

"""
Represents a 'automatic_base_change_succeeded' event on a given pull request.
"""
type AutomaticBaseChangeSucceededEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the AutomaticBaseChangeSucceededEvent object
  """
  id: ID!

  """
  The new base for this PR
  """
  newBase: String!

  """
  The old base for this PR
  """
  oldBase: String!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!
}

"""
A (potentially binary) string encoded using base64.
"""
scalar Base64String

"""
Represents a 'base_ref_changed' event on a given issue or pull request.
"""
type BaseRefChangedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the name of the base ref for the pull request after it was changed.
  """
  currentRefName: String!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the BaseRefChangedEvent object
  """
  id: ID!

  """
  Identifies the name of the base ref for the pull request before it was changed.
  """
  previousRefName: String!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!
}

"""
Represents a 'base_ref_deleted' event on a given pull request.
"""
type BaseRefDeletedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the name of the Ref associated with the `base_ref_deleted` event.
  """
  baseRefName: String

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the BaseRefDeletedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest
}

"""
Represents a 'base_ref_force_pushed' event on a given pull request.
"""
type BaseRefForcePushedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the after commit SHA for the 'base_ref_force_pushed' event.
  """
  afterCommit: Commit

  """
  Identifies the before commit SHA for the 'base_ref_force_pushed' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the BaseRefForcePushedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the fully qualified ref name for the 'base_ref_force_pushed' event.
  """
  ref: Ref
}

"""
Represents non-fractional signed whole numeric values. Since the value may
exceed the size of a 32-bit integer, it's encoded as a string.
"""
scalar BigInt

"""
Represents a Git blame.
"""
type Blame {
  """
  The list of ranges from a Git blame.
  """
  ranges: [BlameRange!]!
}

"""
Represents a range of information from a Git blame.
"""
type BlameRange {
  """
  Identifies the recency of the change, from 1 (new) to 10 (old). This is
  calculated as a 2-quantile and determines the length of distance between the
  median age of all the changes in the file and the recency of the current
  range's change.
  """
  age: Int!

  """
  Identifies the line author
  """
  commit: Commit!

  """
  The ending line for the range
  """
  endingLine: Int!

  """
  The starting line for the range
  """
  startingLine: Int!
}

"""
Represents a Git blob.
"""
type Blob implements GitObject & Node {
  """
  An abbreviated version of the Git object ID
  """
  abbreviatedOid: String!

  """
  Byte size of Blob object
  """
  byteSize: Int!

  """
  The HTTP path for this Git object
  """
  commitResourcePath: URI!

  """
  The HTTP URL for this Git object
  """
  commitUrl: URI!

  """
  The Node ID of the Blob object
  """
  id: ID!

  """
  Indicates whether the Blob is binary or text. Returns null if unable to determine the encoding.
  """
  isBinary: Boolean

  """
  Indicates whether the contents is truncated
  """
  isTruncated: Boolean!

  """
  The Git object ID
  """
  oid: GitObjectID!

  """
  The Repository the Git object belongs to
  """
  repository: Repository!

  """
  UTF8 text data or null if the Blob is binary
  """
  text: String
}

"""
A special type of user which takes actions on behalf of GitHub Apps.
"""
type Bot implements Actor & Node & UniformResourceLocatable {
  """
  A URL pointing to the GitHub App's public avatar.
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Bot object
  """
  id: ID!

  """
  The username of the actor.
  """
  login: String!

  """
  The HTTP path for this bot
  """
  resourcePath: URI!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this bot
  """
  url: URI!
}

"""
Types which can be actors for `BranchActorAllowance` objects.
"""
union BranchActorAllowanceActor = App | Team | User

"""
Parameters to be used for the branch_name_pattern rule
"""
type BranchNamePatternParameters {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean!

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
Parameters to be used for the branch_name_pattern rule
"""
input BranchNamePatternParametersInput {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
A branch protection rule.
"""
type BranchProtectionRule implements Node {
  """
  Can this branch be deleted.
  """
  allowsDeletions: Boolean!

  """
  Are force pushes allowed on this branch.
  """
  allowsForcePushes: Boolean!

  """
  Is branch creation a protected operation.
  """
  blocksCreations: Boolean!

  """
  A list of conflicts matching branches protection rule and other branch protection rules
  """
  branchProtectionRuleConflicts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BranchProtectionRuleConflictConnection!

  """
  A list of actors able to force push for this branch protection rule.
  """
  bypassForcePushAllowances(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BypassForcePushAllowanceConnection!

  """
  A list of actors able to bypass PRs for this branch protection rule.
  """
  bypassPullRequestAllowances(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BypassPullRequestAllowanceConnection!

  """
  The actor who created this branch protection rule.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Will new commits pushed to matching branches dismiss pull request review approvals.
  """
  dismissesStaleReviews: Boolean!

  """
  The Node ID of the BranchProtectionRule object
  """
  id: ID!

  """
  Can admins override branch protection.
  """
  isAdminEnforced: Boolean!

  """
  Whether users can pull changes from upstream when the branch is locked. Set to
  `true` to allow fork syncing. Set to `false` to prevent fork syncing.
  """
  lockAllowsFetchAndMerge: Boolean!

  """
  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
  """
  lockBranch: Boolean!

  """
  Repository refs that are protected by this rule
  """
  matchingRefs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filters refs with query on name
    """
    query: String
  ): RefConnection!

  """
  Identifies the protection rule pattern.
  """
  pattern: String!

  """
  A list push allowances for this branch protection rule.
  """
  pushAllowances(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PushAllowanceConnection!

  """
  The repository associated with this branch protection rule.
  """
  repository: Repository

  """
  Whether the most recent push must be approved by someone other than the person who pushed it
  """
  requireLastPushApproval: Boolean!

  """
  Number of approving reviews required to update matching branches.
  """
  requiredApprovingReviewCount: Int

  """
  List of required deployment environments that must be deployed successfully to update matching branches
  """
  requiredDeploymentEnvironments: [String]

  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  requiredStatusCheckContexts: [String]

  """
  List of required status checks that must pass for commits to be accepted to matching branches.
  """
  requiredStatusChecks: [RequiredStatusCheckDescription!]

  """
  Are approving reviews required to update matching branches.
  """
  requiresApprovingReviews: Boolean!

  """
  Are reviews from code owners required to update matching branches.
  """
  requiresCodeOwnerReviews: Boolean!

  """
  Are commits required to be signed.
  """
  requiresCommitSignatures: Boolean!

  """
  Are conversations required to be resolved before merging.
  """
  requiresConversationResolution: Boolean!

  """
  Does this branch require deployment to specific environments before merging
  """
  requiresDeployments: Boolean!

  """
  Are merge commits prohibited from being pushed to this branch.
  """
  requiresLinearHistory: Boolean!

  """
  Are status checks required to update matching branches.
  """
  requiresStatusChecks: Boolean!

  """
  Are branches required to be up to date before merging.
  """
  requiresStrictStatusChecks: Boolean!

  """
  Is pushing to matching branches restricted.
  """
  restrictsPushes: Boolean!

  """
  Is dismissal of pull request reviews restricted.
  """
  restrictsReviewDismissals: Boolean!

  """
  A list review dismissal allowances for this branch protection rule.
  """
  reviewDismissalAllowances(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewDismissalAllowanceConnection!
}

"""
A conflict between two branch protection rules.
"""
type BranchProtectionRuleConflict {
  """
  Identifies the branch protection rule.
  """
  branchProtectionRule: BranchProtectionRule

  """
  Identifies the conflicting branch protection rule.
  """
  conflictingBranchProtectionRule: BranchProtectionRule

  """
  Identifies the branch ref that has conflicting rules
  """
  ref: Ref
}

"""
The connection type for BranchProtectionRuleConflict.
"""
type BranchProtectionRuleConflictConnection {
  """
  A list of edges.
  """
  edges: [BranchProtectionRuleConflictEdge]

  """
  A list of nodes.
  """
  nodes: [BranchProtectionRuleConflict]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BranchProtectionRuleConflictEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BranchProtectionRuleConflict
}

"""
The connection type for BranchProtectionRule.
"""
type BranchProtectionRuleConnection {
  """
  A list of edges.
  """
  edges: [BranchProtectionRuleEdge]

  """
  A list of nodes.
  """
  nodes: [BranchProtectionRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BranchProtectionRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BranchProtectionRule
}

"""
Information about a sponsorship to make for a user or organization with a GitHub
Sponsors profile, as part of sponsoring many users or organizations at once.
"""
input BulkSponsorship {
  """
  The amount to pay to the sponsorable in US dollars. Valid values: 1-12000.
  """
  amount: Int!

  """
  The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.
  """
  sponsorableId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "Sponsorable")

  """
  The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.
  """
  sponsorableLogin: String
}

"""
Types that can represent a repository ruleset bypass actor.
"""
union BypassActor = App | Team

"""
A user, team, or app who has the ability to bypass a force push requirement on a protected branch.
"""
type BypassForcePushAllowance implements Node {
  """
  The actor that can force push.
  """
  actor: BranchActorAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the BypassForcePushAllowance object
  """
  id: ID!
}

"""
The connection type for BypassForcePushAllowance.
"""
type BypassForcePushAllowanceConnection {
  """
  A list of edges.
  """
  edges: [BypassForcePushAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [BypassForcePushAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BypassForcePushAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BypassForcePushAllowance
}

"""
A user, team, or app who has the ability to bypass a pull request requirement on a protected branch.
"""
type BypassPullRequestAllowance implements Node {
  """
  The actor that can bypass.
  """
  actor: BranchActorAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the BypassPullRequestAllowance object
  """
  id: ID!
}

"""
The connection type for BypassPullRequestAllowance.
"""
type BypassPullRequestAllowanceConnection {
  """
  A list of edges.
  """
  edges: [BypassPullRequestAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [BypassPullRequestAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BypassPullRequestAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BypassPullRequestAllowance
}

"""
The Common Vulnerability Scoring System
"""
type CVSS {
  """
  The CVSS score associated with this advisory
  """
  score: Float!

  """
  The CVSS vector string associated with this advisory
  """
  vectorString: String
}

"""
A common weakness enumeration
"""
type CWE implements Node {
  """
  The id of the CWE
  """
  cweId: String!

  """
  A detailed description of this CWE
  """
  description: String!

  """
  The Node ID of the CWE object
  """
  id: ID!

  """
  The name of this CWE
  """
  name: String!
}

"""
The connection type for CWE.
"""
type CWEConnection {
  """
  A list of edges.
  """
  edges: [CWEEdge]

  """
  A list of nodes.
  """
  nodes: [CWE]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CWEEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CWE
}

"""
Autogenerated input type of CancelEnterpriseAdminInvitation
"""
input CancelEnterpriseAdminInvitationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the pending enterprise administrator invitation.
  """
  invitationId: ID! @possibleTypes(concreteTypes: ["EnterpriseAdministratorInvitation"])
}

"""
Autogenerated return type of CancelEnterpriseAdminInvitation
"""
type CancelEnterpriseAdminInvitationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The invitation that was canceled.
  """
  invitation: EnterpriseAdministratorInvitation

  """
  A message confirming the result of canceling an administrator invitation.
  """
  message: String
}

"""
Autogenerated input type of CancelSponsorship
"""
input CancelSponsorshipInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the user or organization who is acting as the sponsor, paying for
  the sponsorship. Required if sponsorLogin is not given.
  """
  sponsorId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "Sponsor")

  """
  The username of the user or organization who is acting as the sponsor, paying
  for the sponsorship. Required if sponsorId is not given.
  """
  sponsorLogin: String

  """
  The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.
  """
  sponsorableId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "Sponsorable")

  """
  The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of CancelSponsorship
"""
type CancelSponsorshipPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was being used at the time of cancellation.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of ChangeUserStatus
"""
input ChangeUserStatusInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:.
  """
  emoji: String

  """
  If set, the user status will not be shown after this date.
  """
  expiresAt: DateTime

  """
  Whether this status should indicate you are not fully available on GitHub, e.g., you are away.
  """
  limitedAvailability: Boolean = false

  """
  A short description of your current status.
  """
  message: String

  """
  The ID of the organization whose members will be allowed to see the status. If
  omitted, the status will be publicly visible.
  """
  organizationId: ID @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of ChangeUserStatus
"""
type ChangeUserStatusPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Your updated status.
  """
  status: UserStatus
}

"""
A single check annotation.
"""
type CheckAnnotation {
  """
  The annotation's severity level.
  """
  annotationLevel: CheckAnnotationLevel

  """
  The path to the file that this annotation was made on.
  """
  blobUrl: URI!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The position of this annotation.
  """
  location: CheckAnnotationSpan!

  """
  The annotation's message.
  """
  message: String!

  """
  The path that this annotation was made on.
  """
  path: String!

  """
  Additional information about the annotation.
  """
  rawDetails: String

  """
  The annotation's title
  """
  title: String
}

"""
The connection type for CheckAnnotation.
"""
type CheckAnnotationConnection {
  """
  A list of edges.
  """
  edges: [CheckAnnotationEdge]

  """
  A list of nodes.
  """
  nodes: [CheckAnnotation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Information from a check run analysis to specific lines of code.
"""
input CheckAnnotationData {
  """
  Represents an annotation's information level
  """
  annotationLevel: CheckAnnotationLevel!

  """
  The location of the annotation
  """
  location: CheckAnnotationRange!

  """
  A short description of the feedback for these lines of code.
  """
  message: String!

  """
  The path of the file to add an annotation to.
  """
  path: String!

  """
  Details about this annotation.
  """
  rawDetails: String

  """
  The title that represents the annotation.
  """
  title: String
}

"""
An edge in a connection.
"""
type CheckAnnotationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CheckAnnotation
}

"""
Represents an annotation's information level.
"""
enum CheckAnnotationLevel {
  """
  An annotation indicating an inescapable error.
  """
  FAILURE

  """
  An annotation indicating some information.
  """
  NOTICE

  """
  An annotation indicating an ignorable error.
  """
  WARNING
}

"""
A character position in a check annotation.
"""
type CheckAnnotationPosition {
  """
  Column number (1 indexed).
  """
  column: Int

  """
  Line number (1 indexed).
  """
  line: Int!
}

"""
Information from a check run analysis to specific lines of code.
"""
input CheckAnnotationRange {
  """
  The ending column of the range.
  """
  endColumn: Int

  """
  The ending line of the range.
  """
  endLine: Int!

  """
  The starting column of the range.
  """
  startColumn: Int

  """
  The starting line of the range.
  """
  startLine: Int!
}

"""
An inclusive pair of positions for a check annotation.
"""
type CheckAnnotationSpan {
  """
  End position (inclusive).
  """
  end: CheckAnnotationPosition!

  """
  Start position (inclusive).
  """
  start: CheckAnnotationPosition!
}

"""
The possible states for a check suite or run conclusion.
"""
enum CheckConclusionState {
  """
  The check suite or run requires action.
  """
  ACTION_REQUIRED

  """
  The check suite or run has been cancelled.
  """
  CANCELLED

  """
  The check suite or run has failed.
  """
  FAILURE

  """
  The check suite or run was neutral.
  """
  NEUTRAL

  """
  The check suite or run was skipped.
  """
  SKIPPED

  """
  The check suite or run was marked stale by GitHub. Only GitHub can use this conclusion.
  """
  STALE

  """
  The check suite or run has failed at startup.
  """
  STARTUP_FAILURE

  """
  The check suite or run has succeeded.
  """
  SUCCESS

  """
  The check suite or run has timed out.
  """
  TIMED_OUT
}

"""
A check run.
"""
type CheckRun implements Node & RequirableByPullRequest & UniformResourceLocatable {
  """
  The check run's annotations
  """
  annotations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CheckAnnotationConnection

  """
  The check suite that this run is a part of.
  """
  checkSuite: CheckSuite!

  """
  Identifies the date and time when the check run was completed.
  """
  completedAt: DateTime

  """
  The conclusion of the check run.
  """
  conclusion: CheckConclusionState

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The corresponding deployment for this job, if any
  """
  deployment: Deployment

  """
  The URL from which to find full details of the check run on the integrator's site.
  """
  detailsUrl: URI

  """
  A reference for the check run on the integrator's system.
  """
  externalId: String

  """
  The Node ID of the CheckRun object
  """
  id: ID!

  """
  Whether this is required to pass before merging for a specific pull request.
  """
  isRequired(
    """
    The id of the pull request this is required for
    """
    pullRequestId: ID

    """
    The number of the pull request this is required for
    """
    pullRequestNumber: Int
  ): Boolean!

  """
  The name of the check for this check run.
  """
  name: String!

  """
  Information about a pending deployment, if any, in this check run
  """
  pendingDeploymentRequest: DeploymentRequest

  """
  The permalink to the check run summary.
  """
  permalink: URI!

  """
  The repository associated with this check run.
  """
  repository: Repository!

  """
  The HTTP path for this check run.
  """
  resourcePath: URI!

  """
  Identifies the date and time when the check run was started.
  """
  startedAt: DateTime

  """
  The current status of the check run.
  """
  status: CheckStatusState!

  """
  The check run's steps
  """
  steps(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Step number
    """
    number: Int
  ): CheckStepConnection

  """
  A string representing the check run's summary
  """
  summary: String

  """
  A string representing the check run's text
  """
  text: String

  """
  A string representing the check run
  """
  title: String

  """
  The HTTP URL for this check run.
  """
  url: URI!
}

"""
Possible further actions the integrator can perform.
"""
input CheckRunAction {
  """
  A short explanation of what this action would do.
  """
  description: String!

  """
  A reference for the action on the integrator's system.
  """
  identifier: String!

  """
  The text to be displayed on a button in the web UI.
  """
  label: String!
}

"""
The connection type for CheckRun.
"""
type CheckRunConnection {
  """
  A list of edges.
  """
  edges: [CheckRunEdge]

  """
  A list of nodes.
  """
  nodes: [CheckRun]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CheckRunEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CheckRun
}

"""
The filters that are available when fetching check runs.
"""
input CheckRunFilter {
  """
  Filters the check runs created by this application ID.
  """
  appId: Int

  """
  Filters the check runs by this name.
  """
  checkName: String

  """
  Filters the check runs by this type.
  """
  checkType: CheckRunType

  """
  Filters the check runs by these conclusions.
  """
  conclusions: [CheckConclusionState!]

  """
  Filters the check runs by this status. Superceded by statuses.
  """
  status: CheckStatusState

  """
  Filters the check runs by this status. Overrides status.
  """
  statuses: [CheckStatusState!]
}

"""
Descriptive details about the check run.
"""
input CheckRunOutput {
  """
  The annotations that are made as part of the check run.
  """
  annotations: [CheckAnnotationData!]

  """
  Images attached to the check run output displayed in the GitHub pull request UI.
  """
  images: [CheckRunOutputImage!]

  """
  The summary of the check run (supports Commonmark).
  """
  summary: String!

  """
  The details of the check run (supports Commonmark).
  """
  text: String

  """
  A title to provide for this check run.
  """
  title: String!
}

"""
Images attached to the check run output displayed in the GitHub pull request UI.
"""
input CheckRunOutputImage {
  """
  The alternative text for the image.
  """
  alt: String!

  """
  A short image description.
  """
  caption: String

  """
  The full URL of the image.
  """
  imageUrl: URI!
}

"""
The possible states of a check run in a status rollup.
"""
enum CheckRunState {
  """
  The check run requires action.
  """
  ACTION_REQUIRED

  """
  The check run has been cancelled.
  """
  CANCELLED

  """
  The check run has been completed.
  """
  COMPLETED

  """
  The check run has failed.
  """
  FAILURE

  """
  The check run is in progress.
  """
  IN_PROGRESS

  """
  The check run was neutral.
  """
  NEUTRAL

  """
  The check run is in pending state.
  """
  PENDING

  """
  The check run has been queued.
  """
  QUEUED

  """
  The check run was skipped.
  """
  SKIPPED

  """
  The check run was marked stale by GitHub. Only GitHub can use this conclusion.
  """
  STALE

  """
  The check run has failed at startup.
  """
  STARTUP_FAILURE

  """
  The check run has succeeded.
  """
  SUCCESS

  """
  The check run has timed out.
  """
  TIMED_OUT

  """
  The check run is in waiting state.
  """
  WAITING
}

"""
Represents a count of the state of a check run.
"""
type CheckRunStateCount {
  """
  The number of check runs with this state.
  """
  count: Int!

  """
  The state of a check run.
  """
  state: CheckRunState!
}

"""
The possible types of check runs.
"""
enum CheckRunType {
  """
  Every check run available.
  """
  ALL

  """
  The latest check run.
  """
  LATEST
}

"""
The possible states for a check suite or run status.
"""
enum CheckStatusState {
  """
  The check suite or run has been completed.
  """
  COMPLETED

  """
  The check suite or run is in progress.
  """
  IN_PROGRESS

  """
  The check suite or run is in pending state.
  """
  PENDING

  """
  The check suite or run has been queued.
  """
  QUEUED

  """
  The check suite or run has been requested.
  """
  REQUESTED

  """
  The check suite or run is in waiting state.
  """
  WAITING
}

"""
A single check step.
"""
type CheckStep {
  """
  Identifies the date and time when the check step was completed.
  """
  completedAt: DateTime

  """
  The conclusion of the check step.
  """
  conclusion: CheckConclusionState

  """
  A reference for the check step on the integrator's system.
  """
  externalId: String

  """
  The step's name.
  """
  name: String!

  """
  The index of the step in the list of steps of the parent check run.
  """
  number: Int!

  """
  Number of seconds to completion.
  """
  secondsToCompletion: Int

  """
  Identifies the date and time when the check step was started.
  """
  startedAt: DateTime

  """
  The current status of the check step.
  """
  status: CheckStatusState!
}

"""
The connection type for CheckStep.
"""
type CheckStepConnection {
  """
  A list of edges.
  """
  edges: [CheckStepEdge]

  """
  A list of nodes.
  """
  nodes: [CheckStep]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CheckStepEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CheckStep
}

"""
A check suite.
"""
type CheckSuite implements Node {
  """
  The GitHub App which created this check suite.
  """
  app: App

  """
  The name of the branch for this check suite.
  """
  branch: Ref

  """
  The check runs associated with a check suite.
  """
  checkRuns(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filters the check runs by this type.
    """
    filterBy: CheckRunFilter

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CheckRunConnection

  """
  The commit for this check suite
  """
  commit: Commit!

  """
  The conclusion of this check suite.
  """
  conclusion: CheckConclusionState

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who triggered the check suite.
  """
  creator: User

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the CheckSuite object
  """
  id: ID!

  """
  A list of open pull requests matching the check suite.
  """
  matchingPullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    The base ref name to filter the pull requests by.
    """
    baseRefName: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    The head ref name to filter the pull requests by.
    """
    headRefName: String

    """
    A list of label names to filter the pull requests by.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests returned from the connection.
    """
    orderBy: IssueOrder

    """
    A list of states to filter the pull requests by.
    """
    states: [PullRequestState!]
  ): PullRequestConnection

  """
  The push that triggered this check suite.
  """
  push: Push

  """
  The repository associated with this check suite.
  """
  repository: Repository!

  """
  The HTTP path for this check suite
  """
  resourcePath: URI!

  """
  The status of this check suite.
  """
  status: CheckStatusState!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this check suite
  """
  url: URI!

  """
  The workflow run associated with this check suite.
  """
  workflowRun: WorkflowRun
}

"""
The auto-trigger preferences that are available for check suites.
"""
input CheckSuiteAutoTriggerPreference {
  """
  The node ID of the application that owns the check suite.
  """
  appId: ID!

  """
  Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository.
  """
  setting: Boolean!
}

"""
The connection type for CheckSuite.
"""
type CheckSuiteConnection {
  """
  A list of edges.
  """
  edges: [CheckSuiteEdge]

  """
  A list of nodes.
  """
  nodes: [CheckSuite]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CheckSuiteEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CheckSuite
}

"""
The filters that are available when fetching check suites.
"""
input CheckSuiteFilter {
  """
  Filters the check suites created by this application ID.
  """
  appId: Int

  """
  Filters the check suites by this name.
  """
  checkName: String
}

"""
An object which can have its data claimed or claim data from another.
"""
union Claimable = Mannequin | User

"""
Autogenerated input type of ClearLabelsFromLabelable
"""
input ClearLabelsFromLabelableInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the labelable object to clear the labels from.
  """
  labelableId: ID! @possibleTypes(concreteTypes: ["Discussion", "Issue", "PullRequest"], abstractType: "Labelable")
}

"""
Autogenerated return type of ClearLabelsFromLabelable
"""
type ClearLabelsFromLabelablePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item that was unlabeled.
  """
  labelable: Labelable
}

"""
Autogenerated input type of ClearProjectV2ItemFieldValue
"""
input ClearProjectV2ItemFieldValueInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the field to be cleared.
  """
  fieldId: ID!
    @possibleTypes(
      concreteTypes: ["ProjectV2Field", "ProjectV2IterationField", "ProjectV2SingleSelectField"]
      abstractType: "ProjectV2FieldConfiguration"
    )

  """
  The ID of the item to be cleared.
  """
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])

  """
  The ID of the Project.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of ClearProjectV2ItemFieldValue
"""
type ClearProjectV2ItemFieldValuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated item.
  """
  projectV2Item: ProjectV2Item
}

"""
Autogenerated input type of CloneProject
"""
input CloneProjectInput {
  """
  The description of the project.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not to clone the source project's workflows.
  """
  includeWorkflows: Boolean!

  """
  The name of the project.
  """
  name: String!

  """
  The visibility of the project, defaults to false (private).
  """
  public: Boolean

  """
  The source project to clone.
  """
  sourceId: ID! @possibleTypes(concreteTypes: ["Project"])

  """
  The owner ID to create the project under.
  """
  targetOwnerId: ID! @possibleTypes(concreteTypes: ["Organization", "Repository", "User"], abstractType: "ProjectOwner")
}

"""
Autogenerated return type of CloneProject
"""
type CloneProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the JobStatus for populating cloned fields.
  """
  jobStatusId: String

  """
  The new cloned project.
  """
  project: Project
}

"""
Autogenerated input type of CloneTemplateRepository
"""
input CloneTemplateRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A short description of the new repository.
  """
  description: String

  """
  Whether to copy all branches from the template to the new repository. Defaults
  to copying only the default branch of the template.
  """
  includeAllBranches: Boolean = false

  """
  The name of the new repository.
  """
  name: String!

  """
  The ID of the owner for the new repository.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "RepositoryOwner")

  """
  The Node ID of the template repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  Indicates the repository's visibility level.
  """
  visibility: RepositoryVisibility!
}

"""
Autogenerated return type of CloneTemplateRepository
"""
type CloneTemplateRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new repository.
  """
  repository: Repository
}

"""
An object that can be closed
"""
interface Closable {
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!
}

"""
Autogenerated input type of CloseDiscussion
"""
input CloseDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be closed.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])

  """
  The reason why the discussion is being closed.
  """
  reason: DiscussionCloseReason = RESOLVED
}

"""
Autogenerated return type of CloseDiscussion
"""
type CloseDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was closed.
  """
  discussion: Discussion
}

"""
Autogenerated input type of CloseIssue
"""
input CloseIssueInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the issue to be closed.
  """
  issueId: ID! @possibleTypes(concreteTypes: ["Issue"])

  """
  The reason the issue is to be closed.
  """
  stateReason: IssueClosedStateReason
}

"""
Autogenerated return type of CloseIssue
"""
type CloseIssuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The issue that was closed.
  """
  issue: Issue
}

"""
Autogenerated input type of ClosePullRequest
"""
input ClosePullRequestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the pull request to be closed.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""
Autogenerated return type of ClosePullRequest
"""
type ClosePullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that was closed.
  """
  pullRequest: PullRequest
}

"""
Represents a 'closed' event on any `Closable`.
"""
type ClosedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Object that was closed.
  """
  closable: Closable!

  """
  Object which triggered the creation of this event.
  """
  closer: Closer

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ClosedEvent object
  """
  id: ID!

  """
  The HTTP path for this closed event.
  """
  resourcePath: URI!

  """
  The reason the issue state was changed to closed.
  """
  stateReason: IssueStateReason

  """
  The HTTP URL for this closed event.
  """
  url: URI!
}

"""
The object which triggered a `ClosedEvent`.
"""
union Closer = Commit | PullRequest

"""
The Code of Conduct for a repository
"""
type CodeOfConduct implements Node {
  """
  The body of the Code of Conduct
  """
  body: String

  """
  The Node ID of the CodeOfConduct object
  """
  id: ID!

  """
  The key for the Code of Conduct
  """
  key: String!

  """
  The formal name of the Code of Conduct
  """
  name: String!

  """
  The HTTP path for this Code of Conduct
  """
  resourcePath: URI

  """
  The HTTP URL for this Code of Conduct
  """
  url: URI
}

"""
Collaborators affiliation level with a subject.
"""
enum CollaboratorAffiliation {
  """
  All collaborators the authenticated user can see.
  """
  ALL

  """
  All collaborators with permissions to an organization-owned subject, regardless of organization membership status.
  """
  DIRECT

  """
  All outside collaborators of an organization-owned subject.
  """
  OUTSIDE
}

"""
Represents a comment.
"""
interface Comment {
  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  The actor who edited the comment.
  """
  editor: Actor

  """
  The Node ID of the Comment object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Did the viewer author this comment.
  """
  viewerDidAuthor: Boolean!
}

"""
A comment author association with repository.
"""
enum CommentAuthorAssociation {
  """
  Author has been invited to collaborate on the repository.
  """
  COLLABORATOR

  """
  Author has previously committed to the repository.
  """
  CONTRIBUTOR

  """
  Author has not previously committed to GitHub.
  """
  FIRST_TIMER

  """
  Author has not previously committed to the repository.
  """
  FIRST_TIME_CONTRIBUTOR

  """
  Author is a placeholder for an unclaimed user.
  """
  MANNEQUIN

  """
  Author is a member of the organization that owns the repository.
  """
  MEMBER

  """
  Author has no association with the repository.
  """
  NONE

  """
  Author is the owner of the repository.
  """
  OWNER
}

"""
The possible errors that will prevent a user from updating a comment.
"""
enum CommentCannotUpdateReason {
  """
  Unable to create comment because repository is archived.
  """
  ARCHIVED

  """
  You cannot update this comment
  """
  DENIED

  """
  You must be the author or have write access to this repository to update this comment.
  """
  INSUFFICIENT_ACCESS

  """
  Unable to create comment because issue is locked.
  """
  LOCKED

  """
  You must be logged in to update this comment.
  """
  LOGIN_REQUIRED

  """
  Repository is under maintenance.
  """
  MAINTENANCE

  """
  At least one email address must be verified to update this comment.
  """
  VERIFIED_EMAIL_REQUIRED
}

"""
Represents a 'comment_deleted' event on a given issue or pull request.
"""
type CommentDeletedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The user who authored the deleted comment.
  """
  deletedCommentAuthor: Actor

  """
  The Node ID of the CommentDeletedEvent object
  """
  id: ID!
}

"""
Represents a Git commit.
"""
type Commit implements GitObject & Node & Subscribable & UniformResourceLocatable {
  """
  An abbreviated version of the Git object ID
  """
  abbreviatedOid: String!

  """
  The number of additions in this commit.
  """
  additions: Int!

  """
  The merged Pull Request that introduced the commit to the repository. If the
  commit is not present in the default branch, additionally returns open Pull
  Requests associated with the commit
  """
  associatedPullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection

  """
  Authorship details of the commit.
  """
  author: GitActor

  """
  Check if the committer and the author match.
  """
  authoredByCommitter: Boolean!

  """
  The datetime when this commit was authored.
  """
  authoredDate: DateTime!

  """
  The list of authors for this commit based on the git author and the Co-authored-by
  message trailer. The git author will always be first.
  """
  authors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GitActorConnection!

  """
  Fetches `git blame` information.
  """
  blame(
    """
    The file whose Git blame information you want.
    """
    path: String!
  ): Blame!

  """
  We recommend using the `changedFilesIfAvailable` field instead of
  `changedFiles`, as `changedFiles` will cause your request to return an error
  if GitHub is unable to calculate the number of changed files.
  """
  changedFiles: Int!
    @deprecated(
      reason: "`changedFiles` will be removed. Use `changedFilesIfAvailable` instead. Removal on 2023-01-01 UTC."
    )

  """
  The number of changed files in this commit. If GitHub is unable to calculate
  the number of changed files (for example due to a timeout), this will return
  `null`. We recommend using this field instead of `changedFiles`.
  """
  changedFilesIfAvailable: Int

  """
  The check suites associated with a commit.
  """
  checkSuites(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filters the check suites by this type.
    """
    filterBy: CheckSuiteFilter

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CheckSuiteConnection

  """
  Comments made on the commit.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CommitCommentConnection!

  """
  The HTTP path for this Git object
  """
  commitResourcePath: URI!

  """
  The HTTP URL for this Git object
  """
  commitUrl: URI!

  """
  The datetime when this commit was committed.
  """
  committedDate: DateTime!

  """
  Check if committed via GitHub web UI.
  """
  committedViaWeb: Boolean!

  """
  Committer details of the commit.
  """
  committer: GitActor

  """
  The number of deletions in this commit.
  """
  deletions: Int!

  """
  The deployments associated with a commit.
  """
  deployments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Environments to list deployments for
    """
    environments: [String!]

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for deployments returned from the connection.
    """
    orderBy: DeploymentOrder = {field: CREATED_AT, direction: ASC}
  ): DeploymentConnection

  """
  The tree entry representing the file located at the given path.
  """
  file(
    """
    The path for the file
    """
    path: String!
  ): TreeEntry

  """
  The linear commit history starting from (and including) this commit, in the same order as `git log`.
  """
  history(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    If non-null, filters history to only show commits with matching authorship.
    """
    author: CommitAuthor

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    If non-null, filters history to only show commits touching files under this path.
    """
    path: String

    """
    Allows specifying a beginning time or date for fetching commits.
    """
    since: GitTimestamp

    """
    Allows specifying an ending time or date for fetching commits.
    """
    until: GitTimestamp
  ): CommitHistoryConnection!

  """
  The Node ID of the Commit object
  """
  id: ID!

  """
  The Git commit message
  """
  message: String!

  """
  The Git commit message body
  """
  messageBody: String!

  """
  The commit message body rendered to HTML.
  """
  messageBodyHTML: HTML!

  """
  The Git commit message headline
  """
  messageHeadline: String!

  """
  The commit message headline rendered to HTML.
  """
  messageHeadlineHTML: HTML!

  """
  The Git object ID
  """
  oid: GitObjectID!

  """
  The organization this commit was made on behalf of.
  """
  onBehalfOf: Organization

  """
  The parents of a commit.
  """
  parents(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CommitConnection!

  """
  The datetime when this commit was pushed.
  """
  pushedDate: DateTime @deprecated(reason: "`pushedDate` is no longer supported. Removal on 2023-07-01 UTC.")

  """
  The Repository this commit belongs to
  """
  repository: Repository!

  """
  The HTTP path for this commit
  """
  resourcePath: URI!

  """
  Commit signing information, if present.
  """
  signature: GitSignature

  """
  Status information for this commit
  """
  status: Status

  """
  Check and Status rollup information for this commit.
  """
  statusCheckRollup: StatusCheckRollup

  """
  Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file.
  """
  submodules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SubmoduleConnection!

  """
  Returns a URL to download a tarball archive for a repository.
  Note: For private repositories, these links are temporary and expire after five minutes.
  """
  tarballUrl: URI!

  """
  Commit's root Tree
  """
  tree: Tree!

  """
  The HTTP path for the tree of this commit
  """
  treeResourcePath: URI!

  """
  The HTTP URL for the tree of this commit
  """
  treeUrl: URI!

  """
  The HTTP URL for this commit
  """
  url: URI!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: SubscriptionState

  """
  Returns a URL to download a zipball archive for a repository.
  Note: For private repositories, these links are temporary and expire after five minutes.
  """
  zipballUrl: URI!
}

"""
Specifies an author for filtering Git commits.
"""
input CommitAuthor {
  """
  Email addresses to filter by. Commits authored by any of the specified email addresses will be returned.
  """
  emails: [String!]

  """
  ID of a User to filter by. If non-null, only commits authored by this user
  will be returned. This field takes precedence over emails.
  """
  id: ID
}

"""
Parameters to be used for the commit_author_email_pattern rule
"""
type CommitAuthorEmailPatternParameters {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean!

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
Parameters to be used for the commit_author_email_pattern rule
"""
input CommitAuthorEmailPatternParametersInput {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
Represents a comment on a given Commit.
"""
type CommitComment implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Identifies the comment body.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Identifies the commit associated with the comment, if the commit exists.
  """
  commit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The actor who edited the comment.
  """
  editor: Actor

  """
  The Node ID of the CommitComment object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  Identifies the file path associated with the comment.
  """
  path: String

  """
  Identifies the line position associated with the comment.
  """
  position: Int

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path permalink for this commit comment.
  """
  resourcePath: URI!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL permalink for this commit comment.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!

  """
  Did the viewer author this comment.
  """
  viewerDidAuthor: Boolean!
}

"""
The connection type for CommitComment.
"""
type CommitCommentConnection {
  """
  A list of edges.
  """
  edges: [CommitCommentEdge]

  """
  A list of nodes.
  """
  nodes: [CommitComment]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CommitCommentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CommitComment
}

"""
A thread of comments on a commit.
"""
type CommitCommentThread implements Node & RepositoryNode {
  """
  The comments that exist in this thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CommitCommentConnection!

  """
  The commit the comments were made on.
  """
  commit: Commit

  """
  The Node ID of the CommitCommentThread object
  """
  id: ID!

  """
  The file the comments were made on.
  """
  path: String

  """
  The position in the diff for the commit that the comment was made on.
  """
  position: Int

  """
  The repository associated with this node.
  """
  repository: Repository!
}

"""
The connection type for Commit.
"""
type CommitConnection {
  """
  A list of edges.
  """
  edges: [CommitEdge]

  """
  A list of nodes.
  """
  nodes: [Commit]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Ordering options for commit contribution connections.
"""
input CommitContributionOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field by which to order commit contributions.
  """
  field: CommitContributionOrderField!
}

"""
Properties by which commit contribution connections can be ordered.
"""
enum CommitContributionOrderField {
  """
  Order commit contributions by how many commits they represent.
  """
  COMMIT_COUNT

  """
  Order commit contributions by when they were made.
  """
  OCCURRED_AT
}

"""
This aggregates commits made by a user within one repository.
"""
type CommitContributionsByRepository {
  """
  The commit contributions, each representing a day.
  """
  contributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for commit contributions returned from the connection.
    """
    orderBy: CommitContributionOrder = {field: OCCURRED_AT, direction: DESC}
  ): CreatedCommitContributionConnection!

  """
  The repository in which the commits were made.
  """
  repository: Repository!

  """
  The HTTP path for the user's commits to the repository in this time range.
  """
  resourcePath: URI!

  """
  The HTTP URL for the user's commits to the repository in this time range.
  """
  url: URI!
}

"""
An edge in a connection.
"""
type CommitEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Commit
}

"""
The connection type for Commit.
"""
type CommitHistoryConnection {
  """
  A list of edges.
  """
  edges: [CommitEdge]

  """
  A list of nodes.
  """
  nodes: [Commit]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
A message to include with a new commit
"""
input CommitMessage {
  """
  The body of the message.
  """
  body: String

  """
  The headline of the message.
  """
  headline: String!
}

"""
Parameters to be used for the commit_message_pattern rule
"""
type CommitMessagePatternParameters {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean!

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
Parameters to be used for the commit_message_pattern rule
"""
input CommitMessagePatternParametersInput {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
A git ref for a commit to be appended to.

The ref must be a branch, i.e. its fully qualified name must start
with `refs/heads/` (although the input is not required to be fully
qualified).

The Ref may be specified by its global node ID or by the
`repositoryNameWithOwner` and `branchName`.

### Examples

Specify a branch using a global node ID:

    { "id": "MDM6UmVmMTpyZWZzL2hlYWRzL21haW4=" }

Specify a branch using `repositoryNameWithOwner` and `branchName`:

    {
      "repositoryNameWithOwner": "github/graphql-client",
      "branchName": "main"
    }
"""
input CommittableBranch {
  """
  The unqualified name of the branch to append the commit to.
  """
  branchName: String

  """
  The Node ID of the Ref to be updated.
  """
  id: ID

  """
  The nameWithOwner of the repository to commit to.
  """
  repositoryNameWithOwner: String
}

"""
Parameters to be used for the committer_email_pattern rule
"""
type CommitterEmailPatternParameters {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean!

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
Parameters to be used for the committer_email_pattern rule
"""
input CommitterEmailPatternParametersInput {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
Represents a comparison between two commit revisions.
"""
type Comparison implements Node {
  """
  The number of commits ahead of the base branch.
  """
  aheadBy: Int!

  """
  The base revision of this comparison.
  """
  baseTarget: GitObject!

  """
  The number of commits behind the base branch.
  """
  behindBy: Int!

  """
  The commits which compose this comparison.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ComparisonCommitConnection!

  """
  The head revision of this comparison.
  """
  headTarget: GitObject!

  """
  The Node ID of the Comparison object
  """
  id: ID!

  """
  The status of this comparison.
  """
  status: ComparisonStatus!
}

"""
The connection type for Commit.
"""
type ComparisonCommitConnection {
  """
  The total count of authors and co-authors across all commits.
  """
  authorCount: Int!

  """
  A list of edges.
  """
  edges: [CommitEdge]

  """
  A list of nodes.
  """
  nodes: [Commit]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The status of a git comparison between two refs.
"""
enum ComparisonStatus {
  """
  The head ref is ahead of the base ref.
  """
  AHEAD

  """
  The head ref is behind the base ref.
  """
  BEHIND

  """
  The head ref is both ahead and behind of the base ref, indicating git history has diverged.
  """
  DIVERGED

  """
  The head ref and base ref are identical.
  """
  IDENTICAL
}

"""
Represents a 'connected' event on a given issue or pull request.
"""
type ConnectedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ConnectedEvent object
  """
  id: ID!

  """
  Reference originated in a different repository.
  """
  isCrossRepository: Boolean!

  """
  Issue or pull request that made the reference.
  """
  source: ReferencedSubject!

  """
  Issue or pull request which was connected.
  """
  subject: ReferencedSubject!
}

"""
The Contributing Guidelines for a repository.
"""
type ContributingGuidelines {
  """
  The body of the Contributing Guidelines.
  """
  body: String

  """
  The HTTP path for the Contributing Guidelines.
  """
  resourcePath: URI

  """
  The HTTP URL for the Contributing Guidelines.
  """
  url: URI
}

"""
Represents a contribution a user made on GitHub, such as opening an issue.
"""
interface Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
A calendar of contributions made on GitHub by a user.
"""
type ContributionCalendar {
  """
  A list of hex color codes used in this calendar. The darker the color, the more contributions it represents.
  """
  colors: [String!]!

  """
  Determine if the color set was chosen because it's currently Halloween.
  """
  isHalloween: Boolean!

  """
  A list of the months of contributions in this calendar.
  """
  months: [ContributionCalendarMonth!]!

  """
  The count of total contributions in the calendar.
  """
  totalContributions: Int!

  """
  A list of the weeks of contributions in this calendar.
  """
  weeks: [ContributionCalendarWeek!]!
}

"""
Represents a single day of contributions on GitHub by a user.
"""
type ContributionCalendarDay {
  """
  The hex color code that represents how many contributions were made on this day compared to others in the calendar.
  """
  color: String!

  """
  How many contributions were made by the user on this day.
  """
  contributionCount: Int!

  """
  Indication of contributions, relative to other days. Can be used to indicate
  which color to represent this day on a calendar.
  """
  contributionLevel: ContributionLevel!

  """
  The day this square represents.
  """
  date: Date!

  """
  A number representing which day of the week this square represents, e.g., 1 is Monday.
  """
  weekday: Int!
}

"""
A month of contributions in a user's contribution graph.
"""
type ContributionCalendarMonth {
  """
  The date of the first day of this month.
  """
  firstDay: Date!

  """
  The name of the month.
  """
  name: String!

  """
  How many weeks started in this month.
  """
  totalWeeks: Int!

  """
  The year the month occurred in.
  """
  year: Int!
}

"""
A week of contributions in a user's contribution graph.
"""
type ContributionCalendarWeek {
  """
  The days of contributions in this week.
  """
  contributionDays: [ContributionCalendarDay!]!

  """
  The date of the earliest square in this week.
  """
  firstDay: Date!
}

"""
Varying levels of contributions from none to many.
"""
enum ContributionLevel {
  """
  Lowest 25% of days of contributions.
  """
  FIRST_QUARTILE

  """
  Highest 25% of days of contributions. More contributions than the third quartile.
  """
  FOURTH_QUARTILE

  """
  No contributions occurred.
  """
  NONE

  """
  Second lowest 25% of days of contributions. More contributions than the first quartile.
  """
  SECOND_QUARTILE

  """
  Second highest 25% of days of contributions. More contributions than second quartile, less than the fourth quartile.
  """
  THIRD_QUARTILE
}

"""
Ordering options for contribution connections.
"""
input ContributionOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!
}

"""
A contributions collection aggregates contributions such as opened issues and commits created by a user.
"""
type ContributionsCollection {
  """
  Commit contributions made by the user, grouped by repository.
  """
  commitContributionsByRepository(
    """
    How many repositories should be included.
    """
    maxRepositories: Int = 25
  ): [CommitContributionsByRepository!]!

  """
  A calendar of this user's contributions on GitHub.
  """
  contributionCalendar: ContributionCalendar!

  """
  The years the user has been making contributions with the most recent year first.
  """
  contributionYears: [Int!]!

  """
  Determine if this collection's time span ends in the current month.
  """
  doesEndInCurrentMonth: Boolean!

  """
  The date of the first restricted contribution the user made in this time
  period. Can only be non-null when the user has enabled private contribution counts.
  """
  earliestRestrictedContributionDate: Date

  """
  The ending date and time of this collection.
  """
  endedAt: DateTime!

  """
  The first issue the user opened on GitHub. This will be null if that issue was
  opened outside the collection's time range and ignoreTimeRange is false. If
  the issue is not visible but the user has opted to show private contributions,
  a RestrictedContribution will be returned.
  """
  firstIssueContribution: CreatedIssueOrRestrictedContribution

  """
  The first pull request the user opened on GitHub. This will be null if that
  pull request was opened outside the collection's time range and
  ignoreTimeRange is not true. If the pull request is not visible but the user
  has opted to show private contributions, a RestrictedContribution will be returned.
  """
  firstPullRequestContribution: CreatedPullRequestOrRestrictedContribution

  """
  The first repository the user created on GitHub. This will be null if that
  first repository was created outside the collection's time range and
  ignoreTimeRange is false. If the repository is not visible, then a
  RestrictedContribution is returned.
  """
  firstRepositoryContribution: CreatedRepositoryOrRestrictedContribution

  """
  Does the user have any more activity in the timeline that occurred prior to the collection's time range?
  """
  hasActivityInThePast: Boolean!

  """
  Determine if there are any contributions in this collection.
  """
  hasAnyContributions: Boolean!

  """
  Determine if the user made any contributions in this time frame whose details
  are not visible because they were made in a private repository. Can only be
  true if the user enabled private contribution counts.
  """
  hasAnyRestrictedContributions: Boolean!

  """
  Whether or not the collector's time span is all within the same day.
  """
  isSingleDay: Boolean!

  """
  A list of issues the user opened.
  """
  issueContributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Should the user's first issue ever be excluded from the result.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented issue be excluded from the result.
    """
    excludePopular: Boolean = false

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for contributions returned from the connection.
    """
    orderBy: ContributionOrder = {direction: DESC}
  ): CreatedIssueContributionConnection!

  """
  Issue contributions made by the user, grouped by repository.
  """
  issueContributionsByRepository(
    """
    Should the user's first issue ever be excluded from the result.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented issue be excluded from the result.
    """
    excludePopular: Boolean = false

    """
    How many repositories should be included.
    """
    maxRepositories: Int = 25
  ): [IssueContributionsByRepository!]!

  """
  When the user signed up for GitHub. This will be null if that sign up date
  falls outside the collection's time range and ignoreTimeRange is false.
  """
  joinedGitHubContribution: JoinedGitHubContribution

  """
  The date of the most recent restricted contribution the user made in this time
  period. Can only be non-null when the user has enabled private contribution counts.
  """
  latestRestrictedContributionDate: Date

  """
  When this collection's time range does not include any activity from the user, use this
  to get a different collection from an earlier time range that does have activity.
  """
  mostRecentCollectionWithActivity: ContributionsCollection

  """
  Returns a different contributions collection from an earlier time range than this one
  that does not have any contributions.
  """
  mostRecentCollectionWithoutActivity: ContributionsCollection

  """
  The issue the user opened on GitHub that received the most comments in the specified
  time frame.
  """
  popularIssueContribution: CreatedIssueContribution

  """
  The pull request the user opened on GitHub that received the most comments in the
  specified time frame.
  """
  popularPullRequestContribution: CreatedPullRequestContribution

  """
  Pull request contributions made by the user.
  """
  pullRequestContributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Should the user's first pull request ever be excluded from the result.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented pull request be excluded from the result.
    """
    excludePopular: Boolean = false

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for contributions returned from the connection.
    """
    orderBy: ContributionOrder = {direction: DESC}
  ): CreatedPullRequestContributionConnection!

  """
  Pull request contributions made by the user, grouped by repository.
  """
  pullRequestContributionsByRepository(
    """
    Should the user's first pull request ever be excluded from the result.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented pull request be excluded from the result.
    """
    excludePopular: Boolean = false

    """
    How many repositories should be included.
    """
    maxRepositories: Int = 25
  ): [PullRequestContributionsByRepository!]!

  """
  Pull request review contributions made by the user. Returns the most recently
  submitted review for each PR reviewed by the user.
  """
  pullRequestReviewContributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for contributions returned from the connection.
    """
    orderBy: ContributionOrder = {direction: DESC}
  ): CreatedPullRequestReviewContributionConnection!

  """
  Pull request review contributions made by the user, grouped by repository.
  """
  pullRequestReviewContributionsByRepository(
    """
    How many repositories should be included.
    """
    maxRepositories: Int = 25
  ): [PullRequestReviewContributionsByRepository!]!

  """
  A list of repositories owned by the user that the user created in this time range.
  """
  repositoryContributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Should the user's first repository ever be excluded from the result.
    """
    excludeFirst: Boolean = false

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for contributions returned from the connection.
    """
    orderBy: ContributionOrder = {direction: DESC}
  ): CreatedRepositoryContributionConnection!

  """
  A count of contributions made by the user that the viewer cannot access. Only
  non-zero when the user has chosen to share their private contribution counts.
  """
  restrictedContributionsCount: Int!

  """
  The beginning date and time of this collection.
  """
  startedAt: DateTime!

  """
  How many commits were made by the user in this time span.
  """
  totalCommitContributions: Int!

  """
  How many issues the user opened.
  """
  totalIssueContributions(
    """
    Should the user's first issue ever be excluded from this count.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented issue be excluded from this count.
    """
    excludePopular: Boolean = false
  ): Int!

  """
  How many pull requests the user opened.
  """
  totalPullRequestContributions(
    """
    Should the user's first pull request ever be excluded from this count.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented pull request be excluded from this count.
    """
    excludePopular: Boolean = false
  ): Int!

  """
  How many pull request reviews the user left.
  """
  totalPullRequestReviewContributions: Int!

  """
  How many different repositories the user committed to.
  """
  totalRepositoriesWithContributedCommits: Int!

  """
  How many different repositories the user opened issues in.
  """
  totalRepositoriesWithContributedIssues(
    """
    Should the user's first issue ever be excluded from this count.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented issue be excluded from this count.
    """
    excludePopular: Boolean = false
  ): Int!

  """
  How many different repositories the user left pull request reviews in.
  """
  totalRepositoriesWithContributedPullRequestReviews: Int!

  """
  How many different repositories the user opened pull requests in.
  """
  totalRepositoriesWithContributedPullRequests(
    """
    Should the user's first pull request ever be excluded from this count.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented pull request be excluded from this count.
    """
    excludePopular: Boolean = false
  ): Int!

  """
  How many repositories the user created.
  """
  totalRepositoryContributions(
    """
    Should the user's first repository ever be excluded from this count.
    """
    excludeFirst: Boolean = false
  ): Int!

  """
  The user who made the contributions in this collection.
  """
  user: User!
}

"""
Autogenerated input type of ConvertProjectCardNoteToIssue
"""
input ConvertProjectCardNoteToIssueInput {
  """
  The body of the newly created issue.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ProjectCard ID to convert.
  """
  projectCardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])

  """
  The ID of the repository to create the issue in.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  The title of the newly created issue. Defaults to the card's note text.
  """
  title: String
}

"""
Autogenerated return type of ConvertProjectCardNoteToIssue
"""
type ConvertProjectCardNoteToIssuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated ProjectCard.
  """
  projectCard: ProjectCard
}

"""
Autogenerated input type of ConvertPullRequestToDraft
"""
input ConvertPullRequestToDraftInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the pull request to convert to draft
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""
Autogenerated return type of ConvertPullRequestToDraft
"""
type ConvertPullRequestToDraftPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that is now a draft.
  """
  pullRequest: PullRequest
}

"""
Represents a 'convert_to_draft' event on a given pull request.
"""
type ConvertToDraftEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ConvertToDraftEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  The HTTP path for this convert to draft event.
  """
  resourcePath: URI!

  """
  The HTTP URL for this convert to draft event.
  """
  url: URI!
}

"""
Represents a 'converted_note_to_issue' event on a given issue or pull request.
"""
type ConvertedNoteToIssueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ConvertedNoteToIssueEvent object
  """
  id: ID!

  """
  Project referenced by event.
  """
  project: Project @preview(toggledBy: "starfox-preview")

  """
  Project card referenced by this project event.
  """
  projectCard: ProjectCard @preview(toggledBy: "starfox-preview")

  """
  Column name referenced by this project event.
  """
  projectColumnName: String! @preview(toggledBy: "starfox-preview")
}

"""
Represents a 'converted_to_discussion' event on a given issue.
"""
type ConvertedToDiscussionEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The discussion that the issue was converted into.
  """
  discussion: Discussion

  """
  The Node ID of the ConvertedToDiscussionEvent object
  """
  id: ID!
}

"""
Autogenerated input type of CopyProjectV2
"""
input CopyProjectV2Input {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Include draft issues in the new project
  """
  includeDraftIssues: Boolean = false

  """
  The owner ID of the new project.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "OrganizationOrUser")

  """
  The ID of the source Project to copy.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The title of the project.
  """
  title: String!
}

"""
Autogenerated return type of CopyProjectV2
"""
type CopyProjectV2Payload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The copied project.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of CreateAttributionInvitation
"""
input CreateAttributionInvitationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the owner scoping the reattributable data.
  """
  ownerId: ID!
    @possibleTypes(concreteTypes: ["Bot", "Enterprise", "Mannequin", "Organization", "User"], abstractType: "Account")

  """
  The Node ID of the account owning the data to reattribute.
  """
  sourceId: ID!
    @possibleTypes(concreteTypes: ["Bot", "Enterprise", "Mannequin", "Organization", "User"], abstractType: "Account")

  """
  The Node ID of the account which may claim the data.
  """
  targetId: ID!
    @possibleTypes(concreteTypes: ["Bot", "Enterprise", "Mannequin", "Organization", "User"], abstractType: "Account")
}

"""
Autogenerated return type of CreateAttributionInvitation
"""
type CreateAttributionInvitationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The owner scoping the reattributable data.
  """
  owner: Organization

  """
  The account owning the data to reattribute.
  """
  source: Claimable

  """
  The account which may claim the data.
  """
  target: Claimable
}

"""
Autogenerated input type of CreateBranchProtectionRule
"""
input CreateBranchProtectionRuleInput {
  """
  Can this branch be deleted.
  """
  allowsDeletions: Boolean

  """
  Are force pushes allowed on this branch.
  """
  allowsForcePushes: Boolean

  """
  Is branch creation a protected operation.
  """
  blocksCreations: Boolean

  """
  A list of User, Team, or App IDs allowed to bypass force push targeting matching branches.
  """
  bypassForcePushActorIds: [ID!]

  """
  A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches.
  """
  bypassPullRequestActorIds: [ID!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Will new commits pushed to matching branches dismiss pull request review approvals.
  """
  dismissesStaleReviews: Boolean

  """
  Can admins override branch protection.
  """
  isAdminEnforced: Boolean

  """
  Whether users can pull changes from upstream when the branch is locked. Set to
  `true` to allow fork syncing. Set to `false` to prevent fork syncing.
  """
  lockAllowsFetchAndMerge: Boolean

  """
  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
  """
  lockBranch: Boolean

  """
  The glob-like pattern used to determine matching branches.
  """
  pattern: String!

  """
  A list of User, Team, or App IDs allowed to push to matching branches.
  """
  pushActorIds: [ID!]

  """
  The global relay id of the repository in which a new branch protection rule should be created in.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  Whether the most recent push must be approved by someone other than the person who pushed it
  """
  requireLastPushApproval: Boolean

  """
  Number of approving reviews required to update matching branches.
  """
  requiredApprovingReviewCount: Int

  """
  The list of required deployment environments
  """
  requiredDeploymentEnvironments: [String!]

  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  requiredStatusCheckContexts: [String!]

  """
  The list of required status checks
  """
  requiredStatusChecks: [RequiredStatusCheckInput!]

  """
  Are approving reviews required to update matching branches.
  """
  requiresApprovingReviews: Boolean

  """
  Are reviews from code owners required to update matching branches.
  """
  requiresCodeOwnerReviews: Boolean

  """
  Are commits required to be signed.
  """
  requiresCommitSignatures: Boolean

  """
  Are conversations required to be resolved before merging.
  """
  requiresConversationResolution: Boolean

  """
  Are successful deployments required before merging.
  """
  requiresDeployments: Boolean

  """
  Are merge commits prohibited from being pushed to this branch.
  """
  requiresLinearHistory: Boolean

  """
  Are status checks required to update matching branches.
  """
  requiresStatusChecks: Boolean

  """
  Are branches required to be up to date before merging.
  """
  requiresStrictStatusChecks: Boolean

  """
  Is pushing to matching branches restricted.
  """
  restrictsPushes: Boolean

  """
  Is dismissal of pull request reviews restricted.
  """
  restrictsReviewDismissals: Boolean

  """
  A list of User, Team, or App IDs allowed to dismiss reviews on pull requests targeting matching branches.
  """
  reviewDismissalActorIds: [ID!]
}

"""
Autogenerated return type of CreateBranchProtectionRule
"""
type CreateBranchProtectionRulePayload {
  """
  The newly created BranchProtectionRule.
  """
  branchProtectionRule: BranchProtectionRule

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of CreateCheckRun
"""
input CreateCheckRunInput {
  """
  Possible further actions the integrator can perform, which a user may trigger.
  """
  actions: [CheckRunAction!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The time that the check run finished.
  """
  completedAt: DateTime

  """
  The final conclusion of the check.
  """
  conclusion: CheckConclusionState

  """
  The URL of the integrator's site that has the full details of the check.
  """
  detailsUrl: URI

  """
  A reference for the run on the integrator's system.
  """
  externalId: String

  """
  The SHA of the head commit.
  """
  headSha: GitObjectID!

  """
  The name of the check.
  """
  name: String!

  """
  Descriptive details about the run.
  """
  output: CheckRunOutput

  """
  The node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  The time that the check run began.
  """
  startedAt: DateTime

  """
  The current status.
  """
  status: RequestableCheckStatusState
}

"""
Autogenerated return type of CreateCheckRun
"""
type CreateCheckRunPayload {
  """
  The newly created check run.
  """
  checkRun: CheckRun

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of CreateCheckSuite
"""
input CreateCheckSuiteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The SHA of the head commit.
  """
  headSha: GitObjectID!

  """
  The Node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of CreateCheckSuite
"""
type CreateCheckSuitePayload {
  """
  The newly created check suite.
  """
  checkSuite: CheckSuite

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of CreateCommitOnBranch
"""
input CreateCommitOnBranchInput {
  """
  The Ref to be updated.  Must be a branch.
  """
  branch: CommittableBranch!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The git commit oid expected at the head of the branch prior to the commit
  """
  expectedHeadOid: GitObjectID!

  """
  A description of changes to files in this commit.
  """
  fileChanges: FileChanges

  """
  The commit message the be included with the commit.
  """
  message: CommitMessage!
}

"""
Autogenerated return type of CreateCommitOnBranch
"""
type CreateCommitOnBranchPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new commit.
  """
  commit: Commit

  """
  The ref which has been updated to point to the new commit.
  """
  ref: Ref
}

"""
Autogenerated input type of CreateDeployment
"""
input CreateDeploymentInput @preview(toggledBy: "flash-preview") {
  """
  Attempt to automatically merge the default branch into the requested ref, defaults to true.
  """
  autoMerge: Boolean = true

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Short description of the deployment.
  """
  description: String = ""

  """
  Name for the target deployment environment.
  """
  environment: String = "production"

  """
  JSON payload with extra information about the deployment.
  """
  payload: String = "{}"

  """
  The node ID of the ref to be deployed.
  """
  refId: ID! @possibleTypes(concreteTypes: ["Ref"])

  """
  The node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  The status contexts to verify against commit status checks. To bypass required
  contexts, pass an empty array. Defaults to all unique contexts.
  """
  requiredContexts: [String!]

  """
  Specifies a task to execute.
  """
  task: String = "deploy"
}

"""
Autogenerated return type of CreateDeployment
"""
type CreateDeploymentPayload @preview(toggledBy: "flash-preview") {
  """
  True if the default branch has been auto-merged into the deployment ref.
  """
  autoMerged: Boolean

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new deployment.
  """
  deployment: Deployment
}

"""
Autogenerated input type of CreateDeploymentStatus
"""
input CreateDeploymentStatusInput @preview(toggledBy: "flash-preview") {
  """
  Adds a new inactive status to all non-transient, non-production environment
  deployments with the same repository and environment name as the created
  status's deployment.
  """
  autoInactive: Boolean = true

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The node ID of the deployment.
  """
  deploymentId: ID! @possibleTypes(concreteTypes: ["Deployment"])

  """
  A short description of the status. Maximum length of 140 characters.
  """
  description: String = ""

  """
  If provided, updates the environment of the deploy. Otherwise, does not modify the environment.
  """
  environment: String

  """
  Sets the URL for accessing your environment.
  """
  environmentUrl: String = ""

  """
  The log URL to associate with this status.       This URL should contain
  output to keep the user updated while the task is running       or serve as
  historical information for what happened in the deployment.
  """
  logUrl: String = ""

  """
  The state of the deployment.
  """
  state: DeploymentStatusState!
}

"""
Autogenerated return type of CreateDeploymentStatus
"""
type CreateDeploymentStatusPayload @preview(toggledBy: "flash-preview") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new deployment status.
  """
  deploymentStatus: DeploymentStatus
}

"""
Autogenerated input type of CreateDiscussion
"""
input CreateDiscussionInput {
  """
  The body of the discussion.
  """
  body: String!

  """
  The id of the discussion category to associate with this discussion.
  """
  categoryId: ID! @possibleTypes(concreteTypes: ["DiscussionCategory"])

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the repository on which to create the discussion.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  The title of the discussion.
  """
  title: String!
}

"""
Autogenerated return type of CreateDiscussion
"""
type CreateDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was just created.
  """
  discussion: Discussion
}

"""
Autogenerated input type of CreateEnterpriseOrganization
"""
input CreateEnterpriseOrganizationInput {
  """
  The logins for the administrators of the new organization.
  """
  adminLogins: [String!]!

  """
  The email used for sending billing receipts.
  """
  billingEmail: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise owning the new organization.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of the new organization.
  """
  login: String!

  """
  The profile name of the new organization.
  """
  profileName: String!
}

"""
Autogenerated return type of CreateEnterpriseOrganization
"""
type CreateEnterpriseOrganizationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The enterprise that owns the created organization.
  """
  enterprise: Enterprise

  """
  The organization that was created.
  """
  organization: Organization
}

"""
Autogenerated input type of CreateEnvironment
"""
input CreateEnvironmentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of the environment.
  """
  name: String!

  """
  The node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of CreateEnvironment
"""
type CreateEnvironmentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new or existing environment.
  """
  environment: Environment
}

"""
Autogenerated input type of CreateIpAllowListEntry
"""
input CreateIpAllowListEntryInput {
  """
  An IP address or range of addresses in CIDR notation.
  """
  allowListValue: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether the IP allow list entry is active when an IP allow list is enabled.
  """
  isActive: Boolean!

  """
  An optional name for the IP allow list entry.
  """
  name: String

  """
  The ID of the owner for which to create the new IP allow list entry.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["App", "Enterprise", "Organization"], abstractType: "IpAllowListOwner")
}

"""
Autogenerated return type of CreateIpAllowListEntry
"""
type CreateIpAllowListEntryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The IP allow list entry that was created.
  """
  ipAllowListEntry: IpAllowListEntry
}

"""
Autogenerated input type of CreateIssue
"""
input CreateIssueInput {
  """
  The Node ID for the user assignee for this issue.
  """
  assigneeIds: [ID!] @possibleTypes(concreteTypes: ["User"])

  """
  The body for the issue description.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of an issue template in the repository, assigns labels and assignees from the template to the issue
  """
  issueTemplate: String

  """
  An array of Node IDs of labels for this issue.
  """
  labelIds: [ID!] @possibleTypes(concreteTypes: ["Label"])

  """
  The Node ID of the milestone for this issue.
  """
  milestoneId: ID @possibleTypes(concreteTypes: ["Milestone"])

  """
  An array of Node IDs for projects associated with this issue.
  """
  projectIds: [ID!] @possibleTypes(concreteTypes: ["Project"])

  """
  The Node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  The title for the issue.
  """
  title: String!
}

"""
Autogenerated return type of CreateIssue
"""
type CreateIssuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new issue.
  """
  issue: Issue
}

"""
Autogenerated input type of CreateLabel
"""
input CreateLabelInput @preview(toggledBy: "bane-preview") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A 6 character hex code, without the leading #, identifying the color of the label.
  """
  color: String!

  """
  A brief description of the label, such as its purpose.
  """
  description: String

  """
  The name of the label.
  """
  name: String!

  """
  The Node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of CreateLabel
"""
type CreateLabelPayload @preview(toggledBy: "bane-preview") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new label.
  """
  label: Label
}

"""
Autogenerated input type of CreateLinkedBranch
"""
input CreateLinkedBranchInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the issue to link to.
  """
  issueId: ID! @possibleTypes(concreteTypes: ["Issue"])

  """
  The name of the new branch. Defaults to issue number and title.
  """
  name: String

  """
  The commit SHA to base the new branch on.
  """
  oid: GitObjectID!

  """
  ID of the repository to create the branch in. Defaults to the issue repository.
  """
  repositoryId: ID @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of CreateLinkedBranch
"""
type CreateLinkedBranchPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The issue that was linked to.
  """
  issue: Issue

  """
  The new branch issue reference.
  """
  linkedBranch: LinkedBranch
}

"""
Autogenerated input type of CreateMigrationSource
"""
input CreateMigrationSourceInput {
  """
  The migration source access token.
  """
  accessToken: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The GitHub personal access token of the user importing to the target repository.
  """
  githubPat: String

  """
  The migration source name.
  """
  name: String!

  """
  The ID of the organization that will own the migration source.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  The migration source type.
  """
  type: MigrationSourceType!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  url: String
}

"""
Autogenerated return type of CreateMigrationSource
"""
type CreateMigrationSourcePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The created migration source.
  """
  migrationSource: MigrationSource
}

"""
Autogenerated input type of CreateProject
"""
input CreateProjectInput {
  """
  The description of project.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of project.
  """
  name: String!

  """
  The owner ID to create the project under.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization", "Repository", "User"], abstractType: "ProjectOwner")

  """
  A list of repository IDs to create as linked repositories for the project
  """
  repositoryIds: [ID!] @possibleTypes(concreteTypes: ["Repository"])

  """
  The name of the GitHub-provided template.
  """
  template: ProjectTemplate
}

"""
Autogenerated return type of CreateProject
"""
type CreateProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new project.
  """
  project: Project
}

"""
Autogenerated input type of CreateProjectV2Field
"""
input CreateProjectV2FieldInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The data type of the field.
  """
  dataType: ProjectV2CustomFieldType!

  """
  The name of the field.
  """
  name: String!

  """
  The ID of the Project to create the field in.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  Options for a single select field. At least one value is required if data_type is SINGLE_SELECT
  """
  singleSelectOptions: [ProjectV2SingleSelectFieldOptionInput!]
}

"""
Autogenerated return type of CreateProjectV2Field
"""
type CreateProjectV2FieldPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new field.
  """
  projectV2Field: ProjectV2FieldConfiguration
}

"""
Autogenerated input type of CreateProjectV2
"""
input CreateProjectV2Input {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The owner ID to create the project under.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "OrganizationOrUser")

  """
  The repository to link the project to.
  """
  repositoryId: ID @possibleTypes(concreteTypes: ["Repository"])

  """
  The team to link the project to. The team will be granted read permissions.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The title of the project.
  """
  title: String!
}

"""
Autogenerated return type of CreateProjectV2
"""
type CreateProjectV2Payload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new project.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of CreatePullRequest
"""
input CreatePullRequestInput {
  """
  The name of the branch you want your changes pulled into. This should be an existing branch
  on the current repository. You cannot update the base branch on a pull request to point
  to another repository.
  """
  baseRefName: String!

  """
  The contents of the pull request.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates whether this pull request should be a draft.
  """
  draft: Boolean = false

  """
  The name of the branch where your changes are implemented. For cross-repository pull requests
  in the same network, namespace `head_ref_name` with a user like this: `username:branch`.
  """
  headRefName: String!

  """
  The Node ID of the head repository.
  """
  headRepositoryId: ID @possibleTypes(concreteTypes: ["Repository"])

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean = true

  """
  The Node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  The title of the pull request.
  """
  title: String!
}

"""
Autogenerated return type of CreatePullRequest
"""
type CreatePullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new pull request.
  """
  pullRequest: PullRequest
}

"""
Autogenerated input type of CreateRef
"""
input CreateRefInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The fully qualified name of the new Ref (ie: `refs/heads/my_new_branch`).
  """
  name: String!

  """
  The GitObjectID that the new Ref shall target. Must point to a commit.
  """
  oid: GitObjectID!

  """
  The Node ID of the Repository to create the Ref in.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of CreateRef
"""
type CreateRefPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created ref.
  """
  ref: Ref
}

"""
Autogenerated input type of CreateRepository
"""
input CreateRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A short description of the new repository.
  """
  description: String

  """
  Indicates if the repository should have the issues feature enabled.
  """
  hasIssuesEnabled: Boolean = true

  """
  Indicates if the repository should have the wiki feature enabled.
  """
  hasWikiEnabled: Boolean = false

  """
  The URL for a web page about this repository.
  """
  homepageUrl: URI

  """
  The name of the new repository.
  """
  name: String!

  """
  The ID of the owner for the new repository.
  """
  ownerId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "RepositoryOwner")

  """
  When an organization is specified as the owner, this ID identifies the team
  that should be granted access to the new repository.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  Whether this repository should be marked as a template such that anyone who
  can access it can create new repositories with the same files and directory structure.
  """
  template: Boolean = false

  """
  Indicates the repository's visibility level.
  """
  visibility: RepositoryVisibility!
}

"""
Autogenerated return type of CreateRepository
"""
type CreateRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new repository.
  """
  repository: Repository
}

"""
Autogenerated input type of CreateRepositoryRuleset
"""
input CreateRepositoryRulesetInput {
  """
  A list of actors that are allowed to bypass rules in this ruleset.
  """
  bypassActors: [RepositoryRulesetBypassActorInput!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The set of conditions for this ruleset
  """
  conditions: RepositoryRuleConditionsInput!

  """
  The enforcement level for this ruleset
  """
  enforcement: RuleEnforcement!

  """
  The name of the ruleset.
  """
  name: String!

  """
  The list of rules for this ruleset
  """
  rules: [RepositoryRuleInput!]

  """
  The global relay id of the source in which a new ruleset should be created in.
  """
  sourceId: ID! @possibleTypes(concreteTypes: ["Organization", "Repository"], abstractType: "RuleSource")

  """
  The target of the ruleset.
  """
  target: RepositoryRulesetTarget
}

"""
Autogenerated return type of CreateRepositoryRuleset
"""
type CreateRepositoryRulesetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created Ruleset.
  """
  ruleset: RepositoryRuleset
}

"""
Autogenerated input type of CreateSponsorsListing
"""
input CreateSponsorsListingInput {
  """
  The country or region where the sponsorable's bank account is located.
  Required if fiscalHostLogin is not specified, ignored when fiscalHostLogin is specified.
  """
  billingCountryOrRegionCode: SponsorsCountryOrRegionCode

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The email address we should use to contact you about the GitHub Sponsors
  profile being created. This will not be shared publicly. Must be a verified
  email address already on your GitHub account. Only relevant when the
  sponsorable is yourself. Defaults to your primary email address on file if omitted.
  """
  contactEmail: String

  """
  The username of the supported fiscal host's GitHub organization, if you want
  to receive sponsorship payouts through a fiscal host rather than directly to a
  bank account. For example, 'Open-Source-Collective' for Open Source Collective
  or 'numfocus' for numFOCUS. Case insensitive. See https://docs.github.com/sponsors/receiving-sponsorships-through-github-sponsors/using-a-fiscal-host-to-receive-github-sponsors-payouts
  for more information.
  """
  fiscalHostLogin: String

  """
  The URL for your profile page on the fiscal host's website, e.g.,
  https://opencollective.com/babel or https://numfocus.org/project/bokeh.
  Required if fiscalHostLogin is specified.
  """
  fiscallyHostedProjectProfileUrl: String

  """
  Provide an introduction to serve as the main focus that appears on your GitHub
  Sponsors profile. It's a great opportunity to help potential sponsors learn
  more about you, your work, and why their sponsorship is important to you.
  GitHub-flavored Markdown is supported.
  """
  fullDescription: String

  """
  The country or region where the sponsorable resides. This is for tax purposes.
  Required if the sponsorable is yourself, ignored when sponsorableLogin
  specifies an organization.
  """
  residenceCountryOrRegionCode: SponsorsCountryOrRegionCode

  """
  The username of the organization to create a GitHub Sponsors profile for, if
  desired. Defaults to creating a GitHub Sponsors profile for the authenticated
  user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of CreateSponsorsListing
"""
type CreateSponsorsListingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of CreateSponsorsTier
"""
input CreateSponsorsTierInput {
  """
  The value of the new tier in US dollars. Valid values: 1-12000.
  """
  amount: Int!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A description of what this tier is, what perks sponsors might receive, what a sponsorship at this tier means for you, etc.
  """
  description: String!

  """
  Whether sponsorships using this tier should happen monthly/yearly or just once.
  """
  isRecurring: Boolean = true

  """
  Whether to make the tier available immediately for sponsors to choose.
  Defaults to creating a draft tier that will not be publicly visible.
  """
  publish: Boolean = false

  """
  Optional ID of the private repository that sponsors at this tier should gain
  read-only access to. Must be owned by an organization.
  """
  repositoryId: ID @possibleTypes(concreteTypes: ["Repository"])

  """
  Optional name of the private repository that sponsors at this tier should gain
  read-only access to. Must be owned by an organization. Necessary if
  repositoryOwnerLogin is given. Will be ignored if repositoryId is given.
  """
  repositoryName: String

  """
  Optional login of the organization owner of the private repository that
  sponsors at this tier should gain read-only access to. Necessary if
  repositoryName is given. Will be ignored if repositoryId is given.
  """
  repositoryOwnerLogin: String

  """
  The ID of the user or organization who owns the GitHub Sponsors profile.
  Defaults to the current user if omitted and sponsorableLogin is not given.
  """
  sponsorableId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "Sponsorable")

  """
  The username of the user or organization who owns the GitHub Sponsors profile.
  Defaults to the current user if omitted and sponsorableId is not given.
  """
  sponsorableLogin: String

  """
  Optional message new sponsors at this tier will receive.
  """
  welcomeMessage: String
}

"""
Autogenerated return type of CreateSponsorsTier
"""
type CreateSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new tier.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of CreateSponsorship
"""
input CreateSponsorshipInput {
  """
  The amount to pay to the sponsorable in US dollars. Required if a tierId is not specified. Valid values: 1-12000.
  """
  amount: Int

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether the sponsorship should happen monthly/yearly or just this one time. Required if a tierId is not specified.
  """
  isRecurring: Boolean

  """
  Specify whether others should be able to see that the sponsor is sponsoring
  the sponsorable. Public visibility still does not reveal which tier is used.
  """
  privacyLevel: SponsorshipPrivacy = PUBLIC

  """
  Whether the sponsor should receive email updates from the sponsorable.
  """
  receiveEmails: Boolean = true

  """
  The ID of the user or organization who is acting as the sponsor, paying for
  the sponsorship. Required if sponsorLogin is not given.
  """
  sponsorId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "Sponsor")

  """
  The username of the user or organization who is acting as the sponsor, paying
  for the sponsorship. Required if sponsorId is not given.
  """
  sponsorLogin: String

  """
  The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.
  """
  sponsorableId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "Sponsorable")

  """
  The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.
  """
  sponsorableLogin: String

  """
  The ID of one of sponsorable's existing tiers to sponsor at. Required if amount is not specified.
  """
  tierId: ID @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of CreateSponsorship
"""
type CreateSponsorshipPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The sponsorship that was started.
  """
  sponsorship: Sponsorship
}

"""
Autogenerated input type of CreateSponsorships
"""
input CreateSponsorshipsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Specify whether others should be able to see that the sponsor is sponsoring
  the sponsorables. Public visibility still does not reveal the dollar value of
  the sponsorship.
  """
  privacyLevel: SponsorshipPrivacy = PUBLIC

  """
  Whether the sponsor should receive email updates from the sponsorables.
  """
  receiveEmails: Boolean = false

  """
  The username of the user or organization who is acting as the sponsor, paying for the sponsorships.
  """
  sponsorLogin: String!

  """
  The list of maintainers to sponsor and for how much apiece.
  """
  sponsorships: [BulkSponsorship!]!
}

"""
Autogenerated return type of CreateSponsorships
"""
type CreateSponsorshipsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The users and organizations who received a sponsorship.
  """
  sponsorables: [Sponsorable!]
}

"""
Autogenerated input type of CreateTeamDiscussionComment
"""
input CreateTeamDiscussionCommentInput {
  """
  The content of the comment. This field is required.

  **Upcoming Change on 2024-07-01 UTC**
  **Description:** `body` will be removed. Follow the guide at
  https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
  find a suitable replacement.
  **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the discussion to which the comment belongs. This field is required.

  **Upcoming Change on 2024-07-01 UTC**
  **Description:** `discussionId` will be removed. Follow the guide at
  https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
  find a suitable replacement.
  **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
  """
  discussionId: ID @possibleTypes(concreteTypes: ["TeamDiscussion"])
}

"""
Autogenerated return type of CreateTeamDiscussionComment
"""
type CreateTeamDiscussionCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new comment.
  """
  teamDiscussionComment: TeamDiscussionComment
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )
}

"""
Autogenerated input type of CreateTeamDiscussion
"""
input CreateTeamDiscussionInput {
  """
  The content of the discussion. This field is required.

  **Upcoming Change on 2024-07-01 UTC**
  **Description:** `body` will be removed. Follow the guide at
  https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
  find a suitable replacement.
  **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If true, restricts the visibility of this discussion to team members and
  organization owners. If false or not specified, allows any organization member
  to view this discussion.

  **Upcoming Change on 2024-07-01 UTC**
  **Description:** `private` will be removed. Follow the guide at
  https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
  find a suitable replacement.
  **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
  """
  private: Boolean

  """
  The ID of the team to which the discussion belongs. This field is required.

  **Upcoming Change on 2024-07-01 UTC**
  **Description:** `teamId` will be removed. Follow the guide at
  https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
  find a suitable replacement.
  **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The title of the discussion. This field is required.

  **Upcoming Change on 2024-07-01 UTC**
  **Description:** `title` will be removed. Follow the guide at
  https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
  find a suitable replacement.
  **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
  """
  title: String
}

"""
Autogenerated return type of CreateTeamDiscussion
"""
type CreateTeamDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new discussion.
  """
  teamDiscussion: TeamDiscussion
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )
}

"""
Autogenerated input type of CreateUserList
"""
input CreateUserListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Whether or not the list is private
  """
  isPrivate: Boolean = false

  """
  The name of the new list
  """
  name: String!
}

"""
Autogenerated return type of CreateUserList
"""
type CreateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just created
  """
  list: UserList

  """
  The user who created the list
  """
  viewer: User
}

"""
Represents the contribution a user made by committing to a repository.
"""
type CreatedCommitContribution implements Contribution {
  """
  How many commits were made on this day to this repository by the user.
  """
  commitCount: Int!

  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The repository the user made a commit in.
  """
  repository: Repository!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
The connection type for CreatedCommitContribution.
"""
type CreatedCommitContributionConnection {
  """
  A list of edges.
  """
  edges: [CreatedCommitContributionEdge]

  """
  A list of nodes.
  """
  nodes: [CreatedCommitContribution]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of commits across days and repositories in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CreatedCommitContributionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CreatedCommitContribution
}

"""
Represents the contribution a user made on GitHub by opening an issue.
"""
type CreatedIssueContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  The issue that was opened.
  """
  issue: Issue!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
The connection type for CreatedIssueContribution.
"""
type CreatedIssueContributionConnection {
  """
  A list of edges.
  """
  edges: [CreatedIssueContributionEdge]

  """
  A list of nodes.
  """
  nodes: [CreatedIssueContribution]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CreatedIssueContributionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CreatedIssueContribution
}

"""
Represents either a issue the viewer can access or a restricted contribution.
"""
union CreatedIssueOrRestrictedContribution = CreatedIssueContribution | RestrictedContribution

"""
Represents the contribution a user made on GitHub by opening a pull request.
"""
type CreatedPullRequestContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The pull request that was opened.
  """
  pullRequest: PullRequest!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
The connection type for CreatedPullRequestContribution.
"""
type CreatedPullRequestContributionConnection {
  """
  A list of edges.
  """
  edges: [CreatedPullRequestContributionEdge]

  """
  A list of nodes.
  """
  nodes: [CreatedPullRequestContribution]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CreatedPullRequestContributionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CreatedPullRequestContribution
}

"""
Represents either a pull request the viewer can access or a restricted contribution.
"""
union CreatedPullRequestOrRestrictedContribution = CreatedPullRequestContribution | RestrictedContribution

"""
Represents the contribution a user made by leaving a review on a pull request.
"""
type CreatedPullRequestReviewContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The pull request the user reviewed.
  """
  pullRequest: PullRequest!

  """
  The review the user left on the pull request.
  """
  pullRequestReview: PullRequestReview!

  """
  The repository containing the pull request that the user reviewed.
  """
  repository: Repository!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
The connection type for CreatedPullRequestReviewContribution.
"""
type CreatedPullRequestReviewContributionConnection {
  """
  A list of edges.
  """
  edges: [CreatedPullRequestReviewContributionEdge]

  """
  A list of nodes.
  """
  nodes: [CreatedPullRequestReviewContribution]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CreatedPullRequestReviewContributionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CreatedPullRequestReviewContribution
}

"""
Represents the contribution a user made on GitHub by creating a repository.
"""
type CreatedRepositoryContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The repository that was created.
  """
  repository: Repository!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
The connection type for CreatedRepositoryContribution.
"""
type CreatedRepositoryContributionConnection {
  """
  A list of edges.
  """
  edges: [CreatedRepositoryContributionEdge]

  """
  A list of nodes.
  """
  nodes: [CreatedRepositoryContribution]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CreatedRepositoryContributionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CreatedRepositoryContribution
}

"""
Represents either a repository the viewer can access or a restricted contribution.
"""
union CreatedRepositoryOrRestrictedContribution = CreatedRepositoryContribution | RestrictedContribution

"""
Represents a mention made by one issue or pull request to another.
"""
type CrossReferencedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the CrossReferencedEvent object
  """
  id: ID!

  """
  Reference originated in a different repository.
  """
  isCrossRepository: Boolean!

  """
  Identifies when the reference was made.
  """
  referencedAt: DateTime!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  Issue or pull request that made the reference.
  """
  source: ReferencedSubject!

  """
  Issue or pull request to which the reference was made.
  """
  target: ReferencedSubject!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  Checks if the target will be closed when the source is merged.
  """
  willCloseTarget: Boolean!
}

"""
An ISO-8601 encoded date string.
"""
scalar Date

"""
An ISO-8601 encoded UTC date string.
"""
scalar DateTime

"""
Autogenerated input type of DeclineTopicSuggestion
"""
input DeclineTopicSuggestionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of the suggested topic.

  **Upcoming Change on 2024-04-01 UTC**
  **Description:** `name` will be removed.
  **Reason:** Suggested topics are no longer supported
  """
  name: String

  """
  The reason why the suggested topic is declined.

  **Upcoming Change on 2024-04-01 UTC**
  **Description:** `reason` will be removed.
  **Reason:** Suggested topics are no longer supported
  """
  reason: TopicSuggestionDeclineReason

  """
  The Node ID of the repository.

  **Upcoming Change on 2024-04-01 UTC**
  **Description:** `repositoryId` will be removed.
  **Reason:** Suggested topics are no longer supported
  """
  repositoryId: ID @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of DeclineTopicSuggestion
"""
type DeclineTopicSuggestionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The declined topic.
  """
  topic: Topic @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")
}

"""
The possible base permissions for repositories.
"""
enum DefaultRepositoryPermissionField {
  """
  Can read, write, and administrate repos by default
  """
  ADMIN

  """
  No access
  """
  NONE

  """
  Can read repos by default
  """
  READ

  """
  Can read and write repos by default
  """
  WRITE
}

"""
Entities that can be deleted.
"""
interface Deletable {
  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!
}

"""
Autogenerated input type of DeleteBranchProtectionRule
"""
input DeleteBranchProtectionRuleInput {
  """
  The global relay id of the branch protection rule to be deleted.
  """
  branchProtectionRuleId: ID! @possibleTypes(concreteTypes: ["BranchProtectionRule"])

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteBranchProtectionRule
"""
type DeleteBranchProtectionRulePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteDeployment
"""
input DeleteDeploymentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the deployment to be deleted.
  """
  id: ID! @possibleTypes(concreteTypes: ["Deployment"])
}

"""
Autogenerated return type of DeleteDeployment
"""
type DeleteDeploymentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteDiscussionComment
"""
input DeleteDiscussionCommentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node id of the discussion comment to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["DiscussionComment"])
}

"""
Autogenerated return type of DeleteDiscussionComment
"""
type DeleteDiscussionCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion comment that was just deleted.
  """
  comment: DiscussionComment
}

"""
Autogenerated input type of DeleteDiscussion
"""
input DeleteDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the discussion to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of DeleteDiscussion
"""
type DeleteDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was just deleted.
  """
  discussion: Discussion
}

"""
Autogenerated input type of DeleteEnvironment
"""
input DeleteEnvironmentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the environment to be deleted.
  """
  id: ID! @possibleTypes(concreteTypes: ["Environment"])
}

"""
Autogenerated return type of DeleteEnvironment
"""
type DeleteEnvironmentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteIpAllowListEntry
"""
input DeleteIpAllowListEntryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the IP allow list entry to delete.
  """
  ipAllowListEntryId: ID! @possibleTypes(concreteTypes: ["IpAllowListEntry"])
}

"""
Autogenerated return type of DeleteIpAllowListEntry
"""
type DeleteIpAllowListEntryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The IP allow list entry that was deleted.
  """
  ipAllowListEntry: IpAllowListEntry
}

"""
Autogenerated input type of DeleteIssueComment
"""
input DeleteIssueCommentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the comment to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["IssueComment"])
}

"""
Autogenerated return type of DeleteIssueComment
"""
type DeleteIssueCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteIssue
"""
input DeleteIssueInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the issue to delete.
  """
  issueId: ID! @possibleTypes(concreteTypes: ["Issue"])
}

"""
Autogenerated return type of DeleteIssue
"""
type DeleteIssuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the issue belonged to
  """
  repository: Repository
}

"""
Autogenerated input type of DeleteLabel
"""
input DeleteLabelInput @preview(toggledBy: "bane-preview") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the label to be deleted.
  """
  id: ID! @possibleTypes(concreteTypes: ["Label"])
}

"""
Autogenerated return type of DeleteLabel
"""
type DeleteLabelPayload @preview(toggledBy: "bane-preview") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteLinkedBranch
"""
input DeleteLinkedBranchInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the linked branch
  """
  linkedBranchId: ID! @possibleTypes(concreteTypes: ["LinkedBranch"])
}

"""
Autogenerated return type of DeleteLinkedBranch
"""
type DeleteLinkedBranchPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The issue the linked branch was unlinked from.
  """
  issue: Issue
}

"""
Autogenerated input type of DeletePackageVersion
"""
input DeletePackageVersionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the package version to be deleted.
  """
  packageVersionId: ID! @possibleTypes(concreteTypes: ["PackageVersion"])
}

"""
Autogenerated return type of DeletePackageVersion
"""
type DeletePackageVersionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not the operation succeeded.
  """
  success: Boolean
}

"""
Autogenerated input type of DeleteProjectCard
"""
input DeleteProjectCardInput {
  """
  The id of the card to delete.
  """
  cardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteProjectCard
"""
type DeleteProjectCardPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The column the deleted card was in.
  """
  column: ProjectColumn

  """
  The deleted card ID.
  """
  deletedCardId: ID
}

"""
Autogenerated input type of DeleteProjectColumn
"""
input DeleteProjectColumnInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the column to delete.
  """
  columnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

"""
Autogenerated return type of DeleteProjectColumn
"""
type DeleteProjectColumnPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The deleted column ID.
  """
  deletedColumnId: ID

  """
  The project the deleted column was in.
  """
  project: Project
}

"""
Autogenerated input type of DeleteProject
"""
input DeleteProjectInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Project ID to update.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])
}

"""
Autogenerated return type of DeleteProject
"""
type DeleteProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository or organization the project was removed from.
  """
  owner: ProjectOwner
}

"""
Autogenerated input type of DeleteProjectV2Field
"""
input DeleteProjectV2FieldInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the field to delete.
  """
  fieldId: ID!
    @possibleTypes(
      concreteTypes: ["ProjectV2Field", "ProjectV2IterationField", "ProjectV2SingleSelectField"]
      abstractType: "ProjectV2FieldConfiguration"
    )
}

"""
Autogenerated return type of DeleteProjectV2Field
"""
type DeleteProjectV2FieldPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The deleted field.
  """
  projectV2Field: ProjectV2FieldConfiguration
}

"""
Autogenerated input type of DeleteProjectV2
"""
input DeleteProjectV2Input {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to delete.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated input type of DeleteProjectV2Item
"""
input DeleteProjectV2ItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the item to be removed.
  """
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])

  """
  The ID of the Project from which the item should be removed.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of DeleteProjectV2Item
"""
type DeleteProjectV2ItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the deleted item.
  """
  deletedItemId: ID
}

"""
Autogenerated return type of DeleteProjectV2
"""
type DeleteProjectV2Payload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The deleted Project.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of DeleteProjectV2Workflow
"""
input DeleteProjectV2WorkflowInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the workflow to be removed.
  """
  workflowId: ID! @possibleTypes(concreteTypes: ["ProjectV2Workflow"])
}

"""
Autogenerated return type of DeleteProjectV2Workflow
"""
type DeleteProjectV2WorkflowPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the deleted workflow.
  """
  deletedWorkflowId: ID

  """
  The project the deleted workflow was in.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of DeletePullRequestReviewComment
"""
input DeletePullRequestReviewCommentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the comment to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["PullRequestReviewComment"])
}

"""
Autogenerated return type of DeletePullRequestReviewComment
"""
type DeletePullRequestReviewCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request review the deleted comment belonged to.
  """
  pullRequestReview: PullRequestReview

  """
  The deleted pull request review comment.
  """
  pullRequestReviewComment: PullRequestReviewComment
}

"""
Autogenerated input type of DeletePullRequestReview
"""
input DeletePullRequestReviewInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the pull request review to delete.
  """
  pullRequestReviewId: ID! @possibleTypes(concreteTypes: ["PullRequestReview"])
}

"""
Autogenerated return type of DeletePullRequestReview
"""
type DeletePullRequestReviewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The deleted pull request review.
  """
  pullRequestReview: PullRequestReview
}

"""
Autogenerated input type of DeleteRef
"""
input DeleteRefInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the Ref to be deleted.
  """
  refId: ID! @possibleTypes(concreteTypes: ["Ref"])
}

"""
Autogenerated return type of DeleteRef
"""
type DeleteRefPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteRepositoryRuleset
"""
input DeleteRepositoryRulesetInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The global relay id of the repository ruleset to be deleted.
  """
  repositoryRulesetId: ID! @possibleTypes(concreteTypes: ["RepositoryRuleset"])
}

"""
Autogenerated return type of DeleteRepositoryRuleset
"""
type DeleteRepositoryRulesetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteTeamDiscussionComment
"""
input DeleteTeamDiscussionCommentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the comment to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["TeamDiscussionComment"])
}

"""
Autogenerated return type of DeleteTeamDiscussionComment
"""
type DeleteTeamDiscussionCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteTeamDiscussion
"""
input DeleteTeamDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion ID to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["TeamDiscussion"])
}

"""
Autogenerated return type of DeleteTeamDiscussion
"""
type DeleteTeamDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteUserList
"""
input DeleteUserListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the list to delete.
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])
}

"""
Autogenerated return type of DeleteUserList
"""
type DeleteUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The owner of the list that will be deleted
  """
  user: User
}

"""
Autogenerated input type of DeleteVerifiableDomain
"""
input DeleteVerifiableDomainInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the verifiable domain to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["VerifiableDomain"])
}

"""
Autogenerated return type of DeleteVerifiableDomain
"""
type DeleteVerifiableDomainPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The owning account from which the domain was deleted.
  """
  owner: VerifiableDomainOwner
}

"""
Represents a 'demilestoned' event on a given issue or pull request.
"""
type DemilestonedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the DemilestonedEvent object
  """
  id: ID!

  """
  Identifies the milestone title associated with the 'demilestoned' event.
  """
  milestoneTitle: String!

  """
  Object referenced by event.
  """
  subject: MilestoneItem!
}

"""
A Dependabot Update for a dependency in a repository
"""
type DependabotUpdate implements RepositoryNode {
  """
  The error from a dependency update
  """
  error: DependabotUpdateError

  """
  The associated pull request
  """
  pullRequest: PullRequest

  """
  The repository associated with this node.
  """
  repository: Repository!
}

"""
An error produced from a Dependabot Update
"""
type DependabotUpdateError {
  """
  The body of the error
  """
  body: String!

  """
  The error code
  """
  errorType: String!

  """
  The title of the error
  """
  title: String!
}

"""
A dependency manifest entry
"""
type DependencyGraphDependency @preview(toggledBy: "hawkgirl-preview") {
  """
  Does the dependency itself have dependencies?
  """
  hasDependencies: Boolean!

  """
  The original name of the package, as it appears in the manifest.
  """
  packageLabel: String!
    @deprecated(
      reason: "`packageLabel` will be removed. Use normalized `packageName` field instead. Removal on 2022-10-01 UTC."
    )

  """
  The dependency package manager
  """
  packageManager: String

  """
  The name of the package in the canonical form used by the package manager.
  """
  packageName: String!

  """
  The repository containing the package
  """
  repository: Repository

  """
  The dependency version requirements
  """
  requirements: String!
}

"""
The connection type for DependencyGraphDependency.
"""
type DependencyGraphDependencyConnection @preview(toggledBy: "hawkgirl-preview") {
  """
  A list of edges.
  """
  edges: [DependencyGraphDependencyEdge]

  """
  A list of nodes.
  """
  nodes: [DependencyGraphDependency]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DependencyGraphDependencyEdge @preview(toggledBy: "hawkgirl-preview") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DependencyGraphDependency
}

"""
The possible ecosystems of a dependency graph package.
"""
enum DependencyGraphEcosystem {
  """
  GitHub Actions
  """
  ACTIONS

  """
  PHP packages hosted at packagist.org
  """
  COMPOSER

  """
  Go modules
  """
  GO

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

  """
  Python packages hosted at PyPI.org
  """
  PIP

  """
  Dart packages hosted at pub.dev
  """
  PUB

  """
  Ruby gems hosted at RubyGems.org
  """
  RUBYGEMS

  """
  Rust crates
  """
  RUST

  """
  Swift packages
  """
  SWIFT
}

"""
Dependency manifest for a repository
"""
type DependencyGraphManifest implements Node @preview(toggledBy: "hawkgirl-preview") {
  """
  Path to view the manifest file blob
  """
  blobPath: String!

  """
  A list of manifest dependencies
  """
  dependencies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DependencyGraphDependencyConnection

  """
  The number of dependencies listed in the manifest
  """
  dependenciesCount: Int

  """
  Is the manifest too big to parse?
  """
  exceedsMaxSize: Boolean!

  """
  Fully qualified manifest filename
  """
  filename: String!

  """
  The Node ID of the DependencyGraphManifest object
  """
  id: ID!

  """
  Were we able to parse the manifest?
  """
  parseable: Boolean!

  """
  The repository containing the manifest
  """
  repository: Repository!
}

"""
The connection type for DependencyGraphManifest.
"""
type DependencyGraphManifestConnection @preview(toggledBy: "hawkgirl-preview") {
  """
  A list of edges.
  """
  edges: [DependencyGraphManifestEdge]

  """
  A list of nodes.
  """
  nodes: [DependencyGraphManifest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DependencyGraphManifestEdge @preview(toggledBy: "hawkgirl-preview") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DependencyGraphManifest
}

"""
A repository deploy key.
"""
type DeployKey implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the DeployKey object
  """
  id: ID!

  """
  The deploy key.
  """
  key: String!

  """
  Whether or not the deploy key is read only.
  """
  readOnly: Boolean!

  """
  The deploy key title.
  """
  title: String!

  """
  Whether or not the deploy key has been verified.
  """
  verified: Boolean!
}

"""
The connection type for DeployKey.
"""
type DeployKeyConnection {
  """
  A list of edges.
  """
  edges: [DeployKeyEdge]

  """
  A list of nodes.
  """
  nodes: [DeployKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeployKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DeployKey
}

"""
Represents a 'deployed' event on a given pull request.
"""
type DeployedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The deployment associated with the 'deployed' event.
  """
  deployment: Deployment!

  """
  The Node ID of the DeployedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  The ref associated with the 'deployed' event.
  """
  ref: Ref
}

"""
Represents triggered deployment instance.
"""
type Deployment implements Node {
  """
  Identifies the commit sha of the deployment.
  """
  commit: Commit

  """
  Identifies the oid of the deployment commit, even if the commit has been deleted.
  """
  commitOid: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the actor who triggered the deployment.
  """
  creator: Actor!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The deployment description.
  """
  description: String

  """
  The latest environment to which this deployment was made.
  """
  environment: String

  """
  The Node ID of the Deployment object
  """
  id: ID!

  """
  The latest environment to which this deployment was made.
  """
  latestEnvironment: String

  """
  The latest status of this deployment.
  """
  latestStatus: DeploymentStatus

  """
  The original environment to which this deployment was made.
  """
  originalEnvironment: String

  """
  Extra information that a deployment system might need.
  """
  payload: String

  """
  Identifies the Ref of the deployment, if the deployment was created by ref.
  """
  ref: Ref

  """
  Identifies the repository associated with the deployment.
  """
  repository: Repository!

  """
  The current state of the deployment.
  """
  state: DeploymentState

  """
  A list of statuses associated with the deployment.
  """
  statuses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DeploymentStatusConnection

  """
  The deployment task.
  """
  task: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for Deployment.
"""
type DeploymentConnection {
  """
  A list of edges.
  """
  edges: [DeploymentEdge]

  """
  A list of nodes.
  """
  nodes: [Deployment]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeploymentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Deployment
}

"""
Represents a 'deployment_environment_changed' event on a given pull request.
"""
type DeploymentEnvironmentChangedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The deployment status that updated the deployment environment.
  """
  deploymentStatus: DeploymentStatus!

  """
  The Node ID of the DeploymentEnvironmentChangedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!
}

"""
Ordering options for deployment connections
"""
input DeploymentOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order deployments by.
  """
  field: DeploymentOrderField!
}

"""
Properties by which deployment connections can be ordered.
"""
enum DeploymentOrderField {
  """
  Order collection by creation time
  """
  CREATED_AT
}

"""
A protection rule.
"""
type DeploymentProtectionRule {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean

  """
  The teams or users that can review the deployment
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DeploymentReviewerConnection!

  """
  The timeout in minutes for this protection rule.
  """
  timeout: Int!

  """
  The type of protection rule.
  """
  type: DeploymentProtectionRuleType!
}

"""
The connection type for DeploymentProtectionRule.
"""
type DeploymentProtectionRuleConnection {
  """
  A list of edges.
  """
  edges: [DeploymentProtectionRuleEdge]

  """
  A list of nodes.
  """
  nodes: [DeploymentProtectionRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeploymentProtectionRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DeploymentProtectionRule
}

"""
The possible protection rule types.
"""
enum DeploymentProtectionRuleType {
  """
  Required reviewers
  """
  REQUIRED_REVIEWERS

  """
  Wait timer
  """
  WAIT_TIMER
}

"""
A request to deploy a workflow run to an environment.
"""
type DeploymentRequest {
  """
  Whether or not the current user can approve the deployment
  """
  currentUserCanApprove: Boolean!

  """
  The target environment of the deployment
  """
  environment: Environment!

  """
  The teams or users that can review the deployment
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DeploymentReviewerConnection!

  """
  The wait timer in minutes configured in the environment
  """
  waitTimer: Int!

  """
  The wait timer in minutes configured in the environment
  """
  waitTimerStartedAt: DateTime
}

"""
The connection type for DeploymentRequest.
"""
type DeploymentRequestConnection {
  """
  A list of edges.
  """
  edges: [DeploymentRequestEdge]

  """
  A list of nodes.
  """
  nodes: [DeploymentRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeploymentRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DeploymentRequest
}

"""
A deployment review.
"""
type DeploymentReview implements Node {
  """
  The comment the user left.
  """
  comment: String!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The environments approved or rejected
  """
  environments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EnvironmentConnection!

  """
  The Node ID of the DeploymentReview object
  """
  id: ID!

  """
  The decision of the user.
  """
  state: DeploymentReviewState!

  """
  The user that reviewed the deployment.
  """
  user: User!
}

"""
The connection type for DeploymentReview.
"""
type DeploymentReviewConnection {
  """
  A list of edges.
  """
  edges: [DeploymentReviewEdge]

  """
  A list of nodes.
  """
  nodes: [DeploymentReview]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeploymentReviewEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DeploymentReview
}

"""
The possible states for a deployment review.
"""
enum DeploymentReviewState {
  """
  The deployment was approved.
  """
  APPROVED

  """
  The deployment was rejected.
  """
  REJECTED
}

"""
Users and teams.
"""
union DeploymentReviewer = Team | User

"""
The connection type for DeploymentReviewer.
"""
type DeploymentReviewerConnection {
  """
  A list of edges.
  """
  edges: [DeploymentReviewerEdge]

  """
  A list of nodes.
  """
  nodes: [DeploymentReviewer]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeploymentReviewerEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DeploymentReviewer
}

"""
The possible states in which a deployment can be.
"""
enum DeploymentState {
  """
  The pending deployment was not updated after 30 minutes.
  """
  ABANDONED

  """
  The deployment is currently active.
  """
  ACTIVE

  """
  An inactive transient deployment.
  """
  DESTROYED

  """
  The deployment experienced an error.
  """
  ERROR

  """
  The deployment has failed.
  """
  FAILURE

  """
  The deployment is inactive.
  """
  INACTIVE

  """
  The deployment is in progress.
  """
  IN_PROGRESS

  """
  The deployment is pending.
  """
  PENDING

  """
  The deployment has queued
  """
  QUEUED

  """
  The deployment was successful.
  """
  SUCCESS

  """
  The deployment is waiting.
  """
  WAITING
}

"""
Describes the status of a given deployment attempt.
"""
type DeploymentStatus implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the actor who triggered the deployment.
  """
  creator: Actor!

  """
  Identifies the deployment associated with status.
  """
  deployment: Deployment!

  """
  Identifies the description of the deployment.
  """
  description: String

  """
  Identifies the environment of the deployment at the time of this deployment status
  """
  environment: String @preview(toggledBy: "flash-preview")

  """
  Identifies the environment URL of the deployment.
  """
  environmentUrl: URI

  """
  The Node ID of the DeploymentStatus object
  """
  id: ID!

  """
  Identifies the log URL of the deployment.
  """
  logUrl: URI

  """
  Identifies the current state of the deployment.
  """
  state: DeploymentStatusState!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for DeploymentStatus.
"""
type DeploymentStatusConnection {
  """
  A list of edges.
  """
  edges: [DeploymentStatusEdge]

  """
  A list of nodes.
  """
  nodes: [DeploymentStatus]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeploymentStatusEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DeploymentStatus
}

"""
The possible states for a deployment status.
"""
enum DeploymentStatusState {
  """
  The deployment experienced an error.
  """
  ERROR

  """
  The deployment has failed.
  """
  FAILURE

  """
  The deployment is inactive.
  """
  INACTIVE

  """
  The deployment is in progress.
  """
  IN_PROGRESS

  """
  The deployment is pending.
  """
  PENDING

  """
  The deployment is queued
  """
  QUEUED

  """
  The deployment was successful.
  """
  SUCCESS

  """
  The deployment is waiting.
  """
  WAITING
}

"""
Autogenerated input type of DequeuePullRequest
"""
input DequeuePullRequestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the pull request to be dequeued.
  """
  id: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""
Autogenerated return type of DequeuePullRequest
"""
type DequeuePullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The merge queue entry of the dequeued pull request.
  """
  mergeQueueEntry: MergeQueueEntry
}

"""
The possible sides of a diff.
"""
enum DiffSide {
  """
  The left side of the diff.
  """
  LEFT

  """
  The right side of the diff.
  """
  RIGHT
}

"""
Autogenerated input type of DisablePullRequestAutoMerge
"""
input DisablePullRequestAutoMergeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the pull request to disable auto merge on.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""
Autogenerated return type of DisablePullRequestAutoMerge
"""
type DisablePullRequestAutoMergePayload {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request auto merge was disabled on.
  """
  pullRequest: PullRequest
}

"""
Represents a 'disconnected' event on a given issue or pull request.
"""
type DisconnectedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the DisconnectedEvent object
  """
  id: ID!

  """
  Reference originated in a different repository.
  """
  isCrossRepository: Boolean!

  """
  Issue or pull request from which the issue was disconnected.
  """
  source: ReferencedSubject!

  """
  Issue or pull request which was disconnected.
  """
  subject: ReferencedSubject!
}

"""
A discussion in a repository.
"""
type Discussion implements Closable & Comment & Deletable & Labelable & Lockable & Node & Reactable & RepositoryNode & Subscribable & Updatable & Votable {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The comment chosen as this discussion's answer, if any.
  """
  answer: DiscussionComment

  """
  The time when a user chose this discussion's answer, if answered.
  """
  answerChosenAt: DateTime

  """
  The user who chose this discussion's answer, if answered.
  """
  answerChosenBy: Actor

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  The main text of the discussion post.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  The category for this discussion.
  """
  category: DiscussionCategory!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  The replies to the discussion.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DiscussionCommentConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The actor who edited the comment.
  """
  editor: Actor

  """
  The Node ID of the Discussion object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Only return answered/unanswered discussions
  """
  isAnswered: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  `true` if the object is locked
  """
  locked: Boolean!

  """
  The number identifying this discussion within the repository.
  """
  number: Int!

  """
  The poll associated with this discussion, if one exists.
  """
  poll: DiscussionPoll

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The path for this discussion.
  """
  resourcePath: URI!

  """
  Identifies the reason for the discussion's state.
  """
  stateReason: DiscussionStateReason

  """
  The title of this discussion.
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  Number of upvotes that this subject has received.
  """
  upvoteCount: Int!

  """
  The URL for this discussion.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!

  """
  Whether or not the current user can add or remove an upvote on this subject.
  """
  viewerCanUpvote: Boolean!

  """
  Did the viewer author this comment.
  """
  viewerDidAuthor: Boolean!

  """
  Whether or not the current user has already upvoted this subject.
  """
  viewerHasUpvoted: Boolean!

  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: SubscriptionState
}

"""
A category for discussions in a repository.
"""
type DiscussionCategory implements Node & RepositoryNode {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  A description of this category.
  """
  description: String

  """
  An emoji representing this category.
  """
  emoji: String!

  """
  This category's emoji rendered as HTML.
  """
  emojiHTML: HTML!

  """
  The Node ID of the DiscussionCategory object
  """
  id: ID!

  """
  Whether or not discussions in this category support choosing an answer with the markDiscussionCommentAsAnswer mutation.
  """
  isAnswerable: Boolean!

  """
  The name of this category.
  """
  name: String!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The slug of this category.
  """
  slug: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for DiscussionCategory.
"""
type DiscussionCategoryConnection {
  """
  A list of edges.
  """
  edges: [DiscussionCategoryEdge]

  """
  A list of nodes.
  """
  nodes: [DiscussionCategory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DiscussionCategoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DiscussionCategory
}

"""
The possible reasons for closing a discussion.
"""
enum DiscussionCloseReason {
  """
  The discussion is a duplicate of another
  """
  DUPLICATE

  """
  The discussion is no longer relevant
  """
  OUTDATED

  """
  The discussion has been resolved
  """
  RESOLVED
}

"""
A comment on a discussion.
"""
type DiscussionComment implements Comment & Deletable & Minimizable & Node & Reactable & Updatable & UpdatableComment & Votable {
  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The time when this replied-to comment was deleted
  """
  deletedAt: DateTime

  """
  The discussion this comment was created in
  """
  discussion: Discussion

  """
  The actor who edited the comment.
  """
  editor: Actor

  """
  The Node ID of the DiscussionComment object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Has this comment been chosen as the answer of its discussion?
  """
  isAnswer: Boolean!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The threaded replies to this comment.
  """
  replies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DiscussionCommentConnection!

  """
  The discussion comment this comment is a reply to
  """
  replyTo: DiscussionComment

  """
  The path for this discussion comment.
  """
  resourcePath: URI!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  Number of upvotes that this subject has received.
  """
  upvoteCount: Int!

  """
  The URL for this discussion comment.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can the current user mark this comment as an answer?
  """
  viewerCanMarkAsAnswer: Boolean!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  Can the current user unmark this comment as an answer?
  """
  viewerCanUnmarkAsAnswer: Boolean!

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!

  """
  Whether or not the current user can add or remove an upvote on this subject.
  """
  viewerCanUpvote: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!

  """
  Did the viewer author this comment.
  """
  viewerDidAuthor: Boolean!

  """
  Whether or not the current user has already upvoted this subject.
  """
  viewerHasUpvoted: Boolean!
}

"""
The connection type for DiscussionComment.
"""
type DiscussionCommentConnection {
  """
  A list of edges.
  """
  edges: [DiscussionCommentEdge]

  """
  A list of nodes.
  """
  nodes: [DiscussionComment]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DiscussionCommentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DiscussionComment
}

"""
The connection type for Discussion.
"""
type DiscussionConnection {
  """
  A list of edges.
  """
  edges: [DiscussionEdge]

  """
  A list of nodes.
  """
  nodes: [Discussion]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DiscussionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Discussion
}

"""
Ways in which lists of discussions can be ordered upon return.
"""
input DiscussionOrder {
  """
  The direction in which to order discussions by the specified field.
  """
  direction: OrderDirection!

  """
  The field by which to order discussions.
  """
  field: DiscussionOrderField!
}

"""
Properties by which discussion connections can be ordered.
"""
enum DiscussionOrderField {
  """
  Order discussions by creation time.
  """
  CREATED_AT

  """
  Order discussions by most recent modification time.
  """
  UPDATED_AT
}

"""
A poll for a discussion.
"""
type DiscussionPoll implements Node {
  """
  The discussion that this poll belongs to.
  """
  discussion: Discussion

  """
  The Node ID of the DiscussionPoll object
  """
  id: ID!

  """
  The options for this poll.
  """
  options(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the options for the discussion poll.
    """
    orderBy: DiscussionPollOptionOrder = {field: AUTHORED_ORDER, direction: ASC}
  ): DiscussionPollOptionConnection

  """
  The question that is being asked by this poll.
  """
  question: String!

  """
  The total number of votes that have been cast for this poll.
  """
  totalVoteCount: Int!

  """
  Indicates if the viewer has permission to vote in this poll.
  """
  viewerCanVote: Boolean!

  """
  Indicates if the viewer has voted for any option in this poll.
  """
  viewerHasVoted: Boolean!
}

"""
An option for a discussion poll.
"""
type DiscussionPollOption implements Node {
  """
  The Node ID of the DiscussionPollOption object
  """
  id: ID!

  """
  The text for this option.
  """
  option: String!

  """
  The discussion poll that this option belongs to.
  """
  poll: DiscussionPoll

  """
  The total number of votes that have been cast for this option.
  """
  totalVoteCount: Int!

  """
  Indicates if the viewer has voted for this option in the poll.
  """
  viewerHasVoted: Boolean!
}

"""
The connection type for DiscussionPollOption.
"""
type DiscussionPollOptionConnection {
  """
  A list of edges.
  """
  edges: [DiscussionPollOptionEdge]

  """
  A list of nodes.
  """
  nodes: [DiscussionPollOption]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DiscussionPollOptionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DiscussionPollOption
}

"""
Ordering options for discussion poll option connections.
"""
input DiscussionPollOptionOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order poll options by.
  """
  field: DiscussionPollOptionOrderField!
}

"""
Properties by which discussion poll option connections can be ordered.
"""
enum DiscussionPollOptionOrderField {
  """
  Order poll options by the order that the poll author specified when creating the poll.
  """
  AUTHORED_ORDER

  """
  Order poll options by the number of votes it has.
  """
  VOTE_COUNT
}

"""
The possible states of a discussion.
"""
enum DiscussionState {
  """
  A discussion that has been closed
  """
  CLOSED

  """
  A discussion that is open
  """
  OPEN
}

"""
The possible state reasons of a discussion.
"""
enum DiscussionStateReason {
  """
  The discussion is a duplicate of another
  """
  DUPLICATE

  """
  The discussion is no longer relevant
  """
  OUTDATED

  """
  The discussion was reopened
  """
  REOPENED

  """
  The discussion has been resolved
  """
  RESOLVED
}

"""
Autogenerated input type of DismissPullRequestReview
"""
input DismissPullRequestReviewInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The contents of the pull request review dismissal message.
  """
  message: String!

  """
  The Node ID of the pull request review to modify.
  """
  pullRequestReviewId: ID! @possibleTypes(concreteTypes: ["PullRequestReview"])
}

"""
Autogenerated return type of DismissPullRequestReview
"""
type DismissPullRequestReviewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The dismissed pull request review.
  """
  pullRequestReview: PullRequestReview
}

"""
The possible reasons that a Dependabot alert was dismissed.
"""
enum DismissReason {
  """
  A fix has already been started
  """
  FIX_STARTED

  """
  This alert is inaccurate or incorrect
  """
  INACCURATE

  """
  Vulnerable code is not actually used
  """
  NOT_USED

  """
  No bandwidth to fix this
  """
  NO_BANDWIDTH

  """
  Risk is tolerable to this project
  """
  TOLERABLE_RISK
}

"""
Autogenerated input type of DismissRepositoryVulnerabilityAlert
"""
input DismissRepositoryVulnerabilityAlertInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The reason the Dependabot alert is being dismissed.
  """
  dismissReason: DismissReason!

  """
  The Dependabot alert ID to dismiss.
  """
  repositoryVulnerabilityAlertId: ID! @possibleTypes(concreteTypes: ["RepositoryVulnerabilityAlert"])
}

"""
Autogenerated return type of DismissRepositoryVulnerabilityAlert
"""
type DismissRepositoryVulnerabilityAlertPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Dependabot alert that was dismissed
  """
  repositoryVulnerabilityAlert: RepositoryVulnerabilityAlert
}

"""
A draft issue within a project.
"""
type DraftIssue implements Node {
  """
  A list of users to assigned to this draft issue.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The body of the draft issue.
  """
  body: String!

  """
  The body of the draft issue rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body of the draft issue rendered to text.
  """
  bodyText: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created this draft issue.
  """
  creator: Actor

  """
  The Node ID of the DraftIssue object
  """
  id: ID!

  """
  List of items linked with the draft issue (currently draft issue can be linked to only one item).
  """
  projectV2Items(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Projects that link to this draft issue (currently draft issue can be linked to only one project).
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!

  """
  The title of the draft issue
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Specifies a review comment to be left with a Pull Request Review.
"""
input DraftPullRequestReviewComment {
  """
  Body of the comment to leave.
  """
  body: String!

  """
  Path to the file being commented on.
  """
  path: String!

  """
  Position in the file to leave a comment on.
  """
  position: Int!
}

"""
Specifies a review comment thread to be left with a Pull Request Review.
"""
input DraftPullRequestReviewThread {
  """
  Body of the comment to leave.
  """
  body: String!

  """
  The line of the blob to which the thread refers. The end of the line range for multi-line comments.
  """
  line: Int!

  """
  Path to the file being commented on.
  """
  path: String!

  """
  The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.
  """
  side: DiffSide = RIGHT

  """
  The first line of the range to which the comment refers.
  """
  startLine: Int

  """
  The side of the diff on which the start line resides.
  """
  startSide: DiffSide = RIGHT
}

"""
Autogenerated input type of EnablePullRequestAutoMerge
"""
input EnablePullRequestAutoMergeInput {
  """
  The email address to associate with this merge.
  """
  authorEmail: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Commit body to use for the commit when the PR is mergable; if omitted, a
  default message will be used. NOTE: when merging with a merge queue any input
  value for commit message is ignored.
  """
  commitBody: String

  """
  Commit headline to use for the commit when the PR is mergable; if omitted, a
  default message will be used. NOTE: when merging with a merge queue any input
  value for commit headline is ignored.
  """
  commitHeadline: String

  """
  The expected head OID of the pull request.
  """
  expectedHeadOid: GitObjectID

  """
  The merge method to use. If omitted, defaults to `MERGE`. NOTE: when merging
  with a merge queue any input value for merge method is ignored.
  """
  mergeMethod: PullRequestMergeMethod = MERGE

  """
  ID of the pull request to enable auto-merge on.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""
Autogenerated return type of EnablePullRequestAutoMerge
"""
type EnablePullRequestAutoMergePayload {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request auto-merge was enabled on.
  """
  pullRequest: PullRequest
}

"""
Autogenerated input type of EnqueuePullRequest
"""
input EnqueuePullRequestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The expected head OID of the pull request.
  """
  expectedHeadOid: GitObjectID

  """
  Add the pull request to the front of the queue.
  """
  jump: Boolean

  """
  The ID of the pull request to enqueue.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""
Autogenerated return type of EnqueuePullRequest
"""
type EnqueuePullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The merge queue entry for the enqueued pull request.
  """
  mergeQueueEntry: MergeQueueEntry
}

"""
An account to manage multiple organizations with consolidated policy and billing.
"""
type Enterprise implements AnnouncementBanner & Node {
  """
  The text of the announcement
  """
  announcement: String

  """
  The expiration date of the announcement, if any
  """
  announcementExpiresAt: DateTime

  """
  Whether the announcement can be dismissed by the user
  """
  announcementUserDismissible: Boolean

  """
  A URL pointing to the enterprise's public avatar.
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The enterprise's billing email.
  """
  billingEmail: String

  """
  Enterprise billing information visible to enterprise billing managers.
  """
  billingInfo: EnterpriseBillingInfo

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The description of the enterprise.
  """
  description: String

  """
  The description of the enterprise as HTML.
  """
  descriptionHTML: HTML!

  """
  The Node ID of the Enterprise object
  """
  id: ID!

  """
  The location of the enterprise.
  """
  location: String

  """
  A list of users who are members of this enterprise.
  """
  members(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Only return members within the selected GitHub Enterprise deployment
    """
    deployment: EnterpriseUserDeployment

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return members with this two-factor authentication status. Does not
    include members who only have an account on a GitHub Enterprise Server instance.
    """
    hasTwoFactorEnabled: Boolean = null

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for members returned from the connection.
    """
    orderBy: EnterpriseMemberOrder = {field: LOGIN, direction: ASC}

    """
    Only return members within the organizations with these logins
    """
    organizationLogins: [String!]

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the enterprise organization or server.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseMemberConnection!

  """
  The name of the enterprise.
  """
  name: String!

  """
  A list of organizations that belong to this enterprise.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for organizations returned from the connection.
    """
    orderBy: OrganizationOrder = {field: LOGIN, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The viewer's role in an organization.
    """
    viewerOrganizationRole: RoleInOrganization
  ): OrganizationConnection!

  """
  Enterprise information visible to enterprise owners or enterprise owners'
  personal access tokens (classic) with read:enterprise or admin:enterprise scope.
  """
  ownerInfo: EnterpriseOwnerInfo

  """
  The HTTP path for this enterprise.
  """
  resourcePath: URI!

  """
  The URL-friendly identifier for the enterprise.
  """
  slug: String!

  """
  The HTTP URL for this enterprise.
  """
  url: URI!

  """
  Is the current viewer an admin of this enterprise?
  """
  viewerIsAdmin: Boolean!

  """
  The URL of the enterprise website.
  """
  websiteUrl: URI
}

"""
The connection type for User.
"""
type EnterpriseAdministratorConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseAdministratorEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
A User who is an administrator of an enterprise.
"""
type EnterpriseAdministratorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User

  """
  The role of the administrator.
  """
  role: EnterpriseAdministratorRole!
}

"""
An invitation for a user to become an owner or billing manager of an enterprise.
"""
type EnterpriseAdministratorInvitation implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The email of the person who was invited to the enterprise.
  """
  email: String

  """
  The enterprise the invitation is for.
  """
  enterprise: Enterprise!

  """
  The Node ID of the EnterpriseAdministratorInvitation object
  """
  id: ID!

  """
  The user who was invited to the enterprise.
  """
  invitee: User

  """
  The user who created the invitation.
  """
  inviter: User

  """
  The invitee's pending role in the enterprise (owner or billing_manager).
  """
  role: EnterpriseAdministratorRole!
}

"""
The connection type for EnterpriseAdministratorInvitation.
"""
type EnterpriseAdministratorInvitationConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseAdministratorInvitationEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseAdministratorInvitation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type EnterpriseAdministratorInvitationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseAdministratorInvitation
}

"""
Ordering options for enterprise administrator invitation connections
"""
input EnterpriseAdministratorInvitationOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprise administrator invitations by.
  """
  field: EnterpriseAdministratorInvitationOrderField!
}

"""
Properties by which enterprise administrator invitation connections can be ordered.
"""
enum EnterpriseAdministratorInvitationOrderField {
  """
  Order enterprise administrator member invitations by creation time
  """
  CREATED_AT
}

"""
The possible administrator roles in an enterprise account.
"""
enum EnterpriseAdministratorRole {
  """
  Represents a billing manager of the enterprise account.
  """
  BILLING_MANAGER

  """
  Represents an owner of the enterprise account.
  """
  OWNER
}

"""
The possible values for the enterprise allow private repository forking policy value.
"""
enum EnterpriseAllowPrivateRepositoryForkingPolicyValue {
  """
  Members can fork a repository to an organization within this enterprise.
  """
  ENTERPRISE_ORGANIZATIONS

  """
  Members can fork a repository to their enterprise-managed user account or an organization inside this enterprise.
  """
  ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS

  """
  Members can fork a repository to their user account or an organization, either inside or outside of this enterprise.
  """
  EVERYWHERE

  """
  Members can fork a repository only within the same organization (intra-org).
  """
  SAME_ORGANIZATION

  """
  Members can fork a repository to their user account or within the same organization.
  """
  SAME_ORGANIZATION_USER_ACCOUNTS

  """
  Members can fork a repository to their user account.
  """
  USER_ACCOUNTS
}

"""
Metadata for an audit entry containing enterprise account information.
"""
interface EnterpriseAuditEntryData {
  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI
}

"""
Enterprise billing information visible to enterprise billing managers and owners.
"""
type EnterpriseBillingInfo {
  """
  The number of licenseable users/emails across the enterprise.
  """
  allLicensableUsersCount: Int!

  """
  The number of data packs used by all organizations owned by the enterprise.
  """
  assetPacks: Int!

  """
  The bandwidth quota in GB for all organizations owned by the enterprise.
  """
  bandwidthQuota: Float!

  """
  The bandwidth usage in GB for all organizations owned by the enterprise.
  """
  bandwidthUsage: Float!

  """
  The bandwidth usage as a percentage of the bandwidth quota.
  """
  bandwidthUsagePercentage: Int!

  """
  The storage quota in GB for all organizations owned by the enterprise.
  """
  storageQuota: Float!

  """
  The storage usage in GB for all organizations owned by the enterprise.
  """
  storageUsage: Float!

  """
  The storage usage as a percentage of the storage quota.
  """
  storageUsagePercentage: Int!

  """
  The number of available licenses across all owned organizations based on the unique number of billable users.
  """
  totalAvailableLicenses: Int!

  """
  The total number of licenses allocated.
  """
  totalLicenses: Int!
}

"""
The connection type for Enterprise.
"""
type EnterpriseConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseEdge]

  """
  A list of nodes.
  """
  nodes: [Enterprise]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible values for the enterprise base repository permission setting.
"""
enum EnterpriseDefaultRepositoryPermissionSettingValue {
  """
  Organization members will be able to clone, pull, push, and add new collaborators to all organization repositories.
  """
  ADMIN

  """
  Organization members will only be able to clone and pull public repositories.
  """
  NONE

  """
  Organizations in the enterprise choose base repository permissions for their members.
  """
  NO_POLICY

  """
  Organization members will be able to clone and pull all organization repositories.
  """
  READ

  """
  Organization members will be able to clone, pull, and push all organization repositories.
  """
  WRITE
}

"""
An edge in a connection.
"""
type EnterpriseEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Enterprise
}

"""
The possible values for an enabled/disabled enterprise setting.
"""
enum EnterpriseEnabledDisabledSettingValue {
  """
  The setting is disabled for organizations in the enterprise.
  """
  DISABLED

  """
  The setting is enabled for organizations in the enterprise.
  """
  ENABLED

  """
  There is no policy set for organizations in the enterprise.
  """
  NO_POLICY
}

"""
The possible values for an enabled/no policy enterprise setting.
"""
enum EnterpriseEnabledSettingValue {
  """
  The setting is enabled for organizations in the enterprise.
  """
  ENABLED

  """
  There is no policy set for organizations in the enterprise.
  """
  NO_POLICY
}

"""
The connection type for OrganizationInvitation.
"""
type EnterpriseFailedInvitationConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseFailedInvitationEdge]

  """
  A list of nodes.
  """
  nodes: [OrganizationInvitation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!

  """
  Identifies the total count of unique users in the connection.
  """
  totalUniqueUserCount: Int!
}

"""
A failed invitation to be a member in an enterprise organization.
"""
type EnterpriseFailedInvitationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: OrganizationInvitation
}

"""
An identity provider configured to provision identities for an enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with read:enterprise or admin:enterprise scope.
"""
type EnterpriseIdentityProvider implements Node {
  """
  The digest algorithm used to sign SAML requests for the identity provider.
  """
  digestMethod: SamlDigestAlgorithm

  """
  The enterprise this identity provider belongs to.
  """
  enterprise: Enterprise

  """
  ExternalIdentities provisioned by this identity provider.
  """
  externalIdentities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter to external identities with the users login
    """
    login: String

    """
    Filter to external identities with valid org membership only
    """
    membersOnly: Boolean

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the EnterpriseIdentityProvider object
  """
  id: ID!

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: X509Certificate

  """
  The Issuer Entity ID for the SAML identity provider.
  """
  issuer: String

  """
  Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable.
  """
  recoveryCodes: [String!]

  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: SamlSignatureAlgorithm

  """
  The URL endpoint for the identity provider's SAML SSO.
  """
  ssoUrl: URI
}

"""
An object that is a member of an enterprise.
"""
union EnterpriseMember = EnterpriseUserAccount | User

"""
The connection type for EnterpriseMember.
"""
type EnterpriseMemberConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseMemberEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseMember]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
A User who is a member of an enterprise through one or more organizations.
"""
type EnterpriseMemberEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseMember
}

"""
Ordering options for enterprise member connections.
"""
input EnterpriseMemberOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprise members by.
  """
  field: EnterpriseMemberOrderField!
}

"""
Properties by which enterprise member connections can be ordered.
"""
enum EnterpriseMemberOrderField {
  """
  Order enterprise members by creation time
  """
  CREATED_AT

  """
  Order enterprise members by login
  """
  LOGIN
}

"""
The possible values for the enterprise members can create repositories setting.
"""
enum EnterpriseMembersCanCreateRepositoriesSettingValue {
  """
  Members will be able to create public and private repositories.
  """
  ALL

  """
  Members will not be able to create public or private repositories.
  """
  DISABLED

  """
  Organization owners choose whether to allow members to create repositories.
  """
  NO_POLICY

  """
  Members will be able to create only private repositories.
  """
  PRIVATE

  """
  Members will be able to create only public repositories.
  """
  PUBLIC
}

"""
The possible values for the members can make purchases setting.
"""
enum EnterpriseMembersCanMakePurchasesSettingValue {
  """
  The setting is disabled for organizations in the enterprise.
  """
  DISABLED

  """
  The setting is enabled for organizations in the enterprise.
  """
  ENABLED
}

"""
The possible values we have for filtering Platform::Objects::User#enterprises.
"""
enum EnterpriseMembershipType {
  """
  Returns all enterprises in which the user is an admin.
  """
  ADMIN

  """
  Returns all enterprises in which the user is a member, admin, or billing manager.
  """
  ALL

  """
  Returns all enterprises in which the user is a billing manager.
  """
  BILLING_MANAGER

  """
  Returns all enterprises in which the user is a member of an org that is owned by the enterprise.
  """
  ORG_MEMBERSHIP
}

"""
Ordering options for enterprises.
"""
input EnterpriseOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprises by.
  """
  field: EnterpriseOrderField!
}

"""
Properties by which enterprise connections can be ordered.
"""
enum EnterpriseOrderField {
  """
  Order enterprises by name
  """
  NAME
}

"""
The connection type for Organization.
"""
type EnterpriseOrganizationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseOrganizationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [Organization]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An enterprise organization that a user is a member of.
"""
type EnterpriseOrganizationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Organization

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for User.
"""
type EnterpriseOutsideCollaboratorConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseOutsideCollaboratorEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
A User who is an outside collaborator of an enterprise through one or more organizations.
"""
type EnterpriseOutsideCollaboratorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User

  """
  The enterprise organization repositories this user is a member of.
  """
  repositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories.
    """
    orderBy: RepositoryOrder = {field: NAME, direction: ASC}
  ): EnterpriseRepositoryInfoConnection!
}

"""
Enterprise information visible to enterprise owners or enterprise owners'
personal access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type EnterpriseOwnerInfo {
  """
  A list of all of the administrators for this enterprise.
  """
  admins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return administrators with this two-factor authentication status.
    """
    hasTwoFactorEnabled: Boolean = null

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for administrators returned from the connection.
    """
    orderBy: EnterpriseMemberOrder = {field: LOGIN, direction: ASC}

    """
    Only return members within the organizations with these logins
    """
    organizationLogins: [String!]

    """
    The search string to look for.
    """
    query: String

    """
    The role to filter by.
    """
    role: EnterpriseAdministratorRole
  ): EnterpriseAdministratorConnection!

  """
  A list of users in the enterprise who currently have two-factor authentication disabled.
  """
  affiliatedUsersWithTwoFactorDisabled(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Whether or not affiliated users with two-factor authentication disabled exist in the enterprise.
  """
  affiliatedUsersWithTwoFactorDisabledExist: Boolean!

  """
  The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise.
  """
  allowPrivateRepositoryForkingSetting: EnterpriseEnabledDisabledSettingValue!

  """
  A list of enterprise organizations configured with the provided private repository forking setting value.
  """
  allowPrivateRepositoryForkingSettingOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for organizations with this setting.
    """
    orderBy: OrganizationOrder = {field: LOGIN, direction: ASC}

    """
    The setting value to find organizations for.
    """
    value: Boolean!
  ): OrganizationConnection!

  """
  The value for the allow private repository forking policy on the enterprise.
  """
  allowPrivateRepositoryForkingSettingPolicyValue: EnterpriseAllowPrivateRepositoryForkingPolicyValue

  """
  The setting value for base repository permissions for organizations in this enterprise.
  """
  defaultRepositoryPermissionSetting: EnterpriseDefaultRepositoryPermissionSettingValue!

  """
  A list of enterprise organizations configured with the provided base repository permission.
  """
  defaultRepositoryPermissionSettingOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for organizations with this setting.
    """
    orderBy: OrganizationOrder = {field: LOGIN, direction: ASC}

    """
    The permission to find organizations for.
    """
    value: DefaultRepositoryPermissionField!
  ): OrganizationConnection!

  """
  A list of domains owned by the enterprise. Visible to enterprise owners or
  enterprise owners' personal access tokens (classic) with admin:enterprise scope.
  """
  domains(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter whether or not the domain is approved.
    """
    isApproved: Boolean = null

    """
    Filter whether or not the domain is verified.
    """
    isVerified: Boolean = null

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for verifiable domains returned.
    """
    orderBy: VerifiableDomainOrder = {field: DOMAIN, direction: ASC}
  ): VerifiableDomainConnection!

  """
  Enterprise Server installations owned by the enterprise.
  """
  enterpriseServerInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Whether or not to only return installations discovered via GitHub Connect.
    """
    connectedOnly: Boolean = false

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Enterprise Server installations returned.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}
  ): EnterpriseServerInstallationConnection!

  """
  A list of failed invitations in the enterprise.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  node: OrganizationInvitation
}

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The host name of the Enterprise Server installation.
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  id: ID!

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The host name of the Enterprise Server installation.
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  node: OrganizationInvitation
}

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
input EnterpriseServerInstallationOrder {
  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The host name of the Enterprise Server installation.
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  id: ID!

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The host name of the Enterprise Server installation.
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  id: ID!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccount object
  """
  id: ID!

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerUserAccount
}

"""
An email belonging to a user account on an Enterprise Server installation.
"""
type EnterpriseServerUserAccountEmail implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The email address.
  """
  email: String!

  """
  The Node ID of the EnterpriseServerUserAccountEmail object
  """
  id: ID!

  """
  Indicates whether this is the primary email of the associated user account.
  """
  isPrimary: Boolean!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerUserAccountsUpload implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The enterprise to which this upload belongs.
  """
  enterprise: Enterprise!

  """
  The Enterprise Server installation for which this upload was generated.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  id: ID!

  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
input EnterpriseServerInstallationOrder {
  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The host name of the Enterprise Server installation.
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  id: ID!

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  enterprise: Enterprise!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  id: ID!

  """
  The host name of the Enterprise Server installation.
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  enterprise: Enterprise!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  id: ID!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

"""
The possible roles for enterprise membership.
"""
enum EnterpriseUserAccountMembershipRole {
  """
  The SAML Identity Provider for the enterprise.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccount object
  """
  OWNER

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  UNAFFILIATED
}

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  id: ID!

  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

"""
The possible roles for enterprise membership.
"""
type EnterpriseServerUserAccountEmail implements Node {
  """
  Identifies the date and time when the object was created.
  """
  OWNER

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  UNAFFILIATED
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type ExternalIdentity implements Node {
  """
  The GUID for this identity
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  id: ID!

  """
  Organization invitation for this SCIM-provisioned external identity
  """
  organizationInvitation: OrganizationInvitation

  """
  The email address.
  """
  email: String!

  """
  The Node ID of the EnterpriseServerUserAccountEmail object
  """
  id: ID!

  """
  Indicates whether this is the primary email of the associated user account.
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  id: ID!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type ExternalIdentity implements Node {
  """
  The role of the user in the enterprise membership.
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  id: ID!

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerUserAccountsUpload implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The enterprise to which this upload belongs.
  """
  enterprise: Enterprise!

  """
  The Enterprise Server installation for which this upload was generated.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  id: ID!

  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  Polar funding platform.
  """
  POLAR

  """
  Tidelift funding platform.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
input EnterpriseServerInstallationOrder {
  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The host name of the Enterprise Server installation.
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  enterprise: Enterprise!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: GistOrder
  ): GistConnection!

  """
  The Node ID of the Gist object
  """
  id: ID!

  """
  Identifies if the gist is a fork.
  """
  isFork: Boolean!

  """
  Whether the gist is public or not.
  """
  isPublic: Boolean!

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  id: ID!

  """
  An identifier for the enterprise user account, a login or email address
  """
  login: String!

  """
  The name of the enterprise user account
  """
  name: String

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  id: ID!

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  enterprise: Enterprise!

"""
The possible roles for enterprise membership.
"""
enum EnterpriseUserAccountMembershipRole {
  """
  The user is a member of an organization in the enterprise.
  """
  MEMBER

  """
  The SAML Identity Provider for the enterprise.
  """
  OWNER

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  UNAFFILIATED
}

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccount object
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  gist: Gist!

  """
  The Node ID of the GistComment object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  Identifies the date and time when the object was last updated.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type ExternalIdentity implements Node {
  """
  The GUID for this identity
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  id: ID!

  """
  Organization invitation for this SCIM-provisioned external identity
  """
  organizationInvitation: OrganizationInvitation

  """
  SAML Identity attributes
  """
  samlIdentity: ExternalIdentitySamlAttributes

  """
  SCIM Identity attributes
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type EnterpriseServerUserAccountEmail implements Node {
  """
  Identifies the date and time when the object was created.
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  id: ID!

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  UNAFFILIATED
}

  """
  The email address.
  """
  email: String!

  """
  The Node ID of the EnterpriseServerUserAccountEmail object
  """
  id: ID!

  """
  Indicates whether this is the primary email of the associated user account.
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  id: ID!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type ExternalIdentity implements Node {
  """
  The role of the user in the enterprise membership.
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  id: ID!

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerUserAccountsUpload implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The enterprise to which this upload belongs.
  """
  enterprise: Enterprise!

  """
  Polar funding platform.
  """
  POLAR

  """
  Tidelift funding platform.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  id: ID!

  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
input EnterpriseServerInstallationOrder {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    orderBy: GistOrder
  ): GistConnection!

  """
  The Node ID of the Gist object
  """
  id: ID!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  Polar funding platform.
  """
  POLAR

  """
  Polar funding platform.
  """
  POLAR

  """
  Polar funding platform.
  """
  POLAR

  """
  Tidelift funding platform.
  """
  TIDELIFT
}

  """
  The host name of the Enterprise Server installation.
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  enterprise: Enterprise!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  id: ID!

  """
  An identifier for the enterprise user account, a login or email address
  """
  login: String!

  """
  The name of the enterprise user account
  """
  name: String

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: GistOrder
  ): GistConnection!

  """
  The Node ID of the Gist object
  """
  id: ID!

  """
  An identifier for the enterprise user account, a login or email address
  """
  login: String!

  """
  The name of the enterprise user account
  """
  name: String

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
The possible roles for enterprise membership.
"""
enum EnterpriseUserAccountMembershipRole {
  """
  The user is a member of an organization in the enterprise.
  """
  MEMBER

  """
  The user is an owner of an organization in the enterprise.
  """
  OWNER

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  gist: Gist!

  """
  The Node ID of the GistComment object
  """
  id: ID!

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  UNAFFILIATED
}

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  UNAFFILIATED
}

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  id: ID!

  """
  The Node ID of the Environment object
  """
  id: ID!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  id: ID!

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  headRefName: String!

  """
  The Node ID of the HeadRefDeletedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefForcePushedEvent object
  """
  id: ID!

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  gist: Gist!

  """
  The Node ID of the GistComment object
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefRestoredEvent object
  """
  id: ID!

  """
  The Node ID of the GistComment object
  """
  gist: Gist!

  """
  The Node ID of the GistComment object
  """
  id: ID!

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  guid: String!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  id: ID!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type EnterpriseServerUserAccountEmail implements Node {
  """
  Identifies the date and time when the object was created.
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  id: ID!

  """
  Polar funding platform.
  """
  POLAR

  """
  Tidelift funding platform.
  """
  OWNER

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  UNAFFILIATED
}

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  id: ID!

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type IpAllowListEntry implements Node {
  """
  A single IP address or range of IP addresses in CIDR notation.
  """
  allowListValue: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the IpAllowListEntry object
  """
  id: ID!

  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

    """
    Ordering options for gists returned from the connection
    """
    orderBy: GistOrder
  ): GistConnection!

  """
  The Node ID of the Gist object
  """
  id: ID!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type Issue implements Assignable & Closable & Comment & Deletable & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & SubscribableThread & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  node: OrganizationInvitation
}

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  gist: Gist!

  """
  The Node ID of the GistComment object
  """
  id: ID!

  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  id: ID!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccount object
  """
  id: ID!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the Issue object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  Branches linked to this issue.
  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

  """
  `true` if the object is locked
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Polar funding platform.
  """
  POLAR

  """
  Tidelift funding platform.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  id: ID!

  """
  The Node ID of the GitObject object
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  id: ID!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  LFX_CROWDFUNDING

  """
  Liberapay funding platform.
  """
  LIBERAPAY

  """
  Open Collective funding platform.
  """
  OPEN_COLLECTIVE

  """
  Otechie funding platform.
  """
  OTECHIE

  """
  Patreon funding platform.
  """
  PATREON

  """
  Polar funding platform.
  """
  POLAR

  """
  Tidelift funding platform.
  """
  TIDELIFT
}

"""
A generic hovercard context with a message and icon
"""
type GenericHovercardContext implements HovercardContext {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!
}

"""
A Gist.
"""
type Gist implements Node & Starrable & UniformResourceLocatable {
  """
  A list of comments associated with the gist
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  id: ID!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: GistOrder
  ): GistConnection!

  """
  Find a project by number.
  """
  enterprise: Enterprise!

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  id: ID!

  """
  An identifier for the enterprise user account, a login or email address
  """
  login: String!

  """
  The name of the enterprise user account
  """
  headRefName: String!

  """
  The Node ID of the HeadRefDeletedEvent object
  """
  id: ID!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
The possible roles for enterprise membership.
"""
input EnterpriseServerInstallationOrder {
  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The user is an owner of an organization in the enterprise.
  """
  OWNER

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefForcePushedEvent object
  """
  id: ID!

  """
  The host name of the Enterprise Server installation.
  """
  OWNER

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  UNAFFILIATED
}

"""
The possible roles for enterprise membership.
"""
type Environment implements Node {
  """
  Identifies the primary key from the database.
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefRestoredEvent object
  """
  id: ID!

  """
  The Node ID of the Environment object
  """
  gist: Gist!

  """
  The Node ID of the GistComment object
  """
  gist: Gist!

  """
  The Node ID of the GistComment object
  """
  headRefName: String!

  """
  The Node ID of the HeadRefDeletedEvent object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  Identifies when the comment was published at.
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefForcePushedEvent object
  """
  id: ID!

  """
  Identifies the date and time when the object was last updated.
  """
  name: String!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The host name of the Enterprise Server installation.
  """
  OWNER

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  UNAFFILIATED
}

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefRestoredEvent object
  """
  id: ID!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  viewerSubscription: SubscriptionState

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  headRefName: String!

  """
  The Node ID of the HeadRefDeletedEvent object
  """
  id: ID!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type ExternalIdentity implements Node {
  """
  The Node ID of the EnterpriseServerInstallation object
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  createdAt: DateTime!

  """
  The Node ID of the IpAllowListEntry object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefForcePushedEvent object
  """
  id: ID!

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefRestoredEvent object
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the IssueComment object
  """
  id: ID!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type ExternalIdentity implements Node {
  """
  The Node ID of the EnterpriseServerUserAccount object
  """
  guid: String!

  """
  Polar funding platform.
  """
  POLAR

  """
  Tidelift funding platform.
  """
  id: ID!

  """
  The Node ID of the ExternalIdentity object
  """
  createdAt: DateTime!

  """
  The Node ID of the IpAllowListEntry object
  """
  id: ID!

"""
An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
"""
type Issue implements Assignable & Closable & Comment & Deletable & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & SubscribableThread & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  The Node ID of the EnterpriseServerUserAccount object
  """
  id: ID!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  headRefName: String!

  """
  The Node ID of the HeadRefDeletedEvent object
  """
  id: ID!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  enterprise: Enterprise!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  createdAt: DateTime!

  """
  The Node ID of the IpAllowListEntry object
  """
  id: ID!

  """
  The Node ID of the HeadRefForcePushedEvent object
  """
  id: ID!

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  githubEnterpriseImporterIpAddresses: [String!]

"""
An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
"""
type Issue implements Assignable & Closable & Comment & Deletable & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & SubscribableThread & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefRestoredEvent object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: GistOrder
  ): GistConnection!

  """
  The Node ID of the Gist object
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  id: ID!

  """
  Identifies if the gist is a fork.
  """
  isFork: Boolean!

  """
  Whether the gist is public or not.
  """
  isPublic: Boolean!

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    The search string to look for.
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the Issue object
  """
  id: ID!

  """
  An identifier for the enterprise user account, a login or email address
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  commitUrl: URI!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  id: ID!

"""
An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
"""
type Issue implements Assignable & Closable & Comment & Deletable & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & SubscribableThread & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  The name of the enterprise user account
  """
  name: String

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  id: ID!

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  Branches linked to this issue.
  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

  """
  `true` if the object is locked
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  email: String!

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The suggested assignees.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The suggested issue body.
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The template filename.
  """
  filename: String!

  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The template name.
  """
  id: ID!

  """
  The Node ID of the Issue object
  """
  id: ID!

"""
The possible roles for enterprise membership.
"""
enum EnterpriseUserAccountMembershipRole {
  """
  The user is a member of an organization in the enterprise.
  """
  MEMBER

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  OWNER

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  UNAFFILIATED
}

"""
Ordering options for Enterprise Server installation connections.
"""
input EnterpriseServerInstallationOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

"""
An environment.
"""
type Environment implements Node {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  gist: Gist!

  """
  Branches linked to this issue.
  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

  """
  `true` if the object is locked
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  createdAt: DateTime!

  """
  The Node ID of the IpAllowListEntry object
  """
  id: ID!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Find a project by number.
  """
  minimizedReason: String

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  Identifies the date and time when the object was last updated.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: GistOrder
  ): GistConnection!

  """
  The Node ID of the Gist object
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefForcePushedEvent object
  """
  id: ID!

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  Polar funding platform.
  """
  POLAR

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  POLAR

  """
  Polar funding platform.
  """
  POLAR

  """
  Tidelift funding platform.
  """
  createdAt: DateTime!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  id: ID!

  """
  An identifier for the enterprise user account, a login or email address
  """
  login: String!

  """
  The name of the enterprise user account
  """
  name: String

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  id: ID!

  """
  An identifier for the enterprise user account, a login or email address
  """
  login: String!

  """
  The name of the enterprise user account
  """
  name: String

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The hovercard information for this issue
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the Issue object
  """
  id: ID!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  id: ID!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  description: String

  """
  The Node ID of the Label object
  """
  id: ID!

"""
An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
"""
type Issue implements Assignable & Closable & Comment & Deletable & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & SubscribableThread & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    orderBy: GistOrder
  ): GistConnection!

  """
  Branches linked to this issue.
  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

  """
  `true` if the object is locked
  """
  id: ID!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccount object
  """
  enterprise: Enterprise!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection
}

"""
Represents a 'labeled' event on a given issue or pull request.
"""
type LabeledEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the LabeledEvent object
  """
  id: ID!

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

  """
  Identifies the viewer's thread subscription form action.
  """
  color: String

  """
  The Node ID of the Language object
  """
  id: ID!

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type ExternalIdentity implements Node {
  """
  The GUID for this identity
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database as a BigInt.
  """
  viewerSubscription: SubscriptionState

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The hovercard information for this issue
  """
  id: ID!

    """
    Ordering options for installations returned from the connection.
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the Issue object
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the IssueComment object
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the IssueComment object
  """
  id: ID!

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the IssueComment object
  """
  hidden: Boolean!

  """
  The Node ID of the License object
  """
  id: ID!

  """
  The Node ID of the Issue object
  """
  id: ID!

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  Find a project by number.
  """
  lastEditedAt: DateTime

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  Returns the pull request associated with the comment, if this comment was made on a
  pull request.
  """
  pullRequest: PullRequest

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

  """
  `true` if the object is locked
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  Find a project by number.
  """
  POLAR

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Autogenerated input type of LinkProjectV2ToRepository
"""
input LinkProjectV2ToRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to link to the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of LinkProjectV2ToTeam
"""
input LinkProjectV2ToTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to link to the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is linked to
  """
  team: Team
}

"""
Autogenerated input type of LinkRepositoryToProject
"""
input LinkRepositoryToProjectInput {
  """
  Identifies if the gist is a fork.
  """
  isFork: Boolean!

  """
  Whether the gist is public or not.
  """
  isPublic: Boolean!

  """
  The gist name.
  """
  name: String!

  """
  The gist owner.
  """
  owner: RepositoryOwner

    """
    The search string to look for.
    """
    query: String

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  closed: Boolean!

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  The Node ID of the LinkedBranch object
  """
  id: ID!

  """
  The branch's ref.
  """
  ref: Ref
}

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  A list of edges.
  """
  edges: [LinkedBranchEdge]

  """
  A list of nodes.
  """
  nodes: [LinkedBranch]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: LinkedBranch
}

"""
Autogenerated input type of LockLockable
"""
input LockLockableInput {
  """
  The Node ID of the EnterpriseUserAccount object
  """
  id: ID!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

  """
  The host name of the Enterprise Server installation.
  """
  node: OrganizationInvitation
}

"""
The possible roles for enterprise membership.
"""
enum EnterpriseUserAccountMembershipRole {
  """
  The Node ID of the EnterpriseServerUserAccountEmail object
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  OWNER

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  UNAFFILIATED
}

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the Issue object
  """
  id: ID!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  gist: Gist!

  """
  The Node ID of the GistComment object
  """
  gist: Gist!

  """
  The Node ID of the GistComment object
  """
  createdAt: DateTime!

  """
  The Node ID of the LockedEvent object
  """
  id: ID!

  """
  The Node ID of the HeadRefForcePushedEvent object
  """
  id: ID!

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  id: ID!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  Branches linked to this issue.
  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The mannequin's email on the source instance.
  """
  email: String

  """
  The Node ID of the Mannequin object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  A list of edges.
  """
  edges: [MannequinEdge]

  """
  A list of nodes.
  """
  nodes: [Mannequin]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Mannequin
}

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order mannequins by.
  """
  field: MannequinOrderField!
}

"""
Properties by which mannequins can be ordered.
"""
enum MannequinOrderField {
  """
  Order mannequins why when they were created.
  """
  CREATED_AT

  """
  Order mannequins alphabetically by their source login.
  """
  LOGIN
}

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
enum EnvironmentOrderField {
  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefRestoredEvent object
  """
  id: ID!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  viewerSubscription: SubscriptionState

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
input MarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to mark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of MarkPullRequestReadyForReview
"""
input MarkPullRequestReadyForReviewInput {
  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  field: EnvironmentOrderField!
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  id: ID!

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the MarkedAsDuplicateEvent object
  """
  id: ID!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
Properties by which environments connections can be ordered
"""
type IssueTemplate {
  """
  The template purpose.
  """
  about: String

  """
  The suggested assignees.
  """
  howItWorks: String

  """
  The Node ID of the MarketplaceCategory object
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The suggested issue body.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The template filename.
  """
  filename: String!

  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The template name.
  """
  name: String!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The suggested assignees.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The suggested issue body.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The template filename.
  """
  filename: String!

  """
  The suggested issue labels
  """
  howItWorksHTML: HTML!

  """
  The Node ID of the MarketplaceListing object
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The template name.
  """
  filename: String!

  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The template name.
  """
  name: String!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The suggested issue body.
  """
  body: String

  """
  The template filename.
  """
  filename: String!

  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The template name.
  """
  name: String!

  """
  Order environments by name.
  """
  viewerSubscription: SubscriptionState

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the IssueComment object
  """
  id: ID!

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  id: ID!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  id: ID!

  """
  Find a project by number.
  """
  pageInfo: PageInfo!

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The Node ID of the IpAllowListEntry object
  """
  id: ID!

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the IssueComment object
  """
  id: ID!

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  direction: OrderDirection!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  hostName: String!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  id: ID!

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  Polar funding platform.
  """
  POLAR

  """
  Polar funding platform.
  """
  POLAR

  """
  Polar funding platform.
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  id: ID!

  """
  The Node ID of the GitObject object
  """
  id: ID!

  """
  Tidelift funding platform.
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  id: ID!

"""
Represents a member feature request notification
"""
type MemberFeatureRequestNotification implements Node {
  """
  Represents member feature request body containing organization name and the number of feature requests
  """
  body: String!

  """
  The Node ID of the MemberFeatureRequestNotification object
  """
  id: ID!

  """
  Represents member feature request notification title
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Entities that have members who can set status messages.
"""
type Issue implements Assignable & Closable & Comment & Deletable & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & SubscribableThread & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  enterprise: Enterprise!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    orderBy: GistOrder
  ): GistConnection!

  """
  The Node ID of the Gist object
  """
  id: ID!

  """
  Identifies if the gist is a fork.
  """
  isFork: Boolean!

  """
  Whether the gist is public or not.
  """
  isPublic: Boolean!

  """
  The gist name.
  """
  name: String!

  """
  The gist owner.
  """
  owner: RepositoryOwner

  """
  The Node ID of the EnterpriseUserAccount object
  """
  id: ID!

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  description: String

  """
  The Node ID of the Label object
  """
  description: String

  """
  The Node ID of the Label object
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposClearAuditEntry object
  """
  id: ID!

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  headRefName: String!

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    last: Int
  ): UserContentEditConnection

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!

  """
  The Node ID of the Issue object
  """
  id: ID!

  """
  The Node ID of the EnterpriseServerUserAccount object
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  viewerSubscription: SubscriptionState

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
The possible roles for enterprise membership.
"""
type EnterpriseServerUserAccountEmail implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposDisableAuditEntry object
  """
  id: ID!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The actor who edited the comment.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the IssueComment object
  """
  description: String

  """
  The Node ID of the Label object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  Identifies the issue associated with the comment.
  """
  issue: Issue!

  """
  The suggested assignees.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The suggested assignees.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the LabeledEvent object
  """
  id: ID!

  """
  The suggested issue body.
  """
  createdAt: DateTime!

  """
  The Node ID of the LabeledEvent object
  """
  createdAt: DateTime!

  """
  The Node ID of the LabeledEvent object
  """
  color: String

  """
  The Node ID of the Language object
  """
  id: ID!

  """
  The template filename.
  """
  filename: String!

  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The template filename.
  """
  color: String

  """
  The Node ID of the Language object
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposEnableAuditEntry object
  """
  id: ID!

  """
  The Node ID of the Language object
  """
  id: ID!

  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The template name.
  """
  minimizedReason: String

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  Returns the pull request associated with the comment, if this comment was made on a
  pull request.
  """
  pullRequest: PullRequest

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

  """
  `true` if the object is locked
  """
  databaseId: Int

  """
  The Node ID of the MentionedEvent object
  """
  id: ID!

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  hidden: Boolean!

  """
  The Node ID of the License object
  """
  id: ID!

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  UNAFFILIATED
}

  """
  The email address.
  """
  email: String!

  """
  The Node ID of the EnterpriseServerUserAccountEmail object
  """
  gist: Gist!

  """
  The Node ID of the GistComment object
  """
  gitHubServicesSha: GitObjectID!

  """
  Find a project by number.
  """
  hookIpAddresses: [String!]

  """
  A list of projects under the owner.
  """
  hidden: Boolean!

"""
The possible default commit messages for merges.
"""
enum MergeCommitMessage {
  """
  Default to a blank commit message.
  """
  BLANK

  """
  Default to the pull request's body.
  """
  PR_BODY

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
The possible default commit titles for merges.
"""
enum MergeCommitTitle {
  """
  Default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
  """
  MERGE_MESSAGE

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
Autogenerated input type of MergePullRequest
"""
input MergePullRequestInput {
  """
  The Node ID of the License object
  """
  id: ID!

  """
  The Node ID of the License object
  """
  id: ID!

  """
  Indicates whether this is the primary email of the associated user account.
  """
  databaseId: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  id: ID!

  """
  The Node ID of the Environment object
  """
  commitUrl: URI!

  """
  The suggested assignees.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The suggested issue body.
  """
  createdAt: DateTime!

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  """
  The configuration for this merge queue
  """
  configuration: MergeQueueConfiguration

  """
  The entries in the queue
  """
  entries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeQueueEntryConnection

  """
  The Node ID of the MergeQueue object
  """
  id: ID!

  """
  The estimated time in seconds until a newly added entry would be merged
  """
  nextEntryEstimatedTimeToMerge: Int

  """
  The repository this merge queue belongs to
  """
  repository: Repository

  """
  The HTTP path for this merge queue
  """
  resourcePath: URI!

  """
  The HTTP URL for this merge queue
  """
  url: URI!
}

"""
Configuration for a MergeQueue
"""
type MergeQueueConfiguration {
  """
  The amount of time in minutes to wait for a check response before considering it a failure.
  """
  checkResponseTimeout: Int

  """
  The maximum number of entries to build at once.
  """
  maximumEntriesToBuild: Int

  """
  The maximum number of entries to merge at once.
  """
  maximumEntriesToMerge: Int

  """
  The merge method to use for this queue.
  """
  mergeMethod: PullRequestMergeMethod

  """
  The strategy to use when merging entries.
  """
  mergingStrategy: MergeQueueMergingStrategy

  """
  The minimum number of entries required to merge at once.
  """
  minimumEntriesToMerge: Int

  """
  The amount of time in minutes to wait before ignoring the minumum number of
  entries in the queue requirement and merging a collection of entries
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Entries in a MergeQueue
"""
type MergeQueueEntry implements Node {
  """
  The base commit for this entry
  """
  baseCommit: Commit

  """
  The date and time this entry was added to the merge queue
  """
  enqueuedAt: DateTime!

  """
  The actor that enqueued this entry
  """
  enqueuer: Actor!

  """
  The estimated time in seconds until this entry will be merged
  """
  estimatedTimeToMerge: Int

  """
  The head commit for this entry
  """
  headCommit: Commit

  """
  The Node ID of the MergeQueueEntry object
  """
  id: ID!

  """
  Whether this pull request should jump the queue
  """
  jump: Boolean!

  """
  The merge queue that this entry belongs to
  """
  mergeQueue: MergeQueue

  """
  The position of this entry in the queue
  """
  position: Int!

  """
  The pull request that will be added to a merge group
  """
  pullRequest: PullRequest

  """
  Does this pull request need to be deployed on its own
  """
  solo: Boolean!

  """
  The state of this entry in the queue
  """
  state: MergeQueueEntryState!
}

"""
The connection type for MergeQueueEntry.
"""
type MergeQueueEntryConnection {
  """
  A list of edges.
  """
  edges: [MergeQueueEntryEdge]

  """
  A list of nodes.
  """
  nodes: [MergeQueueEntry]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MergeQueueEntryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MergeQueueEntry
}

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  The entry is currently waiting for checks to pass.
  """
  AWAITING_CHECKS

  """
  The entry is currently locked.
  """
  LOCKED

  """
  The entry is currently mergeable.
  """
  MERGEABLE

  """
  The entry is currently queued.
  """
  QUEUED

  """
  The entry is currently unmergeable.
  """
  UNMERGEABLE
}

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  Entries only allowed to merge if they are passing.
  """
  ALLGREEN

  """
  Failing Entires are allowed to merge if they are with a passing entry.
  """
  HEADGREEN
}

"""
Detailed status information about a pull request merge.
"""
enum MergeStateStatus {
  """
  The Node ID of the LabeledEvent object
  """
  id: ID!

  """
  The template filename.
  """
  filename: String!

  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

"""
Autogenerated input type of LinkProjectV2ToRepository
"""
input LinkProjectV2ToRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to link to the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of LinkProjectV2ToTeam
"""
input LinkProjectV2ToTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to link to the project.
  """
  createdAt: DateTime!

  """
  The Node ID of the MergedEvent object
  """
  id: ID!

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is linked to
  """
  team: Team
}

"""
Autogenerated input type of LinkRepositoryToProject
"""
input LinkProjectV2ToRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to link to the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Represents a GitHub Enterprise Importer (GEI) migration.
"""
type LinkProjectV2ToRepositoryPayload {
  """
  The migration flag to continue on error.
  """
  clientMutationId: String

  """
  The repository the project is linked to.
  """
  repository: Repository
}

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the Migration object
  """
  id: ID!

  """
  The branch's ref.
  """
  ref: Ref
}

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  The migration source.
  """
  edges: [LinkedBranchEdge]

  """
  A list of nodes.
  """
  nodes: [LinkedBranch]

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  pageInfo: PageInfo!

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
A GitHub Enterprise Importer (GEI) migration source.
"""
type MigrationSource implements Node {
  """
  The Node ID of the MigrationSource object
  """
  id: ID!

  """
  The migration source name.
  """
  name: String!

  """
  The migration source type.
  """
  cursor: String!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  node: LinkedBranch
}

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
input LinkProjectV2ToTeamInput {
  """
  A Bitbucket Server migration source.
  """
  BITBUCKET_SERVER

  """
  A GitHub Migration API source.
  """
  GITHUB_ARCHIVE
}

"""
The GitHub Enterprise Importer (GEI) migration state.
"""
enum MigrationState {
  """
  The migration has failed.
  """
  FAILED

  """
  The migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The migration is in progress.
  """
  clientMutationId: String

  """
  The migration has not started.
  """
  team: Team
}

"""
Autogenerated input type of LinkRepositoryToProject
"""
input LinkProjectV2ToRepositoryInput {
  """
  The migration needs to have its credentials validated.
  """
  clientMutationId: String

  """
  The migration has been queued.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The migration has succeeded.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  clientMutationId: String

  """
  The repository the project is linked to.
  """
  repository: Repository
}

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  The Node ID of the LinkedBranch object
  """
  createdAt: DateTime!

  """
  The Node ID of the LockedEvent object
  """
  id: ID!

  """
  The branch's ref.
  """
  dueOn: DateTime

  """
  The Node ID of the Milestone object
  """
  id: ID!

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  A list of edges.
  """
  edges: [LinkedBranchEdge]

  """
  A list of nodes.
  """
  nodes: [LinkedBranch]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  A cursor for use in pagination.
  """
  email: String

  """
  The Node ID of the Mannequin object
  """
  id: ID!

  """
  The item at the end of the edge.
  """
  node: LinkedBranch
}

"""
Autogenerated input type of LockLockable
"""
input LinkProjectV2ToTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to link to the project.
  """
  url: URI!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!
}

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  A list of edges.
  """
  edges: [MannequinEdge]

  """
  A list of nodes.
  """
  nodes: [Mannequin]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Mannequin
}

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order mannequins by.
  """
  field: MannequinOrderField!
}

"""
Properties by which mannequins can be ordered.
"""
enum MannequinOrderField {
  """
  Order mannequins why when they were created.
  """
  CREATED_AT

  """
  Order mannequins alphabetically by their source login.
  """
  LOGIN
}

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
type LinkProjectV2ToTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is linked to
  """
  team: Team
}

"""
Autogenerated input type of LinkRepositoryToProject
"""
input LinkRepositoryToProjectInput {
  """
  The template name.
  """
  color: String

  """
  The Node ID of the Language object
  """
  id: ID!

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  createdAt: DateTime!

  """
  The Node ID of the MilestonedEvent object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  createdAt: DateTime!

  """
  The Node ID of the LockedEvent object
  """
  id: ID!

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  id: ID!

  """
  The branch's ref.
  """
  ref: Ref
}

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
input MarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to mark as a template.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of MarkPullRequestReadyForReview
"""
type LinkedBranchConnection {
  """
  A list of edges.
  """
  edges: [LinkedBranchEdge]

  """
  A list of nodes.
  """
  nodes: [LinkedBranch]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  A cursor for use in pagination.
  """
  email: String

  """
  The Node ID of the Mannequin object
  """
  id: ID!

  """
  The item at the end of the edge.
  """
  node: LinkedBranch
}

"""
Autogenerated input type of LockLockable
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  A list of edges.
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the MarkedAsDuplicateEvent object
  """
  id: ID!

  """
  A list of nodes.
  """
  nodes: [Mannequin]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  howItWorks: String

  """
  The Node ID of the MarketplaceCategory object
  """
  databaseId: Int

  """
  The Node ID of the MovedColumnsInProjectEvent object
  """
  id: ID!

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order mannequins by.
  """
  field: MannequinOrderField!
}

"""
Properties by which mannequins can be ordered.
"""
enum MannequinOrderField {
  """
  Order mannequins why when they were created.
  """
  CREATED_AT

  """
  Order mannequins alphabetically by their source login.
  """
  LOGIN
}

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  Abort a repository migration queued or in progress.
  """
  abortRepositoryMigration(
    """
    Parameters for AbortRepositoryMigration
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

  """
  Accepts a pending invitation for a user to become an administrator of an enterprise.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type ExternalIdentity implements Node {
  """
  The GUID for this identity
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  hidden: Boolean!

  """
  The Node ID of the License object
  """
  id: ID!

  """
  Organization invitation for this SCIM-provisioned external identity
  """
  organizationInvitation: OrganizationInvitation

  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  Adds enterprise members to an organization within the enterprise.
  """
  addEnterpriseOrganizationMember(
    """
    Parameters for AddEnterpriseOrganizationMember
    """
    input: AddEnterpriseOrganizationMemberInput!
  ): AddEnterpriseOrganizationMemberPayload

  """
  Adds a support entitlement to an enterprise member.
  """
  headRefName: String!

  """
  The Node ID of the HeadRefDeletedEvent object
  """
  createdAt: DateTime!

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
input MarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to mark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  addProjectV2DraftIssue(
    """
    Parameters for AddProjectV2DraftIssue
    """
    input: AddProjectV2DraftIssueInput!
  ): AddProjectV2DraftIssuePayload

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type ExternalIdentity implements Node {
  """
  The role of the user in the enterprise membership.
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  howItWorksHTML: HTML!

  """
  The Node ID of the MarketplaceListing object
  """
  id: ID!

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  Adds a reply to an existing Pull Request Review Thread.
  """
  addPullRequestReviewThreadReply(
    """
    Parameters for AddPullRequestReviewThreadReply
    """
    input: AddPullRequestReviewThreadReplyInput!
  ): AddPullRequestReviewThreadReplyPayload

  """
  Adds a reaction to a subject.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefForcePushedEvent object
  """
  email: String

  """
  The Node ID of the Mannequin object
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the MarkedAsDuplicateEvent object
  """
  id: ID!

  """
  The Node ID of the HeadRefForcePushedEvent object
  """
  id: ID!

  """
  Archives a ProjectV2Item
  """
  archiveProjectV2Item(
    """
    Parameters for ArchiveProjectV2Item
    """
    input: ArchiveProjectV2ItemInput!
  ): ArchiveProjectV2ItemPayload

  """
  Marks a repository as archived.
  """
  viewerCanClose: Boolean!

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  A list of edges.
  """
  edges: [MannequinEdge]

  """
  A list of nodes.
  """
  howItWorks: String

  """
  The Node ID of the MarketplaceCategory object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  This mutation clears the value of a field for an item in a Project. Currently
  only text, number, date, assignees, labels, single-select, iteration and
  milestone fields are supported.
  """
  clearProjectV2ItemFieldValue(
    """
    Parameters for ClearProjectV2ItemFieldValue
    """
    input: ClearProjectV2ItemFieldValueInput!
  ): ClearProjectV2ItemFieldValuePayload

  """
  Creates a new project by cloning configuration from an existing project.
  """
  totalCount: Int!
}

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  Close a discussion.
  """
  closeDiscussion(
    """
    Parameters for CloseDiscussion
    """
    input: CloseDiscussionInput!
  ): CloseDiscussionPayload

  """
  Close an issue.
  """
  node: Mannequin
}

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order mannequins by.
  """
  field: MannequinOrderField!
}

"""
Properties by which mannequins can be ordered.
"""
enum MannequinOrderField {
  """
  Order mannequins why when they were created.
  """
  CREATED_AT

  """
  Copy a project.
  """
  copyProjectV2(
    """
    Parameters for CopyProjectV2
    """
    input: CopyProjectV2Input!
  ): CopyProjectV2Payload

  """
  Invites a user to claim reattributable data
  """
  createAttributionInvitation(
    """
    Parameters for CreateAttributionInvitation
    """
    input: CreateAttributionInvitationInput!
  ): CreateAttributionInvitationPayload

  """
  Create a new branch protection rule
  """
  LOGIN
}

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
input LinkProjectV2ToRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to link to the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of LinkProjectV2ToTeam
"""
input LinkProjectV2ToTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Creates an organization as part of an enterprise account. A personal access
  token used to create an organization is implicitly permitted to update the
  organization it created, if the organization is part of an enterprise that has
  SAML enabled or uses Enterprise Managed Users. If the organization is not part
  of such an enterprise, and instead has SAML enabled for it individually, the
  token will then require SAML authorization to continue working against that organization.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to link to the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is linked to
  """
  team: Team
}

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
input MarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Create a branch linked to an issue.
  """
  createLinkedBranch(
    """
    Parameters for CreateLinkedBranch
    """
    input: CreateLinkedBranchInput!
  ): CreateLinkedBranchPayload

  """
  Creates a GitHub Enterprise Importer (GEI) migration source.
  """
  howItWorksHTML: HTML!

  """
  The Node ID of the MarketplaceListing object
  """
  id: ID!

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Create a new project field.
  """
  createProjectV2Field(
    """
    Parameters for CreateProjectV2Field
    """
    input: CreateProjectV2FieldInput!
  ): CreateProjectV2FieldPayload

  """
  Create a new pull request
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of MarkPullRequestReadyForReview
"""
input LinkRepositoryToProjectInput {
  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  POLAR

  """
  Create a repository ruleset
  """
  createRepositoryRuleset(
    """
    Parameters for CreateRepositoryRuleset
    """
    input: CreateRepositoryRulesetInput!
  ): CreateRepositoryRulesetPayload

  """
  Create a GitHub Sponsors profile to allow others to sponsor you or your organization.
  """
  createSponsorsListing(
    """
    Parameters for CreateSponsorsListing
    """
    input: CreateSponsorsListingInput!
  ): CreateSponsorsListingPayload

  """
  Create a new payment tier for your GitHub Sponsors profile.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  POLAR

  """
  Make many one-time sponsorships for different sponsorable users or
  organizations at once. Can only sponsor those who have a public GitHub
  Sponsors profile.
  """
  createSponsorships(
    """
    Parameters for CreateSponsorships
    """
    input: CreateSponsorshipsInput!
  ): CreateSponsorshipsPayload

  """
  Creates a new team discussion.
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefRestoredEvent object
  """
  id: ID!

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  Creates a new user list.
  """
  createUserList(
    """
    Parameters for CreateUserList
    """
    input: CreateUserListInput!
  ): CreateUserListPayload

  """
  Rejects a suggested topic for the repository.
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the MarkedAsDuplicateEvent object
  """
  id: ID!

  """
  The branch's ref.
  """
  ref: Ref
}

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  A list of edges.
  """
  edges: [LinkedBranchEdge]

  """
  A list of nodes.
  """
  howItWorks: String

  """
  The Node ID of the MarketplaceCategory object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: LinkedBranch
}

"""
Represents a member feature request notification
"""
type MemberFeatureRequestNotification implements Node {
  """
  Unlink a branch from an issue.
  """
  deleteLinkedBranch(
    """
    Parameters for DeleteLinkedBranch
    """
    input: DeleteLinkedBranchInput!
  ): DeleteLinkedBranchPayload

  """
  Delete a package version.
  """
  body: String!

  """
  The Node ID of the MemberFeatureRequestNotification object
  """
  id: ID!

  """
  Represents member feature request notification title
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Entities that have members who can set status messages.
"""
input LockLockableInput {
  """
  Delete a project.
  """
  deleteProjectV2(
    """
    Parameters for DeleteProjectV2
    """
    input: DeleteProjectV2Input!
  ): DeleteProjectV2Payload

  """
  Delete a project field.
  """
  deleteProjectV2Field(
    """
    Parameters for DeleteProjectV2Field
    """
    input: DeleteProjectV2FieldInput!
  ): DeleteProjectV2FieldPayload

  """
  The Node ID of the HeadRefRestoredEvent object
  """
  viewerSubscription: SubscriptionState

  """
  Deletes a project workflow.
  """
  deleteProjectV2Workflow(
    """
    Parameters for DeleteProjectV2Workflow
    """
    input: DeleteProjectV2WorkflowInput!
  ): DeleteProjectV2WorkflowPayload

  """
  Deletes a pull request review.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

  """
  The Node ID of the HeadRefRestoredEvent object
  """
  id: ID!

  """
  Delete a repository ruleset
  """
  deleteRepositoryRuleset(
    """
    Parameters for DeleteRepositoryRuleset
    """
    input: DeleteRepositoryRulesetInput!
  ): DeleteRepositoryRulesetPayload

  """
  Deletes a team discussion.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  Deletes a user list.
  """
  deleteUserList(
    """
    Parameters for DeleteUserList
    """
    input: DeleteUserListInput!
  ): DeleteUserListPayload

  """
  Deletes a verifiable domain.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  Remove a pull request from the merge queue.
  """
  dequeuePullRequest(
    """
    Parameters for DequeuePullRequest
    """
    input: DequeuePullRequestInput!
  ): DequeuePullRequestPayload

  """
  Disable auto merge on the given pull request
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  description: String

  """
  The Node ID of the Label object
  """
  id: ID!

"""
A user accounts upload from an Enterprise Server installation.
"""
type EnterpriseServerUserAccountsUpload implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Add a pull request to the merge queue.
  """
  enqueuePullRequest(
    """
    Parameters for EnqueuePullRequest
    """
    input: EnqueuePullRequestInput!
  ): EnqueuePullRequestPayload

  """
  Follow an organization.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposClearAuditEntry object
  """
  id: ID!

  """
  The suggested assignees.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Links a project to a repository.
  """
  linkProjectV2ToRepository(
    """
    Parameters for LinkProjectV2ToRepository
    """
    input: LinkProjectV2ToRepositoryInput!
  ): LinkProjectV2ToRepositoryPayload

  """
  Links a project to a team.
  """
  linkProjectV2ToTeam(
    """
    Parameters for LinkProjectV2ToTeam
    """
    input: LinkProjectV2ToTeamInput!
  ): LinkProjectV2ToTeamPayload

  """
  Creates a repository link for a project.
  """
  enterprise: Enterprise!

  """
  The template filename.
  """
  filename: String!

  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Mark a project as a template. Note that only projects which are owned by an Organization can be marked as a template.
  """
  markProjectV2AsTemplate(
    """
    Parameters for MarkProjectV2AsTemplate
    """
    input: MarkProjectV2AsTemplateInput!
  ): MarkProjectV2AsTemplatePayload

  """
  Marks a pull request ready for review.
  """
  markPullRequestReadyForReview(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The template name.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  howItWorksHTML: HTML!

  """
  The Node ID of the MarketplaceListing object
  """
  id: ID!

  """
  The Node ID of the IssueComment object
  """
  email: String

  """
  Publish an existing sponsorship tier that is currently still a draft to a GitHub Sponsors profile.
  """
  publishSponsorsTier(
    """
    Parameters for PublishSponsorsTier
    """
    input: PublishSponsorsTierInput!
  ): PublishSponsorsTierPayload

  """
  Regenerates the identity provider recovery codes for an enterprise
  """
  id: ID!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  createdAt: DateTime!

  """
  The Node ID of the IpAllowListEntry object
  """
  id: ID!

  """
  The name of the file uploaded.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  headRefName: String!

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  A list of edges.
  """
  enterpriseUrl: URI

  """
  Removes a user from all organizations within the enterprise
  """
  removeEnterpriseMember(
    """
    Parameters for RemoveEnterpriseMember
    """
    input: RemoveEnterpriseMemberInput!
  ): RemoveEnterpriseMemberPayload

  """
  Removes an organization from the enterprise
  """
  id: ID!

  """
  A list of nodes.
  """
  nodes: [Mannequin]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Mannequin
}

"""
Represents a member feature request notification
"""
type MemberFeatureRequestNotification implements Node {
  """
  Represents member feature request body containing organization name and the number of feature requests
  """
  body: String!

  """
  Reopen a discussion.
  """
  reopenDiscussion(
    """
    Parameters for ReopenDiscussion
    """
    input: ReopenDiscussionInput!
  ): ReopenDiscussionPayload

  """
  Reopen a issue.
  """
  id: ID!

  """
  Represents member feature request notification title
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Entities that have members who can set status messages.
"""
input MannequinOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order mannequins by.
  """
  field: MannequinOrderField!
}

"""
Properties by which mannequins can be ordered.
"""
enum MannequinOrderField {
  """
  Retire a published payment tier from your GitHub Sponsors profile so it cannot be used to start new sponsorships.
  """
  retireSponsorsTier(
    """
    Parameters for RetireSponsorsTier
    """
    input: RetireSponsorsTierInput!
  ): RetireSponsorsTierPayload

  """
  Create a pull request that reverts the changes from a merged pull request.
  """
  revertPullRequest(
    """
    Parameters for RevertPullRequest
    """
    input: RevertPullRequestInput!
  ): RevertPullRequestPayload

  """
  Revoke the migrator role to a user for all organizations under an enterprise account.
  """
  CREATED_AT

  """
  Order mannequins alphabetically by their source login.
  """
  LOGIN
}

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
input MarkDiscussionCommentAsAnswerInput {
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  id: ID!

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  createdAt: DateTime!

  """
  Starts a GitHub Enterprise Importer organization migration.
  """
  startOrganizationMigration(
    """
    Parameters for StartOrganizationMigration
    """
    input: StartOrganizationMigrationInput!
  ): StartOrganizationMigrationPayload

  """
  Starts a GitHub Enterprise Importer (GEI) repository migration.
  """
  description: String

  """
  The Node ID of the Label object
  """
  enterpriseUrl: URI

  """
  Transfer an organization from one enterprise to another enterprise.
  """
  transferEnterpriseOrganization(
    """
    Parameters for TransferEnterpriseOrganization
    """
    input: TransferEnterpriseOrganizationInput!
  ): TransferEnterpriseOrganizationPayload

  """
  Transfer an issue to a different repository
  """
  id: ID!

  """
  Unarchives a ProjectV2Item
  """
  unarchiveProjectV2Item(
    """
    Parameters for UnarchiveProjectV2Item
    """
    input: UnarchiveProjectV2ItemInput!
  ): UnarchiveProjectV2ItemPayload

  """
  Unarchives a repository.
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  headRefName: String!

  """
  The Node ID of the HeadRefDeletedEvent object
  """
  headRefName: String!

  """
  Unlinks a project from a repository.
  """
  unlinkProjectV2FromRepository(
    """
    Parameters for UnlinkProjectV2FromRepository
    """
    input: UnlinkProjectV2FromRepositoryInput!
  ): UnlinkProjectV2FromRepositoryPayload

  """
  Unlinks a project to a team.
  """
  unlinkProjectV2FromTeam(
    """
    Parameters for UnlinkProjectV2FromTeam
    """
    input: UnlinkProjectV2FromTeamInput!
  ): UnlinkProjectV2FromTeamPayload

  """
  Deletes a repository link from a project.
  """
  id: ID!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
input MarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to mark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Unmark a project as a template.
  """
  unmarkProjectV2AsTemplate(
    """
    Parameters for UnmarkProjectV2AsTemplate
    """
    input: UnmarkProjectV2AsTemplateInput!
  ): UnmarkProjectV2AsTemplatePayload

  """
  Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of MarkPullRequestReadyForReview
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

    """
    Ordering options for gists returned from the connection
    """
    orderBy: GistOrder
  ): GistConnection!

  """
  Unsubscribes from notifications
  """
  unsubscribeFromNotifications(
    """
    Parameters for UnsubscribeFromNotifications
    """
    input: UnsubscribeFromNotificationsInput!
  ): UnsubscribeFromNotificationsPayload

  """
  Update a branch protection rule
  """
  createdAt: DateTime!

  """
  The Node ID of the IpAllowListEntry object
  """
  databaseId: Int

  """
  The Node ID of the MentionedEvent object
  """
  id: ID!

  """
  The Node ID of the HeadRefForcePushedEvent object
  """
  createdAt: DateTime!

  """
  The Node ID of the LabeledEvent object
  """
  id: ID!

  """
  The Node ID of the IpAllowListEntry object
  """
  id: ID!

  """
  The Node ID of the HeadRefForcePushedEvent object
  """
  id: ID!

  """
  The Node ID of the HeadRefRestoredEvent object
  """
  color: String

  """
  The Node ID of the Language object
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the MarkedAsDuplicateEvent object
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposDisableAuditEntry object
  """
  id: ID!

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The possible default commit messages for merges.
"""
enum MergeCommitMessage {
  """
  Default to a blank commit message.
  """
  BLANK

  """
  Sets whether or not an organization owner can make purchases.
  """
  PR_BODY

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
The possible default commit titles for merges.
"""
enum MergeCommitTitle {
  """
  Default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
  """
  MERGE_MESSAGE

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
Autogenerated input type of MergePullRequest
"""
type HeadRefRestoredEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the IpAllowListEntry object
  """
  howItWorks: String

  """
  The Node ID of the MarketplaceCategory object
  """
  id: ID!

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  CREATED_AT
}

"""
Synchronization state of the Enterprise Server user accounts upload
"""
enum EnterpriseServerUserAccountsUploadSyncState {
  """
  The synchronization of the upload failed.
  """
  FAILURE

  """
  The synchronization of the upload is pending.
  """
  PENDING

  """
  The synchronization of the upload succeeded.
  """
  SUCCESS
}

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  """
  The configuration for this merge queue
  """
  configuration: MergeQueueConfiguration

  """
  The entries in the queue
  """
  entries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
  """
  updateOrganizationWebCommitSignoffSetting(
    """
    Parameters for UpdateOrganizationWebCommitSignoffSetting
    """
    input: UpdateOrganizationWebCommitSignoffSettingInput!
  ): UpdateOrganizationWebCommitSignoffSettingPayload

  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  updatePatreonSponsorability(
    """
    Parameters for UpdatePatreonSponsorability
    """
    input: UpdatePatreonSponsorabilityInput!
  ): UpdatePatreonSponsorabilityPayload

  """
  Updates an existing project.
  """
  updateProject(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeQueueEntryConnection

  """
  The Node ID of the MergeQueue object
  """
  id: ID!

  """
  Updates an existing project.
  """
  updateProjectV2(
    """
    Parameters for UpdateProjectV2
    """
    input: UpdateProjectV2Input!
  ): UpdateProjectV2Payload

  """
  Update the collaborators on a team or a project
  """
  updateProjectV2Collaborators(
    """
    Parameters for UpdateProjectV2Collaborators
    """
    input: UpdateProjectV2CollaboratorsInput!
  ): UpdateProjectV2CollaboratorsPayload

"""
Configuration for a MergeQueue
"""
type MergeQueueConfiguration {
  """
  The amount of time in minutes to wait for a check response before considering it a failure.
  """
  checkResponseTimeout: Int

  """
  The maximum number of entries to build at once.
  """
  maximumEntriesToBuild: Int

  """
  The maximum number of entries to merge at once.
  """
  maximumEntriesToMerge: Int

  """
  The merge method to use for this queue.
  """
  mergeMethod: PullRequestMergeMethod

  """
  The strategy to use when merging entries.
  """
  mergingStrategy: MergeQueueMergingStrategy

  """
  The minimum number of entries required to merge at once.
  """
  minimumEntriesToMerge: Int

  """
  The amount of time in minutes to wait before ignoring the minumum number of
  entries in the queue requirement and merging a collection of entries
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Entries in a MergeQueue
"""
type MergeQueueEntry implements Node {
  """
  The base commit for this entry
  """
  baseCommit: Commit

  """
  The date and time this entry was added to the merge queue
  """
  enqueuedAt: DateTime!

  """
  The actor that enqueued this entry
  """
  enqueuer: Actor!

  """
  Update a repository ruleset
  """
  updateRepositoryRuleset(
    """
    Parameters for UpdateRepositoryRuleset
    """
    input: UpdateRepositoryRulesetInput!
  ): UpdateRepositoryRulesetPayload

  """
  Sets whether contributors are required to sign off on web-based commits for a repository.
  """
  updateRepositoryWebCommitSignoffSetting(
    """
    Parameters for UpdateRepositoryWebCommitSignoffSetting
    """
    input: UpdateRepositoryWebCommitSignoffSettingInput!
  ): UpdateRepositoryWebCommitSignoffSettingPayload

  """
  Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
  """
  estimatedTimeToMerge: Int

  """
  The head commit for this entry
  """
  headCommit: Commit

  """
  The Node ID of the MergeQueueEntry object
  """
  id: ID!

  """
  Whether this pull request should jump the queue
  """
  jump: Boolean!

  """
  The merge queue that this entry belongs to
  """
  mergeQueue: MergeQueue

  """
  The position of this entry in the queue
  """
  position: Int!

  """
  The pull request that will be added to a merge group
  """
  pullRequest: PullRequest

  """
  Updates an existing user list.
  """
  updateUserList(
    """
    Parameters for UpdateUserList
    """
    input: UpdateUserListInput!
  ): UpdateUserListPayload

  """
  Updates which of the viewer's lists an item belongs to
  """
  updateUserListsForItem(
    """
    Parameters for UpdateUserListsForItem
    """
    input: UpdateUserListsForItemInput!
  ): UpdateUserListsForItemPayload

  """
  Verify that a verifiable domain has the expected DNS record.
  """
  solo: Boolean!

  """
  The state of this entry in the queue
  """
  state: MergeQueueEntryState!
}

"""
The connection type for MergeQueueEntry.
"""
type MergeQueueEntryConnection {
  """
  A list of edges.
  """
  edges: [MergeQueueEntryEdge]

  """
  A list of nodes.
  """
  nodes: [MergeQueueEntry]

"""
An OIDC identity provider configured to provision identities for an enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with read:enterprise or admin:enterprise scope.
"""
type OIDCProvider implements Node {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  externalIdentities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter to external identities with the users login
    """
    login: String

    """
    Filter to external identities with valid org membership only
    """
    membersOnly: Boolean

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OIDCProvider object
  """
  id: ID!

"""
An edge in a connection.
"""
type MergeQueueEntryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MergeQueueEntry
}

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  The entry is currently waiting for checks to pass.
  """
  AWAITING_CHECKS

  """
  The name of the OAuth application.
  """
  LOCKED

  """
  The HTTP path for the OAuth application
  """
  MERGEABLE

  """
  The HTTP URL for the OAuth application
  """
  QUEUED

  """
  The entry is currently unmergeable.
  """
  UNMERGEABLE
}

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  Entries only allowed to merge if they are passing.
  """
  ALLGREEN

  """
  Failing Entires are allowed to merge if they are with a passing entry.
  """
  HEADGREEN
}

"""
Detailed status information about a pull request merge.
"""
type MemberFeatureRequestNotification implements Node {
  """
  Represents member feature request body containing organization name and the number of feature requests
  """
  body: String!

  """
  The Node ID of the MemberFeatureRequestNotification object
  """
  id: ID!

  """
  Represents member feature request notification title
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Entities that have members who can set status messages.
"""
type EnterpriseUserAccount implements Actor & Node {
  """
  A URL pointing to the enterprise user account's public avatar.
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The application URL of the OAuth application.
  """
  createdAt: DateTime!

  """
  The callback URL of the OAuth application.
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OauthApplicationCreateAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  id: ID!

"""
An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
"""
type Issue implements Assignable & Closable & Comment & Deletable & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & SubscribableThread & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  The HTTP path for the OAuth application
  """
  hidden: Boolean!

  """
  The HTTP URL for the OAuth application
  """
  id: ID!

  """
  The Node ID of the License object
  """
  id: ID!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  createdAt: DateTime!

  """
  The rate limit of the OAuth application.
  """
  id: ID!

  """
  The state of the OAuth application.
  """
  createdAt: DateTime!

  """
  The Node ID of the LabeledEvent object
  """
  id: ID!

  """
  The name of the enterprise user account
  """
  name: String

  """
  A list of Enterprise Server installations this user is a member of.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  color: String

"""
The state of an OAuth application when it was created.
"""
enum OauthApplicationCreateAuditEntryState {
  """
  The OAuth application was active and allowed to have OAuth Accesses.
  """
  ACTIVE

  """
  The OAuth application was in the process of being deleted.
  """
  howItWorksHTML: HTML!

  """
  The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  databaseId: Int

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the Migration object
  """
  id: ID!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Autogenerated input type of LinkProjectV2ToRepository
"""
input LinkProjectV2ToRepositoryInput {
  """
  The migration source.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposClearAuditEntry object
  """
  id: ID!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
A GitHub Enterprise Importer (GEI) migration source.
"""
type MigrationSource implements Node {
  """
  The Node ID of the MigrationSource object
  """
  id: ID!

  """
  The migration source name.
  """
  name: String!

  """
  The migration source type.
  """
  clientMutationId: String

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  repository: Repository
}

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
input LinkProjectV2ToTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

"""
The possible default commit messages for merges.
"""
enum MergeCommitMessage {
  """
  A GitHub Migration API source.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgAddBillingManagerAuditEntry object
  """
  id: ID!

"""
The GitHub Enterprise Importer (GEI) migration state.
"""
enum MergeCommitTitle {
  """
  The migration has failed.
  """
  MERGE_MESSAGE

  """
  The migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The migration is in progress.
  """
  IN_PROGRESS

  """
  The migration has not started.
  """
  NOT_STARTED

"""
Autogenerated input type of MergePullRequest
"""
input MergePullRequestInput {
  """
  The migration needs to have its credentials validated.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  The migration has been queued.
  """
  clientMutationId: String

  """
  The migration has succeeded.
  """
  team: Team
}

"""
Autogenerated input type of LinkRepositoryToProject
"""
input LinkProjectV2ToRepositoryInput {
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  clientMutationId: String

  """
  The ID of the project to link to the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to link to the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is linked to.
  """
  repository: Repository
}

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  """
  The configuration for this merge queue
  """
  dueOn: DateTime

  """
  The Node ID of the Milestone object
  """
  id: ID!

  """
  The entries in the queue
  """
  entries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeQueueEntryConnection

  """
  The Node ID of the MergeQueue object
  """
  id: ID!

  """
  The estimated time in seconds until a newly added entry would be merged
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgAddMemberAuditEntry object
  """
  id: ID!

  """
  The repository this merge queue belongs to
  """
  repository: Repository

  """
  The HTTP path for this merge queue
  """
  resourcePath: URI!

  """
  The HTTP URL for this merge queue
  """
  url: URI!
}

"""
Configuration for a MergeQueue
"""
type MergeQueueConfiguration {
  """
  The amount of time in minutes to wait for a check response before considering it a failure.
  """
  checkResponseTimeout: Int

  """
  The maximum number of entries to build at once.
  """
  maximumEntriesToBuild: Int

  """
  The maximum number of entries to merge at once.
  """
  maximumEntriesToMerge: Int

  """
  The merge method to use for this queue.
  """
  mergeMethod: PullRequestMergeMethod

  """
  The strategy to use when merging entries.
  """
  mergingStrategy: MergeQueueMergingStrategy

  """
  The minimum number of entries required to merge at once.
  """
  minimumEntriesToMerge: Int

  """
  The amount of time in minutes to wait before ignoring the minumum number of
  entries in the queue requirement and merging a collection of entries
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Entries in a MergeQueue
"""
type MergeQueueEntry implements Node {
  """
  The base commit for this entry
  """
  baseCommit: Commit

  """
  The date and time this entry was added to the merge queue
  """
  enqueuedAt: DateTime!

  """
  The actor that enqueued this entry
  """
  enqueuer: Actor!

  """
  The estimated time in seconds until this entry will be merged
  """
  estimatedTimeToMerge: Int

  """
  The head commit for this entry
  """
  headCommit: Commit

  """
  The Node ID of the MergeQueueEntry object
  """
  id: ID!

  """
  Whether this pull request should jump the queue
  """
  url: URI!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!
}

"""
The connection type for MergeQueueEntry.
"""
type MergeQueueEntryConnection {
  """
  A list of edges.
  """
  edges: [MergeQueueEntryEdge]

  """
  A list of nodes.
  """
  nodes: [MergeQueueEntry]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MergeQueueEntryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgBlockUserAuditEntry object
  """
  id: ID!

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  The entry is currently waiting for checks to pass.
  """
  AWAITING_CHECKS

  """
  The entry is currently locked.
  """
  LOCKED

  """
  The entry is currently mergeable.
  """
  MERGEABLE

  """
  The entry is currently queued.
  """
  QUEUED

  """
  The entry is currently unmergeable.
  """
  UNMERGEABLE
}

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  Entries only allowed to merge if they are passing.
  """
  ALLGREEN

  """
  Failing Entires are allowed to merge if they are with a passing entry.
  """
  HEADGREEN
}

"""
Detailed status information about a pull request merge.
"""
type LinkedBranch implements Node {
  """
  The Node ID of the LinkedBranch object
  """
  id: ID!

  """
  The branch's ref.
  """
  ref: Ref
}

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  A list of edges.
  """
  edges: [LinkedBranchEdge]

  """
  A list of nodes.
  """
  createdAt: DateTime!

  """
  The Node ID of the MilestonedEvent object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposDisableAuditEntry object
  """
  id: ID!

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

"""
Autogenerated input type of LockLockable
"""
input LinkProjectV2ToTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to link to the project.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is linked to
  """
  team: Team
}

"""
Autogenerated input type of LinkRepositoryToProject
"""
type FundingLink {
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  createdAt: DateTime!

  """
  The Node ID of the MergedEvent object
  """
  id: ID!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  url: URI!
}

"""
The possible funding platforms for repository funding links.
"""
type IpAllowListEntry implements Node {
  """
  A single IP address or range of IP addresses in CIDR notation.
  """
  allowListValue: String!

"""
An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
"""
type Issue implements Assignable & Closable & Comment & Deletable & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & SubscribableThread & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the LockedEvent object
  """
  id: ID!

  """
  The Node ID of the IpAllowListEntry object
  """
  hidden: Boolean!

  """
  The Node ID of the License object
  """
  id: ID!

"""
Represents a GitHub Enterprise Importer (GEI) migration.
"""
type LinkedBranch implements Node {
  """
  The migration flag to continue on error.
  """
  id: ID!

  """
  The branch's ref.
  """
  email: String

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The Node ID of the Migration object
  """
  databaseId: Int

  """
  The Node ID of the MovedColumnsInProjectEvent object
  """
  id: ID!

  """
  The Node ID of the MembersCanDeleteReposEnableAuditEntry object
  """
  id: ID!

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  The migration source.
  """
  edges: [LinkedBranchEdge]

  """
  A list of nodes.
  """
  nodes: [LinkedBranch]

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  pageInfo: PageInfo!

  """
  The migration state.
  """
  state: MigrationState!

  """
  Abort a repository migration queued or in progress.
  """
  abortRepositoryMigration(
    """
    Parameters for AbortRepositoryMigration
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

  """
  Accepts a pending invitation for a user to become an administrator of an enterprise.
  """
  warningsCount: Int!
}

"""
A GitHub Enterprise Importer (GEI) migration source.
"""
type MigrationSource implements Node {
  """
  The Node ID of the MigrationSource object
  """
  id: ID!

  """
  The migration source name.
  """
  nodes: [Mannequin]

  """
  The migration source type.
  """
  pageInfo: PageInfo!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  totalCount: Int!
}

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
type MannequinEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  Adds enterprise members to an organization within the enterprise.
  """
  addEnterpriseOrganizationMember(
    """
    Parameters for AddEnterpriseOrganizationMember
    """
    input: AddEnterpriseOrganizationMemberInput!
  ): AddEnterpriseOrganizationMemberPayload

  """
  Adds a support entitlement to an enterprise member.
  """
  databaseId: Int

  """
  The Node ID of the MentionedEvent object
  """
  id: ID!
}

"""
Represents a member feature request notification
"""
type MemberFeatureRequestNotification implements Node {
  """
  A GitHub Migration API source.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgCreateAuditEntry object
  """
  id: ID!

"""
The GitHub Enterprise Importer (GEI) migration state.
"""
input MannequinOrder {
  """
  The migration has failed.
  """
  direction: OrderDirection!

  """
  The migration has invalid credentials.
  """
  addProjectV2DraftIssue(
    """
    Parameters for AddProjectV2DraftIssue
    """
    input: AddProjectV2DraftIssueInput!
  ): AddProjectV2DraftIssuePayload

"""
The possible default commit messages for merges.
"""
enum MergeCommitMessage {
  """
  The migration needs to have its credentials validated.
  """
  BLANK

  """
  The migration has been queued.
  """
  PR_BODY

  """
  The migration has succeeded.
  """
  PR_TITLE
}

"""
The possible default commit titles for merges.
"""
enum MergeCommitTitle {
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  MERGE_MESSAGE

  """
  Adds a reply to an existing Pull Request Review Thread.
  """
  addPullRequestReviewThreadReply(
    """
    Parameters for AddPullRequestReviewThreadReply
    """
    input: AddPullRequestReviewThreadReplyInput!
  ): AddPullRequestReviewThreadReplyPayload

  """
  Adds a reaction to a subject.
  """
  PR_TITLE
}

"""
Autogenerated input type of MergePullRequest
"""
type LinkedBranchEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: LinkedBranch
}

"""
Autogenerated input type of LockLockable
"""
input LockLockableInput {
  """
  Whether the entry is currently active.
  """
  isActive: Boolean!

  """
  Community Bridge funding platform.
  """
  dueOn: DateTime

  """
  The Node ID of the Milestone object
  """
  id: ID!

  """
  Archives a ProjectV2Item
  """
  archiveProjectV2Item(
    """
    Parameters for ArchiveProjectV2Item
    """
    input: ArchiveProjectV2ItemInput!
  ): ArchiveProjectV2ItemPayload

  """
  Marks a repository as archived.
  """
  fullDatabaseId: BigInt

"""
Autogenerated input type of LinkProjectV2ToRepository
"""
input LinkProjectV2ToRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to link to the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  enterpriseUrl: URI

  """
  This mutation clears the value of a field for an item in a Project. Currently
  only text, number, date, assignees, labels, single-select, iteration and
  milestone fields are supported.
  """
  clearProjectV2ItemFieldValue(
    """
    Parameters for ClearProjectV2ItemFieldValue
    """
    input: ClearProjectV2ItemFieldValueInput!
  ): ClearProjectV2ItemFieldValuePayload

  """
  Creates a new project by cloning configuration from an existing project.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgDisableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

  """
  The repository the project is linked to.
  """
  repository: Repository
}

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  """
  Close a discussion.
  """
  closeDiscussion(
    """
    Parameters for CloseDiscussion
    """
    input: CloseDiscussionInput!
  ): CloseDiscussionPayload

  """
  Close an issue.
  """
  configuration: MergeQueueConfiguration

  """
  The entries in the queue
  """
  entries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Copy a project.
  """
  copyProjectV2(
    """
    Parameters for CopyProjectV2
    """
    input: CopyProjectV2Input!
  ): CopyProjectV2Payload

  """
  Invites a user to claim reattributable data
  """
  createAttributionInvitation(
    """
    Parameters for CreateAttributionInvitation
    """
    input: CreateAttributionInvitationInput!
  ): CreateAttributionInvitationPayload

  """
  Create a new branch protection rule
  """
  createBranchProtectionRule(
    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeQueueEntryConnection

  """
  The Node ID of the MergeQueue object
  """
  id: ID!

  """
  The estimated time in seconds until a newly added entry would be merged
  """
  nextEntryEstimatedTimeToMerge: Int

  """
  The repository this merge queue belongs to
  """
  repository: Repository

  """
  The HTTP path for this merge queue
  """
  resourcePath: URI!

  """
  The HTTP URL for this merge queue
  """
  url: URI!
}

"""
Configuration for a MergeQueue
"""
type MergeQueueConfiguration {
  """
  The amount of time in minutes to wait for a check response before considering it a failure.
  """
  checkResponseTimeout: Int

  """
  Creates an organization as part of an enterprise account. A personal access
  token used to create an organization is implicitly permitted to update the
  organization it created, if the organization is part of an enterprise that has
  SAML enabled or uses Enterprise Managed Users. If the organization is not part
  of such an enterprise, and instead has SAML enabled for it individually, the
  token will then require SAML authorization to continue working against that organization.
  """
  maximumEntriesToBuild: Int

  """
  The maximum number of entries to merge at once.
  """
  url: URI!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!
}

  """
  The merge method to use for this queue.
  """
  digestMethodUrl: URI

  """
  The Node ID of the OrgDisableSamlAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  Entries only allowed to merge if they are passing.
  """
  ALLGREEN

  """
  Failing Entires are allowed to merge if they are with a passing entry.
  """
  HEADGREEN
}

"""
Detailed status information about a pull request merge.
"""
input MarkProjectV2AsTemplateInput {
  """
  Delete a repository ruleset
  """
  deleteRepositoryRuleset(
    """
    Parameters for DeleteRepositoryRuleset
    """
    input: DeleteRepositoryRulesetInput!
  ): DeleteRepositoryRulesetPayload

  """
  Deletes a team discussion.
  """
  clientMutationId: String

  """
  The ID of the Project to mark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  deleteUserList(
    """
    Parameters for DeleteUserList
    """
    input: DeleteUserListInput!
  ): DeleteUserListPayload

  """
  Deletes a verifiable domain.
  """
  clientMutationId: String

  """
  Remove a pull request from the merge queue.
  """
  dequeuePullRequest(
    """
    Parameters for DequeuePullRequest
    """
    input: DequeuePullRequestInput!
  ): DequeuePullRequestPayload

  """
  Disable auto merge on the given pull request
  """
  projectV2: ProjectV2
}

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type OrgDisableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to link to the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  Add a pull request to the merge queue.
  """
  enqueuePullRequest(
    """
    Parameters for EnqueuePullRequest
    """
    input: EnqueuePullRequestInput!
  ): EnqueuePullRequestPayload

  """
  Follow an organization.
  """
  clientMutationId: String

  """
  The team the project is linked to
  """
  team: Team
}

"""
Autogenerated input type of LinkRepositoryToProject
"""
input LinkRepositoryToProjectInput {
  """
  The Node ID of the OrgDisableTwoFactorRequirementAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  createdAt: DateTime!

  """
  The Node ID of the MergedEvent object
  """
  databaseId: Int

  """
  Links a project to a repository.
  """
  linkProjectV2ToRepository(
    """
    Parameters for LinkProjectV2ToRepository
    """
    input: LinkProjectV2ToRepositoryInput!
  ): LinkProjectV2ToRepositoryPayload

  """
  Links a project to a team.
  """
  linkProjectV2ToTeam(
    """
    Parameters for LinkProjectV2ToTeam
    """
    input: LinkProjectV2ToTeamInput!
  ): LinkProjectV2ToTeamPayload

  """
  Creates a repository link for a project.
  """
  id: ID!

  """
  The user affected by the action
  """
  id: ID!

  """
  Mark a project as a template. Note that only projects which are owned by an Organization can be marked as a template.
  """
  markProjectV2AsTemplate(
    """
    Parameters for MarkProjectV2AsTemplate
    """
    input: MarkProjectV2AsTemplateInput!
  ): MarkProjectV2AsTemplatePayload

  """
  Marks a pull request ready for review.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposDisableAuditEntry object
  """
  id: ID!

"""
Audit log entry for a org.enable_oauth_app_restrictions event.
"""
type OrgEnableOauthAppRestrictionsAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The migration flag to continue on error.
  """
  id: ID!

  """
  Abort a repository migration queued or in progress.
  """
  abortRepositoryMigration(
    """
    Parameters for AbortRepositoryMigration
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

  """
  Accepts a pending invitation for a user to become an administrator of an enterprise.
  """
  howItWorks: String

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  Publish an existing sponsorship tier that is currently still a draft to a GitHub Sponsors profile.
  """
  publishSponsorsTier(
    """
    Parameters for PublishSponsorsTier
    """
    input: PublishSponsorsTierInput!
  ): PublishSponsorsTierPayload

  """
  Regenerates the identity provider recovery codes for an enterprise
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgEnableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  The URL for the migration log (expires 1 day after migration completes).
  """
  migrationLogUrl: URI

  """
  The migration source.
  """
  edges: [LinkedBranchEdge]

  """
  Adds enterprise members to an organization within the enterprise.
  """
  addEnterpriseOrganizationMember(
    """
    Parameters for AddEnterpriseOrganizationMember
    """
    input: AddEnterpriseOrganizationMemberInput!
  ): AddEnterpriseOrganizationMemberPayload

  """
  Adds a support entitlement to an enterprise member.
  """
  nodes: [LinkedBranch]

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  pageInfo: PageInfo!

  """
  Removes a user from all organizations within the enterprise
  """
  removeEnterpriseMember(
    """
    Parameters for RemoveEnterpriseMember
    """
    input: RemoveEnterpriseMemberInput!
  ): RemoveEnterpriseMemberPayload

  """
  Removes an organization from the enterprise
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
Audit log entry for a org.enable_saml event.
"""
type OrgEnableSamlAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The SAML provider's digest algorithm URL.
  """
  digestMethodUrl: URI

  """
  The Node ID of the OrgEnableSamlAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.enable_two_factor_requirement event.
"""
type OrgEnableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The migration has failed.
  """
  FAILED

  """
  The migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  Reopen a discussion.
  """
  reopenDiscussion(
    """
    Parameters for ReopenDiscussion
    """
    input: ReopenDiscussionInput!
  ): ReopenDiscussionPayload

  """
  Reopen a issue.
  """
  addPullRequestReviewThreadReply(
    """
    Parameters for AddPullRequestReviewThreadReply
    """
    input: AddPullRequestReviewThreadReplyInput!
  ): AddPullRequestReviewThreadReplyPayload

  """
  Adds a reaction to a subject.
  """
  ISSUEHUNT

  """
  The migration has not started.
  """
  filename: String!

  """
  The migration needs to have its credentials validated.
  """
  createdAt: DateTime!

  """
  The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object
  """
  id: ID!

  """
  Retire a published payment tier from your GitHub Sponsors profile so it cannot be used to start new sponsorships.
  """
  retireSponsorsTier(
    """
    Parameters for RetireSponsorsTier
    """
    input: RetireSponsorsTierInput!
  ): RetireSponsorsTierPayload

  """
  Create a pull request that reverts the changes from a merged pull request.
  """
  revertPullRequest(
    """
    Parameters for RevertPullRequest
    """
    input: RevertPullRequestInput!
  ): RevertPullRequestPayload

  """
  The name of the Organization.
  """
  enterpriseUrl: URI

  """
  Archives a ProjectV2Item
  """
  archiveProjectV2Item(
    """
    Parameters for ArchiveProjectV2Item
    """
    input: ArchiveProjectV2ItemInput!
  ): ArchiveProjectV2ItemPayload

  """
  Marks a repository as archived.
  """
  id: ID!

  """
  Branches linked to this issue.
  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Starts a GitHub Enterprise Importer organization migration.
  """
  startOrganizationMigration(
    """
    Parameters for StartOrganizationMigration
    """
    input: StartOrganizationMigrationInput!
  ): StartOrganizationMigrationPayload

  """
  Starts a GitHub Enterprise Importer (GEI) repository migration.
  """
  howItWorksHTML: HTML!

"""
Ordering options for an organization's enterprise owner connections.
"""
input OrgEnterpriseOwnerOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprise owners by.
  """
  field: OrgEnterpriseOwnerOrderField!
}

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  Order enterprise owners by login.
  """
  LOGIN
}

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The Node ID of the MarketplaceListing object
  """
  dueOn: DateTime

  """
  Transfer an organization from one enterprise to another enterprise.
  """
  transferEnterpriseOrganization(
    """
    Parameters for TransferEnterpriseOrganization
    """
    input: TransferEnterpriseOrganizationInput!
  ): TransferEnterpriseOrganizationPayload

  """
  Transfer an issue to a different repository
  """
  clearProjectV2ItemFieldValue(
    """
    Parameters for ClearProjectV2ItemFieldValue
    """
    input: ClearProjectV2ItemFieldValueInput!
  ): ClearProjectV2ItemFieldValuePayload

  """
  Unarchives a ProjectV2Item
  """
  unarchiveProjectV2Item(
    """
    Parameters for UnarchiveProjectV2Item
    """
    input: UnarchiveProjectV2ItemInput!
  ): UnarchiveProjectV2ItemPayload

  """
  Unarchives a repository.
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

  """
  Branches linked to this issue.
  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Close a discussion.
  """
  closeDiscussion(
    """
    Parameters for CloseDiscussion
    """
    input: CloseDiscussionInput!
  ): CloseDiscussionPayload

  """
  The email address of the organization invitation.
  """
  email: String

  """
  The Node ID of the OrgInviteMemberAuditEntry object
  """
  id: ID!

  """
  `true` if the object is locked
  """
  LIBERAPAY

  """
  Copy a project.
  """
  copyProjectV2(
    """
    Parameters for CopyProjectV2
    """
    input: CopyProjectV2Input!
  ): CopyProjectV2Payload

  """
  The organization invitation.
  """
  organizationInvitation: OrganizationInvitation

  """
  The name of the Organization.
  """
  unmarkProjectV2AsTemplate(
    """
    Parameters for UnmarkProjectV2AsTemplate
    """
    input: UnmarkProjectV2AsTemplateInput!
  ): UnmarkProjectV2AsTemplatePayload

  """
  Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
  """
  createAttributionInvitation(
    """
    Parameters for CreateAttributionInvitation
    """
    input: CreateAttributionInvitationInput!
  ): CreateAttributionInvitationPayload

  """
  Create a new branch protection rule
  """
  gist: Gist!

  """
  The Node ID of the GistComment object
  """
  createdAt: DateTime!

  """
  Unsubscribes from notifications
  """
  unsubscribeFromNotifications(
    """
    Parameters for UnsubscribeFromNotifications
    """
    input: UnsubscribeFromNotificationsInput!
  ): UnsubscribeFromNotificationsPayload

  """
  Update a branch protection rule
  """
  databaseId: Int

  """
  The Node ID of the MentionedEvent object
  """
  id: ID!

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  """
  The Node ID of the Mannequin object
  """
  id: ID!

  """
  Branches linked to this issue.
  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Creates an organization as part of an enterprise account. A personal access
  token used to create an organization is implicitly permitted to update the
  organization it created, if the organization is part of an enterprise that has
  SAML enabled or uses Enterprise Managed Users. If the organization is not part
  of such an enterprise, and instead has SAML enabled for it individually, the
  token will then require SAML authorization to continue working against that organization.
  """
  createEnterpriseOrganization(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

  """
  `true` if the object is locked
  """
  OTECHIE

  """
  Patreon funding platform.
  """
  PATREON

  """
  Find a project by number.
  """
  email: String

  """
  Create a branch linked to an issue.
  """
  createLinkedBranch(
    """
    Parameters for CreateLinkedBranch
    """
    input: CreateLinkedBranchInput!
  ): CreateLinkedBranchPayload

  """
  Creates a GitHub Enterprise Importer (GEI) migration source.
  """
  createdAt: PreciseDateTime!

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

"""
The possible default commit messages for merges.
"""
enum MergeCommitMessage {
  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The Node ID of the OrgInviteToBusinessAuditEntry object
  """
  id: ID!

  """
  Create a new pull request
  """
  PR_BODY

  """
  Default to the pull request's title.
  """
  url: URI!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Create a repository ruleset
  """
  createRepositoryRuleset(
    """
    Parameters for CreateRepositoryRuleset
    """
    input: CreateRepositoryRulesetInput!
  ): CreateRepositoryRulesetPayload

  """
  Create a GitHub Sponsors profile to allow others to sponsor you or your organization.
  """
  createSponsorsListing(
    """
    Parameters for CreateSponsorsListing
    """
    input: CreateSponsorsListingInput!
  ): CreateSponsorsListingPayload

  """
  Create a new payment tier for your GitHub Sponsors profile.
  """
  viewerCanReopen: Boolean!
}

"""
The possible default commit titles for merges.
"""
enum MergeCommitTitle {
  """
  Default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
  """
  MERGE_MESSAGE

  """
  Make many one-time sponsorships for different sponsorable users or
  organizations at once. Can only sponsor those who have a public GitHub
  Sponsors profile.
  """
  createSponsorships(
    """
    Parameters for CreateSponsorships
    """
    input: CreateSponsorshipsInput!
  ): CreateSponsorshipsPayload

  """
  Creates a new team discussion.
  """
  PR_TITLE
}

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
type OrgOauthAppAccessApprovedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  A list of nodes.
  """
  nodes: [Mannequin]

  """
  Creates a new user list.
  """
  createUserList(
    """
    Parameters for CreateUserList
    """
    input: CreateUserListInput!
  ): CreateUserListPayload

  """
  Rejects a suggested topic for the repository.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  A list of edges.
  """
  edges: [MannequinEdge]

  """
  A list of nodes.
  """
  nodes: [Mannequin]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessApprovedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  updatePatreonSponsorability(
    """
    Parameters for UpdatePatreonSponsorability
    """
    input: UpdatePatreonSponsorabilityInput!
  ): UpdatePatreonSponsorabilityPayload

  """
  The HTTP path for the OAuth application
  """
  totalCount: Int!
}

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  The HTTP URL for the OAuth application
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Mannequin
}

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  """
  Updates an existing project.
  """
  updateProjectV2(
    """
    Parameters for UpdateProjectV2
    """
    input: UpdateProjectV2Input!
  ): UpdateProjectV2Payload

  """
  Update the collaborators on a team or a project
  """
  updateProjectV2Collaborators(
    """
    Parameters for UpdateProjectV2Collaborators
    """
    input: UpdateProjectV2CollaboratorsInput!
  ): UpdateProjectV2CollaboratorsPayload

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeQueueEntryConnection

  """
  The Node ID of the MergeQueue object
  """
  id: ID!

  """
  Delete a project.
  """
  deleteProjectV2(
    """
    Parameters for DeleteProjectV2
    """
    input: DeleteProjectV2Input!
  ): DeleteProjectV2Payload

  """
  Delete a project field.
  """
  deleteProjectV2Field(
    """
    Parameters for DeleteProjectV2Field
    """
    input: DeleteProjectV2FieldInput!
  ): DeleteProjectV2FieldPayload

  """
  The repository this merge queue belongs to
  """
  repository: Repository

"""
Audit log entry for a org.oauth_app_access_blocked event.
"""
type OrgOauthAppAccessBlockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Deletes a project workflow.
  """
  deleteProjectV2Workflow(
    """
    Parameters for DeleteProjectV2Workflow
    """
    input: DeleteProjectV2WorkflowInput!
  ): DeleteProjectV2WorkflowPayload

  """
  Deletes a pull request review.
  """
  resourcePath: URI!

  """
  The HTTP URL for this merge queue
  """
  url: URI!
}

"""
Configuration for a MergeQueue
"""
type MergeQueueConfiguration {
  """
  The amount of time in minutes to wait for a check response before considering it a failure.
  """
  checkResponseTimeout: Int

  """
  Update a repository ruleset
  """
  updateRepositoryRuleset(
    """
    Parameters for UpdateRepositoryRuleset
    """
    input: UpdateRepositoryRulesetInput!
  ): UpdateRepositoryRulesetPayload

  """
  Sets whether contributors are required to sign off on web-based commits for a repository.
  """
  updateRepositoryWebCommitSignoffSetting(
    """
    Parameters for UpdateRepositoryWebCommitSignoffSetting
    """
    input: UpdateRepositoryWebCommitSignoffSettingInput!
  ): UpdateRepositoryWebCommitSignoffSettingPayload

  """
  Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
  """
  deleteRepositoryRuleset(
    """
    Parameters for DeleteRepositoryRuleset
    """
    input: DeleteRepositoryRulesetInput!
  ): DeleteRepositoryRulesetPayload

  """
  Deletes a team discussion.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessBlockedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  id: ID!

  """
  The HTTP path for the OAuth application
  """
  deleteUserList(
    """
    Parameters for DeleteUserList
    """
    input: DeleteUserListInput!
  ): DeleteUserListPayload

  """
  The HTTP URL for the OAuth application
  """
  maximumEntriesToMerge: Int

  """
  Remove a pull request from the merge queue.
  """
  dequeuePullRequest(
    """
    Parameters for DequeuePullRequest
    """
    input: DequeuePullRequestInput!
  ): DequeuePullRequestPayload

  """
  Disable auto merge on the given pull request
  """
  mergeMethod: PullRequestMergeMethod

  """
  Updates an existing user list.
  """
  updateUserList(
    """
    Parameters for UpdateUserList
    """
    input: UpdateUserListInput!
  ): UpdateUserListPayload

  """
  Updates which of the viewer's lists an item belongs to
  """
  updateUserListsForItem(
    """
    Parameters for UpdateUserListsForItem
    """
    input: UpdateUserListsForItemInput!
  ): UpdateUserListsForItemPayload

  """
  Verify that a verifiable domain has the expected DNS record.
  """
  mergingStrategy: MergeQueueMergingStrategy

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimumEntriesToMerge: Int

  """
  The amount of time in minutes to wait before ignoring the minumum number of
  entries in the queue requirement and merging a collection of entries
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Entries in a MergeQueue
"""
type MergeQueueEntry implements Node {
  """
  Add a pull request to the merge queue.
  """
  enqueuePullRequest(
    """
    Parameters for EnqueuePullRequest
    """
    input: EnqueuePullRequestInput!
  ): EnqueuePullRequestPayload

  """
  Follow an organization.
  """
  baseCommit: Commit

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The date and time this entry was added to the merge queue
  """
  enqueuedAt: DateTime!

  """
  The actor that enqueued this entry
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

  """
  The estimated time in seconds until this entry will be merged
  """
  estimatedTimeToMerge: Int

  """
  The head commit for this entry
  """
  headCommit: Commit

  """
  The Node ID of the MergeQueueEntry object
  """
  id: ID!

  """
  Links a project to a repository.
  """
  linkProjectV2ToRepository(
    """
    Parameters for LinkProjectV2ToRepository
    """
    input: LinkProjectV2ToRepositoryInput!
  ): LinkProjectV2ToRepositoryPayload

  """
  Links a project to a team.
  """
  linkProjectV2ToTeam(
    """
    Parameters for LinkProjectV2ToTeam
    """
    input: LinkProjectV2ToTeamInput!
  ): LinkProjectV2ToTeamPayload

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OIDCProvider object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessDeniedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
type OrgOauthAppAccessRequestedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessRequestedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_unblocked event.
"""
type OrgOauthAppAccessUnblockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessUnblockedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.remove_billing_manager event.
"""
type OrgRemoveBillingManagerAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveBillingManagerAuditEntry object
  """
  id: ID!

  """
  The merge queue that this entry belongs to
  """
  mergeQueue: MergeQueue

  """
  The position of this entry in the queue
  """
  position: Int!

  """
  The pull request that will be added to a merge group
  """
  pullRequest: PullRequest

  """
  The name of the OAuth application.
  """
  markProjectV2AsTemplate(
    """
    Parameters for MarkProjectV2AsTemplate
    """
    input: MarkProjectV2AsTemplateInput!
  ): MarkProjectV2AsTemplatePayload

  """
  The HTTP path for the OAuth application
  """
  solo: Boolean!

  """
  The HTTP URL for the OAuth application
  """
  state: MergeQueueEntryState!
}

"""
The connection type for MergeQueueEntry.
"""
type MergeQueueEntryConnection {
  """
  A list of edges.
  """
  edges: [MergeQueueEntryEdge]

  """
  A list of nodes.
  """
  nodes: [MergeQueueEntry]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MergeQueueEntryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  Publish an existing sponsorship tier that is currently still a draft to a GitHub Sponsors profile.
  """
  publishSponsorsTier(
    """
    Parameters for PublishSponsorsTier
    """
    input: PublishSponsorsTierInput!
  ): PublishSponsorsTierPayload

  """
  Regenerates the identity provider recovery codes for an enterprise
  """
  node: MergeQueueEntry
}

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  The application URL of the OAuth application.
  """
  AWAITING_CHECKS

  """
  The callback URL of the OAuth application.
  """
  LOCKED

  """
  The entry is currently mergeable.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OauthApplicationCreateAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  id: ID!

  """
  The HTTP path for the OAuth application
  """
  QUEUED

  """
  The HTTP URL for the OAuth application
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveMemberAuditEntry object
  """
  id: ID!

  """
  Removes an organization from the enterprise
  """
  UNMERGEABLE
}

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  Entries only allowed to merge if they are passing.
  """
  ALLGREEN

  """
  Failing Entires are allowed to merge if they are with a passing entry.
  """
  HEADGREEN
}

"""
Detailed status information about a pull request merge.
"""
input MannequinOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  Abort a repository migration queued or in progress.
  """
  abortRepositoryMigration(
    """
    Parameters for AbortRepositoryMigration
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

  """
  The rate limit of the OAuth application.
  """
  field: MannequinOrderField!
}

"""
Properties by which mannequins can be ordered.
"""
enum MannequinOrderField {
  """
  The state of the OAuth application.
  """
  CREATED_AT

  """
  Reopen a discussion.
  """
  reopenDiscussion(
    """
    Parameters for ReopenDiscussion
    """
    input: ReopenDiscussionInput!
  ): ReopenDiscussionPayload

  """
  Reopen a issue.
  """
  LOGIN
}

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
type MannequinEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Mannequin
}

"""
The state of an OAuth application when it was created.
"""
enum OrgRemoveMemberAuditEntryMembershipType {
  """
  Organization owners have full access and can change several settings,
  including the names of repositories that belong to the Organization and Owners
  team membership. In addition, organization owners can delete the organization
  and all of its repositories.
  """
  The OAuth application was active and allowed to have OAuth Accesses.
  """
  direction: OrderDirection!

  """
  The OAuth application was in the process of being deleted.
  """
  addEnterpriseOrganizationMember(
    """
    Parameters for AddEnterpriseOrganizationMember
    """
    input: AddEnterpriseOrganizationMemberInput!
  ): AddEnterpriseOrganizationMemberPayload

  """
  The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  retireSponsorsTier(
    """
    Parameters for RetireSponsorsTier
    """
    input: RetireSponsorsTierInput!
  ): RetireSponsorsTierPayload

  """
  Create a pull request that reverts the changes from a merged pull request.
  """
  revertPullRequest(
    """
    Parameters for RevertPullRequest
    """
    input: RevertPullRequestInput!
  ): RevertPullRequestPayload

  """
  Revoke the migrator role to a user for all organizations under an enterprise account.
  """
  field: MannequinOrderField!
}

"""
Properties by which mannequins can be ordered.
"""
enum MannequinOrderField {
  """
  Order mannequins why when they were created.
  """
  CREATED_AT

  """
  Order mannequins alphabetically by their source login.
  """
  createdAt: DateTime!

  """
  The Node ID of the MergedEvent object
  """
  id: ID!

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
input MarkDiscussionCommentAsAnswerInput {
  """
  A list of projects under the owner.
  """
  addProjectV2DraftIssue(
    """
    Parameters for AddProjectV2DraftIssue
    """
    input: AddProjectV2DraftIssueInput!
  ): AddProjectV2DraftIssuePayload

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Starts a GitHub Enterprise Importer organization migration.
  """
  startOrganizationMigration(
    """
    Parameters for StartOrganizationMigration
    """
    input: StartOrganizationMigrationInput!
  ): StartOrganizationMigrationPayload

  """
  Starts a GitHub Enterprise Importer (GEI) repository migration.
  """
  projectV2: ProjectV2
}

"""
Represents a GitHub Enterprise Importer (GEI) migration.
"""
input MarkPullRequestReadyForReviewInput {
  """
  The migration flag to continue on error.
  """
  clientMutationId: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Transfer an organization from one enterprise to another enterprise.
  """
  transferEnterpriseOrganization(
    """
    Parameters for TransferEnterpriseOrganization
    """
    input: TransferEnterpriseOrganizationInput!
  ): TransferEnterpriseOrganizationPayload

  """
  Transfer an issue to a different repository
  """
  databaseId: String

  """
  Unarchives a ProjectV2Item
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveOutsideCollaboratorAuditEntry object
  """
  id: ID!

  """
  Unarchives a repository.
  """
  addPullRequestReviewThreadReply(
    """
    Parameters for AddPullRequestReviewThreadReply
    """
    input: AddPullRequestReviewThreadReplyInput!
  ): AddPullRequestReviewThreadReplyPayload

  """
  Adds a reaction to a subject.
  """
  failureReason: String

  """
  The Node ID of the Migration object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgAddBillingManagerAuditEntry object
  """
  id: ID!

  """
  Unlinks a project from a repository.
  """
  unlinkProjectV2FromRepository(
    """
    Parameters for UnlinkProjectV2FromRepository
    """
    input: UnlinkProjectV2FromRepositoryInput!
  ): UnlinkProjectV2FromRepositoryPayload

  """
  Unlinks a project to a team.
  """
  unlinkProjectV2FromTeam(
    """
    Parameters for UnlinkProjectV2FromTeam
    """
    input: UnlinkProjectV2FromTeamInput!
  ): UnlinkProjectV2FromTeamPayload

  """
  Deletes a repository link from a project.
  """
  name: String

"""
Represents a member feature request notification
"""
type MemberFeatureRequestNotification implements Node {
  """
  The migration source.
  """
  body: String!

  """
  The Node ID of the MemberFeatureRequestNotification object
  """
  id: ID!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  title: String!

  """
  Archives a ProjectV2Item
  """
  archiveProjectV2Item(
    """
    Parameters for ArchiveProjectV2Item
    """
    input: ArchiveProjectV2ItemInput!
  ): ArchiveProjectV2ItemPayload

  """
  Unmark a project as a template.
  """
  unmarkProjectV2AsTemplate(
    """
    Parameters for UnmarkProjectV2AsTemplate
    """
    input: UnmarkProjectV2AsTemplateInput!
  ): UnmarkProjectV2AsTemplatePayload

  """
  Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
A GitHub Enterprise Importer (GEI) migration source.
"""
type MigrationSource implements Node {
  """
  The Node ID of the MigrationSource object
  """
  id: ID!

  """
  Unsubscribes from notifications
  """
  unsubscribeFromNotifications(
    """
    Parameters for UnsubscribeFromNotifications
    """
    input: UnsubscribeFromNotificationsInput!
  ): UnsubscribeFromNotificationsPayload

  """
  Update a branch protection rule
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The migration source type.
  """
  type: MigrationSourceType!

  """
  This mutation clears the value of a field for an item in a Project. Currently
  only text, number, date, assignees, labels, single-select, iteration and
  milestone fields are supported.
  """
  clearProjectV2ItemFieldValue(
    """
    Parameters for ClearProjectV2ItemFieldValue
    """
    input: ClearProjectV2ItemFieldValueInput!
  ): ClearProjectV2ItemFieldValuePayload

  """
  Creates a new project by cloning configuration from an existing project.
  """
  duplicate: IssueOrPullRequest

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
enum MigrationSourceType {
  """
  The Node ID of the MarkedAsDuplicateEvent object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgAddMemberAuditEntry object
  """
  id: ID!

  """
  Close a discussion.
  """
  closeDiscussion(
    """
    Parameters for CloseDiscussion
    """
    input: CloseDiscussionInput!
  ): CloseDiscussionPayload

  """
  Close an issue.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRestoreMemberAuditEntry object
  """
  id: ID!

  """
  A GitHub Migration API source.
  """
  GITHUB_ARCHIVE
}

"""
The GitHub Enterprise Importer (GEI) migration state.
"""
enum MigrationState {
  """
  The migration has failed.
  """
  fullDatabaseId: BigInt

  """
  The migration has invalid credentials.
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
input MarkProjectV2AsTemplateInput {
  """
  Copy a project.
  """
  copyProjectV2(
    """
    Parameters for CopyProjectV2
    """
    input: CopyProjectV2Input!
  ): CopyProjectV2Payload

  """
  Invites a user to claim reattributable data
  """
  createAttributionInvitation(
    """
    Parameters for CreateAttributionInvitation
    """
    input: CreateAttributionInvitationInput!
  ): CreateAttributionInvitationPayload

  """
  Create a new branch protection rule
  """
  clientMutationId: String

  """
  Sets whether or not an organization owner can make purchases.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  The migration needs to have its credentials validated.
  """
  clientMutationId: String

  """
  The migration has been queued.
  """
  enterpriseUrl: URI

  """
  The migration has succeeded.
  """
  id: ID!

"""
Autogenerated input type of MarkPullRequestReadyForReview
"""
input MarkPullRequestReadyForReviewInput {
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  color: String

  """
  The Node ID of the Language object
  """
  id: ID!

  """
  Creates an organization as part of an enterprise account. A personal access
  token used to create an organization is implicitly permitted to update the
  organization it created, if the organization is part of an enterprise that has
  SAML enabled or uses Enterprise Managed Users. If the organization is not part
  of such an enterprise, and instead has SAML enabled for it individually, the
  token will then require SAML authorization to continue working against that organization.
  """
  includesCreatedEdit: Boolean!

  """
  Returns whether or not a comment has been minimized.
  """
  description: String

  """
  The Node ID of the Label object
  """
  id: ID!

  """
  The moment the editor made the last edit
  """
  dueOn: DateTime

  """
  The Node ID of the Milestone object
  """
  id: ID!

  """
  Create a branch linked to an issue.
  """
  createLinkedBranch(
    """
    Parameters for CreateLinkedBranch
    """
    input: CreateLinkedBranchInput!
  ): CreateLinkedBranchPayload

  """
  Creates a GitHub Enterprise Importer (GEI) migration source.
  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Create a new project field.
  """
  createProjectV2Field(
    """
    Parameters for CreateProjectV2Field
    """
    input: CreateProjectV2FieldInput!
  ): CreateProjectV2FieldPayload

  """
  Create a new pull request
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgBlockUserAuditEntry object
  """
  id: ID!

  """
  Branches linked to this issue.
  """
  duplicate: IssueOrPullRequest

  """
  Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
  """
  updateOrganizationWebCommitSignoffSetting(
    """
    Parameters for UpdateOrganizationWebCommitSignoffSetting
    """
    input: UpdateOrganizationWebCommitSignoffSettingInput!
  ): UpdateOrganizationWebCommitSignoffSettingPayload

  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  updatePatreonSponsorability(
    """
    Parameters for UpdatePatreonSponsorability
    """
    input: UpdatePatreonSponsorabilityInput!
  ): UpdatePatreonSponsorabilityPayload

  """
  Updates an existing project.
  """
  howItWorksHTML: HTML!

  """
  Create a repository ruleset
  """
  createRepositoryRuleset(
    """
    Parameters for CreateRepositoryRuleset
    """
    input: CreateRepositoryRulesetInput!
  ): CreateRepositoryRulesetPayload

  """
  Create a GitHub Sponsors profile to allow others to sponsor you or your organization.
  """
  createSponsorsListing(
    """
    Parameters for CreateSponsorsListing
    """
    input: CreateSponsorsListingInput!
  ): CreateSponsorsListingPayload

  """
  Updates an existing project.
  """
  updateProjectV2(
    """
    Parameters for UpdateProjectV2
    """
    input: UpdateProjectV2Input!
  ): UpdateProjectV2Payload

  """
  Update the collaborators on a team or a project
  """
  updateProjectV2Collaborators(
    """
    Parameters for UpdateProjectV2Collaborators
    """
    input: UpdateProjectV2CollaboratorsInput!
  ): UpdateProjectV2CollaboratorsPayload

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Creates a new user list.
  """
  createUserList(
    """
    Parameters for CreateUserList
    """
    input: CreateUserListInput!
  ): CreateUserListPayload

  """
  Rejects a suggested topic for the repository.
  """
  declineTopicSuggestion(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  Indicates if the object can be closed by the viewer.
  """
  hidden: Boolean!

  """
  The Node ID of the License object
  """
  howItWorks: String

  """
  The Node ID of the MarketplaceCategory object
  """
  id: ID!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgConfigDisableCollaboratorsOnlyAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUnblockUserAuditEntry object
  """
  id: ID!

  """
  Check if the current viewer can delete this object.
  """
  url: URI!

  """
  Unlink a branch from an issue.
  """
  deleteLinkedBranch(
    """
    Parameters for DeleteLinkedBranch
    """
    input: DeleteLinkedBranchInput!
  ): DeleteLinkedBranchPayload

  """
  Update a repository ruleset
  """
  updateRepositoryRuleset(
    """
    Parameters for UpdateRepositoryRuleset
    """
    input: UpdateRepositoryRulesetInput!
  ): UpdateRepositoryRulesetPayload

  """
  Sets whether contributors are required to sign off on web-based commits for a repository.
  """
  updateRepositoryWebCommitSignoffSetting(
    """
    Parameters for UpdateRepositoryWebCommitSignoffSetting
    """
    input: UpdateRepositoryWebCommitSignoffSettingInput!
  ): UpdateRepositoryWebCommitSignoffSettingPayload

  """
  Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!
}

  """
  The Node ID of the MembersCanDeleteReposDisableAuditEntry object
  """
  id: ID!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  Delete a project.
  """
  deleteProjectV2(
    """
    Parameters for DeleteProjectV2
    """
    input: DeleteProjectV2Input!
  ): DeleteProjectV2Payload

  """
  Delete a project field.
  """
  deleteProjectV2Field(
    """
    Parameters for DeleteProjectV2Field
    """
    input: DeleteProjectV2FieldInput!
  ): DeleteProjectV2FieldPayload

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

  """
  Updates an existing user list.
  """
  updateUserList(
    """
    Parameters for UpdateUserList
    """
    input: UpdateUserListInput!
  ): UpdateUserListPayload

  """
  Updates which of the viewer's lists an item belongs to
  """
  updateUserListsForItem(
    """
    Parameters for UpdateUserListsForItem
    """
    input: UpdateUserListsForItemInput!
  ): UpdateUserListsForItemPayload

  """
  Verify that a verifiable domain has the expected DNS record.
  """
  deleteProjectV2Workflow(
    """
    Parameters for DeleteProjectV2Workflow
    """
    input: DeleteProjectV2WorkflowInput!
  ): DeleteProjectV2WorkflowPayload

  """
  Deletes a pull request review.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateDefaultRepositoryPermissionAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

"""
An OIDC identity provider configured to provision identities for an enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with read:enterprise or admin:enterprise scope.
"""
input LinkProjectV2ToRepositoryInput {
  """
  Delete a repository ruleset
  """
  deleteRepositoryRuleset(
    """
    Parameters for DeleteRepositoryRuleset
    """
    input: DeleteRepositoryRulesetInput!
  ): DeleteRepositoryRulesetPayload

  """
  Deletes a team discussion.
  """
  clientMutationId: String

  """
  The ID of the project to link to the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  Deletes a user list.
  """
  deleteUserList(
    """
    Parameters for DeleteUserList
    """
    input: DeleteUserListInput!
  ): DeleteUserListPayload

  """
  Deletes a verifiable domain.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  Remove a pull request from the merge queue.
  """
  dequeuePullRequest(
    """
    Parameters for DequeuePullRequest
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OIDCProvider object
  """
  id: ID!

  """
  Disable auto merge on the given pull request
  """
  clientMutationId: String

  """
  The repository the project is linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of LinkProjectV2ToTeam
"""
input LinkProjectV2ToTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of the OAuth application.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The HTTP path for the OAuth application
  """
  enqueuePullRequest(
    """
    Parameters for EnqueuePullRequest
    """
    input: EnqueuePullRequestInput!
  ): EnqueuePullRequestPayload

  """
  The HTTP URL for the OAuth application
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  howItWorksHTML: HTML!

  """
  The Node ID of the MarketplaceListing object
  """
  createdAt: DateTime!

  """
  The Node ID of the MilestonedEvent object
  """
  id: ID!

  """
  The team the project is linked to
  """
  team: Team
}

"""
Autogenerated input type of LinkRepositoryToProject
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgCreateAuditEntry object
  """
  id: ID!

  """
  Links a project to a repository.
  """
  linkProjectV2ToRepository(
    """
    Parameters for LinkProjectV2ToRepository
    """
    input: LinkProjectV2ToRepositoryInput!
  ): LinkProjectV2ToRepositoryPayload

  """
  Links a project to a team.
  """
  linkProjectV2ToTeam(
    """
    Parameters for LinkProjectV2ToTeam
    """
    input: LinkProjectV2ToTeamInput!
  ): LinkProjectV2ToTeamPayload

  """
  The application URL of the OAuth application.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  The callback URL of the OAuth application.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposEnableAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OauthApplicationCreateAuditEntry object
  """
  id: ID!

"""
Ordering options for environments
"""
input Environments {
  """
  The name of the OAuth application.
  """
  direction: OrderDirection!

  """
  The HTTP path for the OAuth application
  """
  markProjectV2AsTemplate(
    """
    Parameters for MarkProjectV2AsTemplate
    """
    input: MarkProjectV2AsTemplateInput!
  ): MarkProjectV2AsTemplatePayload

  """
  The HTTP URL for the OAuth application
  """
  field: EnvironmentOrderField!
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  The Node ID of the LinkedBranch object
  """
  id: ID!

  """
  The branch's ref.
  """
  ref: Ref
}

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  A list of edges.
  """
  edges: [LinkedBranchEdge]

  """
  A list of nodes.
  """
  nodes: [LinkedBranch]

  """
  The rate limit of the OAuth application.
  """
  pageInfo: PageInfo!

  """
  The state of the OAuth application.
  """
  publishSponsorsTier(
    """
    Parameters for PublishSponsorsTier
    """
    input: PublishSponsorsTierInput!
  ): PublishSponsorsTierPayload

  """
  Regenerates the identity provider recovery codes for an enterprise
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  databaseId: Int

  """
  The Node ID of the MentionedEvent object
  """
  id: ID!
}

"""
The state of an OAuth application when it was created.
"""
type MemberFeatureRequestNotification implements Node {
  """
  The OAuth application was active and allowed to have OAuth Accesses.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryCreationPermissionAuditEntry object
  """
  id: ID!

  """
  The OAuth application was in the process of being deleted.
  """
  id: ID!

  """
  The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  removeEnterpriseMember(
    """
    Parameters for RemoveEnterpriseMember
    """
    input: RemoveEnterpriseMemberInput!
  ): RemoveEnterpriseMemberPayload

  """
  Removes an organization from the enterprise
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgDisableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

"""
Entities that have members who can set status messages.
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  headRefName: String!

  """
  The Node ID of the HeadRefDeletedEvent object
  """
  createdAt: DateTime!

  """
  The Node ID of the LabeledEvent object
  """
  databaseId: Int

  """
  The Node ID of the MovedColumnsInProjectEvent object
  """
  id: ID!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
The possible default commit messages for merges.
"""
enum MergeCommitMessage {
  """
  Reopen a discussion.
  """
  reopenDiscussion(
    """
    Parameters for ReopenDiscussion
    """
    input: ReopenDiscussionInput!
  ): ReopenDiscussionPayload

  """
  Reopen a issue.
  """
  BLANK

  """
  Default to the pull request's body.
  """
  PR_BODY

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
The possible default commit titles for merges.
"""
enum MergeCommitTitle {
  """
  Default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
  """
  MERGE_MESSAGE

  """
  Abort a repository migration queued or in progress.
  """
  abortRepositoryMigration(
    """
    Parameters for AbortRepositoryMigration
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

  """
  Retire a published payment tier from your GitHub Sponsors profile so it cannot be used to start new sponsorships.
  """
  retireSponsorsTier(
    """
    Parameters for RetireSponsorsTier
    """
    input: RetireSponsorsTierInput!
  ): RetireSponsorsTierPayload

  """
  Create a pull request that reverts the changes from a merged pull request.
  """
  revertPullRequest(
    """
    Parameters for RevertPullRequest
    """
    input: RevertPullRequestInput!
  ): RevertPullRequestPayload

  """
  Revoke the migrator role to a user for all organizations under an enterprise account.
  """
  PR_TITLE
}

"""
Autogenerated input type of MergePullRequest
"""
type ExternalIdentity implements Node {
  """
  The GUID for this identity
  """
  color: String

  """
  The Node ID of the Language object
  """
  id: ID!

  """
  The Node ID of the ExternalIdentity object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgAddBillingManagerAuditEntry object
  """
  digestMethodUrl: URI

  """
  The Node ID of the OrgDisableSamlAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  Copy a project.
  """
  copyProjectV2(
    """
    Parameters for CopyProjectV2
    """
    input: CopyProjectV2Input!
  ): CopyProjectV2Payload

  """
  Invites a user to claim reattributable data
  """
  createAttributionInvitation(
    """
    Parameters for CreateAttributionInvitation
    """
    input: CreateAttributionInvitationInput!
  ): CreateAttributionInvitationPayload

  """
  Create a new branch protection rule
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Node ID of the OrgBlockUserAuditEntry object
  """
  id: ID!

  """
  The merge queue that this entry belongs to
  """
  mergeQueue: MergeQueue

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  position: Int!

  """
  The pull request that will be added to a merge group
  """
  pullRequest: PullRequest

  """
  Does this pull request need to be deployed on its own
  """
  solo: Boolean!

  """
  The state of this entry in the queue
  """
  state: MergeQueueEntryState!
}

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type Organization implements Actor & AnnouncementBanner & MemberStatusable & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  The text of the announcement
  """
  announcement: String

  """
  The expiration date of the announcement, if any
  """
  announcementExpiresAt: DateTime

  """
  Whether the announcement can be dismissed by the user
  """
  announcementUserDismissible: Boolean

  """
  A list of edges.
  """
  edges: [MergeQueueEntryEdge]

  """
  Identifies the date and time when the organization was archived.
  """
  archivedAt: DateTime

  """
  Audit log entries of the organization
  """
  nodes: [MergeQueueEntry]

  """
  Creates an organization as part of an enterprise account. A personal access
  token used to create an organization is implicitly permitted to update the
  organization it created, if the organization is part of an enterprise that has
  SAML enabled or uses Enterprise Managed Users. If the organization is not part
  of such an enterprise, and instead has SAML enabled for it individually, the
  token will then require SAML authorization to continue working against that organization.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MergeQueueEntryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MergeQueueEntry
}

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
  """
  updateOrganizationWebCommitSignoffSetting(
    """
    Parameters for UpdateOrganizationWebCommitSignoffSetting
    """
    input: UpdateOrganizationWebCommitSignoffSettingInput!
  ): UpdateOrganizationWebCommitSignoffSettingPayload

  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  updatePatreonSponsorability(
    """
    Parameters for UpdatePatreonSponsorability
    """
    input: UpdatePatreonSponsorabilityInput!
  ): UpdatePatreonSponsorabilityPayload

  """
  The Node ID of the OrgDisableTwoFactorRequirementAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  LOCKED

  """
  Updates an existing project.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Update the collaborators on a team or a project
  """
  updateProjectV2Collaborators(
    """
    Parameters for UpdateProjectV2Collaborators
    """
    input: UpdateProjectV2CollaboratorsInput!
  ): UpdateProjectV2CollaboratorsPayload

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  Entries only allowed to merge if they are passing.
  """
  ALLGREEN

  """
  The user affected by the action
  """
  createSponsorsListing(
    """
    Parameters for CreateSponsorsListing
    """
    input: CreateSponsorsListingInput!
  ): CreateSponsorsListingPayload

  """
  Create a new payment tier for your GitHub Sponsors profile.
  """
  isMinimized: Boolean!

  """
  Identifies the issue associated with the comment.
  """
  createdAt: DateTime!

  """
  Make many one-time sponsorships for different sponsorable users or
  organizations at once. Can only sponsor those who have a public GitHub
  Sponsors profile.
  """
  createSponsorships(
    """
    Parameters for CreateSponsorships
    """
    input: CreateSponsorshipsInput!
  ): CreateSponsorshipsPayload

"""
Audit log entry for a org.enable_oauth_app_restrictions event.
"""
type OrgEnableOauthAppRestrictionsAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Creates a new team discussion.
  """
  id: ID!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  Creates a new user list.
  """
  createUserList(
    """
    Parameters for CreateUserList
    """
    input: CreateUserListInput!
  ): CreateUserListPayload

  """
  Rejects a suggested topic for the repository.
  """
  minimizedReason: String

  """
  Update a repository ruleset
  """
  updateRepositoryRuleset(
    """
    Parameters for UpdateRepositoryRuleset
    """
    input: UpdateRepositoryRulesetInput!
  ): UpdateRepositoryRulesetPayload

  """
  Sets whether contributors are required to sign off on web-based commits for a repository.
  """
  updateRepositoryWebCommitSignoffSetting(
    """
    Parameters for UpdateRepositoryWebCommitSignoffSetting
    """
    input: UpdateRepositoryWebCommitSignoffSettingInput!
  ): UpdateRepositoryWebCommitSignoffSettingPayload

  """
  Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
  """
  publishedAt: DateTime

  """
  Returns the pull request associated with the comment, if this comment was made on a
  pull request.
  """
  pullRequest: PullRequest

  """
  A list of reactions grouped by content left on the subject.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgEnableOauthAppRestrictionsAuditEntry object
  """
  hasSponsorsListing: Boolean!

  """
  The Node ID of the Organization object
  """
  id: ID!

  """
  The Node ID of the OrgConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  A list of Reactions left on the Issue.
  """
  hidden: Boolean!

  """
  The Node ID of the License object
  """
  email: String

  """
  The Node ID of the Mannequin object
  """
  id: ID!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Updates an existing user list.
  """
  updateUserList(
    """
    Parameters for UpdateUserList
    """
    input: UpdateUserListInput!
  ): UpdateUserListPayload

  """
  Updates which of the viewer's lists an item belongs to
  """
  updateUserListsForItem(
    """
    Parameters for UpdateUserListsForItem
    """
    input: UpdateUserListsForItemInput!
  ): UpdateUserListsForItemPayload

  """
  Verify that a verifiable domain has the expected DNS record.
  """
  viewerCanDelete: Boolean!

  """
  Whether the given account is sponsoring this user/organization.
  """
  createdAt: DateTime!

"""
Audit log entry for a org.enable_saml event.
"""
type OrgEnableSamlAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The organization's public profile location.
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  A list of all mannequins for this organization.
  """
  mannequins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter mannequins by login.
    """
    login: String

    """
    Ordering options for mannequins returned from the connection.
    """
    orderBy: MannequinOrder = {field: CREATED_AT, direction: ASC}
  ): MannequinConnection!

  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The SAML provider's digest algorithm URL.
  """
  digestMethodUrl: URI

  """
  The Node ID of the OrgEnableSamlAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.enable_two_factor_requirement event.
"""
type OrgEnableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  A list of nodes.
  """
  nodes: [Mannequin]

"""
An OIDC identity provider configured to provision identities for an enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with read:enterprise or admin:enterprise scope.
"""
type OIDCProvider implements Node {
  """
  Information to aid in pagination.
  """
  enterpriseUrl: URI

  """
  Delete a project.
  """
  deleteProjectV2(
    """
    Parameters for DeleteProjectV2
    """
    input: DeleteProjectV2Input!
  ): DeleteProjectV2Payload

  """
  Delete a project field.
  """
  deleteProjectV2Field(
    """
    Parameters for DeleteProjectV2Field
    """
    input: DeleteProjectV2FieldInput!
  ): DeleteProjectV2FieldPayload

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a GitHub Enterprise Importer (GEI) migration.
"""
type MannequinEdge {
  """
  Deletes a project workflow.
  """
  deleteProjectV2Workflow(
    """
    Parameters for DeleteProjectV2Workflow
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OIDCProvider object
  """
  id: ID!

  """
  Deletes a pull request review.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object
  """
  id: ID!

  """
  The item at the end of the edge.
  """
  node: Mannequin
}

"""
Represents a member feature request notification
"""
type MemberFeatureRequestNotification implements Node {
  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The name of the Organization.
  """
  failureReason: String

  """
  The HTTP URL for the OAuth application
  """
  id: ID!

  """
  Deletes a user list.
  """
  deleteUserList(
    """
    Parameters for DeleteUserList
    """
    input: DeleteUserListInput!
  ): DeleteUserListPayload

  """
  Deletes a verifiable domain.
  """
  title: String!

  """
  Remove a pull request from the merge queue.
  """
  dequeuePullRequest(
    """
    Parameters for DequeuePullRequest
    """
    input: DequeuePullRequestInput!
  ): DequeuePullRequestPayload

  """
  Disable auto merge on the given pull request
  """
  updatedAt: DateTime!
}

"""
Entities that have members who can set status messages.
"""
input MannequinOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  field: MannequinOrderField!
}

"""
Ordering options for an organization's enterprise owner connections.
"""
input OrgEnterpriseOwnerOrder {
  """
  Find a project by number.
  """
  field: OrgEnterpriseOwnerOrderField!
}

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  Order enterprise owners by login.
  """
  LOGIN
}

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The migration state.
  """
  state: MigrationState!

  """
  The application URL of the OAuth application.
  """
  enqueuePullRequest(
    """
    Parameters for EnqueuePullRequest
    """
    input: EnqueuePullRequestInput!
  ): EnqueuePullRequestPayload

  """
  The callback URL of the OAuth application.
  """
  warningsCount: Int!
}

"""
A GitHub Enterprise Importer (GEI) migration source.
"""
type MigrationSource implements Node {
  """
  The Node ID of the MigrationSource object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OauthApplicationCreateAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  viewerCanReopen: Boolean!

  """
  The HTTP path listing organization's projects
  """
  organizationInvitation: OrganizationInvitation

  """
  The name of the Organization.
  """
  GITHUB_ARCHIVE
}

"""
The GitHub Enterprise Importer (GEI) migration state.
"""
input MarkProjectV2AsTemplateInput {
  """
  The rate limit of the OAuth application.
  """
  clientMutationId: String

  """
  The state of the OAuth application.
  """
  markProjectV2AsTemplate(
    """
    Parameters for MarkProjectV2AsTemplate
    """
    input: MarkProjectV2AsTemplateInput!
  ): MarkProjectV2AsTemplatePayload

  """
  Marks a pull request ready for review.
  """
  databaseId: Int

  """
  The migration is in progress.
  """
  id: ID!
}

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  The migration has not started.
  """
  clientMutationId: String

  """
  The migration needs to have its credentials validated.
  """
  projectV2: ProjectV2
}

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  """
  The OAuth application was active and allowed to have OAuth Accesses.
  """
  clientMutationId: String

  """
  The OAuth application was in the process of being deleted.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  Publish an existing sponsorship tier that is currently still a draft to a GitHub Sponsors profile.
  """
  publishSponsorsTier(
    """
    Parameters for PublishSponsorsTier
    """
    input: PublishSponsorsTierInput!
  ): PublishSponsorsTierPayload

  """
  Regenerates the identity provider recovery codes for an enterprise
  """
  clientMutationId: String

  """
  The team the project is linked to
  """
  team: Team
}

"""
The possible default commit messages for merges.
"""
enum MergeCommitMessage {
  """
  Default to a blank commit message.
  """
  BLANK

  """
  Default to the pull request's body.
  """
  createdAt: PreciseDateTime!

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  """
  The Node ID of the OrgInviteToBusinessAuditEntry object
  """
  id: ID!

  """
  Deletes a repository link from a project.
  """
  maximumEntriesToBuild: Int

  """
  The maximum number of entries to merge at once.
  """
  url: URI!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!
}

  """
  The merge method to use for this queue.
  """
  mergeMethod: PullRequestMergeMethod

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  unmarkProjectV2AsTemplate(
    """
    Parameters for UnmarkProjectV2AsTemplate
    """
    input: UnmarkProjectV2AsTemplateInput!
  ): UnmarkProjectV2AsTemplatePayload

  """
  Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
  """
  mergingStrategy: MergeQueueMergingStrategy

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
type OrgOauthAppAccessApprovedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The minimum number of entries required to merge at once.
  """
  minimumEntriesToMerge: Int

  """
  The amount of time in minutes to wait before ignoring the minumum number of
  entries in the queue requirement and merging a collection of entries
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type OrgDisableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Unsubscribes from notifications
  """
  unsubscribeFromNotifications(
    """
    Parameters for UnsubscribeFromNotifications
    """
    input: UnsubscribeFromNotificationsInput!
  ): UnsubscribeFromNotificationsPayload

  """
  Update a branch protection rule
  """
  baseCommit: Commit

  """
  The date and time this entry was added to the merge queue
  """
  enqueuedAt: DateTime!

  """
  The actor that enqueued this entry
  """
  enqueuer: Actor!

  """
  The estimated time in seconds until this entry will be merged
  """
  estimatedTimeToMerge: Int

  """
  The head commit for this entry
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessApprovedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  id: ID!

  """
  The HTTP path for the OAuth application
  """
  jump: Boolean!

  """
  The HTTP URL for the OAuth application
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgBlockUserAuditEntry object
  """
  id: ID!

  """
  Does this pull request need to be deployed on its own
  """
  solo: Boolean!

  """
  The state of this entry in the queue
  """
  state: MergeQueueEntryState!
}

"""
The connection type for MergeQueueEntry.
"""
type MergeQueueEntryConnection {
  """
  A list of edges.
  """
  edges: [MergeQueueEntryEdge]

  """
  The user affected by the action
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MergeQueueEntryEdge {
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MergeQueueEntry
}

"""
Audit log entry for a org.oauth_app_access_blocked event.
"""
type OrgOauthAppAccessBlockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The entry is currently waiting for checks to pass.
  """
  AWAITING_CHECKS

  """
  The entry is currently locked.
  """
  LOCKED

  """
  The entry is currently mergeable.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  Entries only allowed to merge if they are passing.
  """
  ALLGREEN

  """
  Failing Entires are allowed to merge if they are with a passing entry.
  """
  HEADGREEN
}

"""
Detailed status information about a pull request merge.
"""
type LinkedBranchConnection {
  """
  A list of edges.
  """
  edges: [LinkedBranchEdge]

  """
  A list of nodes.
  """
  nodes: [LinkedBranch]

  """
  Information to aid in pagination.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessBlockedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  id: ID!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: LinkedBranch
}

"""
Autogenerated input type of LockLockable
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  commitUrl: URI!

  """
  Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
  """
  updateOrganizationWebCommitSignoffSetting(
    """
    Parameters for UpdateOrganizationWebCommitSignoffSetting
    """
    input: UpdateOrganizationWebCommitSignoffSettingInput!
  ): UpdateOrganizationWebCommitSignoffSettingPayload

  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  updatePatreonSponsorability(
    """
    Parameters for UpdatePatreonSponsorability
    """
    input: UpdatePatreonSponsorabilityInput!
  ): UpdatePatreonSponsorabilityPayload

  """
  Updates an existing project.
  """
  viewerSubscription: SubscriptionState

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessDeniedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
type OrgOauthAppAccessRequestedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessRequestedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_unblocked event.
"""
type OrgOauthAppAccessUnblockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessUnblockedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.remove_billing_manager event.
"""
type OrgRemoveBillingManagerAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveBillingManagerAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.enable_two_factor_requirement event.
"""
type OrgEnableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The Node ID of the MovedColumnsInProjectEvent object
  """
  id: ID!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the MergedEvent object
  """
  id: ID!

  """
  The Node ID of the LockedEvent object
  """
  id: ID!

  """
  The Node ID of the IpAllowListEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The Node ID of the MarketplaceListing object
  """
  enterpriseUrl: URI

  """
  Abort a repository migration queued or in progress.
  """
  abortRepositoryMigration(
    """
    Parameters for AbortRepositoryMigration
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

  """
  The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object
  """
  id: ID!

  """
  The email address.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveMemberAuditEntry object
  """
  id: ID!

"""
Represents a GitHub Enterprise Importer (GEI) migration.
"""
interface Migration {
  """
  The migration flag to continue on error.
  """
  editor: Actor

  """
  The name of the Organization.
  """
  updateRepositoryRuleset(
    """
    Parameters for UpdateRepositoryRuleset
    """
    input: UpdateRepositoryRulesetInput!
  ): UpdateRepositoryRulesetPayload

  """
  Sets whether contributors are required to sign off on web-based commits for a repository.
  """
  updateRepositoryWebCommitSignoffSetting(
    """
    Parameters for UpdateRepositoryWebCommitSignoffSetting
    """
    input: UpdateRepositoryWebCommitSignoffSettingInput!
  ): UpdateRepositoryWebCommitSignoffSettingPayload

  """
  Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  Adds enterprise members to an organization within the enterprise.
  """
  addEnterpriseOrganizationMember(
    """
    Parameters for AddEnterpriseOrganizationMember
    """
    input: AddEnterpriseOrganizationMemberInput!
  ): AddEnterpriseOrganizationMemberPayload

  """
  Adds a support entitlement to an enterprise member.
  """
  id: ID!

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

"""
Ordering options for an organization's enterprise owner connections.
"""
input OrgEnterpriseOwnerOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprise owners by.
  """
  field: OrgEnterpriseOwnerOrderField!
}

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  Order enterprise owners by login.
  """
  LOGIN
}

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Organization owners have full access and can change several settings,
  including the names of repositories that belong to the Organization and Owners
  team membership. In addition, organization owners can delete the organization
  and all of its repositories.
  """
  email: String

  """
  The Node ID of the Mannequin object
  """
  id: ID!

  """
  Updates an existing user list.
  """
  updateUserList(
    """
    Parameters for UpdateUserList
    """
    input: UpdateUserListInput!
  ): UpdateUserListPayload

  """
  Updates which of the viewer's lists an item belongs to
  """
  updateUserListsForItem(
    """
    Parameters for UpdateUserListsForItem
    """
    input: UpdateUserListsForItemInput!
  ): UpdateUserListsForItemPayload

  """
  Verify that a verifiable domain has the expected DNS record.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgCreateAuditEntry object
  """
  id: ID!

"""
A GitHub Enterprise Importer (GEI) migration source.
"""
type MigrationSource implements Node {
  """
  The Node ID of the MigrationSource object
  """
  id: ID!

  """
  The migration source name.
  """
  isPrimary: Boolean!

  """
  The email address of the organization invitation.
  """
  email: String

  """
  The Node ID of the OrgInviteMemberAuditEntry object
  """
  id: ID!
}

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
type MannequinConnection {
  """
  A list of edges.
  """
  edges: [MannequinEdge]

  """
  A list of nodes.
  """
  nodes: [Mannequin]

  """
  The organization invitation.
  """
  organizationInvitation: OrganizationInvitation

  """
  The name of the Organization.
  """
  GITHUB_ARCHIVE
}

"""
The GitHub Enterprise Importer (GEI) migration state.
"""
input MannequinOrder {
  """
  The migration has failed.
  """
  direction: OrderDirection!

  """
  The migration has invalid credentials.
  """
  field: MannequinOrderField!
}

"""
The possible default commit messages for merges.
"""
enum MergeCommitMessage {
  """
  Archives a ProjectV2Item
  """
  archiveProjectV2Item(
    """
    Parameters for ArchiveProjectV2Item
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OIDCProvider object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveOutsideCollaboratorAuditEntry object
  """
  id: ID!

  """
  The migration has not started.
  """
  PR_BODY

  """
  The migration needs to have its credentials validated.
  """
  PR_TITLE
}

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  """
  The migration has been queued.
  """
  MERGE_MESSAGE

  """
  The migration has succeeded.
  """
  PR_TITLE
}

"""
Autogenerated input type of MergePullRequest
"""
enum MannequinOrderField {
  """
  The name of the OAuth application.
  """
  clearProjectV2ItemFieldValue(
    """
    Parameters for ClearProjectV2ItemFieldValue
    """
    input: ClearProjectV2ItemFieldValueInput!
  ): ClearProjectV2ItemFieldValuePayload

  """
  The HTTP path for the OAuth application
  """
  CREATED_AT

  """
  The HTTP URL for the OAuth application
  """
  LOGIN
}

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  Close a discussion.
  """
  closeDiscussion(
    """
    Parameters for CloseDiscussion
    """
    input: CloseDiscussionInput!
  ): CloseDiscussionPayload

  """
  Close an issue.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  createdAt: PreciseDateTime!

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The Node ID of the OrgInviteToBusinessAuditEntry object
  """
  id: ID!

  """
  Copy a project.
  """
  copyProjectV2(
    """
    Parameters for CopyProjectV2
    """
    input: CopyProjectV2Input!
  ): CopyProjectV2Payload

  """
  Invites a user to claim reattributable data
  """
  createAttributionInvitation(
    """
    Parameters for CreateAttributionInvitation
    """
    input: CreateAttributionInvitationInput!
  ): CreateAttributionInvitationPayload

  """
  The application URL of the OAuth application.
  """
  id: ID!

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  The callback URL of the OAuth application.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OauthApplicationCreateAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRestoreMemberAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
input MarkProjectV2AsTemplateInput {
  """
  The HTTP path for the OAuth application
  """
  clientMutationId: String

  """
  The HTTP URL for the OAuth application
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
type OrgOauthAppAccessApprovedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The configuration for this merge queue
  """
  configuration: MergeQueueConfiguration

  """
  The entries in the queue
  """
  entries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Create a branch linked to an issue.
  """
  createLinkedBranch(
    """
    Parameters for CreateLinkedBranch
    """
    input: CreateLinkedBranchInput!
  ): CreateLinkedBranchPayload

  """
  Creates a GitHub Enterprise Importer (GEI) migration source.
  """
  createMigrationSource(
    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeQueueEntryConnection

  """
  The Node ID of the MergeQueue object
  """
  id: ID!

  """
  The rate limit of the OAuth application.
  """
  nextEntryEstimatedTimeToMerge: Int

  """
  The state of the OAuth application.
  """
  createProjectV2Field(
    """
    Parameters for CreateProjectV2Field
    """
    input: CreateProjectV2FieldInput!
  ): CreateProjectV2FieldPayload

  """
  Create a new pull request
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessApprovedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  digestMethodUrl: URI

  """
  The HTTP path for the OAuth application
  """
  id: ID!

  """
  The HTTP URL for the OAuth application
  """
  issuerUrl: URI

  """
  The Node ID of the OrgAddMemberAuditEntry object
  """
  id: ID!

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  The entry is currently waiting for checks to pass.
  """
  AWAITING_CHECKS

  """
  The entry is currently locked.
  """
  LOCKED

  """
  The entry is currently mergeable.
  """
  MERGEABLE

  """
  Add a pull request to the merge queue.
  """
  enqueuePullRequest(
    """
    Parameters for EnqueuePullRequest
    """
    input: EnqueuePullRequestInput!
  ): EnqueuePullRequestPayload

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  QUEUED

  """
  The entry is currently unmergeable.
  """
  UNMERGEABLE
}

"""
Audit log entry for a org.oauth_app_access_blocked event.
"""
type OrgOauthAppAccessBlockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Entries only allowed to merge if they are passing.
  """
  ALLGREEN

  """
  Failing Entires are allowed to merge if they are with a passing entry.
  """
  HEADGREEN
}

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type OrgDisableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of MarkPullRequestReadyForReview
"""
input MarkPullRequestReadyForReviewInput {
  """
  Links a project to a repository.
  """
  linkProjectV2ToRepository(
    """
    Parameters for LinkProjectV2ToRepository
    """
    input: LinkProjectV2ToRepositoryInput!
  ): LinkProjectV2ToRepositoryPayload

  """
  Links a project to a team.
  """
  linkProjectV2ToTeam(
    """
    Parameters for LinkProjectV2ToTeam
    """
    input: LinkProjectV2ToTeamInput!
  ): LinkProjectV2ToTeamPayload

  """
  Creates a repository link for a project.
  """
  clientMutationId: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The suggested issue body.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessBlockedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  databaseId: Int

  """
  The HTTP path for the OAuth application
  """
  markProjectV2AsTemplate(
    """
    Parameters for MarkProjectV2AsTemplate
    """
    input: MarkProjectV2AsTemplateInput!
  ): MarkProjectV2AsTemplatePayload

  """
  The HTTP URL for the OAuth application
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUnblockUserAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The issue or pull request which has been marked as a duplicate of another.
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the MarkedAsDuplicateEvent object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  Abort a repository migration queued or in progress.
  """
  abortRepositoryMigration(
    """
    Parameters for AbortRepositoryMigration
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

  """
  The user affected by the action
  """
  id: ID!

  """
  Regenerates the identity provider recovery codes for an enterprise
  """
  howItWorks: String

  """
  The Node ID of the MarketplaceCategory object
  """
  id: ID!

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  Represents member feature request body containing organization name and the number of feature requests
  """
  body: String!

"""
Audit log entry for a org.enable_oauth_app_restrictions event.
"""
type OrgEnableOauthAppRestrictionsAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The Node ID of the MemberFeatureRequestNotification object
  """
  createdAt: DateTime!

  """
  The Node ID of the MergedEvent object
  """
  id: ID!

  """
  Adds enterprise members to an organization within the enterprise.
  """
  addEnterpriseOrganizationMember(
    """
    Parameters for AddEnterpriseOrganizationMember
    """
    input: AddEnterpriseOrganizationMemberInput!
  ): AddEnterpriseOrganizationMemberPayload

  """
  Removes a user from all organizations within the enterprise
  """
  removeEnterpriseMember(
    """
    Parameters for RemoveEnterpriseMember
    """
    input: RemoveEnterpriseMemberInput!
  ): RemoveEnterpriseMemberPayload

  """
  Removes an organization from the enterprise
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateDefaultRepositoryPermissionAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
type OrgOauthAppAccessRequestedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_unblocked event.
"""
type OrgOauthAppAccessUnblockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessUnblockedAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryCreationPermissionAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.remove_billing_manager event.
"""
type OrgRemoveBillingManagerAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveBillingManagerAuditEntry object
  """
  id: ID!

"""
Entities that have members who can set status messages.
"""
interface MemberStatusable {
  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Creates a new draft issue and add it to a Project.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgEnableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

  """
  The template name.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Represents a GitHub Enterprise Importer (GEI) migration.
"""
input EnterpriseServerInstallationOrder {
  """
  Reopen a discussion.
  """
  reopenDiscussion(
    """
    Parameters for ReopenDiscussion
    """
    input: ReopenDiscussionInput!
  ): ReopenDiscussionPayload

  """
  Reopen a issue.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  Adds a reply to an existing Pull Request Review Thread.
  """
  addPullRequestReviewThreadReply(
    """
    Parameters for AddPullRequestReviewThreadReply
    """
    input: AddPullRequestReviewThreadReplyInput!
  ): AddPullRequestReviewThreadReplyPayload

  """
  Adds a reaction to a subject.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

"""
Audit log entry for a org.enable_saml event.
"""
type OrgEnableSamlAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveMemberAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.enable_two_factor_requirement event.
"""
type Organization implements Actor & AnnouncementBanner & MemberStatusable & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  The text of the announcement
  """
  announcement: String

  """
  The expiration date of the announcement, if any
  """
  announcementExpiresAt: DateTime

  """
  Whether the announcement can be dismissed by the user
  """
  announcementUserDismissible: Boolean

  """
  Organization owners have full access and can change several settings,
  including the names of repositories that belong to the Organization and Owners
  team membership. In addition, organization owners can delete the organization
  and all of its repositories.
  """
  id: ID!

  """
  Identifies the date and time when the organization was archived.
  """
  archivedAt: DateTime

  """
  Audit log entries of the organization
  """
  migrationSource: MigrationSource!

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

  """
  Archives a ProjectV2Item
  """
  archiveProjectV2Item(
    """
    Parameters for ArchiveProjectV2Item
    """
    input: ArchiveProjectV2ItemInput!
  ): ArchiveProjectV2ItemPayload

  """
  Marks a repository as archived.
  """
  archiveRepository(
    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  Starts a GitHub Enterprise Importer organization migration.
  """
  startOrganizationMigration(
    """
    Parameters for StartOrganizationMigration
    """
    input: StartOrganizationMigrationInput!
  ): StartOrganizationMigrationPayload

  """
  Starts a GitHub Enterprise Importer (GEI) repository migration.
  """
  startRepositoryMigration(
    """
    The search string to look for.
    """
    orderBy: GistOrder
  ): GistConnection!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  enterpriseUrl: URI

  """
  The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object
  """
  id: ID!

  """
  Transfer an issue to a different repository
  """
  state: MigrationState!

  """
  Unarchives a ProjectV2Item
  """
  createdAt: PreciseDateTime!

  """
  The name of the Organization.
  """
  warningsCount: Int!
}

"""
A GitHub Enterprise Importer (GEI) migration source.
"""
type MigrationSource implements Node {
  """
  This mutation clears the value of a field for an item in a Project. Currently
  only text, number, date, assignees, labels, single-select, iteration and
  milestone fields are supported.
  """
  clearProjectV2ItemFieldValue(
    """
    Parameters for ClearProjectV2ItemFieldValue
    """
    input: ClearProjectV2ItemFieldValueInput!
  ): ClearProjectV2ItemFieldValuePayload

  """
  Creates a new project by cloning configuration from an existing project.
  """
  id: ID!

  """
  Unlinks a project from a repository.
  """
  unlinkProjectV2FromRepository(
    """
    Parameters for UnlinkProjectV2FromRepository
    """
    input: UnlinkProjectV2FromRepositoryInput!
  ): UnlinkProjectV2FromRepositoryPayload

  """
  Unlinks a project to a team.
  """
  unlinkProjectV2FromTeam(
    """
    Parameters for UnlinkProjectV2FromTeam
    """
    input: UnlinkProjectV2FromTeamInput!
  ): UnlinkProjectV2FromTeamPayload

  """
  Deletes a repository link from a project.
  """
  name: String!

  """
  Close a discussion.
  """
  closeDiscussion(
    """
    Parameters for CloseDiscussion
    """
    input: CloseDiscussionInput!
  ): CloseDiscussionPayload

"""
Ordering options for an organization's enterprise owner connections.
"""
input OrgEnterpriseOwnerOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprise owners by.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveOutsideCollaboratorAuditEntry object
  """
  id: ID!

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  Order enterprise owners by login.
  """
  LOGIN
}

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Close an issue.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  id: ID!

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
enum MigrationSourceType {
  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  Unmark a project as a template.
  """
  unmarkProjectV2AsTemplate(
    """
    Parameters for UnmarkProjectV2AsTemplate
    """
    input: UnmarkProjectV2AsTemplateInput!
  ): UnmarkProjectV2AsTemplatePayload

  """
  Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
  """
  commitUrl: URI!

  """
  Copy a project.
  """
  copyProjectV2(
    """
    Parameters for CopyProjectV2
    """
    input: CopyProjectV2Input!
  ): CopyProjectV2Payload

  """
  Invites a user to claim reattributable data
  """
  createAttributionInvitation(
    """
    Parameters for CreateAttributionInvitation
    """
    input: CreateAttributionInvitationInput!
  ): CreateAttributionInvitationPayload

  """
  Unsubscribes from notifications
  """
  unsubscribeFromNotifications(
    """
    Parameters for UnsubscribeFromNotifications
    """
    input: UnsubscribeFromNotificationsInput!
  ): UnsubscribeFromNotificationsPayload

  """
  The email address of the organization invitation.
  """
  email: String

  """
  The Node ID of the OrgInviteMemberAuditEntry object
  """
  hasSponsorsListing: Boolean!

  """
  The Node ID of the Organization object
  """
  id: ID!

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The migration is in progress.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The migration has not started.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The organization invitation.
  """
  organizationInvitation: OrganizationInvitation

  """
  Whether the given account is sponsoring this user/organization.
  """
  createEnterpriseOrganization(
    """
    Only return invitations matching this invitation source
    """
    last: Int
  ): UserContentEditConnection

  """
  The migration needs to have its credentials validated.
  """
  viewerCanClose: Boolean!

  """
  The migration has been queued.
  """
  viewerCanDelete: Boolean!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The organization's public profile location.
  """
  viewerCanReact: Boolean!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  viewerCanReopen: Boolean!

  """
  A list of all mannequins for this organization.
  """
  mannequins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter mannequins by login.
    """
    login: String

    """
    Ordering options for mannequins returned from the connection.
    """
    orderBy: MannequinOrder = {field: CREATED_AT, direction: ASC}
  ): MannequinConnection!

  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  createLinkedBranch(
    """
    Parameters for CreateLinkedBranch
    """
    input: CreateLinkedBranchInput!
  ): CreateLinkedBranchPayload

  """
  Sets whether or not an organization owner can make purchases.
  """
  viewerCanSubscribe: Boolean!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  Create a new project field.
  """
  createProjectV2Field(
    """
    Parameters for CreateProjectV2Field
    """
    input: CreateProjectV2FieldInput!
  ): CreateProjectV2FieldPayload

  """
  Create a new pull request
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRestoreMemberAuditEntry object
  """
  id: ID!

  """
  Identifies the viewer's thread subscription form action.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposDisableAuditEntry object
  """
  dueOn: DateTime

  """
  Create a repository ruleset
  """
  createRepositoryRuleset(
    """
    Parameters for CreateRepositoryRuleset
    """
    input: CreateRepositoryRulesetInput!
  ): CreateRepositoryRulesetPayload

  """
  Create a GitHub Sponsors profile to allow others to sponsor you or your organization.
  """
  createSponsorsListing(
    """
    Parameters for CreateSponsorsListing
    """
    input: CreateSponsorsListingInput!
  ): CreateSponsorsListingPayload

  """
  Create a new payment tier for your GitHub Sponsors profile.
  """
  createdAt: PreciseDateTime!

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The Node ID of the OrgInviteToBusinessAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgDisableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

  """
  Creates a new user list.
  """
  createUserList(
    """
    Parameters for CreateUserList
    """
    input: CreateUserListInput!
  ): CreateUserListPayload

  """
  Rejects a suggested topic for the repository.
  """
  declineTopicSuggestion(
    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The suggested issue body.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

  """
  The template filename.
  """
  filename: String!

  """
  Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
  """
  updateOrganizationWebCommitSignoffSetting(
    """
    Parameters for UpdateOrganizationWebCommitSignoffSetting
    """
    input: UpdateOrganizationWebCommitSignoffSettingInput!
  ): UpdateOrganizationWebCommitSignoffSettingPayload

  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  updatePatreonSponsorability(
    """
    Parameters for UpdatePatreonSponsorability
    """
    input: UpdatePatreonSponsorabilityInput!
  ): UpdatePatreonSponsorabilityPayload

  """
  Updates an existing project.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Updates an existing project.
  """
  updateProjectV2(
    """
    Parameters for UpdateProjectV2
    """
    input: UpdateProjectV2Input!
  ): UpdateProjectV2Payload

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
type OrgOauthAppAccessApprovedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Update the collaborators on a team or a project
  """
  updateProjectV2Collaborators(
    """
    Parameters for UpdateProjectV2Collaborators
    """
    input: UpdateProjectV2CollaboratorsInput!
  ): UpdateProjectV2CollaboratorsPayload

"""
Properties by which Enterprise Server user accounts upload connections can be ordered.
"""
enum EnterpriseServerUserAccountsUploadOrderField {
  """
  Unlink a branch from an issue.
  """
  deleteLinkedBranch(
    """
    Parameters for DeleteLinkedBranch
    """
    input: DeleteLinkedBranchInput!
  ): DeleteLinkedBranchPayload

  """
  Delete a package version.
  """
  fullDatabaseId: BigInt

  """
  Find a project by number.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this milestone
  """
  url: URI!

  """
  Delete a project.
  """
  deleteProjectV2(
    """
    Parameters for DeleteProjectV2
    """
    input: DeleteProjectV2Input!
  ): DeleteProjectV2Payload

  """
  Delete a project field.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessApprovedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  viewerCanReopen: Boolean!
}

  """
  The HTTP path for the OAuth application
  """
  digestMethodUrl: URI

  """
  The HTTP URL for the OAuth application
  """
  id: ID!

  """
  The HTTP path listing organization's projects
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  removeEnterpriseMember(
    """
    Parameters for RemoveEnterpriseMember
    """
    input: RemoveEnterpriseMemberInput!
  ): RemoveEnterpriseMemberPayload

"""
Audit log entry for a org.oauth_app_access_blocked event.
"""
type OrgOauthAppAccessBlockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The HTTP path for the OAuth application
  """
  BLANK

  """
  The HTTP URL for the OAuth application
  """
  PR_BODY

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type OrgDisableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
  """
  MERGE_MESSAGE

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
Autogenerated input type of MergePullRequest
"""
type EnterpriseUserAccount implements Actor & Node {
  """
  A URL pointing to the enterprise user account's public avatar.
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Reopen a discussion.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessBlockedAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUnblockUserAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  databaseId: Int

  """
  The HTTP path for the OAuth application
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The HTTP URL for the OAuth application
  """
  id: ID!

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

  """
  The Node ID of the OauthApplicationCreateAuditEntry object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

  """
  The name of the OAuth application.
  """
  retireSponsorsTier(
    """
    Parameters for RetireSponsorsTier
    """
    input: RetireSponsorsTierInput!
  ): RetireSponsorsTierPayload

  """
  The HTTP path for the OAuth application
  """
  revertPullRequest(
    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The user affected by the action
  """
  user: User

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  """
  The configuration for this merge queue
  """
  configuration: MergeQueueConfiguration

  """
  The entries in the queue
  """
  entries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Starts a GitHub Enterprise Importer organization migration.
  """
  startOrganizationMigration(
    """
    Parameters for StartOrganizationMigration
    """
    input: StartOrganizationMigrationInput!
  ): StartOrganizationMigrationPayload

  """
  Starts a GitHub Enterprise Importer (GEI) repository migration.
  """
  startRepositoryMigration(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: CREATED_AT, direction: DESC}

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  The rate limit of the OAuth application.
  """
  addEnterpriseOrganizationMember(
    """
    Parameters for AddEnterpriseOrganizationMember
    """
    input: AddEnterpriseOrganizationMemberInput!
  ): AddEnterpriseOrganizationMemberPayload

  """
  The state of the OAuth application.
  """
  transferEnterpriseOrganization(
    """
    Parameters for TransferEnterpriseOrganization
    """
    input: TransferEnterpriseOrganizationInput!
  ): TransferEnterpriseOrganizationPayload

  """
  Transfer an issue to a different repository
  """
  addEnterpriseSupportEntitlement(
    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeQueueEntryConnection

  """
  Unarchives a ProjectV2Item
  """
  unarchiveProjectV2Item(
    """
    Parameters for UnarchiveProjectV2Item
    """
    input: UnarchiveProjectV2ItemInput!
  ): UnarchiveProjectV2ItemPayload

  """
  Unarchives a repository.
  """
  id: ID!

  """
  The estimated time in seconds until a newly added entry would be merged
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateDefaultRepositoryPermissionAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberAuditEntry object
  """
  id: ID!

    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    orderBy: TeamOrder

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_unblocked event.
"""
type OrgOauthAppAccessUnblockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  createdAt: PreciseDateTime!

"""
An audit entry in an organization audit log.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.remove_billing_manager event.
"""
type OrgRemoveBillingManagerAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveBillingManagerAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgEnableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

"""
The state of an OAuth application when it was created.
"""
enum OauthApplicationCreateAuditEntryState {
  """
  The OAuth application was active and allowed to have OAuth Accesses.
  """
  repository: Repository

  """
  The OAuth application was in the process of being deleted.
  """
  unlinkProjectV2FromRepository(
    """
    Parameters for UnlinkProjectV2FromRepository
    """
    input: UnlinkProjectV2FromRepositoryInput!
  ): UnlinkProjectV2FromRepositoryPayload

  """
  The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  unlinkProjectV2FromTeam(
    """
    Parameters for UnlinkProjectV2FromTeam
    """
    input: UnlinkProjectV2FromTeamInput!
  ): UnlinkProjectV2FromTeamPayload

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
type OrganizationIdentityProvider implements Node {
  """
  Deletes a repository link from a project.
  """
  addProjectV2DraftIssue(
    """
    Parameters for AddProjectV2DraftIssue
    """
    input: AddProjectV2DraftIssueInput!
  ): AddProjectV2DraftIssuePayload

  """
  The maximum number of entries to build at once.
  """
  maximumEntriesToBuild: Int

  """
  The maximum number of entries to merge at once.
  """
  maximumEntriesToMerge: Int

  """
  The merge method to use for this queue.
  """
  mergeMethod: PullRequestMergeMethod

  """
  The strategy to use when merging entries.
  """
  mergingStrategy: MergeQueueMergingStrategy

  """
  Unmark a project as a template.
  """
  unmarkProjectV2AsTemplate(
    """
    Parameters for UnmarkProjectV2AsTemplate
    """
    input: UnmarkProjectV2AsTemplateInput!
  ): UnmarkProjectV2AsTemplatePayload

"""
Audit log entry for a org.enable_saml event.
"""
type OrgEnableSamlAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveMemberAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  issuerUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.enable_two_factor_requirement event.
"""
type Organization implements Actor & AnnouncementBanner & MemberStatusable & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  The text of the announcement
  """
  announcement: String

  """
  The expiration date of the announcement, if any
  """
  announcementExpiresAt: DateTime

  """
  Whether the announcement can be dismissed by the user
  """
  announcementUserDismissible: Boolean

  """
  Organization owners have full access and can change several settings,
  including the names of repositories that belong to the Organization and Owners
  team membership. In addition, organization owners can delete the organization
  and all of its repositories.
  """
  unsubscribeFromNotifications(
    """
    Parameters for UnsubscribeFromNotifications
    """
    input: UnsubscribeFromNotificationsInput!
  ): UnsubscribeFromNotificationsPayload

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
enum OrganizationInvitationType {
  """
  Identifies the date and time when the organization was archived.
  """
  archivedAt: DateTime

  """
  Audit log entries of the organization
  """
  baseCommit: Commit

  """
  The date and time this entry was added to the merge queue
  """
  enqueuedAt: DateTime!

  """
  The actor that enqueued this entry
  """
  enqueuer: Actor!

  """
  The estimated time in seconds until this entry will be merged
  """
  estimatedTimeToMerge: Int

  """
  Archives a ProjectV2Item
  """
  archiveProjectV2Item(
    """
    Parameters for ArchiveProjectV2Item
    """
    input: ArchiveProjectV2ItemInput!
  ): ArchiveProjectV2ItemPayload

  """
  Marks a repository as archived.
  """
  headCommit: Commit

  """
  The Node ID of the MergeQueueEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  mergeQueue: MergeQueue

  """
  The position of this entry in the queue
  """
  position: Int!

  """
  This mutation clears the value of a field for an item in a Project. Currently
  only text, number, date, assignees, labels, single-select, iteration and
  milestone fields are supported.
  """
  clearProjectV2ItemFieldValue(
    """
    Parameters for ClearProjectV2ItemFieldValue
    """
    input: ClearProjectV2ItemFieldValueInput!
  ): ClearProjectV2ItemFieldValuePayload

  """
  Creates a new project by cloning configuration from an existing project.
  """
  pullRequest: PullRequest

  """
  Does this pull request need to be deployed on its own
  """
  solo: Boolean!

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
union OrganizationOrUser = Organization | User

"""
Ordering options for an organization's enterprise owner connections.
"""
input OrgEnterpriseOwnerOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprise owners by.
  """
  field: OrgEnterpriseOwnerOrderField!
}

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  Order enterprise owners by login.
  """
  LOGIN
}

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  A list of edges.
  """
  edges: [MergeQueueEntryEdge]

  """
  A list of nodes.
  """
  nodes: [MergeQueueEntry]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Copy a project.
  """
  copyProjectV2(
    """
    Parameters for CopyProjectV2
    """
    input: CopyProjectV2Input!
  ): CopyProjectV2Payload

  """
  Invites a user to claim reattributable data
  """
  createAttributionInvitation(
    """
    Parameters for CreateAttributionInvitation
    """
    input: CreateAttributionInvitationInput!
  ): CreateAttributionInvitationPayload

  """
  Create a new branch protection rule
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MergeQueueEntryEdge {
  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  hasSponsorsListing: Boolean!

  """
  The Node ID of the Organization object
  """
  id: ID!

  """
  The Node ID of the OrgRemoveOutsideCollaboratorAuditEntry object
  """
  id: ID!

  """
  The email address of the organization invitation.
  """
  email: String

  """
  The Node ID of the OrgInviteMemberAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The organization invitation.
  """
  organizationInvitation: OrganizationInvitation

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  cursor: String!

  """
  Whether the given account is sponsoring this user/organization.
  """
  node: MergeQueueEntry
}

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  The entry is currently waiting for checks to pass.
  """
  AWAITING_CHECKS

  """
  The entry is currently locked.
  """
  LOCKED

  """
  The entry is currently mergeable.
  """
  MERGEABLE

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  The total number of organizations this user is in
  """
  totalOrganizationCount: Int!
}

"""
Information for an uploaded package.
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

  """
  Find the latest version for the package.
  """
  latestVersion: PackageVersion

  """
  Identifies the name of the package.
  """
  name: String!

  """
  Identifies the type of the package.
  """
  packageType: PackageType!

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The organization's public profile location.
  """
  QUEUED

  """
  The entry is currently unmergeable.
  """
  UNMERGEABLE
}

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  """
  A list of all mannequins for this organization.
  """
  mannequins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter mannequins by login.
    """
    login: String

    """
    Ordering options for mannequins returned from the connection.
    """
    orderBy: MannequinOrder = {field: CREATED_AT, direction: ASC}
  ): MannequinConnection!

  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  ALLGREEN

  """
  Failing Entires are allowed to merge if they are with a passing entry.
  """
  HEADGREEN
}

"""
Detailed status information about a pull request merge.
"""
enum MergeStateStatus {
  """
  The head ref is out of date.
  """
  BEHIND

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
  """
  updateOrganizationWebCommitSignoffSetting(
    """
    Parameters for UpdateOrganizationWebCommitSignoffSetting
    """
    input: UpdateOrganizationWebCommitSignoffSettingInput!
  ): UpdateOrganizationWebCommitSignoffSettingPayload

  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  updatePatreonSponsorability(
    """
    Parameters for UpdatePatreonSponsorability
    """
    input: UpdatePatreonSponsorabilityInput!
  ): UpdatePatreonSponsorabilityPayload

  """
  Updates an existing project.
  """
  node: Package
}

"""
A file in a package version.
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

  """
  The template filename.
  """
  filename: String!

  """
  Create a branch linked to an issue.
  """
  createdAt: PreciseDateTime!

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The Node ID of the OrgInviteToBusinessAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRestoreMemberAuditEntry object
  """
  id: ID!

  """
  The template name.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Create a repository ruleset
  """
  createRepositoryRuleset(
    """
    Parameters for CreateRepositoryRuleset
    """
    input: CreateRepositoryRulesetInput!
  ): CreateRepositoryRulesetPayload

  """
  Create a GitHub Sponsors profile to allow others to sponsor you or your organization.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgBlockUserAuditEntry object
  """
  id: ID!

  """
  Create a new payment tier for your GitHub Sponsors profile.
  """
  createSponsorsTier(
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

"""
The possible roles for enterprise membership.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  OWNER

    """
    Ordering options for gists returned from the connection
    """
    orderBy: GistOrder
  ): GistConnection!

  """
  Make many one-time sponsorships for different sponsorable users or
  organizations at once. Can only sponsor those who have a public GitHub
  Sponsors profile.
  """
  createSponsorships(
    """
    Parameters for CreateSponsorships
    """
    input: CreateSponsorshipsInput!
  ): CreateSponsorshipsPayload

  """
  Creates a new team discussion.
  """
  createdAt: DateTime!

  """
  The Node ID of the LabeledEvent object
  """
  id: ID!

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
type OrgOauthAppAccessApprovedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Creates a new user list.
  """
  createUserList(
    """
    Parameters for CreateUserList
    """
    input: CreateUserListInput!
  ): CreateUserListPayload

  """
  Update a repository ruleset
  """
  updateRepositoryRuleset(
    """
    Parameters for UpdateRepositoryRuleset
    """
    input: UpdateRepositoryRulesetInput!
  ): UpdateRepositoryRulesetPayload

  """
  Sets whether contributors are required to sign off on web-based commits for a repository.
  """
  updateRepositoryWebCommitSignoffSetting(
    """
    Parameters for UpdateRepositoryWebCommitSignoffSetting
    """
    input: UpdateRepositoryWebCommitSignoffSettingInput!
  ): UpdateRepositoryWebCommitSignoffSettingPayload

  """
  Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
  """
  UNAFFILIATED
}

"""
Represents an owner of a package.
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  A list of packages under the owner.
  """
  packages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Find packages by their names.
    """
    names: [String]

    """
    Ordering of the returned packages.
    """
    orderBy: PackageOrder = {field: CREATED_AT, direction: DESC}

    """
    Filter registry package by type.
    """
    packageType: PackageType

    """
    Find packages in a repository by ID.
    """
    repositoryId: ID
  ): PackageConnection!
}

"""
Represents a object that contains package activity statistics such as downloads.
"""
type PackageStatistics {
  """
  Number of times the package was downloaded since it was created.
  """
  downloadsTotalCount: Int!
}

"""
A version tag contains the mapping between a tag name and a version.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

  """
  Identifies the tag name of the version.
  """
  name: String!

  """
  Version that the tag is associated with.
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  color: String

  """
  The Node ID of the Language object
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

  """
  The Node ID of the MergedEvent object
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  The Node ID of the OrgOauthAppAccessApprovedAuditEntry object
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  The name of the OAuth application.
  """
  POLAR

  """
  The HTTP path for the OAuth application
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

  """
  The HTTP URL for the OAuth application
  """
  updateUserList(
    """
    Parameters for UpdateUserList
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

  """
  Updates which of the viewer's lists an item belongs to
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Verify that a verifiable domain has the expected DNS record.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposDisableAuditEntry object
  """
  id: ID!

  """
  The Node ID of the GistComment object
  """
  gist: Gist!

"""
Represents a GitHub Enterprise Importer (GEI) migration.
"""
interface Migration {
  """
  Unlink a branch from an issue.
  """
  deleteLinkedBranch(
    """
    Parameters for DeleteLinkedBranch
    """
    input: DeleteLinkedBranchInput!
  ): DeleteLinkedBranchPayload

  """
  Delete a package version.
  """
  headRefName: String!

"""
An OIDC identity provider configured to provision identities for an enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with read:enterprise or admin:enterprise scope.
"""
type OIDCProvider implements Node {
  """
  The Node ID of the HeadRefDeletedEvent object
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

"""
Audit log entry for a org.oauth_app_access_blocked event.
"""
type OrgOauthAppAccessBlockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The reason the migration failed.
  """
  failureReason: String

  """
  Find a project by number.
  """
  deleteProjectV2Field(
    """
    Parameters for DeleteProjectV2Field
    """
    input: DeleteProjectV2FieldInput!
  ): DeleteProjectV2FieldPayload

  """
  The suggested assignees.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Deletes a project workflow.
  """
  deleteProjectV2Workflow(
    """
    Parameters for DeleteProjectV2Workflow
    """
    input: DeleteProjectV2WorkflowInput!
  ): DeleteProjectV2WorkflowPayload

  """
  Deletes a pull request review.
  """
  migrationSource: MigrationSource!

  """
  The suggested issue body.
  """
  includesCreatedEdit: Boolean!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessBlockedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  deleteRepositoryRuleset(
    """
    Parameters for DeleteRepositoryRuleset
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The HTTP path for the OAuth application
  """
  createdAt: PreciseDateTime!

  """
  The HTTP URL for the OAuth application
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUnblockUserAuditEntry object
  """
  id: ID!

  """
  Deletes a team discussion.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
A GitHub Enterprise Importer (GEI) migration source.
"""
type MigrationSource implements Node {
  """
  Deletes a user list.
  """
  deleteUserList(
    """
    Parameters for DeleteUserList
    """
    input: DeleteUserListInput!
  ): DeleteUserListPayload

  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The source of this permission.
  """
  id: ID!

  """
  The HTTP path for the OAuth application
  """
  dequeuePullRequest(
    """
    Parameters for DequeuePullRequest
    """
    input: DequeuePullRequestInput!
  ): DequeuePullRequestPayload

  """
  The HTTP URL for the OAuth application
  """
  name: String!

  """
  The migration source type.
  """
  type: MigrationSourceType!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  isMinimized: Boolean!

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
enum MigrationSourceType {
  """
  The moment the editor made the last edit
  """
  createdAt: DateTime!

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Add a pull request to the merge queue.
  """
  enqueuePullRequest(
    """
    Parameters for EnqueuePullRequest
    """
    input: EnqueuePullRequestInput!
  ): EnqueuePullRequestPayload

  """
  Follow an organization.
  """
  id: ID!

  """
  A GitHub Migration API source.
  """
  GITHUB_ARCHIVE
}

"""
The GitHub Enterprise Importer (GEI) migration state.
"""
enum MigrationState {
  """
  The migration has failed.
  """
  minimizedReason: String

  """
  The application URL of the OAuth application.
  """
  color: String

  """
  The callback URL of the OAuth application.
  """
  id: ID!

  """
  The migration has not started.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OauthApplicationCreateAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateDefaultRepositoryPermissionAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
type OrgOauthAppAccessRequestedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_unblocked event.
"""
type OrgOauthAppAccessUnblockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessUnblockedAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryCreationPermissionAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.remove_billing_manager event.
"""
type OrgRemoveBillingManagerAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveBillingManagerAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgCreateAuditEntry object
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  linkProjectV2ToRepository(
    """
    Parameters for LinkProjectV2ToRepository
    """
    input: LinkProjectV2ToRepositoryInput!
  ): LinkProjectV2ToRepositoryPayload

  """
  The HTTP path for the OAuth application
  """
  linkProjectV2ToTeam(
    """
    Parameters for LinkProjectV2ToTeam
    """
    input: LinkProjectV2ToTeamInput!
  ): LinkProjectV2ToTeamPayload

  """
  The HTTP URL for the OAuth application
  """
  id: ID!

  """
  The migration has been queued.
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

  """
  Mark a project as a template. Note that only projects which are owned by an Organization can be marked as a template.
  """
  markProjectV2AsTemplate(
    """
    Parameters for MarkProjectV2AsTemplate
    """
    input: MarkProjectV2AsTemplateInput!
  ): MarkProjectV2AsTemplatePayload

  """
  Marks a pull request ready for review.
  """
  markPullRequestReadyForReview(
    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    orderBy: GistOrder
  ): GistConnection!

  """
  The migration has succeeded.
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

  """
  The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object
  """
  id: ID!

  """
  Identifies if the gist is a fork.
  """
  isFork: Boolean!

  """
  The rate limit of the OAuth application.
  """
  isPublic: Boolean!

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  The state of the OAuth application.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Publish an existing sponsorship tier that is currently still a draft to a GitHub Sponsors profile.
  """
  publishSponsorsTier(
    """
    Parameters for PublishSponsorsTier
    """
    input: PublishSponsorsTierInput!
  ): PublishSponsorsTierPayload

  """
  Regenerates the identity provider recovery codes for an enterprise
  """
  databaseId: Int

  """
  The Node ID of the MentionedEvent object
  """
  id: ID!
}

"""
The state of an OAuth application when it was created.
"""
input LinkProjectV2ToRepositoryInput {
  """
  The OAuth application was active and allowed to have OAuth Accesses.
  """
  clientMutationId: String

  """
  The OAuth application was in the process of being deleted.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type Organization implements Actor & AnnouncementBanner & MemberStatusable & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  The text of the announcement
  """
  announcement: String

  """
  The expiration date of the announcement, if any
  """
  announcementExpiresAt: DateTime

  """
  Whether the announcement can be dismissed by the user
  """
  announcementUserDismissible: Boolean

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Identifies the date and time when the organization was archived.
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

  """
  Audit log entries of the organization
  """
  removeEnterpriseMember(
    """
    Parameters for RemoveEnterpriseMember
    """
    input: RemoveEnterpriseMemberInput!
  ): RemoveEnterpriseMemberPayload

  """
  Removes an organization from the enterprise
  """
  repository: Repository
}

"""
The possible default commit messages for merges.
"""
enum MergeCommitMessage {
  """
  Default to a blank commit message.
  """
  dueOn: DateTime

  """
  The Node ID of the Milestone object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveMemberAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgDisableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

  """
  Default to the pull request's body.
  """
  PR_BODY

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
The possible default commit titles for merges.
"""
enum MergeCommitTitle {
  """
  Default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
  """
  MERGE_MESSAGE

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  PR_TITLE
}

"""
Autogenerated input type of MergePullRequest
"""
input LinkProjectV2ToTeamInput {
  """
  Reopen a discussion.
  """
  reopenDiscussion(
    """
    Parameters for ReopenDiscussion
    """
    input: ReopenDiscussionInput!
  ): ReopenDiscussionPayload

  """
  Reopen a issue.
  """
  clientMutationId: String

  """
  The ID of the project to link to the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to link to the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

  """
  The team the project is linked to
  """
  team: Team
}

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  """
  Organization owners have full access and can change several settings,
  including the names of repositories that belong to the Organization and Owners
  team membership. In addition, organization owners can delete the organization
  and all of its repositories.
  """
  retireSponsorsTier(
    """
    Parameters for RetireSponsorsTier
    """
    input: RetireSponsorsTierInput!
  ): RetireSponsorsTierPayload

  """
  Create a pull request that reverts the changes from a merged pull request.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgAddBillingManagerAuditEntry object
  """
  id: ID!

  """
  Revoke the migrator role to a user for all organizations under an enterprise account.
  """
  configuration: MergeQueueConfiguration

  """
  The entries in the queue
  """
  entries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The SAML provider's digest algorithm URL.
  """
  digestMethodUrl: URI

  """
  The Node ID of the OrgDisableSamlAuditEntry object
  """
  hasSponsorsListing: Boolean!

  """
  The Node ID of the Organization object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MergeQueueEntryEdge {
  """
  isMinimized: Boolean!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  createdAt: PreciseDateTime!

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  Whether the given account is sponsoring this user/organization.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveOutsideCollaboratorAuditEntry object
  """
  id: ID!

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  The entry is currently waiting for checks to pass.
  """
  AWAITING_CHECKS

  """
  The entry is currently locked.
  """
  LOCKED

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The organization's public profile location.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type OrgDisableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Entries only allowed to merge if they are passing.
  """
  ALLGREEN

  """
  A list of all mannequins for this organization.
  """
  mannequins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter mannequins by login.
    """
    login: String

    """
    Ordering options for mannequins returned from the connection.
    """
    orderBy: MannequinOrder = {field: CREATED_AT, direction: ASC}
  ): MannequinConnection!

  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

"""
Detailed status information about a pull request merge.
"""
input LinkRepositoryToProjectInput {
  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  viewerCanReopen: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  hidden: Boolean!

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  The Node ID of the OrgDisableTwoFactorRequirementAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  updatePatreonSponsorability(
    """
    Parameters for UpdatePatreonSponsorability
    """
    input: UpdatePatreonSponsorabilityInput!
  ): UpdatePatreonSponsorabilityPayload

  """
  Updates an existing project.
  """
  ref: Ref
}

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  A list of edges.
  """
  edges: [LinkedBranchEdge]

  """
  A list of nodes.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRestoreMemberAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The Node ID of the OrgConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The user affected by the action
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  createdAt: DateTime!

  """
  The Node ID of the MergedEvent object
  """
  databaseId: Int

  """
  The Node ID of the MovedColumnsInProjectEvent object
  """
  id: ID!

"""
Audit log entry for a org.enable_oauth_app_restrictions event.
"""
type OrgEnableOauthAppRestrictionsAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  viewerSubscription: SubscriptionState

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
Represents a GitHub Enterprise Importer (GEI) migration.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  The migration flag to continue on error.
  """
  closed: Boolean!

  """
  The Node ID of the OrgEnableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

  """
  Identifies the viewer's thread subscription form action.
  """
  createdAt: DateTime!

  """
  Identifies the viewer's thread subscription status.
  """
  creator: Actor

"""
Autogenerated input type of LinkProjectV2ToRepository
"""
input LinkProjectV2ToRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  databaseId: Int

  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  addEnterpriseOrganizationMember(
    """
    Parameters for AddEnterpriseOrganizationMember
    """
    input: AddEnterpriseOrganizationMemberInput!
  ): AddEnterpriseOrganizationMemberPayload

  """
  Updates an existing user list.
  """
  updateUserList(
    """
    Parameters for UpdateUserList
    """
    input: UpdateUserListInput!
  ): UpdateUserListPayload

  """
  Updates which of the viewer's lists an item belongs to
  """
  updateUserListsForItem(
    """
    Parameters for UpdateUserListsForItem
    """
    input: UpdateUserListsForItemInput!
  ): UpdateUserListsForItemPayload

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

"""
Audit log entry for a org.enable_saml event.
"""
type OrgEnableSamlAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  The username of the user who initiated the action
  """
  number: Int!

  """
  The HTTP path for the actor.
  """
  owner: ProjectV2Owner!

  """
  The HTTP URL for the actor.
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The SAML provider's digest algorithm URL.
  """
  digestMethodUrl: URI

  """
  The Node ID of the OrgEnableSamlAuditEntry object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

  """
  The Node ID of the OrgUnblockUserAuditEntry object
  """
  resourcePath: URI!

  """
  The corresponding operation type for the action
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  The Organization associated with the Audit Entry.
  """
  title: String!

  """
  The name of the Organization.
  """
  updatedAt: DateTime!

  """
  The HTTP path for the organization
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  user: User

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  The Node ID of the MigrationSource object
  """
  edges: [ProjectV2Edge]

  """
  The migration source name.
  """
  nodes: [ProjectV2]

  """
  The migration source type.
  """
  pageInfo: PageInfo!

  """
  Adds a reply to an existing Pull Request Review Thread.
  """
  addPullRequestReviewThreadReply(
    """
    Parameters for AddPullRequestReviewThreadReply
    """
    input: AddPullRequestReviewThreadReplyInput!
  ): AddPullRequestReviewThreadReplyPayload

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OIDCProvider object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgCreateAuditEntry object
  """
  id: ID!

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2
}

"""
A field inside a project.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  The Node ID of the OrgUpdateDefaultRepositoryPermissionAuditEntry object
  """
  createdAt: DateTime!

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  """
  The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object
  """
  dataType: ProjectV2FieldType!

"""
The GitHub Enterprise Importer (GEI) migration state.
"""
interface OauthApplicationAuditEntryData {
  """
  The name of the OAuth application.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  The HTTP path for the OAuth application
  """
  name: String!

  """
  The HTTP URL for the OAuth application
  """
  project: ProjectV2!

  """
  The migration is in progress.
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  The migration has not started.
  """
  createdAt: DateTime!

  """
  The migration needs to have its credentials validated.
  """
  dataType: ProjectV2FieldType!

  """
  The migration has been queued.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  The application URL of the OAuth application.
  """
  name: String!

  """
  The callback URL of the OAuth application.
  """
  project: ProjectV2!

"""
Ordering options for an organization's enterprise owner connections.
"""
input OrgEnterpriseOwnerOrder {
  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  Order enterprise owners by login.
  """
  edges: [ProjectV2FieldEdge]

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  nodes: [ProjectV2Field]

  """
  The Node ID of the OauthApplicationCreateAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  closeDiscussion(
    """
    Parameters for CloseDiscussion
    """
    input: CloseDiscussionInput!
  ): CloseDiscussionPayload

  """
  The HTTP path for the OAuth application
  """
  node: LinkedBranch
}

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
type ProjectV2FieldEdge {
  """
  The HTTP URL for the OAuth application
  """
  clientMutationId: String

  """
  The ID of the Project to mark as a template.
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  Assignees
  """
  ASSIGNEES

  """
  A unique identifier for the client performing the mutation.
  """
  DATE

  """
  The Node ID of the OrgDisableOauthAppRestrictionsAuditEntry object
  """
  ITERATION

  """
  The Node ID of the OrgUpdateMemberAuditEntry object
  """
  LABELS

  """
  The email address of the organization invitation.
  """
  LINKED_PULL_REQUESTS

  """
  The Node ID of the OrgInviteMemberAuditEntry object
  """
  MILESTONE

  """
  The rate limit of the OAuth application.
  """
  NUMBER

"""
Autogenerated input type of MarkPullRequestReadyForReview
"""
input LinkProjectV2ToTeamInput {
  """
  The state of the OAuth application.
  """
  REPOSITORY

  """
  The organization invitation.
  """
  REVIEWERS

  """
  The name of the Organization.
  """
  SINGLE_SELECT

  """
  The ID of the team to link to the project.
  """
  TEXT

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  The team the project is linked to
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  The OAuth application was active and allowed to have OAuth Accesses.
  """
  content: ProjectV2ItemContent

  """
  The OAuth application was in the process of being deleted.
  """
  createdAt: DateTime!

  """
  The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  creator: Actor

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  """
  The Node ID of the MarkedAsDuplicateEvent object
  """
  databaseId: Int

"""
Ordering options for environments
"""
input Environments {
  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  createLinkedBranch(
    """
    Parameters for CreateLinkedBranch
    """
    input: CreateLinkedBranchInput!
  ): CreateLinkedBranchPayload

  """
  Creates a GitHub Enterprise Importer (GEI) migration source.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Create a new project field.
  """
  createProjectV2Field(
    """
    Parameters for CreateProjectV2Field
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

  """
  Create a new pull request
  """
  isArchived: Boolean!

  """
  The Node ID of the OrgDisableSamlAuditEntry object
  """
  project: ProjectV2!

  """
  The slug of the enterprise.
  """
  type: ProjectV2ItemType!

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  """
  The HTTP URL for this enterprise.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  The Node ID of the OrgInviteToBusinessAuditEntry object
  """
  edges: [ProjectV2ItemEdge]

  """
  The Node ID of the OrgUpdateMemberRepositoryCreationPermissionAuditEntry object
  """
  nodes: [ProjectV2Item]

  """
  Remove a pull request from the merge queue.
  """
  dequeuePullRequest(
    """
    Parameters for DequeuePullRequest
    """
    input: DequeuePullRequestInput!
  ): DequeuePullRequestPayload

  """
  Disable auto merge on the given pull request
  """
  howItWorksHTML: HTML!

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
Properties by which mannequins can be ordered.
"""
type ProjectV2ItemEdge {
  """
  Order mannequins why when they were created.
  """
  CREATED_AT

  """
  Add a pull request to the merge queue.
  """
  enqueuePullRequest(
    """
    Parameters for EnqueuePullRequest
    """
    input: EnqueuePullRequestInput!
  ): EnqueuePullRequestPayload

  """
  Follow an organization.
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The action name
  """
  createdAt: DateTime!

  """
  Order environments by name.
  """
  creator: Actor

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  databaseId: Int

  """
  The Node ID of the MovedColumnsInProjectEvent object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The actor who created the item.
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
type OrgOauthAppAccessRequestedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  The HTTP URL for the actor.
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  The time the action was initiated
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  The Node ID of the OrgOauthAppAccessRequestedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ItemFieldValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

"""
Audit log entry for a org.enable_two_factor_requirement event.
"""
type OrgEnableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object
  """
  id: ID!

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

"""
Entities that have members who can set status messages.
"""
input MannequinOrder {
  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  The project view's name.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  The Node ID of the OrgOauthAppAccessApprovedAuditEntry object
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ViewEdge]

  """
  A unique identifier for the client performing the mutation.
  """
  nodes: [ProjectV2View]

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type ProjectV2ViewEdge {
  """
  Links a project to a repository.
  """
  linkProjectV2ToRepository(
    """
    Parameters for LinkProjectV2ToRepository
    """
    input: LinkProjectV2ToRepositoryInput!
  ): LinkProjectV2ToRepositoryPayload

  """
  Links a project to a team.
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  The Node ID of the OrgOauthAppAccessBlockedAuditEntry object
  """
  id: ID!

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

"""
Autogenerated input type of LinkRepositoryToProject
"""
input LinkProjectV2ToRepositoryInput {
  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  The name of the workflow.
  """
  clientMutationId: String

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  publishSponsorsTier(
    """
    Parameters for PublishSponsorsTier
    """
    input: PublishSponsorsTierInput!
  ): PublishSponsorsTierPayload

  """
  The rate limit of the OAuth application.
  """
  repository: Repository
}

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  oauthApplicationResourcePath: URI

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  id: ID!

  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  organization: Organization

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

"""
The possible organization invitation types.
"""
enum OrganizationInvitationType {
  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

"""
Information for an uploaded package.
"""
type Package implements Node {
  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Parameters for ReopenDiscussion
    """
    input: ReopenDiscussionInput!
  ): ReopenDiscussionPayload

  """
  Reopen a issue.
  """
  maximumEntriesToMerge: Int

  """
  The merge method to use for this queue.
  """
  mergeMethod: PullRequestMergeMethod

"""
Audit log entry for a org.enable_saml event.
"""
type OrgEnableSamlAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Audit log entry for a org.enable_two_factor_requirement event.
"""
type Organization implements Actor & AnnouncementBanner & MemberStatusable & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  The text of the announcement
  """
  announcement: String

    """
    Ordering of the returned package files.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Parameters for RetireSponsorsTier
    """
    input: RetireSponsorsTierInput!
  ): RetireSponsorsTierPayload

  """
  Identifies the date and time when the organization was archived.
  """
  archivedAt: DateTime

  """
  Audit log entries of the organization
  """
  revertPullRequest(
    """
    Parameters for RevertPullRequest
    """
    input: RevertPullRequestInput!
  ): RevertPullRequestPayload

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Starts a GitHub Enterprise Importer organization migration.
  """
  startOrganizationMigration(
    """
    Parameters for StartOrganizationMigration
    """
    input: StartOrganizationMigrationInput!
  ): StartOrganizationMigrationPayload

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Transfer an organization from one enterprise to another enterprise.
  """
  transferEnterpriseOrganization(
    """
    Parameters for TransferEnterpriseOrganization
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

"""
Ordering options for an organization's enterprise owner connections.
"""
input OrgEnterpriseOwnerOrder {
  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Parameters for UnlinkProjectV2FromRepository
    """
    input: UnlinkProjectV2FromRepositoryInput!
  ): UnlinkProjectV2FromRepositoryPayload

  """
  Unlinks a project to a team.
  """
  unlinkProjectV2FromTeam(
    """
    Parameters for UnlinkProjectV2FromTeam
    """
    input: UnlinkProjectV2FromTeamInput!
  ): UnlinkProjectV2FromTeamPayload

  """
  Deletes a repository link from a project.
  """
  edges: [MergeQueueEntryEdge]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Sets whether or not an organization owner can make purchases.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order mannequins by.
  """
  field: MannequinOrderField!
}

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

  """
  Updates an existing project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
type OrgOauthAppAccessUnblockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessUnblockedAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryCreationPermissionAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.remove_billing_manager event.
"""
type OrgRemoveBillingManagerAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveBillingManagerAuditEntry object
  """
  id: ID!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  node: LinkedBranch
}

"""
Autogenerated input type of LockLockable
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  Branches linked to this issue.
  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The name of the OAuth application.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgCreateAuditEntry object
  """
  id: ID!

  """
  The HTTP path for the OAuth application
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

  """
  The HTTP URL for the OAuth application
  """
  email: String

  """
  The Node ID of the Mannequin object
  """
  id: ID!

  """
  A list of nodes.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object
  """
  id: ID!

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  url: URI!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  The application URL of the OAuth application.
  """
  edges: [MannequinEdge]

  """
  The callback URL of the OAuth application.
  """
  nodes: [Mannequin]

  """
  Information to aid in pagination.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OauthApplicationCreateAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  id: ID!
}

"""
Represents a mannequin.
"""
type Organization implements Actor & AnnouncementBanner & MemberStatusable & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  The text of the announcement
  """
  announcement: String

  """
  The expiration date of the announcement, if any
  """
  announcementExpiresAt: DateTime

  """
  Whether the announcement can be dismissed by the user
  """
  announcementUserDismissible: Boolean

  """
  The HTTP path for the OAuth application
  """
  cursor: String!

  """
  Identifies the date and time when the organization was archived.
  """
  archivedAt: DateTime

  """
  Audit log entries of the organization
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposDisableAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveMemberAuditEntry object
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The Node ID of the ProjectColumn object
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  field: MannequinOrderField!
}

"""
Properties by which mannequins can be ordered.
"""
enum MannequinOrderField {
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  id: ID!

  """
  The state of the OAuth application.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
The possible default commit messages for merges.
"""
enum MergeCommitMessage {
  """
  Default to a blank commit message.
  """
  createdAt: DateTime!

  """
  The Node ID of the MilestonedEvent object
  """
  id: ID!

  """
  Default to the pull request's body.
  """
  PR_BODY

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
The state of an OAuth application when it was created.
"""
enum OauthApplicationCreateAuditEntryState {
  """
  Organization owners have full access and can change several settings,
  including the names of repositories that belong to the Organization and Owners
  team membership. In addition, organization owners can delete the organization
  and all of its repositories.
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  The OAuth application was in the process of being deleted.
  """
  PENDING_DELETION

  """
  The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  PR_TITLE
}

"""
Autogenerated input type of MergePullRequest
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  howItWorksHTML: HTML!

  """
  The Node ID of the MarketplaceListing object
  """
  id: ID!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  createdAt: DateTime!

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  Returns true if the project is closed.
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  A unique identifier for the client performing the mutation.
  """
  creator: Actor

  """
  The ID of the Project to mark as a template.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  entries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

  """
  The Node ID of the MergeQueue object
  """
  digestMethodUrl: URI

  """
  The Node ID of the OrgDisableSamlAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  Whether the given account is sponsoring this user/organization.
  """
  id: ID!

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  issuerUrl: URI

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  Entries only allowed to merge if they are passing.
  """
  ALLGREEN

  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  Marks a repository as archived.
  """
  number: Int!

"""
Detailed status information about a pull request merge.
"""
type MarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  owner: ProjectV2Owner!

  """
  The project.
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  The project's readme.
  """
  readme: String

"""
Autogenerated input type of MarkPullRequestReadyForReview
"""
input MarkPullRequestReadyForReviewInput {
  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

  """
  The HTTP path for this project
  """
  resourcePath: URI!

  """
  The project's short description.
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  The project's name.
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  url: URI!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  A list of all mannequins for this organization.
  """
  mannequins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  A list of edges.
  """
  edges: [ProjectV2Edge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2]

  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgBlockUserAuditEntry object
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  This mutation clears the value of a field for an item in a Project. Currently
  only text, number, date, assignees, labels, single-select, iteration and
  milestone fields are supported.
  """
  clearProjectV2ItemFieldValue(
    """
    Parameters for ClearProjectV2ItemFieldValue
    """
    input: ClearProjectV2ItemFieldValueInput!
  ): ClearProjectV2ItemFieldValuePayload

  """
  Creates a new project by cloning configuration from an existing project.
  """
  node: ProjectV2
}

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  Close a discussion.
  """
  createdAt: DateTime!

  """
  Close an issue.
  """
  dataType: ProjectV2FieldType!

  """
  The Node ID of the MembersCanDeleteReposEnableAuditEntry object
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  The Node ID of the Mannequin object
  """
  name: String!

  """
  The template filename.
  """
  project: ProjectV2!

  """
  Invites a user to claim reattributable data
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
type PullRequestReviewThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  The original line in the file to which this thread refers.
  """
  originalLine: Int

  """
  The original start line in the file to which this thread refers (multi-line only).
  """
  originalStartLine: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Create a new branch protection rule
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  name: String!

  """
  The Node ID of the OrgRestoreMemberAuditEntry object
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type ProjectV2FieldConnection {
  """
  Creates an organization as part of an enterprise account. A personal access
  token used to create an organization is implicitly permitted to update the
  organization it created, if the organization is part of an enterprise that has
  SAML enabled or uses Enterprise Managed Users. If the organization is not part
  of such an enterprise, and instead has SAML enabled for it individually, the
  token will then require SAML authorization to continue working against that organization.
  """
  edges: [ProjectV2FieldEdge]

  """
  The item at the end of the edge.
  """
  nodes: [ProjectV2Field]

  """
  The Node ID of the OrgConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  """
  The user affected by the action
  """
  field: MannequinOrderField!
}

"""
Properties by which mannequins can be ordered.
"""
type ProjectV2FieldEdge {
  """
  A cursor for use in pagination.
  """
  Create a branch linked to an issue.
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  Creates a GitHub Enterprise Importer (GEI) migration source.
  """
  ASSIGNEES

  """
  The Node ID of the MarkedAsDuplicateEvent object
  """
  DATE

"""
Audit log entry for a org.enable_oauth_app_restrictions event.
"""
type OrgEnableOauthAppRestrictionsAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The Node ID of the MentionedEvent object
  """
  ITERATION

  """
  Create a new project field.
  """
  LABELS

"""
An item in a pull request timeline
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

"""
Represents a GitHub Enterprise Importer (GEI) migration.
"""
input MarkDiscussionCommentAsAnswerInput {
  """
  The migration flag to continue on error.
  """
  MILESTONE

  """
  The suggested issue body.
  """
  NUMBER

  """
  Create a repository ruleset
  """
  REPOSITORY

  """
  Create a GitHub Sponsors profile to allow others to sponsor you or your organization.
  """
  REVIEWERS

  """
  Create a new payment tier for your GitHub Sponsors profile.
  """
  SINGLE_SELECT

  """
  The Node ID of the OrgEnableOauthAppRestrictionsAuditEntry object
  """
  TEXT

  """
  The reason the migration failed.
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  Make many one-time sponsorships for different sponsorable users or
  organizations at once. Can only sponsor those who have a public GitHub
  Sponsors profile.
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  Creates a new team discussion.
  """
  content: ProjectV2ItemContent

  """
  The Node ID of the OrgConfigEnableCollaboratorsOnlyAuditEntry object
  """
  createdAt: DateTime!

  """
  The template filename.
  """
  creator: Actor

  """
  Creates a new user list.
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

  """
  The migration source.
  """
  isArchived: Boolean!

  """
  The ID of the Project to mark as a template.
  """
  project: ProjectV2!

  """
  The user who initiated the action
  """
  type: ProjectV2ItemType!

  """
  The IP address of the actor
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  Find a project by number.
  """
  edges: [ProjectV2ItemEdge]

  """
  The HTTP path for the actor.
  """
  nodes: [ProjectV2Item]

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  totalCount: Int!
}

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  The SAML provider's digest algorithm URL.
  """
  digestMethodUrl: URI

  """
  The Node ID of the OrgEnableSamlAuditEntry object
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The SAML provider's issuer URL.
  """
  createdAt: DateTime!

  """
  The Node ID of the OrgUnblockUserAuditEntry object
  """
  creator: Actor

  """
  The HTTP path listing organization's projects
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  The user affected by the action
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

"""
The GitHub Enterprise Importer (GEI) migration state.
"""
enum MigrationState {
  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    input: DeleteProjectV2FieldInput!
  ): DeleteProjectV2FieldPayload

  """
  The name of the Organization.
  """
  deleteProjectV2Workflow(
    """
    Parameters for DeleteProjectV2Workflow
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  The SHA after the push
  """
  nextSha: GitObjectID

  """
  The permalink for this push.
  """
  permalink: URI!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the PushAllowance object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgDisableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeQueueEntryConnection

  """
  The organization invitation.
  """
  organizationInvitation: OrganizationInvitation

  """
  The name of the Organization.
  """
  linkProjectV2ToRepository(
    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  search(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    query: String!

    """
    The types of search items to search within.
    """
    type: SearchType!
  ): SearchResultItemConnection!

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  enterpriseUrl: URI

  """
  The actor who created the item.
  """
  state: MigrationState!

  """
  Archives a ProjectV2Item
  """
  archiveProjectV2Item(
    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  databaseId: Int

  """
  The Node ID of the Reactable object
  """
  id: ID!

  """
  The IP address of the actor
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

"""
An edge in a connection.
"""
type ProjectV2ItemFieldValueEdge {
  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Reaction object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  The Node ID of the EnterpriseServerInstallation object
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Update a repository ruleset
  """
  updateRepositoryRuleset(
    """
    Parameters for UpdateRepositoryRuleset
    """
    input: UpdateRepositoryRulesetInput!
  ): UpdateRepositoryRulesetPayload

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

"""
Autogenerated input type of LinkProjectV2ToTeam
"""
input LinkProjectV2ToTeamInput {
  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  The name of the Organization.
  """
  createAttributionInvitation(
    """
    Parameters for CreateAttributionInvitation
    """
    input: CreateAttributionInvitationInput!
  ): CreateAttributionInvitationPayload

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReadyForReviewEvent object
  """
  id: ID!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  GRAY
  """
  GRAY

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  branchProtectionRule: BranchProtectionRule

  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    The head ref to compare against.
    """
    headRef: String!
  ): Comparison

  """
  The Node ID of the Ref object
  """
  id: ID!

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  A list of rules from active Repository and Organization rulesets that apply to this ref.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repository rules.
    """
    orderBy: RepositoryRuleOrder = {field: UPDATED_AT, direction: DESC}
  ): RepositoryRuleConnection

  """
  The object the ref points to. Returns null when object does not exist.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Ways in which lists of git refs can be ordered upon return.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
Branch protection rules that are enforced on the viewer.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Identifies the commit associated with the 'referenced' event.
  """
  commit: Commit

  """
  Identifies the repository associated with the 'referenced' event.
  """
  commitRepository: Repository!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReferencedEvent object
  """
  id: ID!

  """
  Reference originated in a different repository.
  """
  isCrossRepository: Boolean!

  """
  Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference.
  """
  isDirectReference: Boolean!

  """
  Object referenced by event.
  """
  subject: ReferencedSubject!
}

"""
Any referencable object
"""
union ReferencedSubject = Issue | PullRequest

"""
Autogenerated input type of RegenerateEnterpriseIdentityProviderRecoveryCodes
"""
input RegenerateEnterpriseIdentityProviderRecoveryCodesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  The project view's name.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The description of this release rendered to HTML.
  """
  descriptionHTML: HTML

  """
  The Node ID of the Release object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  The organization's public profile URL.
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A name to filter the assets by.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  The amount of time in minutes to wait for a check response before considering it a failure.
  """
  edges: [ProjectV2ViewEdge]

  """
  The maximum number of entries to build at once.
  """
  nodes: [ProjectV2View]

  """
  Publish an existing sponsorship tier that is currently still a draft to a GitHub Sponsors profile.
  """
  publishSponsorsTier(
    """
    Parameters for PublishSponsorsTier
    """
    input: PublishSponsorsTierInput!
  ): PublishSponsorsTierPayload

  """
  Regenerates the identity provider recovery codes for an enterprise
  """
  maximumEntriesToMerge: Int

"""
An edge in a connection.
"""
type ProjectV2ViewEdge {
  """
  The merge method to use for this queue.
  """
  mergeMethod: PullRequestMergeMethod

  """
  The strategy to use when merging entries.
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  Removes a user from all organizations within the enterprise
  """
  removeEnterpriseMember(
    """
    Parameters for RemoveEnterpriseMember
    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  downloadUrl: URI!

  """
  The Node ID of the ReleaseAsset object
  """
  id: ID!

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  oauthApplicationName: String

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  userResourcePath: URI

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  action: String!

  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  actorLocation: ActorLocation

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise from which the user should be removed.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the user to remove from the enterprise.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  The user that was removed from the enterprise.
  """
  user: User

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

  """
  The Node ID of the RemovedFromMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The reason this pull request was removed from the queue.
  """
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
type RemovedFromProjectEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  databaseId: Int

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  currentTitle: String!

  """
  The Node ID of the RenamedTitleEvent object
  """
  id: ID!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
input ReopenIssueInput {
  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

"""
Audit log entry for a org.remove_billing_manager event.
"""
type Package implements Node {
  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddMemberAuditEntry object
  """
  id: ID!

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Transfer an organization from one enterprise to another enterprise.
  """
  transferEnterpriseOrganization(
    """
    Parameters for TransferEnterpriseOrganization
    """
    input: TransferEnterpriseOrganizationInput!
  ): TransferEnterpriseOrganizationPayload

  """
  Transfer an issue to a different repository
  """
  addEnterpriseOrganizationMember(
    """
    Parameters for AddEnterpriseOrganizationMember
    """
    input: AddEnterpriseOrganizationMemberInput!
  ): AddEnterpriseOrganizationMemberPayload

  """
  Unarchives a ProjectV2Item
  """
  unarchiveProjectV2Item(
    """
    Parameters for UnarchiveProjectV2Item
    """
    input: UnarchiveProjectV2ItemInput!
  ): UnarchiveProjectV2ItemPayload

  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The Node ID of the OrgConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Unsubscribes from notifications
  """
  unsubscribeFromNotifications(
    """
    Parameters for UnsubscribeFromNotifications
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Archives a ProjectV2Item
  """
  archiveProjectV2Item(
    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    input: ArchiveProjectV2ItemInput!
  ): ArchiveProjectV2ItemPayload

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  id: ID!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Copy a project.
  """
  copyProjectV2(
    """
    Parameters for CopyProjectV2
    """
    input: CopyProjectV2Input!
  ): CopyProjectV2Payload

  """
  Invites a user to claim reattributable data
  """
  createAttributionInvitation(
    """
    Parameters for CreateAttributionInvitation
    """
    input: CreateAttributionInvitationInput!
  ): CreateAttributionInvitationPayload

  """
  Create a new branch protection rule
  """
  createBranchProtectionRule(
    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
enum MannequinOrderField {
  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoArchivedAuditEntry object
  """
  id: ID!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  Find a project by number.
  """
  publishedAt: DateTime

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  UNAFFILIATED
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  viewerSubscription: SubscriptionState

  """
  Identifies the viewer's thread subscription form action.
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

  """
  Identifies the viewer's thread subscription status.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type OrgDisableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The configuration for this merge queue
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
type PullRequestChangedFile {
  """
  The HTTP path listing organization's projects
  """
  id: ID!

  """
  The estimated time in seconds until a newly added entry would be merged
  """
  nextEntryEstimatedTimeToMerge: Int

  """
  Retire a published payment tier from your GitHub Sponsors profile so it cannot be used to start new sponsorships.
  """
  retireSponsorsTier(
    """
    Parameters for RetireSponsorsTier
    """
    input: RetireSponsorsTierInput!
  ): RetireSponsorsTierPayload

  """
  Create a pull request that reverts the changes from a merged pull request.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgDisableTwoFactorRequirementAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  resourcePath: URI!

  """
  The HTTP URL for this merge queue
  """
  url: URI!
}

"""
Configuration for a MergeQueue
"""
type MergeQueueConfiguration {
  """
  The amount of time in minutes to wait for a check response before considering it a failure.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

  """
  The maximum number of entries to build at once.
  """
  maximumEntriesToBuild: Int

  """
  The maximum number of entries to merge at once.
  """
  maximumEntriesToMerge: Int

  """
  The user affected by the action
  """
  mergingStrategy: MergeQueueMergingStrategy

  """
  Transfer an organization from one enterprise to another enterprise.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  Transfer an issue to a different repository
  """
  minimumEntriesToMerge: Int

  """
  Unarchives a ProjectV2Item
  """
  unarchiveProjectV2Item(
    """
    Parameters for UnarchiveProjectV2Item
    """
    input: UnarchiveProjectV2ItemInput!
  ): UnarchiveProjectV2ItemPayload

"""
Audit log entry for a org.enable_oauth_app_restrictions event.
"""
type OrgEnableOauthAppRestrictionsAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Unarchives a repository.
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Entries in a MergeQueue
"""
type MergeQueueEntry implements Node {
  """
  The base commit for this entry
  """
  baseCommit: Commit

  """
  The date and time this entry was added to the merge queue
  """
  enqueuedAt: DateTime!

  """
  Unlinks a project from a repository.
  """
  unlinkProjectV2FromRepository(
    """
    Parameters for UnlinkProjectV2FromRepository
    """
    input: UnlinkProjectV2FromRepositoryInput!
  ): UnlinkProjectV2FromRepositoryPayload

  """
  Unlinks a project to a team.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

  """
  Deletes a repository link from a project.
  """
  databaseId: Int

  """
  The Node ID of the MovedColumnsInProjectEvent object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberAuditEntry object
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The Node ID of the OrgAddMemberAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgEnableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

  """
  The estimated time in seconds until this entry will be merged
  """
  estimatedTimeToMerge: Int

  """
  The head commit for this entry
  """
  headCommit: Commit

  """
  The Node ID of the MergeQueueEntry object
  """
  id: ID!

  """
  Unmark a project as a template.
  """
  unmarkProjectV2AsTemplate(
    """
    Parameters for UnmarkProjectV2AsTemplate
    """
    input: UnmarkProjectV2AsTemplateInput!
  ): UnmarkProjectV2AsTemplatePayload

  """
  Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
  """
  jump: Boolean!

  """
  The merge queue that this entry belongs to
  """
  mergeQueue: MergeQueue

  """
  Abort a repository migration queued or in progress.
  """
  abortRepositoryMigration(
    """
    Parameters for AbortRepositoryMigration
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

  """
  Unsubscribes from notifications
  """
  unsubscribeFromNotifications(
    """
    Parameters for UnsubscribeFromNotifications
    """
    input: UnsubscribeFromNotificationsInput!
  ): UnsubscribeFromNotificationsPayload

  """
  Update a branch protection rule
  """
  position: Int!

"""
Audit log entry for a org.enable_saml event.
"""
type OrgEnableSamlAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The SAML provider's digest algorithm URL.
  """
  digestMethodUrl: URI

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  The Node ID of the OrgEnableSamlAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryCreationPermissionAuditEntry object
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The user affected by the action
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  userResourcePath: URI

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  userUrl: URI
}

"""
Audit log entry for a org.enable_two_factor_requirement event.
"""
type OrgEnableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  A list of edges.
  """
  edges: [MergeQueueEntryEdge]

  """
  A list of nodes.
  """
  nodes: [MergeQueueEntry]

  """
  Adds enterprise members to an organization within the enterprise.
  """
  addEnterpriseOrganizationMember(
    """
    Parameters for AddEnterpriseOrganizationMember
    """
    input: AddEnterpriseOrganizationMemberInput!
  ): AddEnterpriseOrganizationMemberPayload

  """
  Adds a support entitlement to an enterprise member.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MergeQueueEntryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  The entry is currently waiting for checks to pass.
  """
  addProjectV2DraftIssue(
    """
    Parameters for AddProjectV2DraftIssue
    """
    input: AddProjectV2DraftIssueInput!
  ): AddProjectV2DraftIssuePayload

  """
  The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object
  """
  id: ID!

  """
  Sets whether or not an organization owner can make purchases.
  """
  UNMERGEABLE
}

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  Entries only allowed to merge if they are passing.
  """
  ALLGREEN

  """
  The name of the Organization.
  """
  id: ID!

"""
Detailed status information about a pull request merge.
"""
type MergeQueue implements Node {
  """
  Adds a reply to an existing Pull Request Review Thread.
  """
  addPullRequestReviewThreadReply(
    """
    Parameters for AddPullRequestReviewThreadReply
    """
    input: AddPullRequestReviewThreadReplyInput!
  ): AddPullRequestReviewThreadReplyPayload

  """
  Adds a reaction to a subject.
  """
  configuration: MergeQueueConfiguration

  """
  The entries in the queue
  """
  entries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object
  """
  id: ID!

  """
  The Node ID of the MergeQueue object
  """
  id: ID!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  archiveProjectV2Item(
    """
    Parameters for ArchiveProjectV2Item
    """
    input: ArchiveProjectV2ItemInput!
  ): ArchiveProjectV2ItemPayload

  """
  Marks a repository as archived.
  """
  nextEntryEstimatedTimeToMerge: Int

"""
Ordering options for an organization's enterprise owner connections.
"""
input OrgEnterpriseOwnerOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprise owners by.
  """
  field: OrgEnterpriseOwnerOrderField!
}

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  Order enterprise owners by login.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The repository this merge queue belongs to
  """
  repository: Repository

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  resourcePath: URI!

  """
  The HTTP URL for this merge queue
  """
  url: URI!
}

"""
Configuration for a MergeQueue
"""
type Organization implements Actor & AnnouncementBanner & MemberStatusable & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  The text of the announcement
  """
  announcement: String

  """
  The expiration date of the announcement, if any
  """
  announcementExpiresAt: DateTime

  """
  Whether the announcement can be dismissed by the user
  """
  announcementUserDismissible: Boolean

  """
  The amount of time in minutes to wait for a check response before considering it a failure.
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Identifies the date and time when the organization was archived.
  """
  archivedAt: DateTime

  """
  Audit log entries of the organization
  """
  clearProjectV2ItemFieldValue(
    """
    Parameters for ClearProjectV2ItemFieldValue
    """
    input: ClearProjectV2ItemFieldValueInput!
  ): ClearProjectV2ItemFieldValuePayload

  """
  Creates a new project by cloning configuration from an existing project.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

  """
  The maximum number of entries to merge at once.
  """
  maximumEntriesToMerge: Int

  """
  Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
  """
  updateOrganizationWebCommitSignoffSetting(
    """
    Parameters for UpdateOrganizationWebCommitSignoffSetting
    """
    input: UpdateOrganizationWebCommitSignoffSettingInput!
  ): UpdateOrganizationWebCommitSignoffSettingPayload

  """
  The email address of the organization invitation.
  """
  email: String

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  id: ID!

  """
  Close an issue.
  """
  mergeMethod: PullRequestMergeMethod

  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  The organization invitation.
  """
  organizationInvitation: OrganizationInvitation

  """
  The name of the Organization.
  """
  updateProjectV2(
    """
    Parameters for UpdateProjectV2
    """
    input: UpdateProjectV2Input!
  ): UpdateProjectV2Payload

  """
  Update the collaborators on a team or a project
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Entries in a MergeQueue
"""
type MergeQueueEntry implements Node {
  """
  The base commit for this entry
  """
  baseCommit: Commit

  """
  The date and time this entry was added to the merge queue
  """
  enqueuedAt: DateTime!

  """
  The actor that enqueued this entry
  """
  enqueuer: Actor!

  """
  The estimated time in seconds until this entry will be merged
  """
  estimatedTimeToMerge: Int

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  """
  The migration flag to continue on error.
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

  """
  The Node ID of the MergeQueueEntry object
  """
  id: ID!

  """
  Creates an organization as part of an enterprise account. A personal access
  token used to create an organization is implicitly permitted to update the
  organization it created, if the organization is part of an enterprise that has
  SAML enabled or uses Enterprise Managed Users. If the organization is not part
  of such an enterprise, and instead has SAML enabled for it individually, the
  token will then require SAML authorization to continue working against that organization.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the Migration object
  """
  hasSponsorsListing: Boolean!

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  mergeQueue: MergeQueue

  """
  The migration source.
  """
  position: Int!

  """
  Create a branch linked to an issue.
  """
  createdAt: PreciseDateTime!

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The Node ID of the OrgInviteToBusinessAuditEntry object
  """
  id: ID!

  """
  Whether the given account is sponsoring this user/organization.
  """
  updateRepositoryWebCommitSignoffSetting(
    """
    Parameters for UpdateRepositoryWebCommitSignoffSetting
    """
    input: UpdateRepositoryWebCommitSignoffSettingInput!
  ): UpdateRepositoryWebCommitSignoffSettingPayload

  """
  Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
  """
  solo: Boolean!

  """
  The migration state.
  """
  state: MigrationState!

  """
  Create a new project field.
  """
  createProjectV2Field(
    """
    Parameters for CreateProjectV2Field
    """
    input: CreateProjectV2FieldInput!
  ): CreateProjectV2FieldPayload

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The organization's public profile location.
  """
  warningsCount: Int!
}

"""
A GitHub Enterprise Importer (GEI) migration source.
"""
type MigrationSource implements Node {
  """
  The Node ID of the MigrationSource object
  """
  id: ID!

  """
  The migration source name.
  """
  nodes: [MergeQueueEntry]

  """
  A list of all mannequins for this organization.
  """
  mannequins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter mannequins by login.
    """
    login: String

    """
    Ordering options for mannequins returned from the connection.
    """
    orderBy: MannequinOrder = {field: CREATED_AT, direction: ASC}
  ): MannequinConnection!

  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

  """
  Create a GitHub Sponsors profile to allow others to sponsor you or your organization.
  """
  createSponsorsListing(
    """
    Parameters for CreateSponsorsListing
    """
    input: CreateSponsorsListingInput!
  ): CreateSponsorsListingPayload

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
type OrgOauthAppAccessApprovedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Updates an existing user list.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  Updates which of the viewer's lists an item belongs to
  """
  updateUserListsForItem(
    """
    Parameters for UpdateUserListsForItem
    """
    input: UpdateUserListsForItemInput!
  ): UpdateUserListsForItemPayload

  """
  Verify that a verifiable domain has the expected DNS record.
  """
  createSponsorships(
    """
    Parameters for CreateSponsorships
    """
    input: CreateSponsorshipsInput!
  ): CreateSponsorshipsPayload

  """
  Creates a new team discussion.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MergeQueueEntry
}

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  Creates a new user list.
  """
  createUserList(
    """
    Parameters for CreateUserList
    """
    input: CreateUserListInput!
  ): CreateUserListPayload

  """
  Rejects a suggested topic for the repository.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgCreateAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessApprovedAuditEntry object
  """
  id: ID!

"""
The GitHub Enterprise Importer (GEI) migration state.
"""
enum MergeQueueMergingStrategy {
  """
  The name of the OAuth application.
  """
  ALLGREEN

  """
  The HTTP path for the OAuth application
  """
  HEADGREEN
}

"""
An OIDC identity provider configured to provision identities for an enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with read:enterprise or admin:enterprise scope.
"""
input Environments {
  """
  The HTTP URL for the OAuth application
  """
  createdAt: DateTime!

  """
  The migration has not started.
  """
  id: ID!

  """
  The migration needs to have its credentials validated.
  """
  field: EnvironmentOrderField!
}

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OIDCProvider object
  """
  id: ID!

  """
  The migration has succeeded.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to link to the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  clientMutationId: String

  """
  The name of the OAuth application.
  """
  deleteLinkedBranch(
    """
    Parameters for DeleteLinkedBranch
    """
    input: DeleteLinkedBranchInput!
  ): DeleteLinkedBranchPayload

  """
  The HTTP path for the OAuth application
  """
  howItWorksHTML: HTML!

  """
  The HTTP URL for the OAuth application
  """
  id: ID!

"""
Audit log entry for a org.oauth_app_access_blocked event.
"""
type OrgOauthAppAccessBlockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The ID of the project to link to the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  The name of the OAuth application.
  """
  closed: Boolean!

  """
  The HTTP path for the OAuth application
  """
  createdAt: PreciseDateTime!

  """
  The HTTP URL for the OAuth application
  """
  createdAt: DateTime!

"""
Autogenerated input type of LinkRepositoryToProject
"""
input LinkProjectV2ToRepositoryInput {
  """
  Delete a repository ruleset
  """
  creator: Actor

  """
  The Node ID of the OauthApplicationCreateAuditEntry object
  """
  databaseId: Int

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type PullRequestRevisionMarker {
  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  deleteUserList(
    """
    Parameters for DeleteUserList
    """
    input: DeleteUserListInput!
  ): DeleteUserListPayload

  """
  Deletes a verifiable domain.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Represents a GitHub Enterprise Importer (GEI) migration.
"""
type LinkProjectV2ToRepositoryPayload {
  """
  Remove a pull request from the merge queue.
  """
  dequeuePullRequest(
    """
    Parameters for DequeuePullRequest
    """
    input: DequeuePullRequestInput!
  ): DequeuePullRequestPayload

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

  """
  The repository the project is linked to.
  """
  repository: Repository
}

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The rate limit of the OAuth application.
  """
  failureReason: String

  """
  The state of the OAuth application.
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
type PullRequestTimelineConnection {
  """
  The HTTP path listing organization's projects
  """
  number: Int!

  """
  The name of the OAuth application.
  """
  owner: ProjectV2Owner!

  """
  The HTTP path for the OAuth application
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  node: PullRequestTimelineItem
}

"""
An item in a pull request timeline
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

  """
  The HTTP path for the organization
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

  """
  The HTTP URL for the organization
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  The user affected by the action
  """
  title: String!

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  updatedAt: DateTime!

  """
  The HTTP path for the user.
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
type OrgOauthAppAccessRequestedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  The username of the user who initiated the action
  """
  edges: [ProjectV2Edge]

  """
  The HTTP path for the actor.
  """
  nodes: [ProjectV2]

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  id: ID!

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  node: ProjectV2
}

"""
A field inside a project.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  The HTTP URL for the OAuth application
  """
  createdAt: DateTime!

  """
  The corresponding operation type for the action
  """
  dataType: ProjectV2FieldType!

  """
  The Organization associated with the Audit Entry.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  The name of the Organization.
  """
  name: String!

  """
  The HTTP path for the organization
  """
  project: ProjectV2!

  """
  The user affected by the action
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  The action name
  """
  createdAt: DateTime!

  """
  The user who initiated the action
  """
  dataType: ProjectV2FieldType!

  """
  The IP address of the actor
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  A readable representation of the actor's location
  """
  name: String!

  """
  The username of the user who initiated the action
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  The time the action was initiated
  """
  edges: [ProjectV2FieldEdge]

  """
  The Node ID of the OrgOauthAppAccessUnblockedAuditEntry object
  """
  nodes: [ProjectV2Field]

  """
  The name of the OAuth application.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveTopicAuditEntry object
  """
  id: ID!

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

"""
An edge in a connection.
"""
type ProjectV2FieldEdge {
  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  The Organization associated with the Audit Entry.
  """
  ASSIGNEES

  """
  The name of the Organization.
  """
  DATE

"""
A Git push.
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  The HTTP URL for the organization
  """
  LABELS

  """
  The user affected by the action
  """
  LINKED_PULL_REQUESTS

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  MILESTONE

  """
  The HTTP path for the user.
  """
  NUMBER

  """
  The HTTP URL for the user.
  """
  REPOSITORY

"""
Audit log entry for a org.remove_billing_manager event.
"""
type OrgRemoveBillingManagerAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  REVIEWERS

  """
  The user who initiated the action
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the PushAllowance object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union PushAllowanceActor = App | Team | User

  """
  The IP address of the actor
  """
  TEXT

  """
  A readable representation of the actor's location
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  The username of the user who initiated the action
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  A list of users that can be assigned to issues in this repository.
  """
  iterationId: String

    """
    Filters users with query on user name and login.
    """
    query: String
  ): UserConnection!

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  The HTTP path for the actor.
  """
  content: ProjectV2ItemContent

  """
  The HTTP URL for the actor.
  """
  createdAt: DateTime!

  """
  The time the action was initiated
  """
  creator: Actor

  """
  The Node ID of the OrgRemoveBillingManagerAuditEntry object
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  issuerUrl: URI

  """
  A list of nodes.
  """
  nodes: [LinkedBranch]

  """
  Retire a published payment tier from your GitHub Sponsors profile so it cannot be used to start new sponsorships.
  """
  retireSponsorsTier(
    """
    Parameters for RetireSponsorsTier
    """
    input: RetireSponsorsTierInput!
  ): RetireSponsorsTierPayload

  """
  Create a pull request that reverts the changes from a merged pull request.
  """
  revertPullRequest(
    """
    Parameters for RevertPullRequest
    """
    last: Int

    """
    The login of one specific collaborator.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

  """
  Revoke the migrator role to a user for all organizations under an enterprise account.
  """
  isArchived: Boolean!

  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

  """
  Identifies the date and time when the object was created.
  """
  project: ProjectV2!

  """
  The SAML provider's single sign-on URL.
  """
  type: ProjectV2ItemType!

  """
  The user affected by the action
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ItemEdge]

  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  nodes: [ProjectV2Item]

  """
  Starts a GitHub Enterprise Importer (GEI) repository migration.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a mannequin.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  Transfer an issue to a different repository
  """
  cursor: String!

  """
  Unarchives a ProjectV2Item
  """
  unarchiveProjectV2Item(
    """
    Parameters for UnarchiveProjectV2Item
    """
    input: UnarchiveProjectV2ItemInput!
  ): UnarchiveProjectV2ItemPayload

  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  search(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    query: String!

    """
    The types of search items to search within.
    """
    type: SearchType!
  ): SearchResultItemConnection!

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Represents member feature request body containing organization name and the number of feature requests
  """
  createdAt: DateTime!

  """
  The Node ID of the OrgDisableTwoFactorRequirementAuditEntry object
  """
  creator: Actor

  """
  The corresponding operation type for the action
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  Deletes a repository link from a project.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  A discussion category by slug.
  """
  discussionCategory(
    """
    The slug of the discussion category to be returned.
    """
    slug: String!
  ): DiscussionCategory

  """
  A list of discussions that have been opened in the repository.
  """
  updatedAt: DateTime!
}

    """
    Only show answered or unanswered discussions
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: UPDATED_AT, direction: DESC}

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  databaseId: Int

  """
  The Node ID of the Reactable object
  """
  id: ID!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the environments
    """
    orderBy: Environments = {field: NAME, direction: ASC}
  ): EnvironmentConnection!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Properties by which Enterprise Server user account email connections can be ordered.
"""
enum EnterpriseServerUserAccountEmailOrderField {
  """
  Order emails by email
  """
  EMAIL
}

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Whether vulnerability alerts are enabled for the repository.
  """
  hasVulnerabilityAlertsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  databaseId: Int

  """
  The Node ID of the Reaction object
  """
  homepageUrl: URI

  """
  The Node ID of the Repository object
  """
  id: ID!

  """
  The reactable piece of content
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  How the default commit message will be generated when merging a pull request.
  """
  mergeCommitMessage: MergeCommitMessage!

  """
  How the default commit title will be generated when merging a pull request.
  """
  mergeCommitTitle: MergeCommitTitle!

  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    branch: String
  ): MergeQueue

  """
  Returns a single milestone from the current repository by number.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Can user react to this subject
  """
  direction: OrderDirection!

  """
  The actor who created the item.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object
  """
  id: ID!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  createdAt: DateTime!

  """
  The Node ID of the ReadyForReviewEvent object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Adds enterprise members to an organization within the enterprise.
  """
  addEnterpriseOrganizationMember(
    """
    Parameters for AddEnterpriseOrganizationMember
    """
    input: AddEnterpriseOrganizationMemberInput!
  ): AddEnterpriseOrganizationMemberPayload

  """
  Adds a support entitlement to an enterprise member.
  """
  addEnterpriseSupportEntitlement(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  branchProtectionRule: BranchProtectionRule

  """
  Finds and returns the Project according to the provided Project number.
  """
  id: ID!

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The HTTP path listing the repository's projects
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  A list of rules from active Repository and Organization rulesets that apply to this ref.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repository rules.
    """
    orderBy: RepositoryRuleOrder = {field: UPDATED_AT, direction: DESC}
  ): RepositoryRuleConnection

  """
  The object the ref points to. Returns null when object does not exist.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  Adds a reaction to a subject.
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  Create a new project field.
  """
  createProjectV2Field(
    """
    Parameters for CreateProjectV2Field
    """
    input: CreateProjectV2FieldInput!
  ): CreateProjectV2FieldPayload

  """
  Create a new pull request
  """
  LOGIN
}

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
type ProjectV2ItemFieldValueEdge {
  """
  The template name.
  """
  name: String!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Identifies the date and time when the repository was last pushed to.
  """
  node: ProjectV2ItemFieldValue
}

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Ways in which lists of git refs can be ordered upon return.
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
Branch protection rules that are enforced on the viewer.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  createdAt: DateTime!

  """
  The Node ID of the ReferencedEvent object
  """
  id: ID!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  descriptionHTML: HTML

  """
  The Node ID of the Release object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

    """
    A name to filter the assets by.
    """
    name: String
  ): ReleaseAssetConnection!

  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  Returns a single ruleset from the current repository by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!

    """
    Include rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true
  ): RepositoryRuleset

  """
  A list of rulesets for this repository.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The security policy URL.
  """
  NONE

  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  How the default commit message will be generated when squash merging a pull request.
  """
  squashMergeCommitMessage: SquashMergeCommitMessage!

  """
  How the default commit title will be generated when squash merging a pull request.
  """
  squashMergeCommitTitle: SquashMergeCommitTitle!

  """
  Whether a squash merge commit can use the pull request title as default.
  """
  squashPrTitleUsedAsDefault: Boolean!
    @deprecated(
      reason: "`squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC."
    )

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Reopen a issue.
  """
  maximumEntriesToMerge: Int

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  The HTTP URL for the OAuth application
  """
  minimumEntriesToMerge: Int

  """
  The amount of time in minutes to wait before ignoring the minumum number of
  entries in the queue requirement and merging a collection of entries
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  downloadUrl: URI!

  """
  The Node ID of the ReleaseAsset object
  """
  id: ID!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The Node ID of the OrgUpdateMemberRepositoryCreationPermissionAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise from which the user should be removed.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the user to remove from the enterprise.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  The user that was removed from the enterprise.
  """
  user: User

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
input RemoveEnterpriseOrganizationInput {
  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  The project view's name.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  The name of the Organization.
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  The IP address of the actor
  """
  edges: [ProjectV2ViewEdge]

  """
  A readable representation of the actor's location
  """
  nodes: [ProjectV2View]

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

"""
An edge in a connection.
"""
type ProjectV2ViewEdge {
  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  Add a pull request to the merge queue.
  """
  enqueuePullRequest(
    """
    Parameters for EnqueuePullRequest
    """
    input: EnqueuePullRequestInput!
  ): EnqueuePullRequestPayload

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  databaseId: Int

"""
Audit log entry for a org.enable_saml event.
"""
type OrgEnableSamlAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  actorIp: String

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

  """
  The Node ID of the RemovedFromMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The reason this pull request was removed from the queue.
  """
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
type RemovedFromProjectEvent implements Node {
  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  databaseId: Int

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  id: ID!

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  organizationResourcePath: URI

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  currentTitle: String!

  """
  The Node ID of the RenamedTitleEvent object
  """
  id: ID!

  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  userLogin: String

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

"""
Audit log entry for a org.enable_two_factor_requirement event.
"""
type OrgEnableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  id: ID!

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddMemberAuditEntry object
  """
  id: ID!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
  """
  updateOrganizationWebCommitSignoffSetting(
    """
    Parameters for UpdateOrganizationWebCommitSignoffSetting
    """
    input: UpdateOrganizationWebCommitSignoffSettingInput!
  ): UpdateOrganizationWebCommitSignoffSettingPayload

  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  updatePatreonSponsorability(
    """
    Parameters for UpdatePatreonSponsorability
    """
    input: UpdatePatreonSponsorabilityInput!
  ): UpdatePatreonSponsorabilityPayload

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The email address of the organization invitation.
  """
  email: String

"""
The connection type for IssueTimelineItem.
"""
type IssueTimelineConnection {
  """
  The Node ID of the OrgInviteMemberAuditEntry object
  """
  id: ID!

  """
  Update the collaborators on a team or a project
  """
  updateProjectV2Collaborators(
    """
    Parameters for UpdateProjectV2Collaborators
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  id: ID!

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Parameters for UpdateUserList
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoArchivedAuditEntry object
  """
  id: ID!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  The ID of the project to link to the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to link to the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    If non-null, filters teams with query on team name and team slug
    """
    query: String

    """
    If non-null, filters teams according to whether the viewer is an admin or member on team
    """
    role: TeamRole

    """
    If true, restrict to only root teams
    """
    rootTeamsOnly: Boolean = false

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
type OrgOauthAppAccessRequestedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  The user who initiated the action
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveBillingManagerAuditEntry object
  """
  id: ID!

  """
  The callback URL of the OAuth application.
  """
  id: ID!

  """
  The template name.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  createdAt: DateTime!

  """
  The HTTP URL for the OAuth application
  """
  id: ID!

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
enum OrganizationInvitationType {
  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this user.
  """
  url: URI!

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  A list of edges.
  """
  edges: [MannequinEdge]

  """
  The user affected by the action
  """
  id: ID!

  """
  The state of the OAuth application.
  """
  totalCount: Int!
}

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Mannequin
}

"""
Audit log entry for a org.enable_oauth_app_restrictions event.
"""
type OrgEnableOauthAppRestrictionsAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  The ordering direction.
  """
  databaseId: Int

  """
  The Node ID of the MentionedEvent object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveMemberAuditEntry object
  """
  id: ID!
}

"""
The state of an OAuth application when it was created.
"""
type PullRequestCommitCommentThread implements Node & RepositoryNode {
  """
  The comments that exist in this thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CommitCommentConnection!

  """
  The commit the comments were made on.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The file the comments were made on.
  """
  path: String

  """
  The OAuth application was active and allowed to have OAuth Accesses.
  """
  CREATED_AT

  """
  The OAuth application was in the process of being deleted.
  """
  abortRepositoryMigration(
    """
    Parameters for AbortRepositoryMigration
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

  """
  The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  LOGIN
}

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Find a project by number.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposDisableAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgEnableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

  """
  The Node ID of the Language object
  """
  id: ID!

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
A subset of repository information queryable from an enterprise.
"""
enum OrgRemoveMemberAuditEntryMembershipType {
  """
  Organization owners have full access and can change several settings,
  including the names of repositories that belong to the Organization and Owners
  team membership. In addition, organization owners can delete the organization
  and all of its repositories.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  A billing manager is a user who manages the billing settings for the Organization, such as updating payment information.
  """
  BILLING_MANAGER

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Adds enterprise members to an organization within the enterprise.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Adds a support entitlement to an enterprise member.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

  """
  The Node ID of the OrgBlockUserAuditEntry object
  """
  id: ID!

"""
The possible default commit messages for merges.
"""
enum MergeCommitMessage {
  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  BLANK

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  relevantOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
Audit log entry for a org.enable_saml event.
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

"""
A file in a package version.
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.enable_two_factor_requirement event.
"""
type Organization implements Actor & AnnouncementBanner & MemberStatusable & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  The text of the announcement
  """
  announcement: String

  """
  The expiration date of the announcement, if any
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

  """
  Whether the announcement can be dismissed by the user
  """
  announcementUserDismissible: Boolean

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Identifies the date and time when the organization was archived.
  """
  archivedAt: DateTime

  """
  The end line number on the file to which the comment applies
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  viewerCanReopen: Boolean!

  """
  Adds a reply to an existing Pull Request Review Thread.
  """
  addPullRequestReviewThreadReply(
    """
    Parameters for AddPullRequestReviewThreadReply
    """
    input: AddPullRequestReviewThreadReplyInput!
  ): AddPullRequestReviewThreadReplyPayload

  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
input MarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgAddBillingManagerAuditEntry object
  """
  id: ID!

  """
  The ID of the Project to mark as a template.
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object
  """
  id: ID!

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  Archives a ProjectV2Item
  """
  createdAt: PreciseDateTime!

  """
  The name of the Organization.
  """
  entries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeQueueEntryConnection

  """
  The Node ID of the MergeQueue object
  """
  id: ID!

  """
  This mutation clears the value of a field for an item in a Project. Currently
  only text, number, date, assignees, labels, single-select, iteration and
  milestone fields are supported.
  """
  clearProjectV2ItemFieldValue(
    """
    Parameters for ClearProjectV2ItemFieldValue
    """
    input: ClearProjectV2ItemFieldValueInput!
  ): ClearProjectV2ItemFieldValuePayload

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  createdAt: PreciseDateTime!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  The repository this merge queue belongs to
  """
  repository: Repository

  """
  Close a discussion.
  """
  closeDiscussion(
    """
    Parameters for CloseDiscussion
    """
    input: CloseDiscussionInput!
  ): CloseDiscussionPayload

  """
  Close an issue.
  """
  resourcePath: URI!

  """
  The HTTP URL for this merge queue
  """
  url: URI!
}

"""
Ordering options for an organization's enterprise owner connections.
"""
input OrgEnterpriseOwnerOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprise owners by.
  """
  field: OrgEnterpriseOwnerOrderField!
}

"""
Properties by which enterprise owners can be ordered.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

  """
  Order enterprise owners by login.
  """
  hasSponsorsListing: Boolean!

  """
  The Node ID of the Organization object
  """
  id: ID!

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The amount of time in minutes to wait for a check response before considering it a failure.
  """
  checkResponseTimeout: Int

  """
  The maximum number of entries to build at once.
  """
  maximumEntriesToBuild: Int

  """
  Copy a project.
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

  """
  Invites a user to claim reattributable data
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  Create a new branch protection rule
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  The Node ID of the OrgAddMemberAuditEntry object
  """
  id: ID!

  """
  The merge method to use for this queue.
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

"""
Entries in a MergeQueue
"""
type MergeQueueEntry implements Node {
  """
  The base commit for this entry
  """
  baseCommit: Commit

  """
  The date and time this entry was added to the merge queue
  """
  enqueuedAt: DateTime!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

  """
  The name of the Organization.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  A list of all mannequins for this organization.
  """
  mannequins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter mannequins by login.
    """
    login: String

    """
    Ordering options for mannequins returned from the connection.
    """
    orderBy: MannequinOrder = {field: CREATED_AT, direction: ASC}
  ): MannequinConnection!

  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

  """
  The head commit for this entry
  """
  headCommit: Commit

  """
  The Node ID of the MergeQueueEntry object
  """
  id: ID!

  """
  Whether this pull request should jump the queue
  """
  jump: Boolean!

  """
  Create a branch linked to an issue.
  """
  createLinkedBranch(
    """
    Parameters for CreateLinkedBranch
    """
    input: CreateLinkedBranchInput!
  ): CreateLinkedBranchPayload

  """
  Creates a GitHub Enterprise Importer (GEI) migration source.
  """
  mergeQueue: MergeQueue

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  """
  The position of this entry in the queue
  """
  position: Int!

  """
  The pull request that will be added to a merge group
  """
  pullRequest: PullRequest

  """
  Create a new project field.
  """
  createProjectV2Field(
    """
    Parameters for CreateProjectV2Field
    """
    input: CreateProjectV2FieldInput!
  ): CreateProjectV2FieldPayload

  """
  Create a new pull request
  """
  solo: Boolean!

  """
  The state of this entry in the queue
  """
  state: MergeQueueEntryState!
}

"""
The connection type for MergeQueueEntry.
"""
type MergeQueueEntryConnection {
  """
  A list of edges.
  """
  edges: [MergeQueueEntryEdge]

  """
  Create a repository ruleset
  """
  createdAt: PreciseDateTime!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  createdAt: PreciseDateTime!

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The Node ID of the OrgInviteToBusinessAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Make many one-time sponsorships for different sponsorable users or
  organizations at once. Can only sponsor those who have a public GitHub
  Sponsors profile.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgBlockUserAuditEntry object
  """
  id: ID!

  """
  Creates a new team discussion.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MergeQueueEntryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  Creates a new user list.
  """
  createUserList(
    """
    Parameters for CreateUserList
    """
    input: CreateUserListInput!
  ): CreateUserListPayload

  """
  Rejects a suggested topic for the repository.
  """
  node: MergeQueueEntry
}

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
enum MergeQueueEntryState {
  """
  The entry is currently waiting for checks to pass.
  """
  AWAITING_CHECKS

  """
  The entry is currently locked.
  """
  LOCKED

  """
  The entry is currently mergeable.
  """
  MERGEABLE

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
type OrgOauthAppAccessApprovedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The entry is currently queued.
  """
  QUEUED

  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The source of this permission.
  """
  UNMERGEABLE
}

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  Entries only allowed to merge if they are passing.
  """
  ALLGREEN

  """
  Failing Entires are allowed to merge if they are with a passing entry.
  """
  HEADGREEN
}

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
enum EnvironmentOrderField {
  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  createdAt: DateTime!

  """
  Unlink a branch from an issue.
  """
  deleteLinkedBranch(
    """
    Parameters for DeleteLinkedBranch
    """
    input: DeleteLinkedBranchInput!
  ): DeleteLinkedBranchPayload

  """
  Delete a package version.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUnblockUserAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  createdAt: PreciseDateTime!

"""
An item in a pull request timeline
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

  """
  The HTTP URL for the OAuth application
  """
  id: ID!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Find a project by number.
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

  """
  Delete a project field.
  """
  deleteProjectV2Field(
    """
    Parameters for DeleteProjectV2Field
    """
    input: DeleteProjectV2FieldInput!
  ): DeleteProjectV2FieldPayload

  """
  The Node ID of the MembersCanDeleteReposEnableAuditEntry object
  """
  id: ID!

  """
  Deletes a project workflow.
  """
  deleteProjectV2Workflow(
    """
    Parameters for DeleteProjectV2Workflow
    """
    input: DeleteProjectV2WorkflowInput!
  ): DeleteProjectV2WorkflowPayload

  """
  Deletes a pull request review.
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the MarkedAsDuplicateEvent object
  """
  id: ID!

  """
  The Node ID of the License object
  """
  id: ID!

"""
Audit log entry for a org.oauth_app_access_blocked event.
"""
type OrgOauthAppAccessBlockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Delete a repository ruleset
  """
  deleteRepositoryRuleset(
    """
    Parameters for DeleteRepositoryRuleset
    """
    input: DeleteRepositoryRulesetInput!
  ): DeleteRepositoryRulesetPayload

  """
  The HTTP path listing organization's projects
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

  """
  Identifies the viewer's thread subscription form action.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessBlockedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  digestMethodUrl: URI

  """
  The HTTP path for the OAuth application
  """
  id: ID!

  """
  The HTTP URL for the OAuth application
  """
  issuerUrl: URI

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  clientMutationId: String

  """
  The team the project is linked to
  """
  howItWorksHTML: HTML!

  """
  The Node ID of the MarketplaceListing object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgDisableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

"""
Autogenerated input type of LinkRepositoryToProject
"""
input LinkProjectV2ToRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  reopenDiscussion(
    """
    Parameters for ReopenDiscussion
    """
    input: ReopenDiscussionInput!
  ): ReopenDiscussionPayload

  """
  Reopen a issue.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The ID of the repository to link to the project.
  """
  dueOn: DateTime

  """
  The Node ID of the Milestone object
  """
  id: ID!

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type OrgDisableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The configuration for this merge queue
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

  """
  The entries in the queue
  """
  entries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Retire a published payment tier from your GitHub Sponsors profile so it cannot be used to start new sponsorships.
  """
  retireSponsorsTier(
    """
    Parameters for RetireSponsorsTier
    """
    input: RetireSponsorsTierInput!
  ): RetireSponsorsTierPayload

  """
  Create a pull request that reverts the changes from a merged pull request.
  """
  revertPullRequest(
    """
    Parameters for RevertPullRequest
    """
    input: RevertPullRequestInput!
  ): RevertPullRequestPayload

  """
  Revoke the migrator role to a user for all organizations under an enterprise account.
  """
  revokeEnterpriseOrganizationsMigratorRole(
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
type OrgOauthAppAccessRequestedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgOauthAppAccessRequestedAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryCreationPermissionAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_unblocked event.
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveTopicAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Node ID of the PushAllowance object
  """
  id: ID!
}

  """
  The Node ID of the OrgOauthAppAccessUnblockedAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.remove_billing_manager event.
"""
type Organization implements Actor & AnnouncementBanner & MemberStatusable & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  The text of the announcement
  """
  announcement: String

  """
  The expiration date of the announcement, if any
  """
  announcementExpiresAt: DateTime

  """
  Whether the announcement can be dismissed by the user
  """
  announcementUserDismissible: Boolean

  """
  The action name
  """
  action: String!

  """
  Identifies the date and time when the organization was archived.
  """
  archivedAt: DateTime

  """
  Audit log entries of the organization
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  A list of users that can be assigned to issues in this repository.
  """
  assignableUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filters users with query on user name and login.
    """
    query: String
  ): UserConnection!

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveBillingManagerAuditEntry object
  """
  id: ID!

  """
  The Node ID of the MergeQueue object
  """
  id: ID!

  """
  The estimated time in seconds until a newly added entry would be merged
  """
  nextEntryEstimatedTimeToMerge: Int

  """
  The repository this merge queue belongs to
  """
  repository: Repository

  """
  The Node ID of the OrgDisableTwoFactorRequirementAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  id: ID!

  """
  The entry is currently mergeable.
  """
  MERGEABLE

    """
    The login of one specific collaborator.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    query: String
  ): RepositoryCollaboratorConnection

  """
  The entry is currently unmergeable.
  """
  UNMERGEABLE
}

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  ALLGREEN

  """
  The user affected by the action
  """
  HEADGREEN
}

"""
Detailed status information about a pull request merge.
"""
input LinkProjectV2ToRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

  """
  Identifies the date and time when the object was created.
  """
  hasSponsorsListing: Boolean!

  """
  The Node ID of the Organization object
  """
  id: ID!

"""
Audit log entry for a org.enable_oauth_app_restrictions event.
"""
type OrgEnableOauthAppRestrictionsAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  action: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of LinkProjectV2ToTeam
"""
input LinkProjectV2ToTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to link to the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  updateOrganizationWebCommitSignoffSetting(
    """
    Parameters for UpdateOrganizationWebCommitSignoffSetting
    """
    input: UpdateOrganizationWebCommitSignoffSettingInput!
  ): UpdateOrganizationWebCommitSignoffSettingPayload

  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  createdAt: PreciseDateTime!

  """
  Whether the given account is sponsoring this user/organization.
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    query: String!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The organization's public profile location.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  A list of all mannequins for this organization.
  """
  mannequins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  A discussion category by slug.
  """
  discussionCategory(
    """
    The slug of the discussion category to be returned.
    """
    slug: String!
  ): DiscussionCategory

  """
  A list of discussions that have been opened in the repository.
  """
  viewerCanClose: Boolean!

    """
    Only show answered or unanswered discussions
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter mannequins by login.
    """
    login: String

    """
    Ordering options for mannequins returned from the connection.
    """
    orderBy: DiscussionOrder = {field: UPDATED_AT, direction: DESC}

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  organizationUrl: URI

  """
  The Node ID of the OrgEnableOauthAppRestrictionsAuditEntry object
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  environments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the environments
    """
    orderBy: Environments = {field: NAME, direction: ASC}
  ): EnvironmentConnection!

  """
  Updates an existing project.
  """
  clientMutationId: String

  """
  The Node ID of the OrgDisableTwoFactorRequirementAuditEntry object
  """
  id: ID!

"""
Autogenerated input type of LinkRepositoryToProject
"""
enum OrgRemoveMemberAuditEntryMembershipType {
  """
  Organization owners have full access and can change several settings,
  including the names of repositories that belong to the Organization and Owners
  team membership. In addition, organization owners can delete the organization
  and all of its repositories.
  """
  ADMIN

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

  """
  A direct member is a user that is a member of the Organization.
  """
  DIRECT_MEMBER

  """
  An outside collaborator is a person who isn't explicitly a member of the
  Organization, but who has Read, Write, or Admin permissions to one or more
  repositories in the organization.
  """
  OUTSIDE_COLLABORATOR

  """
  The corresponding operation type for the action
  """
  updateProjectV2(
    """
    Parameters for UpdateProjectV2
    """
    input: UpdateProjectV2Input!
  ): UpdateProjectV2Payload

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  Update the collaborators on a team or a project
  """
  updateProjectV2Collaborators(
    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The Node ID of the MergedEvent object
  """
  id: ID!

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  databaseId: Int

  """
  The Node ID of the MovedColumnsInProjectEvent object
  """
  id: ID!

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Whether vulnerability alerts are enabled for the repository.
  """
  hasVulnerabilityAlertsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  homepageUrl: URI

  """
  The Node ID of the Repository object
  """
  id: ID!

"""
Audit log entry for a org.enable_saml event.
"""
type OrgEnableSamlAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  databaseId: Int

  """
  The Node ID of the Reactable object
  """
  id: ID!

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveOutsideCollaboratorAuditEntry object
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  databaseId: Int

  """
  The Node ID of the Reaction object
  """
  id: ID!

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.enable_two_factor_requirement event.
"""
type OrgEnableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  How the default commit message will be generated when merging a pull request.
  """
  mergeCommitMessage: MergeCommitMessage!

  """
  How the default commit title will be generated when merging a pull request.
  """
  mergeCommitTitle: MergeCommitTitle!

  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    branch: String
  ): MergeQueue

  """
  Returns a single milestone from the current repository by number.
  """
  updateRepositoryRuleset(
    """
    Parameters for UpdateRepositoryRuleset
    """
    input: UpdateRepositoryRulesetInput!
  ): UpdateRepositoryRulesetPayload

  """
  Sets whether contributors are required to sign off on web-based commits for a repository.
  """
  updateRepositoryWebCommitSignoffSetting(
    """
    Parameters for UpdateRepositoryWebCommitSignoffSetting
    """
    input: UpdateRepositoryWebCommitSignoffSettingInput!
  ): UpdateRepositoryWebCommitSignoffSettingPayload

  """
  Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
  """
  id: ID!

  """
  A list of nodes.
  """
  nodes: [LinkedBranch]

  """
  The migration source.
  """
  pageInfo: PageInfo!

  """
  Adds enterprise members to an organization within the enterprise.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object
  """
  id: ID!

  """
  Adds a support entitlement to an enterprise member.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  The HTTP path listing organization's projects
  """
  clientMutationId: String

  """
  The team the project is linked to
  """
  team: Team
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  Finds and returns the Project according to the provided Project number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing the repository's projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
Audit log entry for a org.invite_member event.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  The action name
  """
  closed: Boolean!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  createdAt: DateTime!

  """
  A readable representation of the actor's location
  """
  creator: Actor

  """
  The username of the user who initiated the action
  """
  databaseId: Int

  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  createdAt: DateTime!

  """
  The Node ID of the ReadyForReviewEvent object
  """
  id: ID!

  """
  The Node ID of the OrgInviteMemberAuditEntry object
  """
  id: ID!

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  The Organization associated with the Audit Entry.
  """
  number: Int!

  """
  The organization invitation.
  """
  owner: ProjectV2Owner!

  """
  The name of the Organization.
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

  """
  Identifies the date and time when the repository was last pushed to.
  """
  resourcePath: URI!

  """
  The SAML provider's single sign-on URL.
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  The user affected by the action
  """
  title: String!

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  updatedAt: DateTime!

  """
  The HTTP path for the user.
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  branchProtectionRule: BranchProtectionRule

  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    The head ref to compare against.
    """
    headRef: String!
  ): Comparison

  """
  The Node ID of the Ref object
  """
  id: ID!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  """
  The migration has failed.
  """
  edges: [LinkedBranchEdge]

    """
    Filter to external identities with the users userName/NameID attribute
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  A list of rules from active Repository and Organization rulesets that apply to this ref.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repository rules.
    """
    orderBy: RepositoryRuleOrder = {field: UPDATED_AT, direction: DESC}
  ): RepositoryRuleConnection

  """
  The object the ref points to. Returns null when object does not exist.
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Ways in which lists of git refs can be ordered upon return.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  The Node ID of the OIDCProvider object
  """
  edges: [ProjectV2Edge]

  """
  The migration is in progress.
  """
  nodes: [ProjectV2]

  """
  The migration has not started.
  """
  pageInfo: PageInfo!

  """
  The migration needs to have its credentials validated.
  """
  totalCount: Int!
}

"""
Branch protection rules that are enforced on the viewer.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  The name of the OAuth application.
  """
  archiveProjectV2Item(
    """
    Parameters for ArchiveProjectV2Item
    """
    input: ArchiveProjectV2ItemInput!
  ): ArchiveProjectV2ItemPayload

  """
  The HTTP path for the OAuth application
  """
  node: ProjectV2
}

"""
Represents a member feature request notification
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  The HTTP path for this enterprise.
  """
  createdAt: DateTime!

  """
  The slug of the enterprise.
  """
  dataType: ProjectV2FieldType!

  """
  The HTTP URL for this enterprise.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  The Node ID of the OrgInviteToBusinessAuditEntry object
  """
  name: String!

  """
  This mutation clears the value of a field for an item in a Project. Currently
  only text, number, date, assignees, labels, single-select, iteration and
  milestone fields are supported.
  """
  project: ProjectV2!

  """
  Close a discussion.
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  The application URL of the OAuth application.
  """
  createdAt: DateTime!

  """
  The callback URL of the OAuth application.
  """
  dataType: ProjectV2FieldType!

  """
  Returns a single ruleset from the current organization by ID.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  createdAt: DateTime!

  """
  The Node ID of the ReferencedEvent object
  """
  id: ID!

  """
  A list of rulesets for this organization.
  """
  name: String!

  """
  The Node ID of the OauthApplicationCreateAuditEntry object
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Field]

  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Audit log entry for a org.invite_member event.
"""
type ProjectV2FieldEdge {
  """
  The HTTP path for the OAuth application
  """
  createAttributionInvitation(
    """
    Parameters for CreateAttributionInvitation
    """
    input: CreateAttributionInvitationInput!
  ): CreateAttributionInvitationPayload

  """
  The HTTP URL for the OAuth application
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  Assignees
  """
  ASSIGNEES

  """
  Date
  """
  DATE

  """
  List of sponsors for this user or organization.
  """
  ITERATION

  """
  The email address.
  """
  LABELS

  """
  The Node ID of the EnterpriseServerUserAccountEmail object
  """
  descriptionHTML: HTML

  """
  The Node ID of the Release object
  """
  id: ID!

  """
  The Node ID of the Mannequin object
  """
  MILESTONE

  """
  Number
  """
  NUMBER

  """
  Repository
  """
  REPOSITORY

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  REVIEWERS

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Indicates if the object can be reopened by the viewer.
  """
  TEXT

"""
The state of an OAuth application when it was created.
"""
type MannequinConnection {
  """
  The organization invitation.
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  The name of the Organization.
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  The GitHub Sponsors listing for this user or organization.
  """
  content: ProjectV2ItemContent

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  createdAt: DateTime!

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  creator: Actor

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A name to filter the assets by.
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

  """
  The sponsorships where this user or organization is the funder.
  """
  isArchived: Boolean!

  """
  Find an organization's team by its slug.
  """
  project: ProjectV2!

  """
  Create a new pull request
  """
  type: ProjectV2ItemType!

  """
  Identifies the total count of items in the connection.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  edges: [ProjectV2ItemEdge]

  """
  The organization's Twitter username.
  """
  nodes: [ProjectV2Item]

  """
  Create a repository ruleset
  """
  createRepositoryRuleset(
    """
    Parameters for CreateRepositoryRuleset
    """
    input: CreateRepositoryRulesetInput!
  ): CreateRepositoryRulesetPayload

  """
  Create a GitHub Sponsors profile to allow others to sponsor you or your organization.
  """
  createSponsorsListing(
    """
    Parameters for CreateSponsorsListing
    """
    input: CreateSponsorsListingInput!
  ): CreateSponsorsListingPayload

  """
  Create a new payment tier for your GitHub Sponsors profile.
  """
  node: Mannequin
}

  """
  Identifies the URL where you can download the release asset via the browser.
  """
  downloadUrl: URI!

  """
  The Node ID of the ReleaseAsset object
  """
  id: ID!

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  Make many one-time sponsorships for different sponsorable users or
  organizations at once. Can only sponsor those who have a public GitHub
  Sponsors profile.
  """
  createSponsorships(
    """
    Parameters for CreateSponsorships
    """
    input: CreateSponsorshipsInput!
  ): CreateSponsorshipsPayload

  """
  Creates a new team discussion.
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Order mannequins why when they were created.
  """
  createdAt: DateTime!

  """
  The Node ID of the OrgOauthAppAccessBlockedAuditEntry object
  """
  creator: Actor

  """
  The name of the OAuth application.
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  The HTTP path for the OAuth application
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise from which the user should be removed.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the user to remove from the enterprise.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  The user that was removed from the enterprise.
  """
  user: User

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The user who created the invitation.
  """
  inviterActor: User

  """
  The actor who created the item.
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

  """
  The Node ID of the RemovedFromMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The reason this pull request was removed from the queue.
  """
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
enum OrganizationInvitationSource {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  databaseId: Int

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  id: ID!

"""
The possible organization invitation types.
"""
enum OrganizationInvitationType {
  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  The user affected by the action
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  currentTitle: String!

  """
  The Node ID of the RenamedTitleEvent object
  """
  id: ID!

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
An object which has a renamable title
"""
union RenamedTitleSubject = Issue | PullRequest

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
type ProjectV2ItemFieldValueEdge {
  """
  The text of the announcement
  """
  announcement: String

  """
  The expiration date of the announcement, if any
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
type ReopenedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Object that was reopened.
  """
  closable: Closable!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  id: ID!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddMemberAuditEntry object
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

"""
Information for an uploaded package.
"""
type Package implements Node {
  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  The name of the Organization.
  """
  organizationName: String

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  id: ID!

  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

"""
A file in a package version.
"""
type PackageFile implements Node {
  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoArchivedAuditEntry object
  """
  id: ID!

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Parameters for DequeuePullRequest
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

"""
Audit log entry for a org.oauth_app_access_blocked event.
"""
type OrgOauthAppAccessBlockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  The project view's name.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Parameters for LinkProjectV2ToTeam
    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgBlockUserAuditEntry object
  """
  nodes: [ProjectV2View]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type ProjectV2ViewEdge {
  """
  A list of edges.
  """
  edges: [MannequinEdge]

  """
  Abort a repository migration queued or in progress.
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  Regenerates the identity provider recovery codes for an enterprise
  """
  pageInfo: PageInfo!

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  organizationResourcePath: URI

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The user affected by the action
  """
  user: User

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  organizationName: String

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  organizationUrl: URI

  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  UPDATED_AT
}

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

"""
Audit log entry for a org.remove_billing_manager event.
"""
type OrgRemoveBillingManagerAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The ID of the published tier to retire.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  The HTTP path for this pull request.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

"""
An edge in a connection.
"""
type ReviewDismissalAllowanceEdge {
  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The organization's public profile URL.
  """
  databaseId: Int

  """
  The Node ID of the Reaction object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Identifies the previous state of the review with the 'review_dismissed' event.
  """
  previousReviewState: PullRequestReviewState!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

"""
An edge in a connection.
"""
type ReviewRequestEdge {
  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

"""
Represents an 'review_request_removed' event on a given pull request.
"""
type ReviewRequestRemovedEvent implements Node {
  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestRemovedEvent object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  The object the ref points to. Returns null when object does not exist.
  """
  edges: [ProjectV2Edge]

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  nodes: [ProjectV2]

  """
  A user with full administrative access to the organization.
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

  """
  A user who is unaffiliated with the organization.
  """
  UNAFFILIATED
}

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  Rules will be enforced
  """
  ACTIVE

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  node: ProjectV2
}

"""
Parameters to be used for the ref_name condition
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  createdAt: DateTime!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  dataType: ProjectV2FieldType!

  """
  The Node ID of the OrganizationInvitation object
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

"""
Ways in which lists of git refs can be ordered upon return.
"""
type PullRequestCommit implements Node & UniformResourceLocatable {
  """
  The Git commit object
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Allow admins to test rules before enforcing them. Admins can view insights on
  the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  Parameters used for the `branch_name_pattern` rule type
  """
  createdAt: DateTime!

  """
  Parameters used for the `commit_author_email_pattern` rule type
  """
  dataType: ProjectV2FieldType!

  """
  The user who created the invitation.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  Parameters used for the `commit_message_pattern` rule type
  """
  name: String!

  """
  Parameters used for the `committer_email_pattern` rule type
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  Parameters used for the `required_status_checks` rule type
  """
  edges: [ProjectV2FieldEdge]

  """
  Parameters used for the `tag_name_pattern` rule type
  """
  nodes: [ProjectV2Field]

  """
  Parameters used for the `update` rule type
  """
  update: UpdateParametersInput

  """
  Parameters used for the `workflows` rule type
  """
  workflows: WorkflowsParametersInput
}

"""
Types which can have `RepositoryRule` objects.
"""
union RuleSource = Organization | Repository

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
type ProjectV2FieldEdge {
  """
  SHA1
  """
  SHA1

  """
  SHA256
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  SHA384
  """
  ASSIGNEES

  """
  SHA512
  """
  DATE

"""
The possible signature algorithms used to sign SAML requests for a Identity Provider.
"""
enum SamlSignatureAlgorithm {
  """
  RSA-SHA1
  """
  ITERATION

  """
  RSA-SHA256
  """
  LABELS

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  id: ID!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  RSA-SHA384
  """
  LINKED_PULL_REQUESTS

  """
  RSA-SHA512
  """
  MILESTONE

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  NUMBER

  """
  The invitation was created from SCIM
  """
  REPOSITORY

  """
  The invitation was sent before this feature was added
  """
  REVIEWERS

"""
The possible organization invitation types.
"""
type SavedReply implements Node {
  """
  The body of the saved reply.
  """
  SINGLE_SELECT

  """
  The saved reply body rendered to HTML.
  """
  TEXT

  """
  Identifies the primary key from the database.
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  The Node ID of the SavedReply object
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The id of the iteration to set on the field.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

  """
  The number to set on the field.
  """
  number: Float

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  singleSelectOptionId: String

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  A list of edges.
  """
  content: ProjectV2ItemContent

  """
  A list of nodes.
  """
  createdAt: DateTime!

  """
  Information to aid in pagination.
  """
  creator: Actor

  """
  Identifies the total count of items in the connection.
  """
  databaseId: Int

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveTopicAuditEntry object
  """
  id: ID!

"""
Ordering options for saved reply connections.
"""
input SavedReplyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

"""
Properties by which saved reply connections can be ordered.
"""
enum SavedReplyOrderField {
  """
  Order saved reply by when they were updated.
  """
  isArchived: Boolean!

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
type SearchResultItemConnection {
  """
  The total number of pieces of code that matched the search query. Regardless
  of the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  project: ProjectV2!

  """
  A list of edges.
  """
  type: ProjectV2ItemType!

  """
  The total number of issues that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  Identifies the date and time when the object was created.
  """
  edges: [ProjectV2ItemEdge]

  """
  Identifies the primary key from the database.
  """
  nodes: [ProjectV2Item]

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The Octoshift migration has failed.
  """
  createdAt: DateTime!

  """
  The Octoshift migration has invalid credentials.
  """
  creator: Actor

  """
  The Octoshift migration is in progress.
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  The Octoshift migration has not started.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  A list of users that can be assigned to issues in this repository.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  editor: Actor

    """
    Filters users with query on user name and login.
    """
    query: String
  ): UserConnection!

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

    """
    The login of one specific collaborator.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    query: String
  ): RepositoryCollaboratorConnection

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  field: ProjectV2FieldConfiguration!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

"""
The possible ecosystems of a security vulnerability's package.
"""
type PackageFile implements Node {
  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  A discussion category by slug.
  """
  discussionCategory(
    """
    The slug of the discussion category to be returned.
    """
    slug: String!
  ): DiscussionCategory

  """
  A list of discussions that have been opened in the repository.
  """
  id: ID!

    """
    Only show answered or unanswered discussions
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: UPDATED_AT, direction: DESC}

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Dart packages hosted at pub.dev
  """
  PUB

  """
  The actor who created the item.
  """
  RUBYGEMS

  """
  Rust crates
  """
  RUST

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
An edge in a connection.
"""
type SecurityAdvisoryEdge {
  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the environments
    """
    orderBy: Environments = {field: NAME, direction: ASC}
  ): EnvironmentConnection!

  """
  Text value of a field
  """
  text: String

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter {
  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput {
  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  creator: Actor

"""
Autogenerated return type of RemoveEnterpriseMember
"""
interface PackageOwner {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Whether vulnerability alerts are enabled for the repository.
  """
  hasVulnerabilityAlertsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  homepageUrl: URI

  """
  The Node ID of the Repository object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  The Node ID of the PackageTag object
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  Common Vulnerabilities and Exposures Identifier.
  """
  CVE

  """
  GitHub Security Advisory ID.
  """
  GHSA
}

"""
Ordering options for security advisory connections
"""
type ProjectV2ItemFieldValueEdge {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security advisories by.
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type PullRequestRevisionMarker {
  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
A repository pull request template.
"""
type PullRequestTemplate {
  """
  The body of the template
  """
  body: String

  """
  The filename of the template
  """
  filename: String

  """
  How the default commit message will be generated when merging a pull request.
  """
  mergeCommitMessage: MergeCommitMessage!

  """
  How the default commit title will be generated when merging a pull request.
  """
  mergeCommitTitle: MergeCommitTitle!

  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    branch: String
  ): MergeQueue

  """
  Returns a single milestone from the current repository by number.
  """
  repository: Repository!
}

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  Finds and returns the Project according to the provided Project number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  The HTTP path listing the repository's projects
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
type SetEnterpriseIdentityProviderPayload {
  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  The identity provider for the enterprise.
  """
  identityProvider: EnterpriseIdentityProvider
}

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput {
  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
type SetOrganizationInteractionLimitPayload {
  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  The organization that the interaction limit was set for.
  """
  organization: Organization
}

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  Identifies the date and time when the repository was last pushed to.
  """
  BLUE

  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type SmimeSignature implements GitSignature {
  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the PushAllowance object
  """
  id: ID!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Fork of Mastodon with a greater focus on local posting.
  """
  HOMETOWN

  """
  Social media website with a focus on photo and video sharing.
  """
  INSTAGRAM

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

"""
Entities that can sponsor others via GitHub Sponsors
"""
union Sponsor = Organization | User

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The project view's name.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    query: String!

    """
    The types of search items to search within.
    """
    type: SearchType!
  ): SearchResultItemConnection!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ViewEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2View]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type ProjectV2ViewEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Reactable object
  """
  id: ID!

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  name: String!

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  hasSponsorsListing: Boolean!

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  databaseId: Int

  """
  The Node ID of the Reaction object
  """
  id: ID!

  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  UPDATED_AT
}

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReadyForReviewEvent object
  """
  id: ID!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  branchProtectionRule: BranchProtectionRule

  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    The head ref to compare against.
    """
    headRef: String!
  ): Comparison

  """
  The Node ID of the Ref object
  """
  id: ID!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  A list of rules from active Repository and Organization rulesets that apply to this ref.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repository rules.
    """
    orderBy: RepositoryRuleOrder = {field: UPDATED_AT, direction: DESC}
  ): RepositoryRuleConnection

  """
  The object the ref points to. Returns null when object does not exist.
  """
  target: GitObject
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Ways in which lists of git refs can be ordered upon return.
"""
type RepositoryIdConditionTarget {
  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

"""
Branch protection rules that are enforced on the viewer.
"""
type RefUpdateRule {
  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!
}

"""
Entities that can be sponsored via GitHub Sponsors
"""
union SponsorableItem = Organization | User

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  createdAt: DateTime!

  """
  The Node ID of the ReferencedEvent object
  """
  id: ID!

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The description of this release rendered to HTML.
  """
  descriptionHTML: HTML

  """
  The Node ID of the Release object
  """
  id: ID!

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A name to filter the assets by.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  downloadUrl: URI!

  """
  The Node ID of the ReleaseAsset object
  """
  id: ID!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  The migration state.
  """
  createdAt: DateTime!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  project: ProjectV2!

  """
  Congo (Brazzaville)
  """
  type: ProjectV2ItemType!

  """
  Switzerland
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  Côte d'Ivoire
  """
  edges: [ProjectV2ItemEdge]

  """
  Cook Islands
  """
  nodes: [ProjectV2Item]

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  CL

  """
  Cameroon
  """
  CM

"""
Autogenerated return type of UnarchiveProjectV2Item
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
Parameters to be used for the repository_property condition
"""
type ProjectV2ItemEdge {
  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  node: ProjectV2Item
}

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise from which the user should be removed.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the user to remove from the enterprise.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  The user that was removed from the enterprise.
  """
  user: User

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Array of repository properties that must not match.
  """
  createdAt: DateTime!

  """
  Array of repository properties that must match
  """
  creator: Actor

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
type PullRequestChangedFile {
  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  subject: Reactable
}

  """
  The commit the comments were made on.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

  """
  The file the comments were made on.
  """
  path: String

  """
  The position in the diff for the commit that the comment was made on.
  """
  position: Int

  """
  The pull request this commit comment thread belongs to
  """
  pullRequest: PullRequest!

  """
  The repository associated with this node.
  """
  repository: Repository!
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

  """
  The Node ID of the RemovedFromMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The reason this pull request was removed from the queue.
  """
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  id: ID!

  """
  Project referenced by event.
  """
  project: Project @preview(toggledBy: "starfox-preview")

  """
  Column name referenced by this project event.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  currentTitle: String!

  """
  The Node ID of the RenamedTitleEvent object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
input ReopenIssueInput {
  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  id: ID!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Identifies the date and time when the object was last updated.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  REQUIRED_SIGNATURES

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddMemberAuditEntry object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  Source of ruleset.
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type ProjectV2ItemFieldValueEdge {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  id: ID!

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoArchivedAuditEntry object
  """
  id: ID!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The comment this is a reply to.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path permalink for this review comment.
  """
  resourcePath: URI!

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  state: PullRequestReviewCommentState!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  updatedAt: DateTime!

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Eritrea
  """
  ER

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  The project view's name.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  Jamaica
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  Cayman Islands
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

  """
  Kazakhstan
  """
  nodes: [ProjectV2View]

  """
  Laos
  """
  LA

  """
  Lebanon
  """
  LB

"""
Autogenerated input type of UnlinkProjectV2FromTeam
"""
type ProjectV2ViewEdge {
  """
  An alert that has been automatically closed by Dependabot.
  """
  AUTO_DISMISSED

  """
  An alert that has been manually closed by a user.
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  Lesotho
  """
  LS

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  MG

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  MH

  """
  Macedonia
  """
  MK

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  MU

  """
  The name of the workflow
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  MX

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfiguration!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

"""
An item in a pull request timeline
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Identifies the primary key from the database.
  """
  homepageUrl: URI

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The HTTP URL for this review dismissed event.
  """
  url: URI!
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The Node ID of the ReviewRequest object
  """
  id: ID!

  """
  Identifies the pull request associated with this review request.
  """
  pullRequest: PullRequest!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  OPEN
}

"""
A Git push.
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the PushAllowance object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum SamlDigestAlgorithm {
  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The total number of wiki pages that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  wikiCount: Int!
}

"""
An edge in a connection.
"""
type SearchResultItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    A package name to filter vulnerabilities by.
    """
    package: String

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    severities: [SecurityAdvisorySeverity!]
  ): SecurityVulnerabilityConnection!

  """
  When the advisory was withdrawn, if it has been withdrawn
  """
  withdrawnAt: DateTime
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  id: ID!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

"""
A GitHub Security Advisory Identifier
"""
interface Reactable {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Reactable object
  """
  id: ID!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter {
  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  The ID of the repository to set a limit for.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Identifies the date and time when the repository was last pushed to.
  """
  repository: Repository
}

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the user to set a limit for.
  """
  databaseId: Int

  """
  The Node ID of the Reaction object
  """
  id: ID!

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveTopicAuditEntry object
  """
  id: ID!

  """
  The user that the interaction limit was set for.
  """
  user: User
}

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type SmimeSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  True if the signature is valid and verified by GitHub.
  """
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """
  ASCII-armored signature header from object.
  """
  signature: String!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
type PullRequestChangedFile {
  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  True if the signature was made with GitHub's signing key.
  """
  wasSignedByGitHub: Boolean!
}

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Name of the social media account as it appears on the profile.
  """
  displayName: String!

  """
  Software or company that hosts the social media account.
  """
  provider: SocialAccountProvider!

  """
  URL of the social media account.
  """
  url: URI!
}

"""
The connection type for SocialAccount.
"""
type SocialAccountConnection {
  """
  A list of edges.
  """
  edges: [SocialAccountEdge]

  """
  A list of nodes.
  """
  nodes: [SocialAccount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SocialAccount
}

"""
Software or company that hosts social media accounts.
"""
enum SocialAccountProvider {
  """
  Social media and networking website.
  """
  commit: Commit!

  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  A list of users that can be assigned to issues in this repository.
  """
  assignableUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filters users with query on user name and login.
    """
    query: String
  ): UserConnection!

  """
  The Node ID of the RepositoryInvitation object
  """
  id: ID!

  """
  Catch-all for social media providers that do not yet have specific handling.
  """
  GENERIC

  """
  Fork of Mastodon with a greater focus on local posting.
  """
  HOMETOWN

  """
  Social media website with a focus on photo and video sharing.
  """
  INSTAGRAM

  """
  Professional networking website.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

  """
  Open-source federated microblogging service.
  """
  MASTODON

    """
    The login of one specific collaborator.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    query: String
  ): RepositoryCollaboratorConnection

  """
  Social news aggregation and discussion website.
  """
  REDDIT

  """
  Live-streaming service.
  """
  TWITCH

  """
  Microblogging website.
  """
  TWITTER

  """
  Online video platform.
  """
  YOUTUBE
}

"""
Entities that can sponsor others via GitHub Sponsors
"""
type ReadyForReviewEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReadyForReviewEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  The HTTP path for this ready for review event.
  """
  resourcePath: URI!

  """
  The HTTP URL for this ready for review event.
  """
  url: URI!
}

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type Ref implements Node {
  """
  A list of pull requests with this ref as the head ref.
  """
  associatedPullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    The base ref name to filter the pull requests by.
    """
    baseRefName: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    The head ref name to filter the pull requests by.
    """
    headRefName: String

    """
    A list of label names to filter the pull requests by.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests returned from the connection.
    """
    orderBy: IssueOrder

    """
    A list of states to filter the pull requests by.
    """
    states: [PullRequestState!]
  ): PullRequestConnection!

  """
  Branch protection rules for this ref
  """
  branchProtectionRule: BranchProtectionRule

  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    The head ref to compare against.
    """
    headRef: String!
  ): Comparison

  """
  The Node ID of the Ref object
  """
  id: ID!

  """
  The ref name.
  """
  name: String!

  """
  The amount in cents.
  """
  amountInCents: Int!

  """
  The amount in USD, formatted as a string.
  """
  formattedAmount: String!

  """
  The sponsor's GitHub account.
  """
  sponsor: Sponsorable!

  """
  A discussion category by slug.
  """
  discussionCategory(
    """
    The slug of the discussion category to be returned.
    """
    slug: String!
  ): DiscussionCategory

  """
  A list of discussions that have been opened in the repository.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Only show answered or unanswered discussions
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repository rules.
    """
    orderBy: DiscussionOrder = {field: UPDATED_AT, direction: DESC}

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  The object the ref points to. Returns null when object does not exist.
  """
  sponsorable: Sponsorable!
}

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  A list of edges.
  """
  edges: [SponsorAndLifetimeValueEdge]

  """
  A list of nodes.
  """
  environments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the environments
    """
    orderBy: Environments = {field: NAME, direction: ASC}
  ): EnvironmentConnection!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  RENAME

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Ways in which lists of git refs can be ordered upon return.
"""
type RepositoryMigration implements Migration & Node {
  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Whether vulnerability alerts are enabled for the repository.
  """
  hasVulnerabilityAlertsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  homepageUrl: URI

  """
  The Node ID of the Repository object
  """
  id: ID!

"""
Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
"""
input SponsorAndLifetimeValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The migration source.
  """
  field: SponsorAndLifetimeValueOrderField!
}

"""
Branch protection rules that are enforced on the viewer.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  LIFETIME_VALUE

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  SPONSOR_LOGIN

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  A list of edges.
  """
  edges: [SponsorEdge]

  """
  A list of nodes.
  """
  nodes: [Sponsor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type SponsorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Sponsor
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReferencedEvent object
  """
  id: ID!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsor entities by.
  """
  field: SponsorOrderField!
}

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN

  """
  Order sponsors by their relevance to the viewer.
  """
  RELEVANCE
}

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  estimatedNextSponsorsPayoutInCents: Int!

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  How the default commit message will be generated when merging a pull request.
  """
  mergeCommitMessage: MergeCommitMessage!

  """
  How the default commit title will be generated when merging a pull request.
  """
  mergeCommitTitle: MergeCommitTitle!

  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    branch: String
  ): MergeQueue

  """
  Returns a single milestone from the current repository by number.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

"""
Represents a object that belongs to a repository.
"""
interface RepositoryNode {
  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

  """
  Whether the given account is sponsoring this user/organization.
  """
  descriptionHTML: HTML

  """
  The Node ID of the Release object
  """
  id: ID!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  isSponsoringViewer: Boolean!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

    """
    A name to filter the assets by.
    """
    name: String
  ): ReleaseAssetConnection!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  Finds and returns the Project according to the provided Project number.
  """
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!

  """
  Did the viewer author this comment.
  """
  viewerDidAuthor: Boolean!
}

"""
A review comment associated with a given repository pull request.
"""
type PullRequestReviewComment implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  The comment body of this review comment.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The HTTP path listing the repository's projects
  """
  diffHunk: String!

  """
  Identifies when the comment was created in a draft state.
  """
  draftedAt: DateTime!

  """
  The actor who edited the comment.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  Identifies the original commit associated with the comment.
  """
  originalCommit: Commit

  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  Identifies when the comment body is outdated
  """
  outdated: Boolean!

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Identifies the date and time when the repository was last pushed to.
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  The Node ID of the RepositoryOwner object
  """
  id: ID!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  state: PullRequestReviewCommentState!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  updatedAt: DateTime!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!
}

"""
Entities that can be sponsored via GitHub Sponsors
"""
union SponsorableItem = Organization | User

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  French Polynesia
  """
  edges: [SponsorableItemEdge]

  """
  Papua New Guinea
  """
  nodes: [SponsorableItem]

  """
  Philippines
  """
  PH

  """
  Pakistan
  """
  PK

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  """
  Poland
  """
  PL

  """
  Saint Pierre and Miquelon
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise from which the user should be removed.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the user to remove from the enterprise.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  The user that was removed from the enterprise.
  """
  user: User

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

  """
  The Node ID of the RemovedFromMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The reason this pull request was removed from the queue.
  """
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
type RemovedFromProjectEvent implements Node {
  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  databaseId: Int

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  id: ID!

  """
  Only allow users with bypass permission to create matching refs.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  LOCK_BRANCH

  """
  Max ref updates
  """
  currentTitle: String!

  """
  The Node ID of the RenamedTitleEvent object
  """
  id: ID!

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  MERGE_QUEUE_LOCKED_REF

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
input ReopenIssueInput {
  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REQUIRED_SIGNATURES

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Secret scanning
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

  """
  Tag
  """
  TAG

  """
  Tag name pattern
  """
  TAG_NAME_PATTERN

  """
  Only allow users with bypass permission to update matching refs.
  """
  UPDATE

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  WORKFLOWS

  """
  Workflow files cannot be modified.
  """
  WORKFLOW_UPDATES
}

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  id: ID!

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type PullRequestRevisionMarker {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The enforcement level of this ruleset
  """
  enforcement: RuleEnforcement!

  """
  The Node ID of the RepositoryRuleset object
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The type of rule.
    """
    type: RepositoryRuleType
  ): RepositoryRuleConnection

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddMemberAuditEntry object
  """
  id: ID!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  repositoryRoleName: String

  """
  Identifies the ruleset associated with the allowed actor
  """
  repositoryRuleset: RepositoryRuleset
}

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  ALWAYS

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  actorId: ID

  """
  The bypass mode for this actor.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode!

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  id: ID!

  """
  A list of nodes.
  """
  nodes: [RepositoryRuleset]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRuleset
}

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  Branch
  """
  BRANCH

  """
  Tag
  """
  TAG
}

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  id: ID!

  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

  """
  The user or organization that is being sponsored, the maintainer.
  """
  sponsorable: Sponsorable!

  """
  The associated sponsorship tier.
  """
  sponsorsTier: SponsorsTier

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  The activity was cancelling a sponsorship.
  """
  CANCELLED_SPONSORSHIP

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

  """
  The activity was scheduling a downgrade or cancellation.
  """
  PENDING_CHANGE

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  TIER_CHANGE
}

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  Sudan
  """
  edges: [SponsorsActivityEdge]

  """
  Sweden
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoArchivedAuditEntry object
  """
  id: ID!

  """
  Singapore
  """
  SG

  """
  Saint Helena
  """
  SH

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  Slovenia
  """
  SI

  """
  Svalbard and Jan Mayen Islands
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  Andorra
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  AF

  """
  Antigua and Barbuda
  """
  AG

  """
  Anguilla
  """
  AI

  """
  Albania
  """
  AL

  """
  Armenia
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  id: ID!

  """
  Angola
  """
  AO

  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

  """
  Australia
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

  """
  Aruba
  """
  AW

  """
  Åland
  """
  AX

  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  BE

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  BH

  """
  Burundi
  """
  BI

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  BM

  """
  Brunei Darussalam
  """
  BN

  """
  Bolivia
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  enterpriseUrl: URI

"""
A Git push.
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  Brazil
  """
  BR

  """
  Bahamas
  """
  BS

"""
Autogenerated input type of UpdateProjectV2Collaborators
"""
input UpdateProjectV2CollaboratorsInput {
  """
  Bhutan
  """
  BT

  """
  Bouvet Island
  """
  BV

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  BY

  """
  Belize
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the PushAllowance object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  id: ID!
}

  """
  Canada
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  When was the alert auto-dismissed?
  """
  autoDismissedAt: DateTime

  """
  When was the alert created?
  """
  CD

  """
  Central African Republic
  """
  CF

  """
  Congo (Brazzaville)
  """
  CG

  """
  Comment explaining the reason the alert was dismissed
  """
  dismissComment: String

  """
  The reason the alert was dismissed
  """
  CH

  """
  Côte d'Ivoire
  """
  CI

  """
  Cook Islands
  """
  CK

  """
  When was the alert fixed?
  """
  fixedAt: DateTime

  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  id: ID!

  """
  China
  """
  CN

  """
  Colombia
  """
  CO

  """
  Costa Rica
  """
  CR

  """
  Cape Verde
  """
  CV

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  CX

  """
  Cyprus
  """
  CY

  """
  Czech Republic
  """
  CZ

  """
  Germany
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Djibouti
  """
  DJ

  """
  Denmark
  """
  DK

  """
  Dominica
  """
  DM

"""
A record that is promoted on a GitHub Sponsors profile.
"""
type SponsorsListingFeaturedItem implements Node {
  """
  Dominican Republic
  """
  DO

  """
  Algeria
  """
  DZ

  """
  Ecuador
  """
  EC

  """
  Estonia
  """
  EE

  """
  An alert that has been automatically closed by Dependabot.
  """
  AUTO_DISMISSED

  """
  An alert that has been manually closed by a user.
  """
  EG

  """
  Western Sahara
  """
  EH

  """
  Eritrea
  """
  ER

"""
The different kinds of records that can be featured on a GitHub Sponsors profile page.
"""
enum SponsorsListingFeaturedItemFeatureableType {
  """
  Spain
  """
  ES

  """
  Ethiopia
  """
  ET

"""
The possible states of a subscription.
"""
enum ThreadSubscriptionState {
  """
  Finland
  """
  FI

  """
  Fiji
  """
  union: Boolean = false

  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  FK

  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  FR

  """
  Gabon
  """
  GA

  """
  United Kingdom
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  GD

  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  WAITING
}

    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    query: String!

  """
  Ghana
  """
  GH

  """
  Gibraltar
  """
  GI

  """
  Greenland
  """
  GL

  """
  Gambia
  """
  GM

  """
  Guinea
  """
  GN

  """
  Guadeloupe
  """
  GP

  """
  Equatorial Guinea
  """
  GQ

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type RequiredStatusCheckDescription {
  """
  Greece
  """
  GR

  """
  South Georgia and South Sandwich Islands
  """
  GS

  """
  Guatemala
  """
  GT

  """
  Guam
  """
  GU

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfiguration!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
input RequiredStatusChecksParametersInput {
  """
  Status checks that are required.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Autogenerated input type of RerequestCheckSuite
"""
input RerequestCheckSuiteInput {
  """
  Guinea-Bissau
  """
  GW

  """
  Guyana
  """
  GY

  """
  Hong Kong
  """
  HK

  """
  Heard and McDonald Islands
  """
  HM

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the thread to resolve
  """
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The thread to resolve.
  """
  thread: PullRequestReviewThread
}

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the published tier to retire.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The tier that was retired.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  The description of the revert pull request.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates whether the revert pull request should be a draft.
  """
  draft: Boolean = false

  """
  The ID of the pull request to revert.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The title of the revert pull request.
  """
  title: String
}

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  databaseId: Int

  """
  The Node ID of the Reactable object
  """
  id: ID!

  """
  The pull request that was reverted.
  """
  pullRequest: PullRequest

  """
  The new pull request that reverts the input pull request.
  """
  revertPullRequest: PullRequest
}

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The actor that can dismiss.
  """
  actor: ReviewDismissalAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the ReviewDismissalAllowance object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union ReviewDismissalAllowanceActor = App | Team | User

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  A list of edges.
  """
  edges: [ReviewDismissalAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewDismissalAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewDismissalAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

"""
Represents a 'review_dismissed' event on a given issue or pull request.
"""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Reaction object
  """
  id: ID!

  """
  Identifies the optional message associated with the 'review_dismissed' event.
  """
  dismissalMessage: String

  """
  Identifies the optional message associated with the event, rendered to HTML.
  """
  dismissalMessageHTML: String

  """
  The Node ID of the ReviewDismissedEvent object
  """
  id: ID!

  """
  Identifies the previous state of the review with the 'review_dismissed' event.
  """
  previousReviewState: PullRequestReviewState!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the commit which caused the review to become stale.
  """
  pullRequestCommit: PullRequestCommit

  """
  The HTTP path for this review dismissed event.
  """
  resourcePath: URI!

  """
  Identifies the review associated with the 'review_dismissed' event.
  """
  review: PullRequestReview

  """
  The HTTP URL for this review dismissed event.
  """
  url: URI!
}

"""
A request for a user to review a pull request.
"""
type ReviewRequest implements Node {
  """
  Whether this request was created for a code owner
  """
  asCodeOwner: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ReviewRequest object
  """
  id: ID!

  """
  Identifies the pull request associated with this review request.
  """
  pullRequest: PullRequest!

  """
  The reviewer that is requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
The connection type for ReviewRequest.
"""
type ReviewRequestConnection {
  """
  A list of edges.
  """
  edges: [ReviewRequestEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewRequest]

  """
  Information to aid in pagination.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewRequest
}

"""
Represents an 'review_request_removed' event on a given pull request.
"""
type ReviewRequestRemovedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestRemovedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review request was removed.
  """
  requestedReviewer: RequestedReviewer
}

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review was requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type ReviewStatusHovercardContext implements HovercardContext {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  The current status of the pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision
}

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
type ReadyForReviewEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReadyForReviewEvent object
  """
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  The login of the user to revoke the migrator role
  """
  login: String!
}

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organizations that had the migrator role revoked for the given user.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection
}

"""
Autogenerated input type of RevokeMigratorRole
"""
input RevokeMigratorRoleInput {
  """
  The user login or Team slug to revoke the migrator role from.
  """
  branchProtectionRule: BranchProtectionRule

  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    The head ref to compare against.
    """
    headRef: String!
  ): Comparison

  """
  The Node ID of the Ref object
  """
  id: ID!

  """
  Specifies the type of the actor, can be either USER or TEAM.
  """
  actorType: ActorType!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization that the user/team belongs to.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of RevokeMigratorRole
"""
type RevokeMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of rules from active Repository and Organization rulesets that apply to this ref.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repository rules.
    """
    orderBy: RepositoryRuleOrder = {field: UPDATED_AT, direction: DESC}
  ): RepositoryRuleConnection

  """
  The object the ref points to. Returns null when object does not exist.
  """
  success: Boolean
}

"""
Possible roles a user may have in relation to an organization.
"""
enum RoleInOrganization {
  """
  A user who is a direct member of the organization.
  """
  DIRECT_MEMBER

  """
  A user with full administrative access to the organization.
  """
  OWNER

  """
  A user who is unaffiliated with the organization.
  """
  UNAFFILIATED
}

"""
The level of enforcement for a rule or ruleset.
"""
enum RuleEnforcement {
  """
  Rules will be enforced
  """
  ACTIVE

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

"""
Ways in which lists of git refs can be ordered upon return.
"""
input RefOrder {
  """
  Do not evaluate or enforce rules
  """
  DISABLED

  """
  Allow admins to test rules before enforcing them. Admins can view insights on
  the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
  """
  EVALUATE
}

"""
Types which can be parameters for `RepositoryRule` objects.
"""
union RuleParameters =
    BranchNamePatternParameters
  | CommitAuthorEmailPatternParameters
  | CommitMessagePatternParameters
  | CommitterEmailPatternParameters
  | PullRequestParameters
  | RequiredDeploymentsParameters
  | RequiredStatusChecksParameters
  | TagNamePatternParameters
  | UpdateParameters
  | WorkflowsParameters

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  Parameters used for the `branch_name_pattern` rule type
  """
  branchNamePattern: BranchNamePatternParametersInput

  """
  Parameters used for the `commit_author_email_pattern` rule type
  """
  commitAuthorEmailPattern: CommitAuthorEmailPatternParametersInput

  """
  Parameters used for the `commit_message_pattern` rule type
  """
  commitMessagePattern: CommitMessagePatternParametersInput

  """
  Parameters used for the `committer_email_pattern` rule type
  """
  committerEmailPattern: CommitterEmailPatternParametersInput

  """
  Parameters used for the `pull_request` rule type
  """
  pullRequest: PullRequestParametersInput

  """
  Parameters used for the `required_deployments` rule type
  """
  requiredDeployments: RequiredDeploymentsParametersInput

"""
Branch protection rules that are enforced on the viewer.
"""
type RefUpdateRule {
  """
  Parameters used for the `required_status_checks` rule type
  """
  requiredStatusChecks: RequiredStatusChecksParametersInput

  """
  Parameters used for the `tag_name_pattern` rule type
  """
  tagNamePattern: TagNamePatternParametersInput

  """
  Parameters used for the `update` rule type
  """
  update: UpdateParametersInput

  """
  Parameters used for the `workflows` rule type
  """
  workflows: WorkflowsParametersInput
}

"""
Types which can have `RepositoryRule` objects.
"""
union RuleSource = Organization | Repository

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum SamlDigestAlgorithm {
  """
  SHA1
  """
  SHA1

  """
  SHA256
  """
  SHA256

  """
  SHA384
  """
  SHA384

  """
  SHA512
  """
  SHA512
}

"""
The possible signature algorithms used to sign SAML requests for a Identity Provider.
"""
enum SamlSignatureAlgorithm {
  """
  RSA-SHA1
  """
  RSA_SHA1

  """
  RSA-SHA256
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  RSA-SHA384
  """
  RSA_SHA384

  """
  RSA-SHA512
  """
  RSA_SHA512
}

"""
A Saved Reply is text a user can use to reply quickly.
"""
type SavedReply implements Node {
  """
  The body of the saved reply.
  """
  body: String!

  """
  The saved reply body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the SavedReply object
  """
  createdAt: DateTime!

  """
  The Node ID of the ReferencedEvent object
  """
  id: ID!

  """
  The title of the saved reply.
  """
  title: String!

  """
  The user that saved this reply.
  """
  user: Actor
}

"""
The connection type for SavedReply.
"""
type SavedReplyConnection {
  """
  A list of edges.
  """
  edges: [SavedReplyEdge]

  """
  A list of nodes.
  """
  nodes: [SavedReply]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SavedReply
}

"""
Ordering options for saved reply connections.
"""
input SavedReplyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order saved replies by.
  """
  field: SavedReplyOrderField!
}

"""
Properties by which saved reply connections can be ordered.
"""
enum SavedReplyOrderField {
  """
  Order saved reply by when they were updated.
  """
  UPDATED_AT
}

"""
The results of a search.
"""
union SearchResultItem = App | Discussion | Issue | MarketplaceListing | Organization | PullRequest | Repository | User

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

  """
  The total number of discussions that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  discussionCount: Int!

  """
  A list of edges.
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

  """
  The total number of issues that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  issueCount: Int!

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of repositories that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  repositoryCount: Int!

  """
  The total number of users that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  userCount: Int!

  """
  The total number of wiki pages that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  wikiCount: Int!
}

"""
An edge in a connection.
"""
type SearchResultItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SearchResultItem

  """
  Text matches on the result found.
  """
  textMatches: [TextMatch]
}

"""
Represents the individual results of a search.
"""
enum SearchType {
  """
  Returns matching discussions in repositories.
  """
  DISCUSSION

  """
  Returns results matching issues in repositories.
  """
  descriptionHTML: HTML

  """
  The Node ID of the Release object
  """
  id: ID!

  """
  Returns results matching repositories.
  """
  REPOSITORY

  """
  Returns results matching users and organizations on GitHub.
  """
  USER
}

"""
A GitHub Security Advisory
"""
type SecurityAdvisory implements Node {
  """
  The classification of the advisory
  """
  classification: SecurityAdvisoryClassification!

  """
  The CVSS associated with this advisory
  """
  cvss: CVSS!

  """
  CWEs associated with this Advisory
  """
  cwes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CWEConnection!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  This is a long plaintext description of the advisory
  """
  description: String!

  """
  The GitHub Security Advisory ID
  """
  ghsaId: String!

  """
  The Node ID of the SecurityAdvisory object
  """
  id: ID!

  """
  A list of identifiers for this advisory
  """
  identifiers: [SecurityAdvisoryIdentifier!]!

  """
  The permalink for the advisory's dependabot alerts page
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

  """
  The organization that originated the advisory
  """
  origin: String!

  """
  The permalink for the advisory
  """
  permalink: URI

  """
  When the advisory was published
  """
  publishedAt: DateTime!

  """
  A list of references for this advisory
  """
  references: [SecurityAdvisoryReference!]!

  """
  The severity of the advisory
  """
  severity: SecurityAdvisorySeverity!

  """
  A short plaintext summary of the advisory
  """
  summary: String!

  """
  When the advisory was last updated
  """
  updatedAt: DateTime!

  """
  Vulnerabilities associated with this Advisory
  """
  vulnerabilities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the returned topics.
    """
    orderBy: SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}

    """
    A package name to filter vulnerabilities by.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
  """
  ecosystem: SecurityAdvisoryEcosystem!

  """
  The package name
  """
  name: String!
}

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  The package name or version
  """
  identifier: String!
}

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  A publicly accessible reference
  """
  url: URI!
}

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  Critical.
  """
  CRITICAL

  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Moderate.
  """
  MODERATE
}

"""
An individual vulnerability within an Advisory
"""
type SecurityVulnerability {
  """
  The Advisory associated with this Vulnerability
  """
  advisory: SecurityAdvisory!

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The severity of the vulnerability within this package
  """
  severity: SecurityAdvisorySeverity!

  """
  When the vulnerability was last updated
  """
  updatedAt: DateTime!

  """
  A string that describes the vulnerable package versions.
  This string follows a basic syntax with a few forms.
  + `= 0.2.0` denotes a single vulnerable version.
  + `<= 1.0.8` denotes a version range up to and including the specified version
  + `< 0.1.11` denotes a version range up to, but excluding, the specified version
  + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
  + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
  """
  vulnerableVersionRange: String!
}

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SecurityVulnerabilityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityVulnerability
}

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: String!

  """
  The Issuer Entity ID for the SAML identity provider
  """
  issuer: String

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

  """
  A list of users that can be assigned to issues in this repository.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The ID of the organization to set a limit for.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
type SetOrganizationInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization that the interaction limit was set for.
  """
  organization: Organization
}

"""
Autogenerated input type of SetRepositoryInteractionLimit
"""
input SetRepositoryInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    orderBy: TeamOrder

    """
    The login of one specific collaborator.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    query: String
  ): RepositoryCollaboratorConnection

  """
  The ID of the repository to set a limit for.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that the interaction limit was set for.
  """
  repository: Repository
}

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

  """
  Identifies the date and time when the object was created.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the user to set a limit for.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user that the interaction limit was set for.
  """
  user: User
}

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type SmimeSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  True if the signature is valid and verified by GitHub.
  """
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """
  ASCII-armored signature header from object.
  """
  signature: String!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  wasSignedByGitHub: Boolean!
}

"""
An audit entry in an organization audit log.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

"""
The connection type for OrganizationAuditEntry.
"""
type SocialAccount {
  """
  Name of the social media account as it appears on the profile.
  """
  displayName: String!

  """
  Software or company that hosts the social media account.
  """
  provider: SocialAccountProvider!

  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  url: URI!
}

"""
The connection type for SocialAccount.
"""
type SocialAccountConnection {
  """
  A list of edges.
  """
  edges: [SocialAccountEdge]

  """
  A list of nodes.
  """
  nodes: [SocialAccount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SocialAccount
}

"""
Software or company that hosts social media accounts.
"""
enum SocialAccountProvider {
  """
  Social media and networking website.
  """
  FACEBOOK

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

  """
  The Node ID of the RemovedFromMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  A discussion category by slug.
  """
  discussionCategory(
    """
    The slug of the discussion category to be returned.
    """
    slug: String!
  ): DiscussionCategory

  """
  A list of discussions that have been opened in the repository.
  """
  discussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Only show answered or unanswered discussions
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Only include discussions that belong to the category with this ID.
    """
    categoryId: ID = null

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: UPDATED_AT, direction: DESC}

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
type RemovedFromProjectEvent implements Node {
  """
  Catch-all for social media providers that do not yet have specific handling.
  """
  GENERIC

  """
  Fork of Mastodon with a greater focus on local posting.
  """
  HOMETOWN

  """
  Social media website with a focus on photo and video sharing.
  """
  environments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the environments
    """
    orderBy: Environments = {field: NAME, direction: ASC}
  ): EnvironmentConnection!

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  id: ID!

  """
  Professional networking website.
  """
  LINKEDIN

  """
  Open-source federated microblogging service.
  """
  MASTODON

  """
  JavaScript package registry.
  """
  NPM

  """
  Social news aggregation and discussion website.
  """
  REDDIT

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

  """
  Microblogging website.
  """
  TWITTER

  """
  Online video platform.
  """
  YOUTUBE
}

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  hasVulnerabilityAlertsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
type SponsorAndLifetimeValue {
  """
  The amount in cents.
  """
  homepageUrl: URI

  """
  The Node ID of the Repository object
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

  """
  The amount in USD, formatted as a string.
  """
  formattedAmount: String!

  """
  The sponsor's GitHub account.
  """
  sponsor: Sponsorable!

  """
  The maintainer's GitHub account.
  """
  sponsorable: Sponsorable!
}

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  A list of edges.
  """
  edges: [SponsorAndLifetimeValueEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorAndLifetimeValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorAndLifetimeValue
}

"""
Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
"""
input SponsorAndLifetimeValueOrder {
  """
  The ordering direction.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

  """
  The field to order results by.
  """
  field: SponsorAndLifetimeValueOrderField!
}

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  LIFETIME_VALUE

  """
  Order results by the sponsor's login (username).
  """
  SPONSOR_LOGIN

  """
  Order results by the sponsor's relevance to the viewer.
  """
  SPONSOR_RELEVANCE
}

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  A list of edges.
  """
  edges: [SponsorEdge]

  """
  A list of nodes.
  """
  nodes: [Sponsor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type SponsorEdge {
  """
  A cursor for use in pagination.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  id: ID!

  """
  The item at the end of the edge.
  """
  node: Sponsor
}

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
input SponsorOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsor entities by.
  """
  field: SponsorOrderField!
}

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN

  """
  Order sponsors by their relevance to the viewer.
  """
  RELEVANCE
}

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  estimatedNextSponsorsPayoutInCents: Int!

  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  hasSponsorsListing: Boolean!

  """
  Finds and returns the Project according to the provided Project number.
  """
  isSponsoringViewer: Boolean!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
union OrganizationOrUser = Organization | User

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """
  How the default commit message will be generated when merging a pull request.
  """
  mergeCommitMessage: MergeCommitMessage!

  """
  How the default commit title will be generated when merging a pull request.
  """
  mergeCommitTitle: MergeCommitTitle!

  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    branch: String
  ): MergeQueue

  """
  Returns a single milestone from the current repository by number.
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing the repository's projects
  """
  projectsUrl: URI!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddMemberAuditEntry object
  """
  id: ID!

  """
  Identifies the date and time when the repository was last pushed to.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

"""
Information for an uploaded package.
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  Finds and returns the Project according to the provided Project number.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The HTTP path listing the repository's projects
  """
  projectsResourcePath: URI!

  """
  A list of rulesets for this repository.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The security policy URL.
  """
  viewerIsSponsoring: Boolean!
}

"""
Entities that can be sponsored via GitHub Sponsors
"""
union SponsorableItem = Organization | User

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  Iceland
  """
  edges: [SponsorableItemEdge]

  """
  Italy
  """
  nodes: [SponsorableItem]

  """
  How the default commit message will be generated when squash merging a pull request.
  """
  squashMergeCommitMessage: SquashMergeCommitMessage!

  """
  How the default commit title will be generated when squash merging a pull request.
  """
  squashMergeCommitTitle: SquashMergeCommitTitle!

  """
  Whether a squash merge commit can use the pull request title as default.
  """
  squashPrTitleUsedAsDefault: Boolean!
    @deprecated(
      reason: "`squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC."
    )

  """
  Jamaica
  """
  JM

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  """
  Jordan
  """
  JO

  """
  Japan
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  Identifies the date and time when the repository was last pushed to.
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  id: ID!

  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

  """
  The user or organization that is being sponsored, the maintainer.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoArchivedAuditEntry object
  """
  id: ID!

  """
  The associated sponsorship tier.
  """
  sponsorsTier: SponsorsTier

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  The activity was cancelling a sponsorship.
  """
  CANCELLED_SPONSORSHIP

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

  """
  The activity was scheduling a downgrade or cancellation.
  """
  PENDING_CHANGE

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """
    The number for the vulnerability alert to be returned.
    """
    number: Int!
  ): RepositoryVulnerabilityAlert

  """
  A list of vulnerability alerts that are on this repository.
  """
  SPONSOR_MATCH_DISABLED

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  TIER_CHANGE
}

"""
The connection type for SponsorsActivity.
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  Liberia
  """
  edges: [SponsorsActivityEdge]

  """
  Lesotho
  """
  nodes: [SponsorsActivity]

  """
  Lithuania
  """
  LT

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Whether contributors are required to sign off on web-based commits in this repository.
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated input type of UpdateProjectColumn
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

  """
  Latvia
  """
  LV

  """
  Libya
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  The previous calendar day.
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  Andorra
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering of the returned package files.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

  """
  United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  AF

  """
  Antigua and Barbuda
  """
  AG

  """
  Anguilla
  """
  AI

  """
  Albania
  """
  AL

  """
  Armenia
  """
  AM

  """
  Angola
  """
  AO

  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland
  """
  AX

  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  The total size in kilobytes of all repositories in the connection. Value will
  never be larger than max 32-bit signed integer.
  """
  BD

  """
  Belgium
  """
  BE

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  BH

  """
  Burundi
  """
  BI

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Brunei Darussalam
  """
  repositoryDiscussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter discussions to only those that have been answered or not. Defaults to
    including both answered and unanswered discussions.
    """
    answered: Boolean = null

  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The source of this permission.
  """
  source: PermissionGranter!
}

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: CREATED_AT, direction: DESC}

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!
}

"""
Autogenerated input type of UpdateProject
"""
input UpdateProjectInput {
  """
  Bolivia
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  BR

"""
Parameters to be used for the repository_id condition
"""
type RepositoryIdConditionTarget {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
A subset of repository info.
"""
interface RepositoryInfo {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  BS

  """
  Bhutan
  """
  BT

  """
  Bouvet Island
  """
  BV

  """
  Botswana
  """
  BW

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  BY

  """
  Belize
  """
  BZ

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Congo (Kinshasa)
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

  """
  Central African Republic
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Congo (Brazzaville)
  """
  CG

  """
  Switzerland
  """
  CH

  """
  Côte d'Ivoire
  """
  CI

  """
  Cook Islands
  """
  CK

  """
  Chile
  """
  CL

  """
  Cameroon
  """
  CM

  """
  China
  """
  CN

  """
  Colombia
  """
  CO

  """
  Costa Rica
  """
  CR

  """
  Cape Verde
  """
  CV

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  CX

  """
  Identifies the date and time when the repository was last pushed to.
  """
  CY

  """
  Czech Republic
  """
  CZ

  """
  Germany
  """
  DE

  """
  Djibouti
  """
  DJ

  """
  Denmark
  """
  DK

  """
  Dominica
  """
  DM

  """
  Dominican Republic
  """
  DO

  """
  Algeria
  """
  DZ

  """
  Ecuador
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

  """
  Estonia
  """
  EE

  """
  Egypt
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

  """
  Western Sahara
  """
  EH

  """
  Eritrea
  """
  ER

  """
  Spain
  """
  ES

"""
Autogenerated input type of StartRepositoryMigration
"""
type UnlinkProjectV2FromRepositoryPayload {
  """
  Ethiopia
  """
  ET

  """
  Finland
  """
  FI

  """
  Fiji
  """
  FJ

  """
  Falkland Islands
  """
  FK

  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  FR

  """
  Gabon
  """
  GA

"""
Autogenerated input type of UnlinkRepositoryFromProject
"""
input UnlinkRepositoryFromProjectInput {
  """
  United Kingdom
  """
  email: String

  """
  The Node ID of the RepositoryInvitation object
  """
  id: ID!

  """
  Grenada
  """
  GD

  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  GG

  """
  Ghana
  """
  GH

  """
  Gibraltar
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

"""
Autogenerated input type of UpdateProjectV2Collaborators
"""
input UpdateProjectV2CollaboratorsInput {
  """
  Greenland
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

  """
  Gambia
  """
  GM

  """
  Guinea
  """
  GN

  """
  Guadeloupe
  """
  GP

  """
  Equatorial Guinea
  """
  GQ

  """
  Greece
  """
  GR

  """
  South Georgia and South Sandwich Islands
  """
  GS

  """
  Guatemala
  """
  GT

  """
  Guam
  """
  GU

  """
  Guinea-Bissau
  """
  GW

  """
  Guyana
  """
  GY

  """
  Hong Kong
  """
  RENAME

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type RepositoryMigration implements Migration & Node {
  """
  The migration flag to continue on error.
  """
  HM

  """
  Honduras
  """
  HN

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  id: ID!

  """
  Haiti
  """
  HT

  """
  The migration source.
  """
  HU

  """
  Indonesia
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

  """
  Isle of Man
  """
  IM

  """
  India
  """
  IN

  """
  British Indian Ocean Territory
  """
  IO

  """
  Iraq
  """
  IQ

  """
  Iran
  """
  IR

  """
  Iceland
  """
  IS

  """
  Italy
  """
  IT

  """
  Jersey
  """
  JE

  """
  Jamaica
  """
  JM

  """
  Jordan
  """
  JO

  """
  Japan
  """
  JP

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
interface RepositoryNode {
  """
  Kenya
  """
  KE

  """
  Kyrgyzstan
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Cambodia
  """
  KH

  """
  Kiribati
  """
  KI

  """
  Comoros
  """
  KM

  """
  Saint Kitts and Nevis
  """
  KN

  """
  Korea, South
  """
  KR

  """
  Kuwait
  """
  KW

  """
  Cayman Islands
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  id: ID!

  """
  Kazakhstan
  """
  KZ

  """
  Laos
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    last: Int
  ): ProjectColumnConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who originally created the project.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

  """
  The project's name.
  """
  name: String!

  """
  The project's number.
  """
  number: Int!

  """
  The project's owner. Currently limited to repositories, organizations, and users.
  """
  owner: ProjectOwner!

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Lebanon
  """
  LB

  """
  Saint Lucia
  """
  LC

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  LI

"""
Autogenerated input type of UnlinkRepositoryFromProject
"""
input UnlinkRepositoryFromProjectInput {
  """
  Sri Lanka
  """
  LK

  """
  Liberia
  """
  LR

  """
  Lesotho
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

  """
  Lithuania
  """
  LT

  """
  Luxembourg
  """
  LU

  """
  Latvia
  """
  LV

  """
  Libya
  """
  PUBLIC
}

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  LOCK_BRANCH

  """
  Max ref updates
  """
  MAX_REF_UPDATES

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
New projects that manage issues, pull requests and drafts using tables and boards.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  closed: Boolean!

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  createdAt: DateTime!

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  creator: Actor

  """
  Commits pushed to matching refs must have verified signatures.
  """
  databaseId: Int

  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Secret scanning
  """
  SECRET_SCANNING

  """
  Tag
  """
  TAG

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  Only allow users with bypass permission to update matching refs.
  """
  number: Int!

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  owner: ProjectV2Owner!

  """
  Workflow files cannot be modified.
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  resourcePath: URI!

  """
  Identifies the date and time when the object was created.
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  Identifies the primary key from the database.
  """
  title: String!

  """
  The enforcement level of this ruleset
  """
  updatedAt: DateTime!

  """
  The Node ID of the RepositoryRuleset object
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  The actor that can bypass rules.
  """
  edges: [ProjectV2Edge]

  """
  The mode for the bypass actor
  """
  nodes: [ProjectV2]

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  node: ProjectV2
}

"""
A field inside a project.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  Identifies the ruleset associated with the allowed actor
  """
  createdAt: DateTime!

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  dataType: ProjectV2FieldType!

  """
  The actor can only bypass rules via a pull request
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  name: String!

  """
  A list of nodes.
  """
  project: ProjectV2!

  """
  Identifies the total count of items in the connection.
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  A cursor for use in pagination.
  """
  createdAt: DateTime!

  """
  The item at the end of the edge.
  """
  dataType: ProjectV2FieldType!

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  The bypass mode for this actor.
  """
  name: String!

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Field]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  Branch
  """
  ASSIGNEES

  """
  Tag
  """
  DATE

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  ITERATION

  """
  Morocco
  """
  LABELS

  """
  Monaco
  """
  LINKED_PULL_REQUESTS

  """
  Moldova
  """
  MILESTONE

  """
  Montenegro
  """
  NUMBER

  """
  Saint Martin (French part)
  """
  REPOSITORY

  """
  Madagascar
  """
  REVIEWERS

"""
Represents a count of the state of a status context.
"""
type StatusContextStateCount {
  """
  Marshall Islands
  """
  SINGLE_SELECT

  """
  Macedonia
  """
  TEXT

  """
  Mali
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  Myanmar
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  Mongolia
  """
  content: ProjectV2ItemContent

  """
  Macau
  """
  createdAt: DateTime!

  """
  Northern Mariana Islands
  """
  creator: Actor

  """
  Martinique
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  fieldValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

  """
  Mauritania
  """
  isArchived: Boolean!

  """
  Montserrat
  """
  project: ProjectV2!

  """
  Mauritius
  """
  type: ProjectV2ItemType!

  """
  Maldives
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  Malawi
  """
  edges: [ProjectV2ItemEdge]

  """
  Mexico
  """
  nodes: [ProjectV2Item]

  """
  Malaysia
  """
  MY

  """
  Mozambique
  """
  totalCount: Int!
}

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  id: ID!

  """
  Namibia
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  New Caledonia
  """
  createdAt: DateTime!

  """
  Niger
  """
  creator: Actor

  """
  Norfolk Island
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  Nigeria
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  id: ID!

  """
  Saint Pierre and Miquelon
  """
  PM

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Russian Federation
  """
  RU

  """
  Comment explaining the reason the alert was dismissed
  """
  dismissComment: String

  """
  The reason the alert was dismissed
  """
  RW

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  An alert that has been automatically closed by Dependabot.
  """
  AUTO_DISMISSED

  """
  The actor who created the item.
  """
  TC

  """
  Chad
  """
  TD

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
How payment was made for funding a GitHub Sponsors sponsorship.
"""
enum SponsorshipPaymentSource {
  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  United States of America
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  Uruguay
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  Uzbekistan
  """
  UZ

  """
  Vatican City
  """
  VA

"""
An edge in a connection.
"""
type ProjectV2ItemFieldValueEdge {
  """
  Saint Vincent and the Grenadines
  """
  VC

  """
  Venezuela
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type RequiredStatusCheckDescription {
  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  The description of the revert pull request.
  """
  body: String

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Indicates whether the revert pull request should be a draft.
  """
  draft: Boolean = false

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  The new pull request that reverts the input pull request.
  """
  revertPullRequest: PullRequest
}

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

"""
An edge in a connection.
"""
type ReviewDismissalAllowanceEdge {
  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

"""
The connection type for ReviewRequest.
"""
type ReviewRequestConnection {
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  The project view's name.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  The login of the user to revoke the migrator role
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  A user who is a direct member of the organization.
  """
  edges: [ProjectV2ViewEdge]

  """
  The HTTP path listing the repository's projects
  """
  nodes: [ProjectV2View]

  """
  Parameters used for the `commit_author_email_pattern` rule type
  """
  commitAuthorEmailPattern: CommitAuthorEmailPatternParametersInput

  """
  Parameters used for the `commit_message_pattern` rule type
  """
  commitMessagePattern: CommitMessagePatternParametersInput

"""
An edge in a connection.
"""
type ProjectV2ViewEdge {
  """
  Parameters used for the `committer_email_pattern` rule type
  """
  committerEmailPattern: CommitterEmailPatternParametersInput

  """
  Parameters used for the `pull_request` rule type
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  Parameters used for the `update` rule type
  """
  update: UpdateParametersInput

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  RSA_SHA512
}

"""
A Saved Reply is text a user can use to reply quickly.
"""
type SavedReply implements Node {
  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  body: String!

  """
  The saved reply body rendered to HTML.
  """
  bodyHTML: HTML!

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  UPDATED_AT
}

"""
The results of a search.
"""
union SearchResultItem = App | Discussion | Issue | MarketplaceListing | Organization | PullRequest | Repository | User

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
type SearchResultItemConnection {
  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  UPDATED_AT
}

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  A list of references for this advisory
  """
  references: [SecurityAdvisoryReference!]!

  """
  The severity of the advisory
  """
  severity: SecurityAdvisorySeverity!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Ordering options for the returned topics.
    """
    orderBy: SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}

    """
    A package name to filter vulnerabilities by.
    """
    package: String

    """
    A list of severities to filter vulnerabilities by.
    """
    severities: [SecurityAdvisorySeverity!]
  ): SecurityVulnerabilityConnection!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
The connection type for SocialAccount.
"""
type SocialAccountConnection {
  """
  A list of edges.
  """
  edges: [SocialAccountEdge]

  """
  A list of nodes.
  """
  nodes: [SocialAccount]

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The item at the end of the edge.
  """
  node: SocialAccount
}

"""
Software or company that hosts social media accounts.
"""
enum SocialAccountProvider {
  """
  Social media and networking website.
  """
  FACEBOOK

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Order sponsors by their relevance to the viewer.
  """
  RELEVANCE
}

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  estimatedNextSponsorsPayoutInCents: Int!

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

  """
  Whether the given account is sponsoring this user/organization.
  """
  isSponsoredBy(
    """
    The target account's login.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  Branch is read-only. Users cannot push to the branch.
  """
  LOCK_BRANCH

  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  MERGE_QUEUE_LOCKED_REF

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REQUIRED_SIGNATURES

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Secret scanning
  """
  SECRET_SCANNING

  """
  Tag
  """
  TAG

  """
  Tag name pattern
  """
  TAG_NAME_PATTERN

  """
  Only allow users with bypass permission to update matching refs.
  """
  UPDATE

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  WORKFLOWS

  """
  Workflow files cannot be modified.
  """
  WORKFLOW_UPDATES
}

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetBypassActorConnection

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The enforcement level of this ruleset
  """
  enforcement: RuleEnforcement!

  """
  The Node ID of the RepositoryRuleset object
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The type of rule.
    """
    type: RepositoryRuleType
  ): RepositoryRuleConnection

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  repositoryRoleName: String

  """
  Identifies the ruleset associated with the allowed actor
  """
  repositoryRuleset: RepositoryRuleset
}

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  ALWAYS

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRulesetBypassActor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  actorId: ID

  """
  The bypass mode for this actor.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode!

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRuleset]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRuleset
}

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  Branch
  """
  BRANCH

  """
  Tag
  """
  TAG
}

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  id: ID!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!
}

"""
Entities that can be sponsored via GitHub Sponsors
"""
union SponsorableItem = Organization | User

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  The HTTP path for the Sponsors dashboard for this Sponsors listing.
  """
  edges: [SponsorableItemEdge]

  """
  The HTTP URL for the Sponsors dashboard for this Sponsors listing.
  """
  nodes: [SponsorableItem]

  """
  The records featured on the GitHub Sponsors profile.
  """
  featuredItems(
    """
    The types of featured items to return.
    """
    featureableTypes: [SponsorsListingFeaturedItemFeatureableType!] = [REPOSITORY, USER]
  ): [SponsorsListingFeaturedItem!]!

  """
  The fiscal host used for payments, if any. Will only return a value when
  queried by the maintainer themselves, or by an admin of the sponsorable organization.
  """
  fiscalHost: Organization

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  """
  The full description of the listing.
  """
  editor: Actor

  """
  The Node ID of the TeamDiscussionComment object
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  id: ID!

  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

  """
  The user or organization that is being sponsored, the maintainer.
  """
  sponsorable: Sponsorable!

  """
  The associated sponsorship tier.
  """
  sponsorsTier: SponsorsTier

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  The activity was cancelling a sponsorship.
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  id: ID!

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

  """
  The activity was scheduling a downgrade or cancellation.
  """
  PENDING_CHANGE

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  TIER_CHANGE
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  A repository owned by the user or organization with the GitHub Sponsors profile.
  """
  edges: [SponsorsActivityEdge]

  """
  A user who belongs to the organization with the GitHub Sponsors profile.
  """
  nodes: [SponsorsActivity]

  """
  The Node ID of the UnpinnedEvent object
  """
  resourcePath: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The note of ProjectCard.
  """
  note: String

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  The notification setting that the team has set.
  """
  contexts: [StatusContext!]!

  """
  The Node ID of the Status object
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

"""
Autogenerated return type of UpdateProjectCard
"""
type UpdateProjectCardPayload {
  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

"""
Required status check
"""
input StatusCheckConfigurationInput {
  """
  The previous thirty days.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

  """
  The previous seven days.
  """
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  enterpriseUrl: URI

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  id: ID!

  """
  United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  AF

  """
  Antigua and Barbuda
  """
  AG

  """
  Anguilla
  """
  AI

  """
  Albania
  """
  AL

  """
  Armenia
  """
  AM

  """
  Angola
  """
  AO

  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

"""
Autogenerated input type of TransferEnterpriseOrganization
"""
type RepositoryVulnerabilityAlert implements Node & RepositoryNode {
  """
  When was the alert auto-dismissed?
  """
  autoDismissedAt: DateTime

  """
  When was the alert created?
  """
  createdAt: DateTime!

  """
  American Samoa
  """
  AS

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  AT

  """
  Comment explaining the reason the alert was dismissed
  """
  dismissComment: String

  """
  The reason the alert was dismissed
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland
  """
  AX

  """
  When was the alert fixed?
  """
  fixedAt: DateTime

  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  id: ID!

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  BE

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Burundi
  """
  BI

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

  """
  Bermuda
  """
  BM

  """
  Brunei Darussalam
  """
  BN

  """
  Bolivia
  """
  BO

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  BQ

  """
  Brazil
  """
  BR

  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  Bhutan
  """
  BT

  """
  An alert that has been automatically closed by Dependabot.
  """
  AUTO_DISMISSED

  """
  An alert that has been manually closed by a user.
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  BY

  """
  Belize
  """
  BZ

  """
  Canada
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Congo (Kinshasa)
  """
  union: Boolean = false

  """
  Central African Republic
  """
  CF

"""
Autogenerated input type of UpdateProject
"""
input UpdateProjectInput {
  """
  Congo (Brazzaville)
  """
  CG

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  CH

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  CI

  """
  Cook Islands
  """
  CK

  """
  Chile
  """
  CL

  """
  Cameroon
  """
  CM

  """
  China
  """
  CN

  """
  Colombia
  """
  WAITING
}

"""
Types that can be requested reviewers.
"""
union RequestedReviewer = Bot | Mannequin | Team | User

  """
  Costa Rica
  """
  CR

  """
  Cape Verde
  """
  CV

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  CX

"""
The privacy of a sponsorship
"""
type UpdateProjectPayload {
  """
  Cyprus
  """
  CY

  """
  Czech Republic
  """
  CZ

  """
  Germany
  """
  DE

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type RequiredStatusCheckDescription {
  """
  Djibouti
  """
  DJ

  """
  Denmark
  """
  DK

"""
The possible default commit titles for squash merges.
"""
enum SquashMergeCommitTitle {
  """
  Dominica
  """
  DM

  """
  Dominican Republic
  """
  DO

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfiguration!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
input RequiredStatusChecksParametersInput {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfigurationInput!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Autogenerated input type of RerequestCheckSuite
"""
type SshSignature implements GitSignature {
  """
  Algeria
  """
  DZ

  """
  Ecuador
  """
  EC

  """
  Estonia
  """
  EE

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the thread to resolve
  """
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The thread to resolve.
  """
  thread: PullRequestReviewThread
}

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
Autogenerated input type of RetireSponsorsTier
"""
type PullRequestReviewThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the published tier to retire.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was retired.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  The description of the revert pull request.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates whether the revert pull request should be a draft.
  """
  draft: Boolean = false

  """
  The ID of the pull request to revert.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The title of the revert pull request.
  """
  title: String
}

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that was reverted.
  """
  pullRequest: PullRequest

  """
  The new pull request that reverts the input pull request.
  """
  revertPullRequest: PullRequest
}

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  actor: ReviewDismissalAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the ReviewDismissalAllowance object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union ReviewDismissalAllowanceActor = App | Team | User

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  A list of edges.
  """
  edges: [ReviewDismissalAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewDismissalAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewDismissalAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewDismissalAllowance
}

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Identifies the optional message associated with the 'review_dismissed' event.
  """
  dismissalMessage: String

  """
  Identifies the optional message associated with the event, rendered to HTML.
  """
  dismissalMessageHTML: String

  """
  The Node ID of the ReviewDismissedEvent object
  """
  id: ID!

  """
  Identifies the previous state of the review with the 'review_dismissed' event.
  """
  previousReviewState: PullRequestReviewState!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the commit which caused the review to become stale.
  """
  pullRequestCommit: PullRequestCommit

  """
  The HTTP path for this review dismissed event.
  """
  resourcePath: URI!

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
type PullRequestTimelineConnection {
  """
  Identifies the review associated with the 'review_dismissed' event.
  """
  review: PullRequestReview

  """
  The HTTP URL for this review dismissed event.
  """
  url: URI!
}

"""
A request for a user to review a pull request.
"""
type ReviewRequest implements Node {
  """
  Whether this request was created for a code owner
  """
  asCodeOwner: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ReviewRequest object
  """
  id: ID!

  """
  Identifies the pull request associated with this review request.
  """
  pullRequest: PullRequest!

  """
  The reviewer that is requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
An item in a pull request timeline
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

"""
The connection type for PullRequestTimelineItems.
"""
type ReviewRequestConnection {
  """
  A list of edges.
  """
  edges: [ReviewRequestEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewRequest
}

"""
Represents an 'review_request_removed' event on a given pull request.
"""
type ReviewRequestRemovedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestRemovedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review request was removed.
  """
  requestedReviewer: RequestedReviewer
}

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review was requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type ReviewStatusHovercardContext implements HovercardContext {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  The current status of the pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision
}

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
input RevokeEnterpriseOrganizationsMigratorRoleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of the user to revoke the migrator role
  """
  login: String!
}

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organizations that had the migrator role revoked for the given user.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection
}

"""
Autogenerated input type of RevokeMigratorRole
"""
input RevokeMigratorRoleInput {
  """
  The user login or Team slug to revoke the migrator role from.
  """
  actor: String!

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  The user that saved this reply.
  """
  user: Actor
}

"""
The connection type for SavedReply.
"""
type SavedReplyConnection {
  """
  A list of edges.
  """
  edges: [SavedReplyEdge]

  """
  A list of nodes.
  """
  nodes: [SavedReply]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SavedReply
}

"""
Ordering options for saved reply connections.
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The SHA before the push
  """
  previousSha: GitObjectID

  """
  The ordering direction.
  """
  direction: OrderDirection!

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
The results of a search.
"""
union SearchResultItem = App | Discussion | Issue | MarketplaceListing | Organization | PullRequest | Repository | User

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
type SearchResultItemConnection {
  """
  The total number of pieces of code that matched the search query. Regardless
  of the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  codeCount: Int!

  """
  The total number of discussions that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  discussionCount: Int!

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of repositories that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  repositoryCount: Int!

  """
  The total number of users that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  userCount: Int!

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

"""
Represents the individual results of a search.
"""
enum SearchType {
  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Returns results matching repositories.
  """
  REPOSITORY

  """
  Returns results matching users and organizations on GitHub.
  """
  USER
}

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CWEConnection!

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    If true, filters teams that are mapped to an LDAP Group (Enterprise only)
    """
    ldapMapped: Boolean

    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    orderBy: TeamOrder

    """
    If non-null, filters teams according to privacy
    """
    privacy: TeamPrivacy

    """
    If non-null, filters teams with query on team name and team slug
    """
    query: String!

    """
    The types of search items to search within.
    """
    type: SearchType!
  ): SearchResultItemConnection!

  """
  The severity of the advisory
  """
  severity: SecurityAdvisorySeverity!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  summary: String!

  """
  When the advisory was last updated
  """
  updatedAt: DateTime!

  """
  Vulnerabilities associated with this Advisory
  """
  vulnerabilities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  websiteUrl: URI
}

"""
An audit entry in an organization audit log.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

"""
Classification of the advisory.
"""
enum SecurityAdvisoryClassification {
  """
  Classification of general advisories.
  """
  GENERAL

  """
  Classification of malware advisories.
  """
  MALWARE
}

"""
The connection type for SecurityAdvisory.
"""
type SecurityAdvisoryConnection {
  """
  A list of edges.
  """
  edges: [SecurityAdvisoryEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityAdvisory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible ecosystems of a security vulnerability's package.
"""
enum SecurityAdvisoryEcosystem {
  """
  GitHub Actions
  """
  ACTIONS

  """
  PHP packages hosted at packagist.org
  """
  COMPOSER

  """
  Erlang/Elixir packages hosted at hex.pm
  """
  ERLANG

  """
  Go modules
  """
  GO

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

  """
  Python packages hosted at PyPI.org
  """
  PIP

  """
  Dart packages hosted at pub.dev
  """
  PUB

  """
  Ruby gems hosted at RubyGems.org
  """
  RUBYGEMS

  """
  Rust crates
  """
  RUST

  """
  Swift packages
  """
  SWIFT
}

"""
An edge in a connection.
"""
type SecurityAdvisoryEdge {
  """
  A cursor for use in pagination.
  """
  databaseId: Int

  """
  The Node ID of the Reactable object
  """
  id: ID!

  """
  The item at the end of the edge.
  """
  node: SecurityAdvisory
}

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  The identifier type, e.g. GHSA, CVE
  """
  type: String!

  """
  The identifier
  """
  value: String!
}

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter {
  """
  The identifier type.
  """
  type: SecurityAdvisoryIdentifierType!

  """
  The identifier string. Supports exact or partial matching.
  """
  value: String!
}

"""
Identifier formats available for advisories.
"""
enum SecurityAdvisoryIdentifierType {
  """
  Common Vulnerabilities and Exposures Identifier.
  """
  CVE

  """
  GitHub Security Advisory ID.
  """
  GHSA
}

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
input SecurityAdvisoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security advisories by.
  """
  externalIdentities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter to external identities with the users login
    """
    login: String

    """
    Filter to external identities with valid org membership only
    """
    membersOnly: Boolean

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

"""
Properties by which security advisory connections can be ordered.
"""
enum SecurityAdvisoryOrderField {
  """
  Order advisories by publication time
  """
  PUBLISHED_AT

  """
  Order advisories by update time
  """
  UPDATED_AT
}

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
  """
  ecosystem: SecurityAdvisoryEcosystem!

  """
  The package name
  """
  name: String!
}

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  The package name or version
  """
  identifier: String!
}

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  A publicly accessible reference
  """
  url: URI!
}

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  Critical.
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  HIGH

  """
  Low.
  """
  databaseId: Int

  """
  The Node ID of the Reaction object
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

  """
  When the vulnerability was last updated
  """
  updatedAt: DateTime!

  """
  A string that describes the vulnerable package versions.
  This string follows a basic syntax with a few forms.
  + `= 0.2.0` denotes a single vulnerable version.
  + `<= 1.0.8` denotes a version range up to and including the specified version
  + `< 0.1.11` denotes a version range up to, but excluding, the specified version
  + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
  + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
  """
  vulnerableVersionRange: String!
}

"""
The connection type for SecurityVulnerability.
"""
type SecurityVulnerabilityConnection {
  """
  A list of edges.
  """
  edges: [SecurityVulnerabilityEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityVulnerability]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SecurityVulnerabilityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityVulnerability
}

"""
Ordering options for security vulnerability connections
"""
input SecurityVulnerabilityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security vulnerabilities by.
  """
  field: SecurityVulnerabilityOrderField!
}

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  """
  Order vulnerability by update time
  """
  UPDATED_AT
}

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
input SetEnterpriseIdentityProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The digest algorithm used to sign SAML requests for the identity provider.
  """
  digestMethod: SamlDigestAlgorithm!

  """
  The ID of the enterprise on which to set an identity provider.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: String!

  """
  The Issuer Entity ID for the SAML identity provider
  """
  issuer: String

  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: SamlSignatureAlgorithm!

  """
  The URL endpoint for the identity provider's SAML SSO.
  """
  ssoUrl: URI!
}

"""
Autogenerated return type of SetEnterpriseIdentityProvider
"""
type SetEnterpriseIdentityProviderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The identity provider for the enterprise.
  """
  identityProvider: EnterpriseIdentityProvider
}

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Returns a single ruleset from the current repository by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!

    """
    Include rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true
  ): RepositoryRuleset

  """
  A list of rulesets for this repository.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The security policy URL.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the organization to set a limit for.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
type SetOrganizationInteractionLimitPayload {
  """
  How the default commit message will be generated when squash merging a pull request.
  """
  squashMergeCommitMessage: SquashMergeCommitMessage!

  """
  How the default commit title will be generated when squash merging a pull request.
  """
  squashMergeCommitTitle: SquashMergeCommitTitle!

  """
  Whether a squash merge commit can use the pull request title as default.
  """
  squashPrTitleUsedAsDefault: Boolean!
    @deprecated(
      reason: "`squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC."
    )

  """
  The organization that the interaction limit was set for.
  """
  organization: Organization
}

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
input SetRepositoryInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the repository to set a limit for.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that the interaction limit was set for.
  """
  repository: Repository
}

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReadyForReviewEvent object
  """
  id: ID!

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the user to set a limit for.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user that the interaction limit was set for.
  """
  user: User
}

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type SmimeSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  True if the signature is valid and verified by GitHub.
  """
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  GitHub user corresponding to the email signing this commit.
  """
  totalOrganizationCount: Int!
}

"""
Information for an uploaded package.
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    The head ref to compare against.
    """
    headRef: String!
  ): Comparison

  """
  The Node ID of the Ref object
  """
  id: ID!

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  True if the signature was made with GitHub's signing key.
  """
  wasSignedByGitHub: Boolean!
}

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Name of the social media account as it appears on the profile.
  """
  displayName: String!

  """
  Software or company that hosts the social media account.
  """
  provider: SocialAccountProvider!

  """
  A list of rules from active Repository and Organization rulesets that apply to this ref.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repository rules.
    """
    orderBy: RepositoryRuleOrder = {field: UPDATED_AT, direction: DESC}
  ): RepositoryRuleConnection

  """
  The object the ref points to. Returns null when object does not exist.
  """
  url: URI!
}

"""
The connection type for SocialAccount.
"""
type SocialAccountConnection {
  """
  A list of edges.
  """
  edges: [SocialAccountEdge]

  """
  A list of nodes.
  """
  nodes: [SocialAccount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """
    The number for the vulnerability alert to be returned.
    """
    number: Int!
  ): RepositoryVulnerabilityAlert

  """
  A list of vulnerability alerts that are on this repository.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SocialAccount
}

"""
Parameters to be used for the ref_name condition
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

  """
  MD5 hash of the file.
  """
  md5: String

  """
  Name of the file.
  """
  name: String!

  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Ways in which lists of git refs can be ordered upon return.
"""
enum SocialAccountProvider {
  """
  Social media and networking website.
  """
  FACEBOOK

  """
  Catch-all for social media providers that do not yet have specific handling.
  """
  GENERIC

  """
  Fork of Mastodon with a greater focus on local posting.
  """
  HOMETOWN

  """
  Social media website with a focus on photo and video sharing.
  """
  INSTAGRAM

  """
  Professional networking website.
  """
  LINKEDIN

  """
  Open-source federated microblogging service.
  """
  MASTODON

  """
  JavaScript package registry.
  """
  NPM

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Whether contributors are required to sign off on web-based commits in this repository.
  """
  webCommitSignoffRequired: Boolean!
}

"""
Branch protection rules that are enforced on the viewer.
"""
type RefUpdateRule {
  """
  Live-streaming service.
  """
  TWITCH

  """
  Microblogging website.
  """
  TWITTER

  """
  Online video platform.
  """
  YOUTUBE
}

"""
Entities that can sponsor others via GitHub Sponsors
"""
union Sponsor = Organization | User

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  The amount in cents.
  """
  amountInCents: Int!

  """
  The amount in USD, formatted as a string.
  """
  downloadsTotalCount: Int!
}

"""
A version tag contains the mapping between a tag name and a version.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

  """
  The sponsor's GitHub account.
  """
  sponsor: Sponsorable!

  """
  The maintainer's GitHub account.
  """
  sponsorable: Sponsorable!
}

"""
The connection type for SponsorAndLifetimeValue.
"""
enum PackageType {
  """
  A debian package.
  """
  DEBIAN

  """
  A docker image.
  """
  DOCKER
    @deprecated(
      reason: "DOCKER will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2021-06-21 UTC."
    )

  """
  A maven package.
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

  """
  A list of edges.
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  A list of nodes.
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

"""
An edge in a connection.
"""
type PackageVersion implements Node {
  """
  List of files associated with this package version
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering of the returned package files.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorAndLifetimeValue
}

"""
Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
"""
input SponsorAndLifetimeValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order results by.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReferencedEvent object
  """
  id: ID!

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  LIFETIME_VALUE

  """
  Order results by the sponsor's login (username).
  """
  SPONSOR_LOGIN

  """
  Order results by the sponsor's relevance to the viewer.
  """
  SPONSOR_RELEVANCE
}

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  A list of edges.
  """
  edges: [SponsorEdge]

  """
  A list of nodes.
  """
  nodes: [Sponsor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type SponsorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Sponsor
}

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
input SponsorOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsor entities by.
  """
  field: SponsorOrderField!
}

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN

  """
  Order sponsors by their relevance to the viewer.
  """
  RELEVANCE
}

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  estimatedNextSponsorsPayoutInCents: Int!

  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  hasSponsorsListing: Boolean!

  """
  The total size in kilobytes of all repositories in the connection. Value will
  never be larger than max 32-bit signed integer.
  """
  isSponsoredBy(
    """
    The target account's login.
    """
    accountLogin: String!
  ): Boolean!

  """
  True if the viewer is sponsored by this user/organization.
  """
  isSponsoringViewer: Boolean!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

  """
  The description of this release rendered to HTML.
  """
  descriptionHTML: HTML

  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The source of this permission.
  """
  id: ID!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!
}

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A name to filter the assets by.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!
}

"""
Entities that can be sponsored via GitHub Sponsors
"""
union SponsorableItem = Organization | User

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  Gabon
  """
  edges: [SponsorableItemEdge]

  """
  United Kingdom
  """
  nodes: [SponsorableItem]

"""
Parameters to be used for the repository_id condition
"""
type RepositoryIdConditionTarget {
  """
  One of these repo IDs must match the repo.
  """
  downloadUrl: URI!

  """
  The Node ID of the ReleaseAsset object
  """
  id: ID!

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  One of these repo IDs must match the repo.
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

"""
A subset of repository info.
"""
input UpdateProjectV2CollaboratorsInput {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  GD

  """
  Georgia
  """
  GE

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  id: ID!

  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

  """
  The user or organization that is being sponsored, the maintainer.
  """
  sponsorable: Sponsorable!

  """
  The associated sponsorship tier.
  """
  sponsorsTier: SponsorsTier

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  The activity was cancelling a sponsorship.
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

  """
  The activity was scheduling a downgrade or cancellation.
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  Identifies the date and time when the repository was last pushed to.
  """
  TIER_CHANGE
}

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  Honduras
  """
  edges: [SponsorsActivityEdge]

  """
  Croatia
  """
  nodes: [SponsorsActivity]

  """
  Haiti
  """
  HT

  """
  Hungary
  """
  HU

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  Indonesia
  """
  ID

  """
  Ireland
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise from which the user should be removed.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the user to remove from the enterprise.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  The user that was removed from the enterprise.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  Andorra
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  AF

  """
  Antigua and Barbuda
  """
  AG

  """
  Anguilla
  """
  AI

  """
  Albania
  """
  AL

  """
  Armenia
  """
  AM

  """
  Angola
  """
  AO

  """
  Antarctica
  """
  email: String

  """
  The Node ID of the RepositoryInvitation object
  """
  id: ID!

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland
  """
  AX

  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  BE

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  BH

  """
  Burundi
  """
  BI

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  RENAME

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

  """
  The Node ID of the RemovedFromMergeQueueEvent object
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The reason this pull request was removed from the queue.
  """
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
type RepositoryMigration implements Migration & Node {
  """
  The migration flag to continue on error.
  """
  BN

  """
  Bolivia
  """
  BO

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  id: ID!

  """
  Project referenced by event.
  """
  project: Project @preview(toggledBy: "starfox-preview")

  """
  Column name referenced by this project event.
  """
  projectColumnName: String! @preview(toggledBy: "starfox-preview")
}

"""
Represents a 'renamed' event on a given issue or pull request
"""
type RenamedTitleEvent implements Node {
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  actor: Actor

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  currentTitle: String!

  """
  The Node ID of the RenamedTitleEvent object
  """
  id: ID!

  """
  Brazil
  """
  BR

  """
  The migration source.
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
input ReopenIssueInput {
  """
  Bhutan
  """
  BT

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  BV

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

  """
  Belarus
  """
  BY

  """
  Belize
  """
  BZ

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Congo (Kinshasa)
  """
  CD

  """
  Central African Republic
  """
  CF

  """
  Congo (Brazzaville)
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

  """
  Switzerland
  """
  CH

  """
  Côte d'Ivoire
  """
  CI

  """
  Cook Islands
  """
  CK

  """
  Chile
  """
  CL

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  id: ID!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
interface RepositoryNode {
  """
  Cameroon
  """
  CM

  """
  China
  """
  CN

  """
  Colombia
  """
  CO

  """
  Costa Rica
  """
  CR

  """
  Cape Verde
  """
  CV

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  CX

  """
  Cyprus
  """
  CY

  """
  Czech Republic
  """
  CZ

  """
  Germany
  """
  DE

  """
  Djibouti
  """
  DJ

  """
  Denmark
  """
  DK

  """
  Dominica
  """
  DM

"""
A topic aggregates entities that are related to a subject.
"""
type TeamDiscussion implements Comment & Deletable & Node & Reactable & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Dominican Republic
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The Node ID of the RepositoryOwner object
  """
  id: ID!

  """
  Algeria
  """
  DZ

  """
  Ecuador
  """
  EC

  """
  Estonia
  """
  EE

  """
  Egypt
  """
  EG

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

  """
  Eritrea
  """
  ER

  """
  Spain
  """
  ES

  """
  Ethiopia
  """
  ET

  """
  Finland
  """
  FI

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Falkland Islands
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddMemberAuditEntry object
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  FR

  """
  Gabon
  """
  GA

  """
  United Kingdom
  """
  GB

  """
  Grenada
  """
  GD

  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  GG

  """
  Ghana
  """
  GH

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  id: ID!

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
Ordering options for repository rules.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  The ordering direction.
  """
  closed: Boolean!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  createdAt: DateTime!

  """
  Order repository rules by type
  """
  creator: Actor

  """
  Order repository rules by updated time
  """
  databaseId: Int

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

  """
  Committer email pattern
  """
  items(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  Commit author email pattern
  """
  number: Int!

  """
  Commit message pattern
  """
  owner: ProjectV2Owner!

  """
  Only allow users with bypass permission to create matching refs.
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  repositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

  """
  Branch is read-only. Users cannot push to the branch.
  """
  resourcePath: URI!

  """
  The Node ID of the RepoArchivedAuditEntry object
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  Max ref updates
  """
  title: String!

  """
  Merges must be performed via a merge queue.
  """
  updatedAt: DateTime!

  """
  Merge queue locked ref
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  views(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  edges: [ProjectV2Edge]

  """
  Prevent merge commits from being pushed to matching refs.
  """
  nodes: [ProjectV2]

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REQUIRED_SIGNATURES

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  node: ProjectV2
}

"""
A field inside a project.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  Commits pushed to matching refs must have verified signatures.
  """
  createdAt: DateTime!

  """
  Secret scanning
  """
  dataType: ProjectV2FieldType!

  """
  Tag
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  Tag name pattern
  """
  name: String!

  """
  Only allow users with bypass permission to update matching refs.
  """
  project: ProjectV2!

  """
  Workflow files cannot be modified.
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  The actors that can bypass this ruleset
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  Identifies the date and time when the object was created.
  """
  name: String!

  """
  Identifies the primary key from the database.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  Name of the ruleset.
  """
  edges: [ProjectV2FieldEdge]

  """
  List of rules.
  """
  nodes: [ProjectV2Field]

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

  """
  Source of ruleset.
  """
  source: RuleSource!

"""
An edge in a connection.
"""
type ProjectV2FieldEdge {
  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  Assignees
  """
  ASSIGNEES

  """
  Date
  """
  DATE

  """
  Iteration
  """
  ITERATION

  """
  Labels
  """
  LABELS

  """
  The actor that can bypass rules.
  """
  LINKED_PULL_REQUESTS

  """
  The mode for the bypass actor
  """
  MILESTONE

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  NUMBER

  """
  Repository
  """
  REPOSITORY

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  REVIEWERS

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  SINGLE_SELECT

  """
  Identifies the ruleset associated with the allowed actor
  """
  TEXT

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  The actor can only bypass rules via a pull request
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  A list of edges.
  """
  content: ProjectV2ItemContent

  """
  A list of nodes.
  """
  createdAt: DateTime!

  """
  Information to aid in pagination.
  """
  creator: Actor

  """
  Identifies the total count of items in the connection.
  """
  databaseId: Int

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  fieldValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

  """
  The item at the end of the edge.
  """
  isArchived: Boolean!

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  project: ProjectV2!

  """
  For organization owner bypasses, true
  """
  type: ProjectV2ItemType!

  """
  For role bypasses, the role database ID
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ItemEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Item]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  createdAt: PreciseDateTime!

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Branch
  """
  createdAt: DateTime!

  """
  Tag
  """
  creator: Actor

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  Greenland
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Hungary
  """
  HU

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Jersey
  """
  JE

  """
  Jamaica
  """
  JM

  """
  Jordan
  """
  JO

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Luxembourg
  """
  LU

  """
  The actor who created the item.
  """
  LV

  """
  Libya
  """
  LY

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Martinique
  """
  MQ

  """
  Mauritania
  """
  MR

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  Norfolk Island
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  Nigeria
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  Nicaragua
  """
  NI

  """
  Netherlands
  """
  NL

"""
An edge in a connection.
"""
type ProjectV2ItemFieldValueEdge {
  """
  Norway
  """
  union: Boolean = false

  """
  Nepal
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

"""
The possible states of a subscription.
"""
enum ThreadSubscriptionState {
  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput {
  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  The ID of the pull request to revert.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!
}

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

"""
The level of enforcement for a rule or ruleset.
"""
enum RuleEnforcement {
  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  The project view's name.
  """
  name: String!

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  Parameters used for the `workflows` rule type
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  SHA384
  """
  SHA384

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ViewEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2View]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ViewEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  The total number of pieces of code that matched the search query. Regardless
  of the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  codeCount: Int!

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

"""
Represents the individual results of a search.
"""
enum SearchType {
  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  ISSUE

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  REPOSITORY

  """
  Returns results matching users and organizations on GitHub.
  """
  USER
}

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  notificationsPermalink: URI

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  permalink: URI

  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  severity: SecurityAdvisorySeverity!

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  The number of additions in this pull request.
  """
  additions: Int!

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  Critical.
  """
  CRITICAL

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

"""
An individual vulnerability within an Advisory
"""
type SecurityVulnerability {
  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    The login of one specific collaborator.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  When the vulnerability was last updated
  """
  updatedAt: DateTime!

  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    If true, filters teams that are mapped to an LDAP Group (Enterprise only)
    """
    ldapMapped: Boolean

    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    orderBy: TeamOrder

    """
    If non-null, filters teams according to privacy
    """
    privacy: TeamPrivacy

    """
    If non-null, filters teams with query on team name and team slug
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    User logins to filter by
    """
    userLogins: [String!]
  ): TeamConnection!

  """
  The HTTP path listing organization's teams
  """
  teamsResourcePath: URI!

  """
  The HTTP URL listing organization's teams
  """
  teamsUrl: URI!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  twitterUsername: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this organization.
  """
  url: URI!

  """
  Organization is adminable by the viewer.
  """
  viewerCanAdminister: Boolean!

  """
  Can the viewer pin repositories and gists to the profile?
  """
  viewerCanChangePinnedItems: Boolean!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!

  """
  Viewer can create repositories on this organization
  """
  viewerCanCreateRepositories: Boolean!

  """
  Viewer can create teams on this organization.
  """
  viewerCanCreateTeams: Boolean!

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  Viewer is an active member of this organization.
  """
  viewerIsAMember: Boolean!

  """
  Whether or not this Organization is followed by the viewer.
  """
  viewerIsFollowing: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  websiteUrl: URI
}

"""
An audit entry in an organization audit log.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

"""
The connection type for OrganizationAuditEntry.
"""
type OrganizationAuditEntryConnection {
  """
  A list of edges.
  """
  edges: [OrganizationAuditEntryEdge]

  """
  A list of nodes.
  """
  nodes: [OrganizationAuditEntry]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
enum SocialAccountProvider {
  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The email address of the user invited to the organization.
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  invitationType: OrganizationInvitationType!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
enum OrganizationInvitationType {
  """
  The invitation was to an email address.
  """
  EMAIL

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
union OrganizationOrUser = Organization | User

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  Whether or not the viewer can disable auto-merge
  """
  viewerCanDisableAutoMerge: Boolean!

  """
  Can the viewer edit files within this pull request.
  """
  viewerCanEditFiles: Boolean!

  """
  Whether or not the viewer can enable auto-merge
  """
  relevantOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  Indicates whether the viewer can bypass branch protections and merge the pull request immediately
  """
  totalOrganizationCount: Int!
}

"""
Information for an uploaded package.
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    last: Int
  ): UserConnection!

  """
  Whether contributors are required to sign off on web-based commits in this repository.
  """
  webCommitSignoffRequired: Boolean!
}

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
enum RepositoryAffiliation {
  """
  Repositories that the user has been added to as a collaborator.
  """
  COLLABORATOR

  """
  Repositories that the user has access to through being a member of an
  organization. This includes every repository on every team that the user is on.
  """
  ORGANIZATION_MEMBER

  """
  Repositories that are owned by the authenticated user.
  """
  OWNER
}

"""
Metadata for an audit entry with action repo.*
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

  """
  The name of the repository
  """
  repositoryName: String

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!
}

"""
Entities that can be sponsored via GitHub Sponsors
"""
union SponsorableItem = Organization | User

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  Senegal
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  Somalia
  """
  nodes: [SponsorableItem]

  """
  Suriname
  """
  SR

  """
  South Sudan
  """
  SS

"""
An edge in a connection.
"""
type PullRequestCommitCommentThread implements Node & RepositoryNode {
  """
  The comments that exist in this thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CommitCommentConnection!

  """
  The commit the comments were made on.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

  """
  Sao Tome and Principe
  """
  ST

  """
  El Salvador
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  The total size in kilobytes of all repositories in the connection. Value will
  never be larger than max 32-bit signed integer.
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  CREATED_AT
}

"""
Represents an owner of a package.
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

  """
  The user or organization that is being sponsored, the maintainer.
  """
  sponsorable: Sponsorable!

  """
  The associated sponsorship tier.
  """
  sponsorsTier: SponsorsTier

  """
  The timestamp of this event.
  """
  repositoryDiscussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter discussions to only those that have been answered or not. Defaults to
    including both answered and unanswered discussions.
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: CREATED_AT, direction: DESC}

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!
}

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

  """
  The activity was cancelling a sponsorship.
  """
  CANCELLED_SPONSORSHIP

"""
Parameters to be used for the repository_id condition
"""
type RepositoryIdConditionTarget {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

    """
    Ordering of the returned package files.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  NEW_SPONSORSHIP

  """
  The activity was scheduling a downgrade or cancellation.
  """
  PENDING_CHANGE

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  TIER_CHANGE
}

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  Tuvalu
  """
  edges: [SponsorsActivityEdge]

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  nodes: [SponsorsActivity]

  """
  Tanzania
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Ukraine
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  Uganda
  """
  UG

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  Andorra
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  AF

  """
  Antigua and Barbuda
  """
  AG

  """
  Identifies the date and time when the repository was last pushed to.
  """
  AI

"""
Autogenerated input type of TransferIssue
"""
input UpdateRepositoryWebCommitSignoffSettingInput {
  """
  Albania
  """
  AL

  """
  Armenia
  """
  AM

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  AO

  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

"""
The possible default commit messages for squash merges.
"""
enum SquashMergeCommitMessage {
  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The source of this permission.
  """
  AW

  """
  Åland
  """
  AX

  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

  """
  Burundi
  """
  BI

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  BL

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  email: String

  """
  The Node ID of the RepositoryInvitation object
  """
  id: ID!

  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  Bolivia
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  Bahamas
  """
  BS

  """
  Bhutan
  """
  BT

  """
  Bouvet Island
  """
  BV

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  BY

  """
  Belize
  """
  BZ

  """
  Canada
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  CD

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  CF

  """
  Congo (Brazzaville)
  """
  CG

  """
  Switzerland
  """
  CH

  """
  Côte d'Ivoire
  """
  CI

  """
  Cook Islands
  """
  RENAME

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type RepositoryMigration implements Migration & Node {
  """
  The migration flag to continue on error.
  """
  CL

"""
The different kinds of records that can be featured on a GitHub Sponsors profile page.
"""
enum SponsorsListingFeaturedItemFeatureableType {
  """
  Cameroon
  """
  CM

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  id: ID!

  """
  Colombia
  """
  CO

  """
  The migration source.
  """
  CR

  """
  Cape Verde
  """
  CV

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  CW

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
Autogenerated input type of UnmarkProjectV2AsTemplate
"""
interface Starrable {
  """
  Cyprus
  """
  CY

  """
  Czech Republic
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

  """
  Germany
  """
  DE

  """
  Djibouti
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

  """
  Denmark
  """
  DK

    """
    Order for connection
    """
    orderBy: TeamDiscussionCommentOrder
  ): TeamDiscussionCommentConnection!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
The possible team notification values.
"""
enum TeamNotificationSetting {
  """
  Dominica
  """
  DM

  """
  Dominican Republic
  """
  DO

"""
Ways in which team connections can be ordered.
"""
type UnmarkProjectV2AsTemplatePayload {
  """
  Algeria
  """
  DZ

  """
  Ecuador
  """
  EC

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
type UnmarkedAsDuplicateEvent implements Node {
  """
  Estonia
  """
  EE

"""
Autogenerated input type of StartOrganizationMigration
"""
input StartOrganizationMigrationInput {
  """
  Egypt
  """
  EG

  """
  Western Sahara
  """
  EH

  """
  Eritrea
  """
  ER

  """
  Spain
  """
  ES

  """
  Ethiopia
  """
  ET

"""
Autogenerated return type of StartOrganizationMigration
"""
type StartOrganizationMigrationPayload {
  """
  Finland
  """
  FI

  """
  Fiji
  """
  FJ

  """
  Falkland Islands
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The Node ID of the RepositoryOwner object
  """
  id: ID!

  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  France
  """
  FR

  """
  Gabon
  """
  GA

  """
  United Kingdom
  """
  GB

  """
  Grenada
  """
  GD

  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  GG

  """
  Ghana
  """
  GH

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  Gibraltar
  """
  GI

  """
  Greenland
  """
  PUBLIC
}

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type PullRequestRevisionMarker {
  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
An item in a pull request timeline
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

"""
The connection type for PullRequestTimelineItems.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  LOCK_BRANCH

  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  MERGE_QUEUE_LOCKED_REF

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REQUIRED_SIGNATURES

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Secret scanning
  """
  SECRET_SCANNING

  """
  Tag
  """
  TAG

  """
  Tag name pattern
  """
  TAG_NAME_PATTERN

  """
  Only allow users with bypass permission to update matching refs.
  """
  UPDATE

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  WORKFLOWS

  """
  Workflow files cannot be modified.
  """
  WORKFLOW_UPDATES
}

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetBypassActorConnection

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The enforcement level of this ruleset
  """
  enforcement: RuleEnforcement!

  """
  The Node ID of the RepositoryRuleset object
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The type of rule.
    """
    type: RepositoryRuleType
  ): RepositoryRuleConnection

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  repositoryRoleName: String

  """
  Identifies the ruleset associated with the allowed actor
  """
  repositoryRuleset: RepositoryRuleset
}

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  ALWAYS

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRulesetBypassActor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  The SHA after the push
  """
  nextSha: GitObjectID

  """
  The permalink for this push.
  """
  permalink: URI!

  """
  The SHA before the push
  """
  previousSha: GitObjectID

  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  actorId: ID

  """
  The bypass mode for this actor.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode!

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the PushAllowance object
  """
  id: ID!
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRuleset]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRuleset
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
New projects that manage issues, pull requests and drafts using tables and boards.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  Guinea
  """
  closed: Boolean!

  """
  Guadeloupe
  """
  GP

  """
  Equatorial Guinea
  """
  createdAt: DateTime!

  """
  Greece
  """
  creator: Actor

  """
  South Georgia and South Sandwich Islands
  """
  databaseId: Int

  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

  """
  Guinea-Bissau
  """
  items(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  Guyana
  """
  number: Int!

  """
  Hong Kong
  """
  owner: ProjectV2Owner!

  """
  Heard and McDonald Islands
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

  """
  Honduras
  """
  repositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

  """
  Croatia
  """
  resourcePath: URI!

  """
  Haiti
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  Hungary
  """
  title: String!

  """
  Indonesia
  """
  updatedAt: DateTime!

  """
  Ireland
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Israel
  """
  IL

  """
  Isle of Man
  """
  IM

  """
  India
  """
  IN

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  Iraq
  """
  edges: [ProjectV2Edge]

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  nodes: [ProjectV2]

  """
  Iran
  """
  IR

  """
  Iceland
  """
  IS

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  Italy
  """
  IT

  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  node: ProjectV2
}

"""
A field inside a project.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  Jamaica
  """
  createdAt: DateTime!

"""
The possible default commit titles for squash merges.
"""
enum SquashMergeCommitTitle {
  """
  Jordan
  """
  dataType: ProjectV2FieldType!

  """
  Japan
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  name: String!

  """
  Kyrgyzstan
  """
  project: ProjectV2!

  """
  Kiribati
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Saint Kitts and Nevis
  """
  dataType: ProjectV2FieldType!

  """
  Korea, South
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  Kuwait
  """
  name: String!

  """
  Cayman Islands
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  Lebanon
  """
  edges: [ProjectV2FieldEdge]

  """
  Saint Lucia
  """
  nodes: [ProjectV2Field]

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  id: ID!

  """
  Liechtenstein
  """
  LI

"""
Only allow users with bypass permission to update matching refs.
"""
type ProjectV2FieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  Sri Lanka
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  Liberia
  """
  ASSIGNEES

  """
  Lesotho
  """
  DATE

  """
  Lithuania
  """
  ITERATION

  """
  Luxembourg
  """
  LABELS

  """
  Latvia
  """
  LINKED_PULL_REQUESTS

  """
  Libya
  """
  MILESTONE

  """
  Morocco
  """
  NUMBER

  """
  When was the alert auto-dismissed?
  """
  REPOSITORY

  """
  When was the alert created?
  """
  REVIEWERS

  """
  Moldova
  """
  SINGLE_SELECT

  """
  Montenegro
  """
  TEXT

  """
  Comment explaining the reason the alert was dismissed
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  Tracks
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  Madagascar
  """
  content: ProjectV2ItemContent

  """
  Marshall Islands
  """
  createdAt: DateTime!

  """
  When was the alert fixed?
  """
  creator: Actor

  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  fieldValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

  """
  Mongolia
  """
  isArchived: Boolean!

  """
  Macau
  """
  project: ProjectV2!

  """
  Martinique
  """
  type: ProjectV2ItemType!

  """
  Mauritania
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  Montserrat
  """
  edges: [ProjectV2ItemEdge]

  """
  Malta
  """
  nodes: [ProjectV2Item]

"""
Autogenerated return type of UnlinkProjectV2FromRepository
"""
type UnlinkProjectV2FromRepositoryPayload {
  """
  Mauritius
  """
  MU

  """
  Maldives
  """
  MV

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
A Stripe Connect account for receiving sponsorship funds from GitHub Sponsors.
"""
type ProjectV2ItemEdge {
  """
  Mexico
  """
  databaseId: Int

  """
  The Node ID of the Reactable object
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Malaysia
  """
  createdAt: DateTime!

  """
  Mozambique
  """
  creator: Actor

  """
  Namibia
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  New Caledonia
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Puerto Rico
  """
  PR

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type RequiredStatusCheckDescription {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The actor who created the item.
  """
  thread: PullRequestReviewThread
}

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates whether the revert pull request should be a draft.
  """
  draft: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ItemFieldValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
input RevokeEnterpriseOrganizationsMigratorRoleInput {
  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

"""
The level of enforcement for a rule or ruleset.
"""
enum RuleEnforcement {
  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  Parameters used for the `commit_author_email_pattern` rule type
  """
  commitAuthorEmailPattern: CommitAuthorEmailPatternParametersInput

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Parameters used for the `committer_email_pattern` rule type
  """
  committerEmailPattern: CommitterEmailPatternParametersInput

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Parameters used for the `workflows` rule type
  """
  workflows: WorkflowsParametersInput
}

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum SamlDigestAlgorithm {
  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput {
  """
  The project view's name.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  A short plaintext summary of the advisory
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ViewEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2View]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible ecosystems of a security vulnerability's package.
"""
type ProjectV2ViewEdge {
  """
  GitHub Actions
  """
  ACTIONS

  """
  PHP packages hosted at packagist.org
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

"""
An edge in a connection.
"""
type SecurityAdvisoryEdge {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  value: String!
}

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter {
  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  type: SecurityAdvisoryIdentifierType!

  """
  The identifier string. Supports exact or partial matching.
  """
  value: String!
}

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  PUBLISHED_AT

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  ecosystem: SecurityAdvisoryEcosystem!

  """
  The name of the workflow
  """
  NAME

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

"""
An individual vulnerability within an Advisory
"""
type SecurityVulnerability {
  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The number of additions in this pull request.
  """
  additions: Int!

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The digest algorithm used to sign SAML requests for the identity provider.
  """
  digestMethod: SamlDigestAlgorithm!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

"""
Autogenerated return type of SetEnterpriseIdentityProvider
"""
type SetEnterpriseIdentityProviderPayload {
  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput {
  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The ID of the organization to set a limit for.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
type SetOrganizationInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  Returns a single ruleset from the current repository by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!

    """
    Include rulesets configured at higher levels that apply to this repository
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  LIFETIME_VALUE

  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    repositoryId: ID
  ): DiscussionCommentConnection!
}

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Indicates if the repository has issues feature enabled.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

"""
Autogenerated input type of UnlinkRepositoryFromProject
"""
type UpdateParameters {
  """
  The activity was scheduling a downgrade or cancellation.
  """
  PENDING_CHANGE

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  BM

"""
The possible team notification values.
"""
enum TeamNotificationSetting {
  """
  Brunei Darussalam
  """
  BN

  """
  Bolivia
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  BR

  """
  Bahamas
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  id: ID!

  """
  Bhutan
  """
  BT

  """
  Bouvet Island
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  BY

  """
  Belize
  """
  BZ

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
type PullRequestChangedFile {
  """
  Canada
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Congo (Kinshasa)
  """
  CD

  """
  Central African Republic
  """
  CF

  """
  Congo (Brazzaville)
  """
  CG

  """
  Switzerland
  """
  CH

  """
  Côte d'Ivoire
  """
  CI

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  LOCK_BRANCH

  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  MERGE_QUEUE_LOCKED_REF

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  SECRET_SCANNING

  """
  Tag
  """
  TAG

  """
  Tag name pattern
  """
  TAG_NAME_PATTERN

  """
  Only allow users with bypass permission to update matching refs.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  WORKFLOWS

  """
  Workflow files cannot be modified.
  """
  WORKFLOW_UPDATES
}

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetBypassActorConnection

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The enforcement level of this ruleset
  """
  enforcement: RuleEnforcement!

  """
  The Node ID of the RepositoryRuleset object
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Identifies the ruleset associated with the allowed actor
  """
  repositoryRuleset: RepositoryRuleset
}

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  A list of nodes.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  actorId: ID

  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  A list of nodes.
  """
  nodes: [RepositoryRuleset]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRuleset
}

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  Branch
  """
  BRANCH

  """
  Tag
  """
  TAG
}

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  id: ID!

  """
  The HTTP path for this repository-topic.
  """
  resourcePath: URI!

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  forkSourceName: String

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  id: ID!

  """
  Chile
  """
  CL

  """
  Cameroon
  """
  CM

  """
  China
  """
  CN

  """
  Colombia
  """
  CO

  """
  Costa Rica
  """
  CR

  """
  Cape Verde
  """
  CV

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  CX

  """
  Cyprus
  """
  CY

  """
  Czech Republic
  """
  CZ

  """
  Germany
  """
  DE

  """
  Djibouti
  """
  DJ

  """
  Denmark
  """
  DK

  """
  Dominica
  """
  DM

  """
  Dominican Republic
  """
  DO

  """
  Algeria
  """
  DZ

  """
  Ecuador
  """
  EC

"""
Autogenerated input type of UnmarkProjectV2AsTemplate
"""
input UnmarkProjectV2AsTemplateInput {
  """
  Estonia
  """
  EE

  """
  Egypt
  """
  EG

"""
Autogenerated return type of UnmarkProjectV2AsTemplate
"""
type UnmarkProjectV2AsTemplatePayload {
  """
  Western Sahara
  """
  EH

  """
  Eritrea
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  id: ID!

"""
Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  Spain
  """
  ES

  """
  Ethiopia
  """
  ET

  """
  Finland
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

  """
  Fiji
  """
  FJ

  """
  Falkland Islands
  """
  FK

  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  FR

  """
  Gabon
  """
  GA

  """
  United Kingdom
  """
  GB

  """
  Grenada
  """
  GD

  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  GG

  """
  Ghana
  """
  GH

  """
  Gibraltar
  """
  GI

  """
  Greenland
  """
  GL

"""
Autogenerated input type of TransferIssue
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  Gambia
  """
  GM

  """
  Guinea
  """
  GN

  """
  Guadeloupe
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  id: ID!

  """
  Equatorial Guinea
  """
  GQ

  """
  Greece
  """
  GR

  """
  South Georgia and South Sandwich Islands
  """
  GS

  """
  Guatemala
  """
  GT

  """
  Guam
  """
  GU

  """
  Guinea-Bissau
  """
  GW

  """
  Guyana
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  id: ID!

  """
  Hong Kong
  """
  HK

  """
  Heard and McDonald Islands
  """
  HM

  """
  When was the alert auto-dismissed?
  """
  autoDismissedAt: DateTime

  """
  When was the alert created?
  """
  HN

  """
  Croatia
  """
  HR

  """
  Haiti
  """
  HT

  """
  Comment explaining the reason the alert was dismissed
  """
  dismissComment: String

  """
  The reason the alert was dismissed
  """
  HU

  """
  Indonesia
  """
  ID

  """
  Ireland
  """
  IE

  """
  When was the alert fixed?
  """
  fixedAt: DateTime

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  id: ID!

  """
  India
  """
  IN

  """
  British Indian Ocean Territory
  """
  IO

"""
The privacy of a sponsorship
"""
type UnmarkedAsDuplicateEvent implements Node {
  """
  Iraq
  """
  IQ

  """
  Iran
  """
  IR

  """
  Iceland
  """
  IS

  """
  Italy
  """
  IT

  """
  Jersey
  """
  JE

  """
  Jamaica
  """
  JM

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
enum SquashMergeCommitTitle {
  """
  Jordan
  """
  JO

  """
  Japan
  """
  JP

  """
  Kenya
  """
  KE

  """
  Kyrgyzstan
  """
  KG

  """
  Cambodia
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveTopicAuditEntry object
  """
  id: ID!

  """
  Kiribati
  """
  KI

  """
  Comoros
  """
  KM

  """
  Saint Kitts and Nevis
  """
  KN

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
type PullRequestTimelineConnection {
  """
  An alert that has been automatically closed by Dependabot.
  """
  AUTO_DISMISSED

  """
  An alert that has been manually closed by a user.
  """
  KR

  """
  Kuwait
  """
  KW

  """
  Cayman Islands
  """
  KY

  """
  Kazakhstan
  """
  KZ

  """
  Laos
  """
  LA

  """
  Lebanon
  """
  LB

"""
An item in a pull request timeline
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

  """
  Liechtenstein
  """
  LI

  """
  Sri Lanka
  """
  LK

  """
  Liberia
  """
  LR

  """
  Lesotho
  """
  LS

  """
  Lithuania
  """
  LT

  """
  Luxembourg
  """
  LU

  """
  Latvia
  """
  LV

"""
Autogenerated input type of UpdateProjectCard
"""
interface Starrable {
  """
  Libya
  """
  LY

  """
  Morocco
  """
  MA

  """
  Monaco
  """
  WAITING
}

"""
Types that can be requested reviewers.
"""
union RequestedReviewer = Bot | Mannequin | Team | User

  """
  Moldova
  """
  MD

  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  A list of users that can be assigned to issues in this repository.
  """
  assignableUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filters users with query on user name and login.
    """
    query: String
  ): UserConnection!

  """
  Saint Martin (French part)
  """
  MF

  """
  Madagascar
  """
  MG

"""
The possible team notification values.
"""
enum TeamNotificationSetting {
  """
  Marshall Islands
  """
  MH

  """
  Macedonia
  """
  MK

  """
  Mali
  """
  collaborators(
    """
    Collaborators affiliation level with a repository.
    """
    affiliation: CollaboratorAffiliation

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The login of one specific collaborator.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    query: String
  ): RepositoryCollaboratorConnection

  """
  Myanmar
  """
  MM

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

  """
  Identifies the date and time when the object was created.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type RequiredStatusCheckDescription {
  """
  Mongolia
  """
  MN

  """
  Macau
  """
  MO

  """
  Northern Mariana Islands
  """
  MP

  """
  Martinique
  """
  MQ

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfiguration!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
input RequiredStatusChecksParametersInput {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfigurationInput!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Autogenerated input type of RerequestCheckSuite
"""
input RerequestCheckSuiteInput {
  """
  Mauritania
  """
  MR

  """
  Montserrat
  """
  MS

  """
  A discussion category by slug.
  """
  discussionCategory(
    """
    The slug of the discussion category to be returned.
    """
    slug: String!
  ): DiscussionCategory

  """
  A list of discussions that have been opened in the repository.
  """
  discussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Only show answered or unanswered discussions
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Only include discussions that belong to the category with this ID.
    """
    categoryId: ID = null

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: UPDATED_AT, direction: DESC}

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

"""
Autogenerated return type of UnsubscribeFromNotifications
"""
type UnsubscribeFromNotificationsPayload
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  Mauritius
  """
  MU

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  environments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the environments
    """
    orderBy: Environments = {field: NAME, direction: ASC}
  ): EnvironmentConnection!

  """
  The ID of the thread to resolve
  """
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The thread to resolve.
  """
  forks(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  clientMutationId: String

  """
  The ID of the published tier to retire.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Whether vulnerability alerts are enabled for the repository.
  """
  hasVulnerabilityAlertsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  clientMutationId: String

  """
  The tier that was retired.
  """
  homepageUrl: URI

  """
  The Node ID of the Repository object
  """
  id: ID!

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  The description of the revert pull request.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates whether the revert pull request should be a draft.
  """
  draft: Boolean = false

  """
  The ID of the pull request to revert.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The title of the revert pull request.
  """
  title: String
}

"""
Autogenerated return type of RevertPullRequest
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  The SHA after the push
  """
  nextSha: GitObjectID

  """
  The permalink for this push.
  """
  permalink: URI!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that was reverted.
  """
  pullRequest: PullRequest

  """
  The new pull request that reverts the input pull request.
  """
  revertPullRequest: PullRequest
}

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The actor that can dismiss.
  """
  actor: ReviewDismissalAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the PushAllowance object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union ReviewDismissalAllowanceActor = App | Team | User

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  A list of edges.
  """
  edges: [ReviewDismissalAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewDismissalAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewDismissalAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewDismissalAllowance
}

"""
Represents a 'review_dismissed' event on a given issue or pull request.
"""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Identifies the optional message associated with the 'review_dismissed' event.
  """
  dismissalMessage: String

  """
  Identifies the optional message associated with the event, rendered to HTML.
  """
  dismissalMessageHTML: String

  """
  The Node ID of the ReviewDismissedEvent object
  """
  id: ID!

  """
  Identifies the previous state of the review with the 'review_dismissed' event.
  """
  previousReviewState: PullRequestReviewState!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  How the default commit message will be generated when merging a pull request.
  """
  mergeCommitMessage: MergeCommitMessage!

  """
  How the default commit title will be generated when merging a pull request.
  """
  mergeCommitTitle: MergeCommitTitle!

  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    branch: String
  ): MergeQueue

  """
  Returns a single milestone from the current repository by number.
  """
  pullRequestCommit: PullRequestCommit

  """
  The HTTP path for this review dismissed event.
  """
  resourcePath: URI!

  """
  Identifies the review associated with the 'review_dismissed' event.
  """
  review: PullRequestReview

  """
  The HTTP URL for this review dismissed event.
  """
  url: URI!
}

"""
A request for a user to review a pull request.
"""
type ReviewRequest implements Node {
  """
  Whether this request was created for a code owner
  """
  asCodeOwner: Boolean!

  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  databaseId: Int

  """
  The Node ID of the ReviewRequest object
  """
  id: ID!

  """
  Identifies the pull request associated with this review request.
  """
  pullRequest: PullRequest!

  """
  The reviewer that is requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
The connection type for ReviewRequest.
"""
type ReviewRequestConnection {
  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  search(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    query: String!

    """
    The types of search items to search within.
    """
    type: SearchType!
  ): SearchResultItemConnection!

  """
  A list of nodes.
  """
  nodes: [ReviewRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewRequest
}

"""
Represents an 'review_request_removed' event on a given pull request.
"""
type ReviewRequestRemovedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestRemovedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review request was removed.
  """
  requestedReviewer: RequestedReviewer
}

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestedEvent object
  """
  id: ID!

  """
  Finds and returns the Project according to the provided Project number.
  """
  requestedReviewer: RequestedReviewer
}

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type ReviewStatusHovercardContext implements HovercardContext {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  The current status of the pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision
}

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
input RevokeEnterpriseOrganizationsMigratorRoleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of the user to revoke the migrator role
  """
  login: String!
}

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The HTTP path listing the repository's projects
  """
  clientMutationId: String

  """
  The ID of the organization that the user/team belongs to.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of RevokeMigratorRole
"""
type RevokeMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Possible roles a user may have in relation to an organization.
"""
enum RoleInOrganization {
  """
  A user who is a direct member of the organization.
  """
  DIRECT_MEMBER

  """
  A user with full administrative access to the organization.
  """
  OWNER

  """
  A user who is unaffiliated with the organization.
  """
  UNAFFILIATED
}

"""
The level of enforcement for a rule or ruleset.
"""
enum RuleEnforcement {
  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  ACTIVE

  """
  Do not evaluate or enforce rules
  """
  DISABLED

  """
  Allow admins to test rules before enforcing them. Admins can view insights on
  the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
  """
  EVALUATE
}

"""
Types which can be parameters for `RepositoryRule` objects.
"""
union RuleParameters =
    BranchNamePatternParameters
  | CommitAuthorEmailPatternParameters
  | CommitMessagePatternParameters
  | CommitterEmailPatternParameters
  | PullRequestParameters
  | RequiredDeploymentsParameters
  | RequiredStatusChecksParameters
  | TagNamePatternParameters
  | UpdateParameters
  | WorkflowsParameters

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  Parameters used for the `branch_name_pattern` rule type
  """
  databaseId: Int

  """
  The Node ID of the Reactable object
  """
  id: ID!

  """
  Parameters used for the `commit_author_email_pattern` rule type
  """
  commitAuthorEmailPattern: CommitAuthorEmailPatternParametersInput

  """
  Parameters used for the `commit_message_pattern` rule type
  """
  commitMessagePattern: CommitMessagePatternParametersInput

  """
  Parameters used for the `committer_email_pattern` rule type
  """
  committerEmailPattern: CommitterEmailPatternParametersInput

  """
  Parameters used for the `pull_request` rule type
  """
  pullRequest: PullRequestParametersInput

  """
  Parameters used for the `required_deployments` rule type
  """
  requiredDeployments: RequiredDeploymentsParametersInput

  """
  Parameters used for the `required_status_checks` rule type
  """
  requiredStatusChecks: RequiredStatusChecksParametersInput

  """
  Parameters used for the `tag_name_pattern` rule type
  """
  tagNamePattern: TagNamePatternParametersInput

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  update: UpdateParametersInput

  """
  Identifies the date and time when the repository was last pushed to.
  """
  workflows: WorkflowsParametersInput
}

"""
Types which can have `RepositoryRule` objects.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum SamlDigestAlgorithm {
  """
  SHA1
  """
  SHA1

  """
  SHA256
  """
  SHA256

  """
  SHA384
  """
  SHA384

  """
  SHA512
  """
  SHA512
}

"""
The possible signature algorithms used to sign SAML requests for a Identity Provider.
"""
enum SamlSignatureAlgorithm {
  """
  RSA-SHA1
  """
  RSA_SHA1

  """
  RSA-SHA256
  """
  RSA_SHA256

  """
  RSA-SHA384
  """
  RSA_SHA384

  """
  RSA-SHA512
  """
  RSA_SHA512
}

"""
A Saved Reply is text a user can use to reply quickly.
"""
type SavedReply implements Node {
  """
  The body of the saved reply.
  """
  body: String!

  """
  The saved reply body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Reaction object
  """
  id: ID!

  """
  The title of the saved reply.
  """
  title: String!

  """
  The user that saved this reply.
  """
  user: Actor
}

"""
The connection type for SavedReply.
"""
type SavedReplyConnection {
  """
  A list of edges.
  """
  edges: [SavedReplyEdge]

  """
  A list of nodes.
  """
  nodes: [SavedReply]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SavedReply
}

"""
Ordering options for saved reply connections.
"""
input SavedReplyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order saved replies by.
  """
  field: SavedReplyOrderField!
}

"""
Properties by which saved reply connections can be ordered.
"""
enum SavedReplyOrderField {
  """
  Order saved reply by when they were updated.
  """
  UPDATED_AT
}

"""
The results of a search.
"""
union SearchResultItem = App | Discussion | Issue | MarketplaceListing | Organization | PullRequest | Repository | User

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
type SearchResultItemConnection {
  """
  The total number of pieces of code that matched the search query. Regardless
  of the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  codeCount: Int!

  """
  Returns a single ruleset from the current repository by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!

    """
    Include rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true
  ): RepositoryRuleset

  """
  A list of rulesets for this repository.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The security policy URL.
  """
  discussionCount: Int!

  """
  A list of edges.
  """
  edges: [SearchResultItemEdge]

  """
  The total number of issues that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  issueCount: Int!

  """
  How the default commit message will be generated when squash merging a pull request.
  """
  squashMergeCommitMessage: SquashMergeCommitMessage!

  """
  How the default commit title will be generated when squash merging a pull request.
  """
  squashMergeCommitTitle: SquashMergeCommitTitle!

  """
  Whether a squash merge commit can use the pull request title as default.
  """
  squashPrTitleUsedAsDefault: Boolean!
    @deprecated(
      reason: "`squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC."
    )

  """
  The total number of repositories that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  repositoryCount: Int!

  """
  The total number of users that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  userCount: Int!

  """
  The total number of wiki pages that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  wikiCount: Int!
}

"""
An edge in a connection.
"""
type SearchResultItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SearchResultItem

  """
  Text matches on the result found.
  """
  textMatches: [TextMatch]
}

"""
Represents the individual results of a search.
"""
enum SearchType {
  """
  Returns matching discussions in repositories.
  """
  DISCUSSION

  """
  Returns results matching issues in repositories.
  """
  ISSUE

  """
  Returns results matching repositories.
  """
  REPOSITORY

  """
  Returns results matching users and organizations on GitHub.
  """
  USER
}

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
type SecurityAdvisory implements Node {
  """
  The classification of the advisory
  """
  classification: SecurityAdvisoryClassification!

  """
  The CVSS associated with this advisory
  """
  cvss: CVSS!

  """
  CWEs associated with this Advisory
  """
  cwes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CWEConnection!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  This is a long plaintext description of the advisory
  """
  description: String!

  """
  The GitHub Security Advisory ID
  """
  ghsaId: String!

  """
  The Node ID of the SecurityAdvisory object
  """
  id: ID!

  """
  A list of identifiers for this advisory
  """
  identifiers: [SecurityAdvisoryIdentifier!]!

  """
  The permalink for the advisory's dependabot alerts page
  """
  notificationsPermalink: URI

  """
  The organization that originated the advisory
  """
  origin: String!

  """
  The permalink for the advisory
  """
  permalink: URI

  """
  When the advisory was published
  """
  publishedAt: DateTime!

  """
  A list of references for this advisory
  """
  references: [SecurityAdvisoryReference!]!

  """
  The severity of the advisory
  """
  createdAt: DateTime!

  """
  The Node ID of the ReadyForReviewEvent object
  """
  id: ID!

  """
  A short plaintext summary of the advisory
  """
  summary: String!

  """
  When the advisory was last updated
  """
  updatedAt: DateTime!

  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """
    The number for the vulnerability alert to be returned.
    """
    number: Int!
  ): RepositoryVulnerabilityAlert

  """
  A list of vulnerability alerts that are on this repository.
  """
  vulnerabilities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the returned topics.
    """
    orderBy: SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}

    """
    A package name to filter vulnerabilities by.
    """
    states: [PullRequestState!]
  ): PullRequestConnection!

  """
  Branch protection rules for this ref
  """
  branchProtectionRule: BranchProtectionRule

  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    The head ref to compare against.
    """
    headRef: String!
  ): Comparison

  """
  The Node ID of the Ref object
  """
  id: ID!

    """
    A list of severities to filter vulnerabilities by.
    """
    severities: [SecurityAdvisorySeverity!]
  ): SecurityVulnerabilityConnection!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Whether contributors are required to sign off on web-based commits in this repository.
  """
  webCommitSignoffRequired: Boolean!
}

"""
Classification of the advisory.
"""
enum SecurityAdvisoryClassification {
  """
  Classification of general advisories.
  """
  GENERAL

  """
  A list of rules from active Repository and Organization rulesets that apply to this ref.
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  invitationType: OrganizationInvitationType!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The user who created the invitation.
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

    """
    Ordering options for repository rules.
    """
    orderBy: RepositoryRuleOrder = {field: UPDATED_AT, direction: DESC}
  ): RepositoryRuleConnection

  """
  The object the ref points to. Returns null when object does not exist.
  """
  MALWARE
}

"""
The connection type for SecurityAdvisory.
"""
type SecurityAdvisoryConnection {
  """
  A list of edges.
  """
  edges: [SecurityAdvisoryEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityAdvisory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible ecosystems of a security vulnerability's package.
"""
enum SecurityAdvisoryEcosystem {
  """
  GitHub Actions
  """
  ACTIONS

  """
  PHP packages hosted at packagist.org
  """
  COMPOSER

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
input RefOrder {
  """
  Erlang/Elixir packages hosted at hex.pm
  """
  ERLANG

  """
  Go modules
  """
  GO

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

  """
  Python packages hosted at PyPI.org
  """
  PIP

  """
  Dart packages hosted at pub.dev
  """
  PUB

  """
  Ruby gems hosted at RubyGems.org
  """
  RUBYGEMS

  """
  Rust crates
  """
  RUST

  """
  Swift packages
  """
  SWIFT
}

"""
Branch protection rules that are enforced on the viewer.
"""
type SecurityAdvisoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityAdvisory
}

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  The identifier type, e.g. GHSA, CVE
  """
  type: String!

  """
  The identifier
  """
  value: String!
}

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter {
  """
  The identifier type.
  """
  type: SecurityAdvisoryIdentifierType!

  """
  The total size in kilobytes of all repositories in the connection. Value will
  never be larger than max 32-bit signed integer.
  """
  value: String!
}

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
enum SecurityAdvisoryIdentifierType {
  """
  Common Vulnerabilities and Exposures Identifier.
  """
  CVE

  """
  GitHub Security Advisory ID.
  """
  GHSA
}

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security advisories by.
  """
  field: SecurityAdvisoryOrderField!
}

"""
Properties by which security advisory connections can be ordered.
"""
enum SecurityAdvisoryOrderField {
  """
  Order advisories by publication time
  """
  PUBLISHED_AT

  """
  Order advisories by update time
  """
  UPDATED_AT
}

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
  """
  ecosystem: SecurityAdvisoryEcosystem!

  """
  The package name
  """
  name: String!
}

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  The package name or version
  """
  identifier: String!
}

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  A publicly accessible reference
  """
  createdAt: DateTime!

  """
  The Node ID of the ReferencedEvent object
  """
  id: ID!

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  Critical.
  """
  CRITICAL

  """
  High.
  """
  HIGH

  """
  Low.
  """
  relevantOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  Moderate.
  """
  MODERATE
}

"""
Parameters to be used for the repository_id condition
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
A subset of repository info.
"""
type SecurityVulnerability {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  advisory: SecurityAdvisory!

  """
  The first version containing a fix for the vulnerability
  """
  firstPatchedVersion: SecurityAdvisoryPackageVersion

  """
  A description of the vulnerable package
  """
  package: SecurityAdvisoryPackage!

  """
  The severity of the vulnerability within this package
  """
  severity: SecurityAdvisorySeverity!

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  vulnerableVersionRange: String!
}

"""
The connection type for SecurityVulnerability.
"""
type SecurityVulnerabilityConnection {
  """
  A list of edges.
  """
  edges: [SecurityVulnerabilityEdge]

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  nodes: [SecurityVulnerability]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SecurityVulnerabilityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityVulnerability
}

"""
Ordering options for security vulnerability connections
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

  """
  The field to order security vulnerabilities by.
  """
  field: SecurityVulnerabilityOrderField!
}

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  """
  Order vulnerability by update time
  """
  UPDATED_AT
}

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The digest algorithm used to sign SAML requests for the identity provider.
  """
  descriptionHTML: HTML

  """
  The Node ID of the Release object
  """
  id: ID!

  """
  The ID of the enterprise on which to set an identity provider.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: String!

  """
  The Issuer Entity ID for the SAML identity provider
  """
  issuer: String

  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: SamlSignatureAlgorithm!

  """
  The URL endpoint for the identity provider's SAML SSO.
  """
  ssoUrl: URI!
}

"""
Autogenerated return type of SetEnterpriseIdentityProvider
"""
type SetEnterpriseIdentityProviderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Identifies the date and time when the repository was last pushed to.
  """
  identityProvider: EnterpriseIdentityProvider
}

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

    """
    A name to filter the assets by.
    """
    name: String
  ): ReleaseAssetConnection!

  """
  The ID of the organization to set a limit for.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
type SetOrganizationInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization that the interaction limit was set for.
  """
  organization: Organization
}

"""
Autogenerated input type of SetRepositoryInteractionLimit
"""
input SetRepositoryInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the repository to set a limit for.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that the interaction limit was set for.
  """
  repository: Repository
}

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the user to set a limit for.
  """
  downloadUrl: URI!

  """
  The Node ID of the ReleaseAsset object
  """
  id: ID!

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user that the interaction limit was set for.
  """
  user: User
}

"""
Represents an S/MIME signature on a Commit or Tag.
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  Email used to sign this object.
  """
  email: String!

  """
  True if the signature is valid and verified by GitHub.
  """
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """
  ASCII-armored signature header from object.
  """
  email: String

  """
  The Node ID of the RepositoryInvitation object
  """
  id: ID!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  True if the signature was made with GitHub's signing key.
  """
  wasSignedByGitHub: Boolean!
}

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Name of the social media account as it appears on the profile.
  """
  displayName: String!

  """
  Software or company that hosts the social media account.
  """
  provider: SocialAccountProvider!

  """
  URL of the social media account.
  """
  url: URI!
}

"""
The connection type for SocialAccount.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

  """
  A list of nodes.
  """
  nodes: [SocialAccount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SocialAccount
}

"""
Software or company that hosts social media accounts.
"""
enum SocialAccountProvider {
  """
  Social media and networking website.
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

  """
  Catch-all for social media providers that do not yet have specific handling.
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  Fork of Mastodon with a greater focus on local posting.
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  Social media website with a focus on photo and video sharing.
  """
  INSTAGRAM

  """
  Professional networking website.
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type RepositoryMigration implements Migration & Node {
  """
  The migration flag to continue on error.
  """
  REDDIT

  """
  Live-streaming service.
  """
  TWITCH

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

    """
    Ordering of the returned package files.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

  """
  Online video platform.
  """
  YOUTUBE
}

"""
Entities that can sponsor others via GitHub Sponsors
"""
union Sponsor = Organization | User

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The migration source.
  """
  amountInCents: Int!

  """
  The amount in USD, formatted as a string.
  """
  formattedAmount: String!

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise from which the user should be removed.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the user to remove from the enterprise.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  The user that was removed from the enterprise.
  """
  user: User

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
input RemoveEnterpriseOrganizationInput {
  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  sponsor: Sponsorable!

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  A list of edges.
  """
  edges: [SponsorAndLifetimeValueEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorAndLifetimeValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorAndLifetimeValue
}

"""
Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
"""
input SponsorAndLifetimeValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order results by.
  """
  field: SponsorAndLifetimeValueOrderField!
}

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  LIFETIME_VALUE

  """
  Order results by the sponsor's login (username).
  """
  SPONSOR_LOGIN

  """
  Order results by the sponsor's relevance to the viewer.
  """
  SPONSOR_RELEVANCE
}

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  A list of edges.
  """
  edges: [SponsorEdge]

  """
  A list of nodes.
  """
  nodes: [Sponsor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
type SponsorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The source of this permission.
  """
  node: Sponsor
}

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
input SponsorOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsor entities by.
  """
  field: SponsorOrderField!
}

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN

  """
  Order sponsors by their relevance to the viewer.
  """
  RELEVANCE
}

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  estimatedNextSponsorsPayoutInCents: Int!

  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  hasSponsorsListing: Boolean!

  """
  Whether the given account is sponsoring this user/organization.
  """
  isSponsoredBy(
    """
    The target account's login.
    """
    accountLogin: String!
  ): Boolean!

  """
  True if the viewer is sponsored by this user/organization.
  """
  isSponsoringViewer: Boolean!

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

  """
  The Node ID of the RemovedFromMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The reason this pull request was removed from the queue.
  """
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
type RemovedFromProjectEvent implements Node {
  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    size: Int
  ): URI!

  """
  The Node ID of the RepositoryOwner object
  """
  id: ID!

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  databaseId: Int

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  id: ID!

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  currentTitle: String!

  """
  The Node ID of the RenamedTitleEvent object
  """
  id: ID!

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
input ReopenIssueInput {
  """
  A unique identifier for the client performing the mutation.
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!
}

"""
Entities that can be sponsored via GitHub Sponsors
"""
union SponsorableItem = Organization | User

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  Nepal
  """
  edges: [SponsorableItemEdge]

  """
  Nauru
  """
  nodes: [SponsorableItem]

  """
  Niue
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

  """
  New Zealand
  """
  NZ

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  """
  Oman
  """
  OM

  """
  Panama
  """
  node: SponsorableItem
}

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  id: ID!

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddMemberAuditEntry object
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  MERGE_QUEUE_LOCKED_REF

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REQUIRED_SIGNATURES

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Secret scanning
  """
  SECRET_SCANNING

  """
  Tag
  """
  TAG

  """
  Tag name pattern
  """
  TAG_NAME_PATTERN

  """
  Only allow users with bypass permission to update matching refs.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  WORKFLOWS

  """
  Workflow files cannot be modified.
  """
  WORKFLOW_UPDATES
}

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  bodyHTML: HTML!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetBypassActorConnection

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

  """
  The enforcement level of this ruleset
  """
  enforcement: RuleEnforcement!

  """
  The Node ID of the RepositoryRuleset object
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The type of rule.
    """
    type: RepositoryRuleType
  ): RepositoryRuleConnection

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this project
  """
  url: URI!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoArchivedAuditEntry object
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  repositoryRoleName: String

  """
  Identifies the ruleset associated with the allowed actor
  """
  repositoryRuleset: RepositoryRuleset
}

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  ALWAYS

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRulesetBypassActor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
type ProjectColumn implements Node {
  """
  List of cards in the column
  """
  cards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

  """
  The project column's name.
  """
  name: String!

  """
  The project that contains this column.
  """
  project: Project!

  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  actorId: ID

  """
  The bypass mode for this actor.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode!

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRuleset]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRuleset
}

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  Branch
  """
  BRANCH

  """
  Tag
  """
  TAG
}

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  id: ID!

  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  id: ID!

  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

"""
Represents the rollup for both the check runs and status for a commit.
"""
type UnsubscribeFromNotificationsPayload
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  Returns true if the project is closed.
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  The activity was cancelling a sponsorship.
  """
  createdAt: DateTime!

  """
  The activity was starting a sponsorship.
  """
  creator: Actor

  """
  The activity was scheduling a downgrade or cancellation.
  """
  databaseId: Int

  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  items(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  Romania
  """
  number: Int!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  owner: ProjectV2Owner!

  """
  Serbia
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

  """
  Russian Federation
  """
  repositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

  """
  Rwanda
  """
  resourcePath: URI!

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  Saudi Arabia
  """
  title: String!

  """
  Solomon Islands
  """
  updatedAt: DateTime!

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  The ordering direction.
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  views(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  edges: [ProjectV2Edge]

  """
  The previous calendar day.
  """
  nodes: [ProjectV2]

  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  WEEK
}

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  Andorra
  """
  AD

  """
  United Arab Emirates
  """
  node: ProjectV2
}

"""
A field inside a project.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  Afghanistan
  """
  createdAt: DateTime!

  """
  Antigua and Barbuda
  """
  dataType: ProjectV2FieldType!

  """
  Anguilla
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  Albania
  """
  name: String!

  """
  Armenia
  """
  project: ProjectV2!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  Antarctica
  """
  createdAt: DateTime!

  """
  Argentina
  """
  dataType: ProjectV2FieldType!

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  American Samoa
  """
  name: String!

  """
  Austria
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  Åland
  """
  edges: [ProjectV2FieldEdge]

  """
  Azerbaijan
  """
  nodes: [ProjectV2Field]

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

"""
An edge in a connection.
"""
type ProjectV2FieldEdge {
  """
  Bangladesh
  """
  BD

  """
  When was the alert auto-dismissed?
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  When was the alert created?
  """
  ASSIGNEES

  """
  Burkina Faso
  """
  DATE

  """
  Bulgaria
  """
  ITERATION

  """
  Comment explaining the reason the alert was dismissed
  """
  LABELS

  """
  The reason the alert was dismissed
  """
  LINKED_PULL_REQUESTS

  """
  Burundi
  """
  MILESTONE

  """
  Benin
  """
  NUMBER

  """
  When was the alert fixed?
  """
  REPOSITORY

  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  REVIEWERS

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  SINGLE_SELECT

  """
  Brunei Darussalam
  """
  TEXT

  """
  Bolivia
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  Bonaire, Sint Eustatius and Saba
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  Brazil
  """
  content: ProjectV2ItemContent

  """
  Bahamas
  """
  createdAt: DateTime!

  """
  Bhutan
  """
  creator: Actor

  """
  Bouvet Island
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  fieldValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

  """
  Belarus
  """
  isArchived: Boolean!

  """
  Belize
  """
  project: ProjectV2!

  """
  Cocos (Keeling) Islands
  """
  type: ProjectV2ItemType!

  """
  Congo (Kinshasa)
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  Central African Republic
  """
  edges: [ProjectV2ItemEdge]

  """
  Congo (Brazzaville)
  """
  nodes: [ProjectV2Item]

  """
  Switzerland
  """
  CH

  """
  An alert that has been automatically closed by Dependabot.
  """
  totalCount: Int!
}

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  An alert that has been manually closed by a user.
  """
  CI

  """
  Cook Islands
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Chile
  """
  createdAt: DateTime!

"""
Autogenerated return type of TransferEnterpriseOrganization
"""
type TransferEnterpriseOrganizationPayload {
  """
  Cameroon
  """
  creator: Actor

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Estonia
  """
  EE

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type RequiredStatusCheckDescription {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

"""
Autogenerated input type of RerequestCheckSuite
"""
input RerequestCheckSuiteInput {
  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The actor who created the item.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ItemFieldValueEdge {
  """
  A cursor for use in pagination.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  The item at the end of the edge.
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
input RevokeEnterpriseOrganizationsMigratorRoleInput {
  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

"""
Possible roles a user may have in relation to an organization.
"""
enum RoleInOrganization {
  """
  The collaborator has no direct access to the project
  """
  NONE

  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  Parameters used for the `branch_name_pattern` rule type
  """
  branchNamePattern: BranchNamePatternParametersInput

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Parameters used for the `update` rule type
  """
  update: UpdateParametersInput

  """
  Parameters used for the `workflows` rule type
  """
  workflows: WorkflowsParametersInput
}

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

"""
Ordering options for saved reply connections.
"""
input SavedReplyOrder {
  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

"""
Properties by which saved reply connections can be ordered.
"""
enum SavedReplyOrderField {
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    If true, filters teams that are mapped to an LDAP Group (Enterprise only)
    """
    ldapMapped: Boolean

    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  Erlang/Elixir packages hosted at hex.pm
  """
  edges: [ProjectV2ViewEdge]

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  nodes: [ProjectV2View]

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

"""
An edge in a connection.
"""
type ProjectV2ViewEdge {
  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

  """
  Python packages hosted at PyPI.org
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  The identifier type, e.g. GHSA, CVE
  """
  type: String!

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder {
  """
  Order project v2 views by name
  """
  NAME

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  POSITION
}

"""
An audit entry in an organization audit log.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

"""
The connection type for OrganizationAuditEntry.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  name: String!
}

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  identifier: String!
}

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  A publicly accessible reference
  """
  url: URI!
}

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  updatedAt: DateTime!

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  edges: [SecurityVulnerabilityEdge]

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
type OrganizationIdentityProvider implements Node {
  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  externalIdentities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter to external identities with the users login
    """
    login: String

    """
    Filter to external identities with valid org membership only
    """
    membersOnly: Boolean

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

  """
  The date and time of the workflow update
  """
  totalCount: Int!
}

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Only show answered or unanswered discussions
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

"""
Autogenerated input type of SetRepositoryInteractionLimit
"""
input SetRepositoryInteractionLimitInput {
  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  PRIVATE
}

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
union OrganizationOrUser = Organization | User

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  Identifies the primary key from the database as a BigInt.
  """
  totalOrganizationCount: Int!
}

"""
Information for an uploaded package.
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
A file in a package version.
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Order results by the sponsor's login (username).
  """
  SPONSOR_LOGIN

  """
  Order results by the sponsor's relevance to the viewer.
  """
  SPONSOR_RELEVANCE
}

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  A list of edges.
  """
  edges: [SponsorEdge]

  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  CREATED_AT
}

"""
Represents an owner of a package.
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include archived items.
    """
    includeArchived: Boolean = true

"""
A version tag contains the mapping between a tag name and a version.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  A maven package.
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

  """
  An npm package.
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  A nuget package.
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    includePrivate: Boolean = false

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    last: Int

    """
    Ordering options for pull requests returned from the connection.
    """
    orderBy: IssueOrder

    """
    A list of states to filter the pull requests by.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Filter payments to those that occurred before this time.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The source of this permission.
  """
  source: PermissionGranter!
}

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  BY

  """
  Belize
  """
  BZ

  """
  Canada
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

  """
  Central African Republic
  """
  CF

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  CG

  """
  Switzerland
  """
  CH

  """
  Côte d'Ivoire
  """
  CI

  """
  Cook Islands
  """
  CK

  """
  Chile
  """
  CL

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!
}

  """
  China
  """
  CN

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
type PullRequestChangedFile {
  """
  Colombia
  """
  CO

  """
  Costa Rica
  """
  CR

  """
  Cape Verde
  """
  CV

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  CX

  """
  Cyprus
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

  """
  Czech Republic
  """
  CZ

"""
Parameters to be used for the repository_id condition
"""
type PinnedIssue implements Node {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

  """
  The issue that was pinned.
  """
  issue: Issue!

  """
  The actor that pinned this issue.
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
A subset of repository info.
"""
interface RepositoryInfo {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  DE

  """
  Djibouti
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  Denmark
  """
  DK

  """
  Dominica
  """
  DM

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  DO

  """
  Algeria
  """
  DZ

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  EC

  """
  Estonia
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

  """
  Egypt
  """
  EG

  """
  Western Sahara
  """
  EH

  """
  Eritrea
  """
  ER

  """
  Spain
  """
  ES

  """
  Ethiopia
  """
  ET

  """
  Finland
  """
  FI

  """
  Fiji
  """
  FJ

  """
  Falkland Islands
  """
  FK

  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  FR

  """
  Gabon
  """
  GA

  """
  United Kingdom
  """
  GB

  """
  Grenada
  """
  GD

  """
  Identifies the date and time when the repository was last pushed to.
  """
  GE

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  GG

  """
  Ghana
  """
  GH

  """
  Gibraltar
  """
  GI

  """
  Greenland
  """
  GL

  """
  Gambia
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

  """
  Guinea
  """
  GN

  """
  Guadeloupe
  """
  GP

  """
  Equatorial Guinea
  """
  GQ

  """
  Greece
  """
  GR

  """
  South Georgia and South Sandwich Islands
  """
  GS

  """
  Guatemala
  """
  GT

  """
  Guam
  """
  GU

  """
  Guinea-Bissau
  """
  GW

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  Guyana
  """
  GY

  """
  Hong Kong
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

  """
  Heard and McDonald Islands
  """
  HM

  """
  Honduras
  """
  HN

  """
  Croatia
  """
  HR

  """
  Haiti
  """
  HT

  """
  Hungary
  """
  HU

  """
  Indonesia
  """
  email: String

  """
  The Node ID of the RepositoryInvitation object
  """
  id: ID!

  """
  Ireland
  """
  IE

  """
  Israel
  """
  IL

  """
  Isle of Man
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  India
  """
  editor: Actor

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

  """
  British Indian Ocean Territory
  """
  IO

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  IQ

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

  """
  A list of teams that this review was made on behalf of.
  """
  IR

  """
  Iceland
  """
  IS

  """
  Italy
  """
  IT

  """
  Jersey
  """
  JE

  """
  Jamaica
  """
  JM

  """
  Jordan
  """
  JO

  """
  Japan
  """
  JP

  """
  Kenya
  """
  KE

  """
  Kyrgyzstan
  """
  KG

  """
  Cambodia
  """
  KH

  """
  Kiribati
  """
  KI

  """
  Comoros
  """
  RENAME

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type RepositoryMigration implements Migration & Node {
  """
  The migration flag to continue on error.
  """
  KN

  """
  Korea, South
  """
  KR

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

  """
  Cayman Islands
  """
  KY

  """
  The migration source.
  """
  KZ

  """
  Laos
  """
  LA

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  LB

  """
  The migration state.
  """
  state: MigrationState!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  warningsCount: Int!
}

  """
  Liechtenstein
  """
  LI

  """
  Sri Lanka
  """
  LK

  """
  Liberia
  """
  LR

  """
  Lesotho
  """
  LS

  """
  Lithuania
  """
  LT

  """
  Luxembourg
  """
  LU

  """
  Latvia
  """
  LV

  """
  Libya
  """
  LY

  """
  Morocco
  """
  MA

  """
  Monaco
  """
  MC

  """
  Moldova
  """
  MD

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
interface RepositoryNode {
  """
  Montenegro
  """
  ME

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  MF

  """
  Madagascar
  """
  MG

  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  Macedonia
  """
  MK

  """
  Mali
  """
  ML

  """
  Myanmar
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  Mongolia
  """
  MN

  """
  Macau
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The Node ID of the RepositoryOwner object
  """
  id: ID!

  """
  Northern Mariana Islands
  """
  MP

  """
  Martinique
  """
  MQ

    """
    Whether to include tiers that aren't published. Only admins of the Sponsors
    listing can see draft tiers. Only admins of the Sponsors listing and viewers
    who are currently sponsoring on a retired tier can see those retired tiers.
    Defaults to including only published tiers, which are visible to anyone who
    can see the GitHub Sponsors profile.
    """
    includeUnpublished: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Sponsors tiers returned from the connection.
    """
    orderBy: SponsorsTierOrder = {field: MONTHLY_PRICE_IN_CENTS, direction: ASC}
  ): SponsorsTierConnection

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

  """
  Montserrat
  """
  MS

  """
  Malta
  """
  MT

  """
  Mauritius
  """
  MU

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  MV

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  MX

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
New projects that manage issues, pull requests and drafts using tables and boards.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  Niger
  """
  closed: Boolean!

  """
  Norfolk Island
  """
  NF

  """
  Nigeria
  """
  createdAt: DateTime!

  """
  Nicaragua
  """
  creator: Actor

  """
  Netherlands
  """
  databaseId: Int

  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  List of fields and their constraints in the project
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  The parameters for this rule.
  """
  number: Int!

  """
  The repository ruleset associated with this rule configuration
  """
  owner: ProjectV2Owner!

  """
  The type of rule.
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  repositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

  """
  Configuration for the repository_id condition
  """
  resourcePath: URI!

  """
  Configuration for the repository_name condition
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  Configuration for the repository_property condition
  """
  title: String!

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  updatedAt: DateTime!

  """
  Configuration for the repository_id condition
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  views(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  A list of edges.
  """
  edges: [ProjectV2Edge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2
}

"""
Specifies the attributes for a new or updated rule.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  Optional ID of this rule when updating
  """
  createdAt: DateTime!

  """
  The parameters for the rule.
  """
  dataType: ProjectV2FieldType!

  """
  The type of rule to create.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  name: String!

  """
  The field to order repository rules by.
  """
  project: ProjectV2!

  """
  Order repository rules by type
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  Authorization
  """
  createdAt: DateTime!

  """
  Branch name pattern
  """
  dataType: ProjectV2FieldType!

  """
  Committer email pattern
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  Commit author email pattern
  """
  name: String!

  """
  Commit message pattern
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  Branch is read-only. Users cannot push to the branch.
  """
  edges: [ProjectV2FieldEdge]

  """
  Max ref updates
  """
  nodes: [ProjectV2Field]

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  MERGE_QUEUE_LOCKED_REF

"""
An edge in a connection.
"""
type ProjectV2FieldEdge {
  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  ASSIGNEES

  """
  Prevent merge commits from being pushed to matching refs.
  """
  DATE

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  ITERATION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  LABELS

  """
  The Node ID of the PullRequestReviewThread object
  """
  LINKED_PULL_REQUESTS

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  MILESTONE

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  NUMBER

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REPOSITORY

  """
  Secret scanning
  """
  REVIEWERS

  """
  Tag
  """
  SINGLE_SELECT

  """
  Tag name pattern
  """
  TEXT

  """
  Only allow users with bypass permission to update matching refs.
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  The actors that can bypass this ruleset
  """
  content: ProjectV2ItemContent

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  creator: Actor

  """
  Indicates whether the current viewer can reply to this thread.
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  enforcement: RuleEnforcement!

  """
  The Node ID of the RepositoryRuleset object
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

  """
  Source of ruleset.
  """
  isArchived: Boolean!

  """
  Target of the ruleset.
  """
  project: ProjectV2!

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  type: ProjectV2ItemType!

  """
  A comment that has been made against the line of a pull request
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  The actor that can bypass rules.
  """
  edges: [ProjectV2ItemEdge]

  """
  The mode for the bypass actor
  """
  nodes: [ProjectV2Item]

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  repositoryRoleName: String

  """
  Identifies the ruleset associated with the allowed actor
  """
  repositoryRuleset: RepositoryRuleset
}

"""
The bypass mode for a specific actor on a ruleset.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
A threaded list of comments for a given pull request.
"""
type ProjectV2ItemEdge {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  A list of edges.
  """
  createdAt: DateTime!

  """
  A list of nodes.
  """
  creator: Actor

  """
  Information to aid in pagination.
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  Identifies the total count of items in the connection.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Oman
  """
  OM

  """
  Panama
  """
  PA

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Palau
  """
  PW

"""
Entities that can be subscribed to for web and email notifications.
"""
interface SubscribableThread {
  """
  Paraguay
  """
  PY

  """
  Qatar
  """
  QA

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  South Sudan
  """
  SS

  """
  The actor who created the item.
  """
  ST

  """
  El Salvador
  """
  SV

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
type Push implements Node {
  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  When was the alert created?
  """
  TT

  """
  Tuvalu
  """
  TV

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

"""
The possible states of a thread subscription form action
"""
enum ThreadSubscriptionFormAction {
  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  Virgin Islands, British
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  Virgin Islands, U.S.
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  Vietnam
  """
  VN

  """
  Vanuatu
  """
  VU

  """
  Wallis and Futuna Islands
  """
  WF

  """
  Samoa
  """
  WS

  """
  Yemen
  """
  YE

  """
  Mayotte
  """
  YT

"""
Represents an SSH signature on a Commit or Tag.
"""
type ProjectV2ItemFieldValueEdge {
  """
  South Africa
  """
  ZA

  """
  Zambia
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload {
  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  The tier that was retired.
  """
  sponsorsTier: SponsorsTier
}

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

"""
Represents a 'review_dismissed' event on a given issue or pull request.
"""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  The project view's name.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  The login of the user to revoke the migrator role
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ViewEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2View]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Possible roles a user may have in relation to an organization.
"""
type ProjectV2ViewEdge {
  """
  A user who is a direct member of the organization.
  """
  DIRECT_MEMBER

  """
  A user with full administrative access to the organization.
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  Do not evaluate or enforce rules
  """
  DISABLED

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

"""
Ways in which lists of git refs can be ordered upon return.
"""
input RefOrder {
  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  committerEmailPattern: CommitterEmailPatternParametersInput

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  pullRequest: PullRequestParametersInput

  """
  Parameters used for the `required_deployments` rule type
  """
  requiredDeployments: RequiredDeploymentsParametersInput

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  RSA_SHA1

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  RSA_SHA384

  """
  The name of the workflow
  """
  NAME

"""
A Saved Reply is text a user can use to reply quickly.
"""
type SavedReply implements Node {
  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  UPDATED_AT
}

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

"""
Properties by which saved reply connections can be ordered.
"""
enum SavedReplyOrderField {
  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
type SearchResultItemConnection {
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Returns results matching users and organizations on GitHub.
  """
  USER
}

"""
A GitHub Security Advisory
"""
type SecurityAdvisory implements Node {
  """
  The classification of the advisory
  """
  classification: SecurityAdvisoryClassification!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The permalink for the advisory's dependabot alerts page
  """
  notificationsPermalink: URI

  """
  The organization that originated the advisory
  """
  origin: String!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Ordering options for the returned topics.
    """
    orderBy: SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}

    """
    A package name to filter vulnerabilities by.
    """
    package: String

    """
    A name to filter the assets by.
    """
    severities: [SecurityAdvisorySeverity!]
  ): SecurityVulnerabilityConnection!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Moderate.
  """
  MODERATE
}

"""
An individual vulnerability within an Advisory
"""
type SecurityVulnerability {
  """
  The Advisory associated with this Vulnerability
  """
  advisory: SecurityAdvisory!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The permalink to the pull request.
  """
  permalink: URI!

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    number: Int!
  ): RepositoryVulnerabilityAlert

  """
  A list of vulnerability alerts that are on this repository.
  """
  pageInfo: PageInfo!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  Whether or not the viewer can disable auto-merge
  """
  viewerCanDisableAutoMerge: Boolean!

  """
  Can the viewer edit files within this pull request.
  """
  viewerCanEditFiles: Boolean!

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    repositoryId: ID
  ): DiscussionCommentConnection!
}

"""
An edge in a connection.
"""
type RepositoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  node: Repository
}

"""
Parameters to be used for the repository_id condition
"""
type RepositoryIdConditionTarget {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  repositoryIds: [ID!]!
}

"""
A subset of repository info.
"""
interface RepositoryInfo {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The description of the repository.
  """
  description: String

  """
  The description of the repository rendered to HTML.
  """
  descriptionHTML: HTML!

  """
  Returns how many forks there are of this repository in the whole network.
  """
  forkCount: Int!

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
type PullRequestChangedFile {
  """
  Indicates if the repository has issues feature enabled.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  id: ID!

  """
  Indicates if the repository has the Projects feature enabled.
  """
  hasProjectsEnabled: Boolean!

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  hasWikiEnabled: Boolean!

  """
  The repository's URL.
  """
  homepageUrl: URI

  """
  Indicates if the repository is unmaintained.
  """
  isArchived: Boolean!

  """
  Identifies if the repository is a fork.
  """
  isFork: Boolean!

  """
  Indicates if a repository is either owned by an organization, or is a private fork of an organization repository.
  """
  isInOrganization: Boolean!

  """
  Indicates if the repository has been locked or not.
  """
  isLocked: Boolean!

  """
  Identifies if the repository is a mirror.
  """
  isMirror: Boolean!

  """
  Identifies if the repository is private or internal.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  Identifies if the repository is a template that can be used to generate new repositories.
  """
  isTemplate: Boolean!

  """
  The license associated with the repository
  """
  licenseInfo: License

  """
  The reason the repository has been locked.
  """
  lockReason: RepositoryLockReason

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

  """
  Identifies the date and time when the repository was last pushed to.
  """
  pushedAt: DateTime

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  A list of edges.
  """
  edges: [SponsorableItemEdge]

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  nodes: [SponsorableItem]

  """
  The Node ID of the UnlockedEvent object
  """
  id: ID!

  """
  The ID of the Project to unmark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated input type of StartOrganizationMigration
"""
type SponsorableItemEdge {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoArchivedAuditEntry object
  """
  id: ID!

  """
  The migration source access token.
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  id: ID!

  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

"""
Autogenerated input type of StartRepositoryMigration
"""
input StartRepositoryMigrationInput {
  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

  """
  The user or organization that is being sponsored, the maintainer.
  """
  sponsorable: Sponsorable!

  """
  The associated sponsorship tier.
  """
  sponsorsTier: SponsorsTier

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  The activity was cancelling a sponsorship.
  """
  email: String

  """
  The Node ID of the RepositoryInvitation object
  """
  id: ID!

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

  """
  The activity was scheduling a downgrade or cancellation.
  """
  PENDING_CHANGE

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  TIER_CHANGE
}

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  Whether to lock the source repository.
  """
  edges: [SponsorsActivityEdge]

  """
  The signed URL to access the user-uploaded metadata archive.
  """
  nodes: [SponsorsActivity]

  """
  The organization with the updated web commit signoff setting.
  """
  TOO_SPECIFIC @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

"""
Autogenerated input type of TransferEnterpriseOrganization
"""
type SponsorsActivityEdge {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the migration source.
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  The ordering direction.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated return type of TransferEnterpriseOrganization
"""
type TransferEnterpriseOrganizationPayload {
  """
  The field to order activity by.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  ALL

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  DAY

  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  RENAME

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type RepositoryMigration implements Migration & Node {
  """
  The migration flag to continue on error.
  """
  continueOnError: Boolean!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  id: ID!

  """
  Andorra
  """
  AD

  """
  The migration source.
  """
  AE

  """
  Afghanistan
  """
  AF

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  AG

  """
  The migration state.
  """
  state: MigrationState!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  warningsCount: Int!
}

"""
Required status check
"""
input StatusCheckConfigurationInput {
  """
  Albania
  """
  AL

  """
  Armenia
  """
  AM

  """
  Angola
  """
  AO

  """
  Antarctica
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland
  """
  AX

  """
  Azerbaijan
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
enum SquashMergeCommitMessage {
  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  BA

  """
  Barbados
  """
  BB

  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

"""
The possible default commit titles for squash merges.
"""
enum SquashMergeCommitTitle {
  """
  Belgium
  """
  BE

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  Bahrain
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The Node ID of the RepositoryOwner object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Burundi
  """
  BI

  """
  Benin
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  BM

  """
  Brunei Darussalam
  """
  BN

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  BO

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  BQ

  """
  Brazil
  """
  BR

  """
  Bahamas
  """
  BS

  """
  Bhutan
  """
  BT

"""
Autogenerated input type of UpdateProjectCard
"""
input UpdateProjectCardInput {
  """
  Bouvet Island
  """
  PUBLIC
}

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  id: ID!

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  MERGE_QUEUE_LOCKED_REF

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REQUIRED_SIGNATURES

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  SECRET_SCANNING

  """
  Tag
  """
  TAG

  """
  Tag name pattern
  """
  TAG_NAME_PATTERN

  """
  Only allow users with bypass permission to update matching refs.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  WORKFLOWS

  """
  Workflow files cannot be modified.
  """
  WORKFLOW_UPDATES
}

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetBypassActorConnection

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type PullRequestRevisionMarker {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The enforcement level of this ruleset
  """
  enforcement: RuleEnforcement!

  """
  The Node ID of the RepositoryRuleset object
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The type of rule.
    """
    type: RepositoryRuleType
  ): RepositoryRuleConnection

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  repositoryRoleName: String

  """
  Identifies the ruleset associated with the allowed actor
  """
  repositoryRuleset: RepositoryRuleset
}

"""
The bypass mode for a specific actor on a ruleset.
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRulesetBypassActor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  actorId: ID

  """
  The bypass mode for this actor.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode!

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRuleset]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRuleset
}

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  Branch
  """
  BRANCH

  """
  Tag
  """
  TAG
}

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  id: ID!

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  BY

  """
  Belize
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  Canada
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Congo (Kinshasa)
  """
  CD

  """
  Central African Republic
  """
  CF

  """
  Congo (Brazzaville)
  """
  CG

  """
  Switzerland
  """
  CH

"""
Represents a count of the state of a status context.
"""
type StatusContextStateCount {
  """
  Côte d'Ivoire
  """
  CI

  """
  Cook Islands
  """
  CK

"""
The possible commit status states.
"""
enum ThreadSubscriptionState {
  """
  Chile
  """
  CL

  """
  Cameroon
  """
  CM

  """
  China
  """
  CN

  """
  Colombia
  """
  CO

  """
  Costa Rica
  """
  CR

"""
Autogenerated input type of StartOrganizationMigration
"""
input StartOrganizationMigrationInput {
  """
  Cape Verde
  """
  CV

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  CX

  """
  Cyprus
  """
  CY

  """
  Czech Republic
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  id: ID!

  """
  Germany
  """
  DE

  """
  Djibouti
  """
  DJ

"""
Autogenerated input type of StartRepositoryMigration
"""
type StripeConnectAccount {
  """
  Denmark
  """
  DK

  """
  Dominica
  """
  DM

  """
  Dominican Republic
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  Algeria
  """
  DZ

  """
  Ecuador
  """
  EC

  """
  Estonia
  """
  EE

  """
  Egypt
  """
  EG

"""
Autogenerated input type of SubmitPullRequestReview
"""
input SubmitPullRequestReviewInput {
  """
  Western Sahara
  """
  EH

  """
  Eritrea
  """
  ER

  """
  Spain
  """
  ES

  """
  Ethiopia
  """
  ET

  """
  Finland
  """
  FI

  """
  Fiji
  """
  FJ

"""
The possible team notification values.
"""
enum TeamNotificationSetting {
  """
  Falkland Islands
  """
  FK

  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  FR

  """
  Gabon
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  id: ID!

  """
  United Kingdom
  """
  OPEN
}

"""
A Git push.
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  Grenada
  """
  GD

  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

"""
Required status check
"""
input StatusCheckConfigurationInput {
  """
  Ghana
  """
  GH

  """
  Gibraltar
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the PushAllowance object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union PushAllowanceActor = App | Team | User

"""
Represents the rollup for both the check runs and status for a commit.
"""
type UnmarkedAsDuplicateEvent implements Node {
  """
  Greenland
  """
  GL

  """
  Gambia
  """
  GM

  """
  When was the alert auto-dismissed?
  """
  autoDismissedAt: DateTime

  """
  When was the alert created?
  """
  GN

  """
  Guadeloupe
  """
  GP

  """
  Equatorial Guinea
  """
  GQ

  """
  Comment explaining the reason the alert was dismissed
  """
  dismissComment: String

  """
  The reason the alert was dismissed
  """
  GR

  """
  South Georgia and South Sandwich Islands
  """
  GS

  """
  Guatemala
  """
  GT

  """
  When was the alert fixed?
  """
  fixedAt: DateTime

  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  id: ID!

  """
  Guyana
  """
  GY

  """
  Hong Kong
  """
  HK

  """
  Heard and McDonald Islands
  """
  HM

  """
  Honduras
  """
  HN

  """
  Croatia
  """
  HR

  """
  Haiti
  """
  HT

  """
  Hungary
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Indonesia
  """
  ID

  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  IE

  """
  Israel
  """
  IL

  """
  Isle of Man
  """
  IM

  """
  India
  """
  IN

  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  search(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    query: String!

    """
    The types of search items to search within.
    """
    type: SearchType!
  ): SearchResultItemConnection!

  """
  Iraq
  """
  IQ

  """
  Iran
  """
  IR

  """
  Iceland
  """
  IS

  """
  An alert that has been automatically closed by Dependabot.
  """
  AUTO_DISMISSED

  """
  An alert that has been manually closed by a user.
  """
  IT

  """
  Jersey
  """
  JE

  """
  Jamaica
  """
  JM

"""
Represents a count of the state of a status context.
"""
type StatusContextStateCount {
  """
  Jordan
  """
  JO

  """
  Japan
  """
  JP

  """
  Kenya
  """
  KE

  """
  Kyrgyzstan
  """
  union: Boolean = false

  """
  Cambodia
  """
  KH

  """
  Kiribati
  """
  databaseId: Int

  """
  The Node ID of the Reactable object
  """
  id: ID!

  """
  Comoros
  """
  KM

  """
  Saint Kitts and Nevis
  """
  KN

  """
  Korea, South
  """
  KR

  """
  Kuwait
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

  """
  Cayman Islands
  """
  KY

  """
  Kazakhstan
  """
  KZ

  """
  Laos
  """
  LA

  """
  Lebanon
  """
  WAITING
}

"""
Types that can be requested reviewers.
"""
union RequestedReviewer = Bot | Mannequin | Team | User

  """
  Saint Lucia
  """
  LC

  """
  Liechtenstein
  """
  databaseId: Int

  """
  The Node ID of the Reaction object
  """
  id: ID!

  """
  Sri Lanka
  """
  LK

  """
  Liberia
  """
  LR

  """
  Lesotho
  """
  LS

  """
  Lithuania
  """
  LT

  """
  Luxembourg
  """
  LU

  """
  Latvia
  """
  LV

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type RequiredStatusCheckDescription {
  """
  Libya
  """
  LY

  """
  Morocco
  """
  MA

  """
  Monaco
  """
  MC

  """
  Moldova
  """
  MD

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfiguration!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
input RequiredStatusChecksParametersInput {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfigurationInput!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Autogenerated input type of RerequestCheckSuite
"""
input RerequestCheckSuiteInput {
  """
  Montenegro
  """
  ME

  """
  Saint Martin (French part)
  """
  MF

  """
  Madagascar
  """
  MG

  """
  Marshall Islands
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the thread to resolve
  """
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The thread to resolve.
  """
  thread: PullRequestReviewThread
}

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the published tier to retire.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was retired.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  The description of the revert pull request.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReadyForReviewEvent object
  """
  id: ID!

  """
  Indicates whether the revert pull request should be a draft.
  """
  draft: Boolean = false

  """
  The ID of the pull request to revert.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The title of the revert pull request.
  """
  title: String
}

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that was reverted.
  """
  branchProtectionRule: BranchProtectionRule

  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    The head ref to compare against.
    """
    headRef: String!
  ): Comparison

  """
  The Node ID of the Ref object
  """
  id: ID!

  """
  The new pull request that reverts the input pull request.
  """
  revertPullRequest: PullRequest
}

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The actor that can dismiss.
  """
  actor: ReviewDismissalAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the ReviewDismissalAllowance object
  """
  createdAt: PreciseDateTime!

  """
  A list of rules from active Repository and Organization rulesets that apply to this ref.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repository rules.
    """
    orderBy: RepositoryRuleOrder = {field: UPDATED_AT, direction: DESC}
  ): RepositoryRuleConnection

  """
  The object the ref points to. Returns null when object does not exist.
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union ReviewDismissalAllowanceActor = App | Team | User

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  A list of edges.
  """
  edges: [ReviewDismissalAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewDismissalAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewDismissalAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Ref
}

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Ways in which lists of git refs can be ordered upon return.
"""
input RefOrder {
  """
  The direction in which to order refs by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order refs by.
  """
  field: RefOrderField!
}

"""
Represents a 'review_dismissed' event on a given issue or pull request.
"""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Identifies the optional message associated with the 'review_dismissed' event.
  """
  dismissalMessage: String

  """
  Identifies the optional message associated with the event, rendered to HTML.
  """
  dismissalMessageHTML: String

"""
Branch protection rules that are enforced on the viewer.
"""
type RefUpdateRule {
  """
  The Node ID of the ReviewDismissedEvent object
  """
  id: ID!

  """
  Identifies the previous state of the review with the 'review_dismissed' event.
  """
  previousReviewState: PullRequestReviewState!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the commit which caused the review to become stale.
  """
  pullRequestCommit: PullRequestCommit

  """
  The HTTP path for this review dismissed event.
  """
  resourcePath: URI!

  """
  Identifies the review associated with the 'review_dismissed' event.
  """
  review: PullRequestReview

  """
  The HTTP URL for this review dismissed event.
  """
  url: URI!
}

"""
A request for a user to review a pull request.
"""
type ReviewRequest implements Node {
  """
  Whether this request was created for a code owner
  """
  asCodeOwner: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ReviewRequest object
  """
  id: ID!

  """
  Identifies the pull request associated with this review request.
  """
  pullRequest: PullRequest!

  """
  The reviewer that is requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
The connection type for ReviewRequest.
"""
type ReviewRequestConnection {
  """
  A list of edges.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveTopicAuditEntry object
  """
  createdAt: DateTime!

  """
  The Node ID of the ReferencedEvent object
  """
  id: ID!

  """
  A list of nodes.
  """
  nodes: [ReviewRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewRequestEdge {
  """
  Find a project by number.
  """
  node: ReviewRequest
}

"""
Represents an 'review_request_removed' event on a given pull request.
"""
type ReviewRequestRemovedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestRemovedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review request was removed.
  """
  requestedReviewer: RequestedReviewer
}

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review was requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type ReviewStatusHovercardContext implements HovercardContext {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  The current status of the pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision
}

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
input RevokeEnterpriseOrganizationsMigratorRoleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
  """
  descriptionHTML: HTML

  """
  The Node ID of the Release object
  """
  id: ID!

  """
  The login of the user to revoke the migrator role
  """
  login: String!
}

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  The HTTP path listing organization's projects
  """
  actorType: ActorType!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization that the user/team belongs to.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of RevokeMigratorRole
"""
type RevokeMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  collaborators(
    """
    Collaborators affiliation level with a repository.
    """
    affiliation: CollaboratorAffiliation

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A name to filter the assets by.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    limit: Int = 200
  ): HTML

  """
  The Git tag the release points to
  """
  tag: Ref

  """
  The tag commit for this release.
  """
  tagCommit: Commit

  """
  The name of the release's Git tag
  """
  tagName: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this issue
  """
  url: URI!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!
}

"""
A release asset contains the content for a release asset.
"""
type ReleaseAsset implements Node {
  """
  The asset's content-type
  """
  contentType: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The number of times this asset was downloaded
  """
  downloadCount: Int!

  """
  Identifies the URL where you can download the release asset via the browser.
  """
  downloadUrl: URI!

  """
  The Node ID of the ReleaseAsset object
  """
  id: ID!

  """
  Identifies the title of the release asset.
  """
  name: String!

  """
  Release that the asset is associated with
  """
  release: Release

  """
  The size (in bytes) of the asset
  """
  size: Int!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The user that performed the upload
  """
  uploadedBy: User!

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Possible roles a user may have in relation to an organization.
"""
enum RoleInOrganization {
  """
  A user who is a direct member of the organization.
  """
  DIRECT_MEMBER

  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

  """
  Identifies the date and time when the object was created.
  """
  OWNER

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

"""
The level of enforcement for a rule or ruleset.
"""
enum RuleEnforcement {
  """
  Rules will be enforced
  """
  ACTIVE

  """
  Do not evaluate or enforce rules
  """
  DISABLED

  """
  Allow admins to test rules before enforcing them. Admins can view insights on
  the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
  """
  EVALUATE
}

"""
Types which can be parameters for `RepositoryRule` objects.
"""
union RuleParameters =
    BranchNamePatternParameters
  | CommitAuthorEmailPatternParameters
  | CommitMessagePatternParameters
  | CommitterEmailPatternParameters
  | PullRequestParameters
  | RequiredDeploymentsParameters
  | RequiredStatusChecksParameters
  | TagNamePatternParameters
  | UpdateParameters
  | WorkflowsParameters

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Parameters used for the `commit_author_email_pattern` rule type
  """
  commitAuthorEmailPattern: CommitAuthorEmailPatternParametersInput

  """
  Parameters used for the `commit_message_pattern` rule type
  """
  commitMessagePattern: CommitMessagePatternParametersInput

  """
  Parameters used for the `committer_email_pattern` rule type
  """
  committerEmailPattern: CommitterEmailPatternParametersInput

  """
  Parameters used for the `pull_request` rule type
  """
  pullRequest: PullRequestParametersInput

  """
  Parameters used for the `required_deployments` rule type
  """
  requiredDeployments: RequiredDeploymentsParametersInput

  """
  Parameters used for the `required_status_checks` rule type
  """
  requiredStatusChecks: RequiredStatusChecksParametersInput

  """
  Parameters used for the `tag_name_pattern` rule type
  """
  tagNamePattern: TagNamePatternParametersInput

  """
  A discussion category by slug.
  """
  discussionCategory(
    """
    The slug of the discussion category to be returned.
    """
    slug: String!
  ): DiscussionCategory

  """
  A list of discussions that have been opened in the repository.
  """
  update: UpdateParametersInput

    """
    Only show answered or unanswered discussions
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

"""
Types which can have `RepositoryRule` objects.
"""
union RuleSource = Organization | Repository

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum SamlDigestAlgorithm {
  """
  SHA1
  """
  SHA1

  """
  SHA256
  """
  SHA256

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: UPDATED_AT, direction: DESC}

    """
    A list of states to filter the discussions by.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  SHA512
  """
  SHA512
}

"""
The possible signature algorithms used to sign SAML requests for a Identity Provider.
"""
enum SamlSignatureAlgorithm {
  """
  RSA-SHA1
  """
  RSA_SHA1

  """
  RSA-SHA256
  """
  RSA_SHA256

  """
  RSA-SHA384
  """
  RSA_SHA384

  """
  RSA-SHA512
  """
  RSA_SHA512
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the environments
    """
    orderBy: Environments = {field: NAME, direction: ASC}
  ): EnvironmentConnection!

  """
  The saved reply body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the SavedReply object
  """
  id: ID!

  """
  The title of the saved reply.
  """
  title: String!

  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput {
  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The ID of the enterprise from which the user should be removed.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the user to remove from the enterprise.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
type SavedReplyConnection {
  """
  A list of edges.
  """
  edges: [SavedReplyEdge]

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
type SearchResultItemConnection {
  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Indicates if the repository has wiki feature enabled.
  """
  codeCount: Int!

  """
  The total number of discussions that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  homepageUrl: URI

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

  """
  The total number of users that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  userCount: Int!

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

"""
A GitHub Security Advisory
"""
type SecurityAdvisory implements Node {
  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CWEConnection!

    """
    If true, filters teams that are mapped to an LDAP Group (Enterprise only)
    """
    ldapMapped: Boolean

    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    orderBy: TeamOrder

    """
    If non-null, filters teams according to privacy
    """
    privacy: TeamPrivacy

    """
    If non-null, filters teams with query on team name and team slug
    """
    query: String

    """
    If non-null, filters teams according to whether the viewer is an admin or member on team
    """
    role: TeamRole

    """
    If true, restrict to only root teams
    """
    rootTeamsOnly: Boolean = false

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  enqueuer: User

  """
  The Node ID of the RemovedFromMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The reason this pull request was removed from the queue.
  """
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
type RemovedFromProjectEvent implements Node {
  """
  This is a long plaintext description of the advisory
  """
  description: String!

  """
  The GitHub Security Advisory ID
  """
  ghsaId: String!

  """
  The Node ID of the SecurityAdvisory object
  """
  databaseId: Int

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  id: ID!

  """
  A list of identifiers for this advisory
  """
  identifiers: [SecurityAdvisoryIdentifier!]!

  """
  The permalink for the advisory's dependabot alerts page
  """
  notificationsPermalink: URI

  """
  The organization that originated the advisory
  """
  origin: String!

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  permalink: URI

"""
An audit entry in an organization audit log.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

  """
  The Node ID of the RenamedTitleEvent object
  """
  id: ID!

  """
  A list of references for this advisory
  """
  references: [SecurityAdvisoryReference!]!

  """
  The severity of the advisory
  """
  severity: SecurityAdvisorySeverity!

  """
  A short plaintext summary of the advisory
  """
  summary: String!

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
input ReopenIssueInput {
  """
  How the default commit message will be generated when merging a pull request.
  """
  mergeCommitMessage: MergeCommitMessage!

  """
  How the default commit title will be generated when merging a pull request.
  """
  mergeCommitTitle: MergeCommitTitle!

  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    branch: String
  ): MergeQueue

  """
  Returns a single milestone from the current repository by number.
  """
  updatedAt: DateTime!

  """
  Vulnerabilities associated with this Advisory
  """
  vulnerabilities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the returned topics.
    """
    orderBy: SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}

    """
    A package name to filter vulnerabilities by.
    """
    package: String

    """
    A list of severities to filter vulnerabilities by.
    """
    severities: [SecurityAdvisorySeverity!]
  ): SecurityVulnerabilityConnection!

  """
  When the advisory was withdrawn, if it has been withdrawn
  """
  withdrawnAt: DateTime
}

"""
Classification of the advisory.
"""
enum SecurityAdvisoryClassification {
  """
  Classification of general advisories.
  """
  GENERAL

  """
  Classification of malware advisories.
  """
  MALWARE
}

"""
The connection type for SecurityAdvisory.
"""
type SecurityAdvisoryConnection {
  """
  A list of edges.
  """
  edges: [SecurityAdvisoryEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityAdvisory]

  """
  Information to aid in pagination.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible ecosystems of a security vulnerability's package.
"""
enum SecurityAdvisoryEcosystem {
  """
  GitHub Actions
  """
  ACTIONS

  """
  PHP packages hosted at packagist.org
  """
  COMPOSER

  """
  Erlang/Elixir packages hosted at hex.pm
  """
  ERLANG

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
type OrganizationIdentityProvider implements Node {
  """
  Go modules
  """
  GO

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

  """
  Python packages hosted at PyPI.org
  """
  PIP

  """
  The HTTP path listing the repository's projects
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  id: ID!

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  The identifier type, e.g. GHSA, CVE
  """
  type: String!

  """
  The identifier
  """
  value: String!
}

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter {
  """
  The identifier type.
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  value: String!
}

"""
Identifier formats available for advisories.
"""
enum SecurityAdvisoryIdentifierType {
  """
  Common Vulnerabilities and Exposures Identifier.
  """
  CVE

  """
  GitHub Security Advisory ID.
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security advisories by.
  """
  field: SecurityAdvisoryOrderField!
}

"""
Properties by which security advisory connections can be ordered.
"""
enum SecurityAdvisoryOrderField {
  """
  Order advisories by publication time
  """
  PUBLISHED_AT

  """
  Order advisories by update time
  """
  UPDATED_AT
}

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
  """
  ecosystem: SecurityAdvisoryEcosystem!

  """
  Identifies the date and time when the repository was last pushed to.
  """
  name: String!
}

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  The package name or version
  """
  identifier: String!
}

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  A publicly accessible reference
  """
  url: URI!
}

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  Critical.
  """
  CRITICAL

  """
  High.
  """
  HIGH

  """
  Low.
  """
  LOW

  """
  Moderate.
  """
  MODERATE
}

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
type SecurityVulnerability {
  """
  The Advisory associated with this Vulnerability
  """
  advisory: SecurityAdvisory!

  """
  The first version containing a fix for the vulnerability
  """
  firstPatchedVersion: SecurityAdvisoryPackageVersion

  """
  A description of the vulnerable package
  """
  package: SecurityAdvisoryPackage!

  """
  The severity of the vulnerability within this package
  """
  severity: SecurityAdvisorySeverity!

  """
  When the vulnerability was last updated
  """
  updatedAt: DateTime!

  """
  A string that describes the vulnerable package versions.
  This string follows a basic syntax with a few forms.
  + `= 0.2.0` denotes a single vulnerable version.
  + `<= 1.0.8` denotes a version range up to and including the specified version
  + `< 0.1.11` denotes a version range up to, but excluding, the specified version
  + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
  + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
  """
  vulnerableVersionRange: String!
}

"""
The connection type for SecurityVulnerability.
"""
type SecurityVulnerabilityConnection {
  """
  A list of edges.
  """
  edges: [SecurityVulnerabilityEdge]

  """
  A list of nodes.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddMemberAuditEntry object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SecurityVulnerabilityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityVulnerability
}

"""
Ordering options for security vulnerability connections
"""
input SecurityVulnerabilityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security vulnerabilities by.
  """
  field: SecurityVulnerabilityOrderField!
}

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  """
  Order vulnerability by update time
  """
  UPDATED_AT
}

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
union OrganizationOrUser = Organization | User

"""
Ordering options for organization connections.
"""
input SetEnterpriseIdentityProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The digest algorithm used to sign SAML requests for the identity provider.
  """
  digestMethod: SamlDigestAlgorithm!

  """
  The ID of the enterprise on which to set an identity provider.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: String!

  """
  Returns a single ruleset from the current repository by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!

    """
    Include rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true
  ): RepositoryRuleset

  """
  A list of rulesets for this repository.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The security policy URL.
  """
  issuer: String

  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: SamlSignatureAlgorithm!

  """
  The URL endpoint for the identity provider's SAML SSO.
  """
  ssoUrl: URI!
}

"""
Autogenerated return type of SetEnterpriseIdentityProvider
"""
type SetEnterpriseIdentityProviderPayload {
  """
  How the default commit message will be generated when squash merging a pull request.
  """
  squashMergeCommitMessage: SquashMergeCommitMessage!

  """
  How the default commit title will be generated when squash merging a pull request.
  """
  squashMergeCommitTitle: SquashMergeCommitTitle!

  """
  Whether a squash merge commit can use the pull request title as default.
  """
  relevantOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  The identity provider for the enterprise.
  """
  identityProvider: EnterpriseIdentityProvider
}

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the organization to set a limit for.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  id: ID!

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
type SetOrganizationInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization that the interaction limit was set for.
  """
  organization: Organization
}

"""
Autogenerated input type of SetRepositoryInteractionLimit
"""
input SetRepositoryInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the repository to set a limit for.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that the interaction limit was set for.
  """
  repository: Repository
}

"""
Autogenerated input type of SetUserInteractionLimit
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

  """
  MD5 hash of the file.
  """
  md5: String

  """
  Name of the file.
  """
  name: String!

  """
  The package version this file belongs to.
  """
  packageVersion: PackageVersion

  """
  SHA1 hash of the file.
  """
  sha1: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the user to set a limit for.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user that the interaction limit was set for.
  """
  user: User
}

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type SmimeSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  True if the signature is valid and verified by GitHub.
  """
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """
  ASCII-armored signature header from object.
  """
  signature: String!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  True if the signature was made with GitHub's signing key.
  """
  wasSignedByGitHub: Boolean!
}

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Name of the social media account as it appears on the profile.
  """
  createdAt: PreciseDateTime!

"""
Represents an owner of a package.
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """
    The number for the vulnerability alert to be returned.
    """
    packageType: PackageType

    """
    Find packages in a repository by ID.
    """
    repositoryId: ID
  ): PackageConnection!
}

"""
Represents a object that contains package activity statistics such as downloads.
"""
type PackageStatistics {
  """
  Number of times the package was downloaded since it was created.
  """
  downloadsTotalCount: Int!
}

"""
A version tag contains the mapping between a tag name and a version.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

  """
  A list of vulnerability alerts that are on this repository.
  """
  provider: SocialAccountProvider!

  """
  URL of the social media account.
  """
  url: URI!
}

"""
The connection type for SocialAccount.
"""
enum PackageType {
  """
  A debian package.
  """
  DEBIAN

  """
  A docker image.
  """
  DOCKER
    @deprecated(
      reason: "DOCKER will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2021-06-21 UTC."
    )

  """
  A maven package.
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

  """
  A list of edges.
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  A list of nodes.
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering of the returned package files.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

  """
  Whether contributors are required to sign off on web-based commits in this repository.
  """
  webCommitSignoffRequired: Boolean!
}

"""
Software or company that hosts social media accounts.
"""
enum SocialAccountProvider {
  """
  Social media and networking website.
  """
  FACEBOOK

  """
  Catch-all for social media providers that do not yet have specific handling.
  """
  GENERIC

  """
  Fork of Mastodon with a greater focus on local posting.
  """
  HOMETOWN

  """
  Social media website with a focus on photo and video sharing.
  """
  INSTAGRAM

  """
  Professional networking website.
  """
  LINKEDIN

  """
  Open-source federated microblogging service.
  """
  MASTODON

  """
  JavaScript package registry.
  """
  NPM

  """
  Social news aggregation and discussion website.
  """
  REDDIT

  """
  Live-streaming service.
  """
  TWITCH

  """
  Microblogging website.
  """
  TWITTER

  """
  Online video platform.
  """
  YOUTUBE
}

"""
Entities that can sponsor others via GitHub Sponsors
"""
union Sponsor = Organization | User

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The amount in cents.
  """
  amountInCents: Int!

  """
  The amount in USD, formatted as a string.
  """
  formattedAmount: String!

  """
  The sponsor's GitHub account.
  """
  sponsor: Sponsorable!

  """
  The maintainer's GitHub account.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  A list of edges.
  """
  edges: [SponsorAndLifetimeValueEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorAndLifetimeValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorAndLifetimeValue
}

"""
Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
"""
input SponsorAndLifetimeValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The source of this permission.
  """
  field: SponsorAndLifetimeValueOrderField!
}

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  LIFETIME_VALUE

  """
  Order results by the sponsor's login (username).
  """
  SPONSOR_LOGIN

  """
  Order results by the sponsor's relevance to the viewer.
  """
  SPONSOR_RELEVANCE
}

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  A list of edges.
  """
  edges: [SponsorEdge]

  """
  A list of nodes.
  """
  nodes: [Sponsor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type SponsorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The total size in kilobytes of all repositories in the connection. Value will
  never be larger than max 32-bit signed integer.
  """
  node: Sponsor
}

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
input SponsorOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsor entities by.
  """
  field: SponsorOrderField!
}

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN

  """
  Order sponsors by their relevance to the viewer.
  """
  RELEVANCE
}

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  estimatedNextSponsorsPayoutInCents: Int!

  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  hasSponsorsListing: Boolean!

  """
  Whether the given account is sponsoring this user/organization.
  """
  isSponsoredBy(
    """
    The target account's login.
    """
    accountLogin: String!
  ): Boolean!

  """
  True if the viewer is sponsored by this user/organization.
  """
  isSponsoringViewer: Boolean!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!
}

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

"""
Parameters to be used for the repository_id condition
"""
type RepositoryIdConditionTarget {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
A subset of repository info.
"""
interface RepositoryInfo {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  hasIssuesEnabled: Boolean!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  hasWikiEnabled: Boolean!

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

  """
  Identifies the date and time when the repository was last pushed to.
  """
  viewerIsSponsoring: Boolean!
}

"""
Entities that can be sponsored via GitHub Sponsors
"""
type PinnedIssue implements Node {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  Mexico
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Malaysia
  """
  nodes: [SponsorableItem]

  """
  Mozambique
  """
  MZ

  """
  Namibia
  """
  NA

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  """
  New Caledonia
  """
  NC

  """
  Niger
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  id: ID!

  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

  """
  The user or organization that is being sponsored, the maintainer.
  """
  sponsorable: Sponsorable!

  """
  The associated sponsorship tier.
  """
  sponsorsTier: SponsorsTier

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  The activity was cancelling a sponsorship.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

  """
  The Node ID of the RepositoryInvitation object
  """
  id: ID!

  """
  The activity was starting a sponsorship.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  The activity was scheduling a downgrade or cancellation.
  """
  PENDING_CHANGE

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  TIER_CHANGE
}

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  Poland
  """
  edges: [SponsorsActivityEdge]

  """
  Saint Pierre and Miquelon
  """
  nodes: [SponsorsActivity]

  """
  Pitcairn
  """
  PN

  """
  Puerto Rico
  """
  PR

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  Palestine
  """
  PS

  """
  Portugal
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  RENAME

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
enum SponsorsCountryOrRegionCode {
  """
  The migration flag to continue on error.
  """
  AD

  """
  United Arab Emirates
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  id: ID!

  """
  Antigua and Barbuda
  """
  AG

  """
  The migration source.
  """
  AI

  """
  Albania
  """
  AL

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  AM

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland
  """
  AX

  """
  Azerbaijan
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
interface RepositoryNode {
  """
  Belgium
  """
  BE

  """
  Burkina Faso
  """
  BF

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  BG

  """
  Bahrain
  """
  BH

  """
  Burundi
  """
  BI

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  BM

  """
  Brunei Darussalam
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The Node ID of the RepositoryOwner object
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

  """
  Bolivia
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  BR

  """
  Bahamas
  """
  BS

  """
  Bhutan
  """
  BT

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

  """
  Botswana
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Belarus
  """
  BY

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  BZ

  """
  Canada
  """
  CA

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Congo (Kinshasa)
  """
  CD

  """
  Central African Republic
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

  """
  Congo (Brazzaville)
  """
  CG

  """
  Switzerland
  """
  CH

  """
  Côte d'Ivoire
  """
  CI

  """
  Cook Islands
  """
  CK

  """
  Chile
  """
  CL

  """
  Cameroon
  """
  CM

  """
  China
  """
  CN

  """
  Colombia
  """
  CO

  """
  Costa Rica
  """
  CR

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  The HTTP path listing organization's projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
New projects that manage issues, pull requests and drafts using tables and boards.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  Only allow users with bypass permissions to delete matching refs.
  """
  closed: Boolean!

  """
  Branch is read-only. Users cannot push to the branch.
  """
  LOCK_BRANCH

  """
  Max ref updates
  """
  createdAt: DateTime!

  """
  Merges must be performed via a merge queue.
  """
  creator: Actor

  """
  Merge queue locked ref
  """
  databaseId: Int

  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Secret scanning
  """
  SECRET_SCANNING

  """
  Tag
  """
  TAG

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  Only allow users with bypass permission to update matching refs.
  """
  number: Int!

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  owner: ProjectV2Owner!

  """
  Workflow files cannot be modified.
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  resourcePath: URI!

  """
  Identifies the date and time when the object was created.
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  Identifies the primary key from the database.
  """
  title: String!

  """
  The enforcement level of this ruleset
  """
  updatedAt: DateTime!

  """
  The Node ID of the RepositoryRuleset object
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  A list of edges.
  """
  edges: [ProjectV2Edge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2]

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  Identifies the date and time when the object was last updated.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  node: ProjectV2
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  The actor that can bypass rules.
  """
  createdAt: DateTime!

  """
  The mode for the bypass actor
  """
  dataType: ProjectV2FieldType!

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  name: String!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  project: ProjectV2!

  """
  Identifies the ruleset associated with the allowed actor
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Field]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  ASSIGNEES

  """
  The bypass mode for this actor.
  """
  DATE

  """
  For organization owner bypasses, true
  """
  ITERATION

  """
  For role bypasses, the role database ID
  """
  LABELS

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  LINKED_PULL_REQUESTS

  """
  A list of nodes.
  """
  MILESTONE

  """
  Information to aid in pagination.
  """
  NUMBER

  """
  Identifies the total count of items in the connection.
  """
  REPOSITORY

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  REVIEWERS

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  SINGLE_SELECT

  """
  The item at the end of the edge.
  """
  TEXT

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  Branch
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  Tag
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  The Node ID of the RepositoryTopic object
  """
  content: ProjectV2ItemContent

  """
  Curaçao
  """
  createdAt: DateTime!

  """
  Christmas Island
  """
  creator: Actor

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Germany
  """
  DE

  """
  Djibouti
  """
  DJ

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Estonia
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  Egypt
  """
  edges: [ProjectV2ItemEdge]

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Fiji
  """
  createdAt: DateTime!

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    orderBy: TeamOrder

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  South Georgia and South Sandwich Islands
  """
  GS

  """
  Guatemala
  """
  GT

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  updatedAt: DateTime!
}

"""
An audit entry in an organization audit log.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

"""
The connection type for OrganizationAuditEntry.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Indonesia
  """
  ID

  """
  Ireland
  """
  IE

  """
  Israel
  """
  IL

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Kuwait
  """
  KW

  """
  The actor who created the item.
  """
  KY

  """
  Kazakhstan
  """
  KZ

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  Mongolia
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

  """
  Identifies the date and time when the object was created.
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

"""
Types that can be requested reviewers.
"""
type ProjectV2ItemFieldValueEdge {
  """
  Martinique
  """
  MQ

  """
  Mauritania
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

"""
The possible default commit messages for squash merges.
"""
enum SquashMergeCommitMessage {
  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
union OrganizationOrUser = Organization | User

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  The ID of the pull request to revert.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  The Node ID of the ReviewDismissalAllowance object
  """
  id: ID!
}

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

"""
The connection type for ReviewRequest.
"""
type ReviewRequestConnection {
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  CREATED_AT
}

"""
Represents an owner of a package.
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

"""
Represents an 'review_requested' event on a given pull request.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

  """
  The project view's name.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's sort-by config.
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

  """
  An npm package.
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  A nuget package.
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  The login of the user to revoke the migrator role
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  A user with full administrative access to the organization.
  """
  edges: [ProjectV2ViewEdge]

  """
  The HTTP path listing the repository's projects
  """
  nodes: [ProjectV2View]

  """
  Parameters used for the `commit_author_email_pattern` rule type
  """
  commitAuthorEmailPattern: CommitAuthorEmailPatternParametersInput

  """
  Parameters used for the `commit_message_pattern` rule type
  """
  commitMessagePattern: CommitMessagePatternParametersInput

"""
An edge in a connection.
"""
type ProjectV2ViewEdge {
  """
  Parameters used for the `committer_email_pattern` rule type
  """
  committerEmailPattern: CommitterEmailPatternParametersInput

  """
  Parameters used for the `pull_request` rule type
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  Parameters used for the `update` rule type
  """
  update: UpdateParametersInput

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The source of this permission.
  """
  enabled: Boolean!

  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  RSA_SHA512
}

"""
A Saved Reply is text a user can use to reply quickly.
"""
type SavedReply implements Node {
  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  body: String!

  """
  The saved reply body rendered to HTML.
  """
  bodyHTML: HTML!

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  UPDATED_AT
}

"""
The results of a search.
"""
union SearchResultItem = App | Discussion | Issue | MarketplaceListing | Organization | PullRequest | Repository | User

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
type SearchResultItemConnection {
  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  UPDATED_AT
}

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  A list of references for this advisory
  """
  references: [SecurityAdvisoryReference!]!

  """
  The severity of the advisory
  """
  severity: SecurityAdvisorySeverity!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Ordering options for the returned topics.
    """
    orderBy: SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}

    """
    A package name to filter vulnerabilities by.
    """
    package: String

    """
    A list of severities to filter vulnerabilities by.
    """
    severities: [SecurityAdvisorySeverity!]
  ): SecurityVulnerabilityConnection!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The public profile email.
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type RepositoryMigration implements Migration & Node {
  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  sponsor: Sponsorable!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Order sponsors by their relevance to the viewer.
  """
  RELEVANCE
}

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  estimatedNextSponsorsPayoutInCents: Int!

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

  """
  Whether the given account is sponsoring this user/organization.
  """
  isSponsoredBy(
    """
    The target account's login.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  Branch is read-only. Users cannot push to the branch.
  """
  LOCK_BRANCH

  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  MERGE_QUEUE_LOCKED_REF

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

  """
  The item at the end of the edge.
  """
  node: Project
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
New projects that manage issues, pull requests and drafts using tables and boards.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  Secret scanning
  """
  closed: Boolean!

  """
  Tag
  """
  TAG

  """
  Tag name pattern
  """
  createdAt: DateTime!

  """
  Only allow users with bypass permission to update matching refs.
  """
  creator: Actor

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  databaseId: Int

  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  List of fields and their constraints in the project
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  The Node ID of the RepositoryRuleset object
  """
  number: Int!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  owner: ProjectV2Owner!

  """
  Name of the ruleset.
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

  """
  The HTTP path for this project
  """
  resourcePath: URI!

  """
  Source of ruleset.
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  Target of the ruleset.
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  A list of edges.
  """
  edges: [ProjectV2Edge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  createdAt: DateTime!

  """
  The bypass mode for this actor.
  """
  dataType: ProjectV2FieldType!

  """
  For organization owner bypasses, true
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  For role bypasses, the role database ID
  """
  name: String!

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  project: ProjectV2!

  """
  Information to aid in pagination.
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  A cursor for use in pagination.
  """
  createdAt: DateTime!

  """
  The item at the end of the edge.
  """
  dataType: ProjectV2FieldType!

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  Branch
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  Tag
  """
  name: String!

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  True if the viewer is sponsoring this user/organization.
  """
  edges: [ProjectV2FieldEdge]

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  nodes: [ProjectV2Field]

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

"""
An edge in a connection.
"""
type ProjectV2FieldEdge {
  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  ASSIGNEES

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  DATE

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  ITERATION

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  LABELS

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  LINKED_PULL_REQUESTS

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  Pakistan
  """
  MILESTONE

  """
  Poland
  """
  NUMBER

  """
  Saint Pierre and Miquelon
  """
  REPOSITORY

  """
  Pitcairn
  """
  REVIEWERS

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  """
  Puerto Rico
  """
  SINGLE_SELECT

  """
  Palestine
  """
  TEXT

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  The field to order sponsorable entities by.
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  Order sponsorable entities by login (username).
  """
  content: ProjectV2ItemContent

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  createdAt: DateTime!

  """
  The sponsor's current privacy level.
  """
  creator: Actor

  """
  The Node ID of the SponsorsActivity object
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  fullDatabaseId: BigInt

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

  """
  The platform that was used to pay for the sponsorship.
  """
  isArchived: Boolean!

  """
  Returns whether or not a comment has been minimized.
  """
  project: ProjectV2!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  type: ProjectV2ItemType!

  """
  A list of teams that this review was made on behalf of.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  The user or organization that is being sponsored, the maintainer.
  """
  edges: [ProjectV2ItemEdge]

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  The associated sponsorship tier.
  """
  nodes: [ProjectV2Item]

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  id: ID!

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

  """
  The activity was scheduling a downgrade or cancellation.
  """
  PENDING_CHANGE

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Saint Helena
  """
  createdAt: DateTime!

  """
  Slovenia
  """
  creator: Actor

  """
  Svalbard and Jan Mayen Islands
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  Slovakia
  """
  field: ProjectV2FieldConfiguration!

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  The actor who created the item.
  """
  BJ

  """
  Saint Barthélemy
  """
  BL

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  Central African Republic
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  Congo (Brazzaville)
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  Switzerland
  """
  CH

"""
Autogenerated return type of UnmarkProjectV2AsTemplate
"""
type UnmarkProjectV2AsTemplatePayload {
  """
  Côte d'Ivoire
  """
  CI

"""
An edge in a connection.
"""
type ProjectV2ItemFieldValueEdge {
  """
  Cook Islands
  """
  CK

  """
  Chile
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

"""
The connection type for RequestedReviewer.
"""
type RequestedReviewerConnection {
  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

"""
A record that is promoted on a GitHub Sponsors profile.
"""
type SponsorsListingFeaturedItem implements Node {
  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  The actor that can dismiss.
  """
  actor: ReviewDismissalAllowanceActor

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  The Node ID of the ReviewDismissalAllowance object
  """
  id: ID!
}

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

"""
A request for a user to review a pull request.
"""
type ReviewRequest implements Node {
  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

"""
Autogenerated return type of RevokeMigratorRole
"""
type RevokeMigratorRolePayload {
  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  The project view's name.
  """
  name: String!

"""
Possible roles a user may have in relation to an organization.
"""
enum RoleInOrganization {
  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  Parameters used for the `committer_email_pattern` rule type
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  SHA384
  """
  SHA384

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ViewEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2View]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ViewEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

"""
An edge in a connection.
"""
type SearchResultItemEdge {
  """
  The name of the workflow.
  """
  cursor: String!

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  node: SearchResultItem

  """
  Text matches on the result found.
  """
  textMatches: [TextMatch]
}

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  id: ID!

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  notificationsPermalink: URI

  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  publishedAt: DateTime!

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

"""
An individual vulnerability within an Advisory
"""
type SecurityVulnerability {
  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The severity of the vulnerability within this package
  """
  severity: SecurityAdvisorySeverity!

  """
  When the vulnerability was last updated
  """
  updatedAt: DateTime!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

"""
Autogenerated return type of SetEnterpriseIdentityProvider
"""
type SetEnterpriseIdentityProviderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput {
  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repository rules.
    """
    orderBy: RepositoryRuleOrder = {field: UPDATED_AT, direction: DESC}
  ): RepositoryRuleConnection

  """
  The permalink to the pull request.
  """
  permalink: URI!

"""
Software or company that hosts social media accounts.
"""
enum SocialAccountProvider {
  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  LIFETIME_VALUE

  """
  Order results by the sponsor's login (username).
  """
  SPONSOR_LOGIN

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  Indonesia
  """
  nodes: [SponsorsActivity]

  """
  Ireland
  """
  IE

  """
  Israel
  """
  IL

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  Isle of Man
  """
  IM

  """
  India
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  RENAME

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
enum SponsorsCountryOrRegionCode {
  """
  The migration flag to continue on error.
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  id: ID!

  """
  Antigua and Barbuda
  """
  AG

  """
  The migration source.
  """
  AI

  """
  Albania
  """
  AL

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  AM

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

  """
  Antarctica
  """
  AQ

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

  """
  The Node ID of the RemovedFromMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The reason this pull request was removed from the queue.
  """
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
type RemovedFromProjectEvent implements Node {
  """
  Argentina
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  databaseId: Int

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  id: ID!

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland
  """
  AX

  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  currentTitle: String!

  """
  The Node ID of the RenamedTitleEvent object
  """
  id: ID!

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
input ReopenIssueInput {
  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
interface RepositoryNode {
  """
  Belgium
  """
  BE

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  BH

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  Burundi
  """
  BI

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

  """
  Bermuda
  """
  BM

  """
  Brunei Darussalam
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The Node ID of the RepositoryOwner object
  """
  id: ID!

  """
  Bolivia
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  Brazil
  """
  BR

  """
  Bahamas
  """
  BS

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Bouvet Island
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Botswana
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

  """
  Belarus
  """
  BY

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  BZ

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Congo (Kinshasa)
  """
  CD

  """
  Central African Republic
  """
  CF

  """
  Congo (Brazzaville)
  """
  CG

  """
  Switzerland
  """
  CH

  """
  Côte d'Ivoire
  """
  CI

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddMemberAuditEntry object
  """
  id: ID!

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  LOCK_BRANCH

  """
  Max ref updates
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  REQUIRED_LINEAR_HISTORY

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS

  """
  Commits pushed to matching refs must have verified signatures.
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  Secret scanning
  """
  SECRET_SCANNING

  """
  Tag
  """
  TAG

  """
  Tag name pattern
  """
  TAG_NAME_PATTERN

  """
  Only allow users with bypass permission to update matching refs.
  """
  UPDATE

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  WORKFLOWS

  """
  Workflow files cannot be modified.
  """
  WORKFLOW_UPDATES
}

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetBypassActorConnection

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The enforcement level of this ruleset
  """
  enforcement: RuleEnforcement!

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  createdAt: PreciseDateTime!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The type of rule.
    """
    type: RepositoryRuleType
  ): RepositoryRuleConnection

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  repositoryRoleName: String

  """
  Identifies the ruleset associated with the allowed actor
  """
  repositoryRuleset: RepositoryRuleset
}

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  ALWAYS

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRulesetBypassActor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  actorId: ID

  """
  The bypass mode for this actor.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode!

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetEdge]

  """
  A list of nodes.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRuleset
}

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  Branch
  """
  BRANCH

  """
  Tag
  """
  TAG
}

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  id: ID!

  """
  Chile
  """
  CL

  """
  Cameroon
  """
  CM

  """
  China
  """
  CN

  """
  Colombia
  """
  CO

  """
  Costa Rica
  """
  CR

  """
  Cape Verde
  """
  CV

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  CX

  """
  Cyprus
  """
  CY

  """
  Czech Republic
  """
  CZ

  """
  Germany
  """
  DE

  """
  Djibouti
  """
  DJ

  """
  Denmark
  """
  DK

  """
  Dominica
  """
  DM

  """
  Dominican Republic
  """
  DO

  """
  Algeria
  """
  DZ

  """
  Ecuador
  """
  EC

  """
  Estonia
  """
  EE

  """
  Egypt
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

  """
  Western Sahara
  """
  EH

  """
  Eritrea
  """
  ER

  """
  Spain
  """
  ES

  """
  Ethiopia
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  id: ID!

  """
  Finland
  """
  FI

  """
  Fiji
  """
  FJ

  """
  Falkland Islands
  """
  FK

  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  FR

  """
  Gabon
  """
  GA

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  GB

  """
  Grenada
  """
  GD

  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  GG

  """
  Ghana
  """
  GH

  """
  Gibraltar
  """
  GI

  """
  Greenland
  """
  GL

  """
  Gambia
  """
  createdAt: PreciseDateTime!

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type PullRequestRevisionMarker {
  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Guinea
  """
  GN

  """
  Guadeloupe
  """
  GP

  """
  Equatorial Guinea
  """
  GQ

  """
  Greece
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  id: ID!

  """
  South Georgia and South Sandwich Islands
  """
  GS

  """
  Guatemala
  """
  GT

  """
  Guam
  """
  GU

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
type PullRequestTimelineConnection {
  """
  Guinea-Bissau
  """
  GW

  """
  Guyana
  """
  GY

  """
  Hong Kong
  """
  HK

  """
  Heard and McDonald Islands
  """
  HM

  """
  Honduras
  """
  HN

  """
  Croatia
  """
  HR

  """
  When was the alert auto-dismissed?
  """
  autoDismissedAt: DateTime

"""
An item in a pull request timeline
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

  """
  Iraq
  """
  IQ

  """
  Iran
  """
  IR

  """
  Iceland
  """
  IS

  """
  Italy
  """
  IT

  """
  Jersey
  """
  JE

  """
  Jamaica
  """
  JM

  """
  Jordan
  """
  JO

  """
  Japan
  """
  JP

  """
  Kenya
  """
  KE

  """
  Kyrgyzstan
  """
  KG

  """
  Cambodia
  """
  KH

  """
  Kiribati
  """
  KI

  """
  Comoros
  """
  KM

  """
  Saint Kitts and Nevis
  """
  KN

  """
  Korea, South
  """
  KR

  """
  Kuwait
  """
  KW

  """
  An alert that has been automatically closed by Dependabot.
  """
  AUTO_DISMISSED

  """
  An alert that has been manually closed by a user.
  """
  KY

  """
  Kazakhstan
  """
  KZ

  """
  Laos
  """
  LA

  """
  Lebanon
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  Saint Lucia
  """
  LC

  """
  Liechtenstein
  """
  LI

  """
  Sri Lanka
  """
  union: Boolean = false

  """
  Liberia
  """
  LR

  """
  Lesotho
  """
  LS

  """
  Lithuania
  """
  LT

  """
  Luxembourg
  """
  LU

  """
  Latvia
  """
  LV

  """
  Libya
  """
  LY

  """
  Morocco
  """
  MA

  """
  Monaco
  """
  MC

  """
  Moldova
  """
  MD

  """
  Montenegro
  """
  WAITING
}

"""
Types that can be requested reviewers.
"""
union RequestedReviewer = Bot | Mannequin | Team | User

  """
  Saint Martin (French part)
  """
  MF

  """
  Madagascar
  """
  MG

  """
  Marshall Islands
  """
  MH

  """
  Macedonia
  """
  MK

  """
  Mali
  """
  ML

  """
  Myanmar
  """
  MM

  """
  Mongolia
  """
  MN

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type RequiredStatusCheckDescription {
  """
  Macau
  """
  MO

  """
  Northern Mariana Islands
  """
  MP

  """
  Martinique
  """
  MQ

  """
  Mauritania
  """
  MR

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfiguration!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
input RequiredStatusChecksParametersInput {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfigurationInput!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Autogenerated input type of RerequestCheckSuite
"""
input RerequestCheckSuiteInput {
  """
  Montserrat
  """
  MS

  """
  Malta
  """
  MT

  """
  Mauritius
  """
  MU

  """
  Maldives
  """
  MV

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the thread to resolve
  """
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The thread to resolve.
  """
  thread: PullRequestReviewThread
}

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the published tier to retire.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of RetireSponsorsTier
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  The tier that was retired.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  The description of the revert pull request.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates whether the revert pull request should be a draft.
  """
  draft: Boolean = false

  """
  The ID of the pull request to revert.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The title of the revert pull request.
  """
  title: String
}

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that was reverted.
  """
  pullRequest: PullRequest

  """
  The new pull request that reverts the input pull request.
  """
  revertPullRequest: PullRequest
}

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The actor that can dismiss.
  """
  actor: ReviewDismissalAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the PushAllowance object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union ReviewDismissalAllowanceActor = App | Team | User

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  A list of edges.
  """
  edges: [ReviewDismissalAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewDismissalAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewDismissalAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  The item at the end of the edge.
  """
  node: ReviewDismissalAllowance
}

"""
Represents a 'review_dismissed' event on a given issue or pull request.
"""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Identifies the optional message associated with the 'review_dismissed' event.
  """
  dismissalMessage: String

  """
  Identifies the optional message associated with the event, rendered to HTML.
  """
  dismissalMessageHTML: String

  """
  The Node ID of the ReviewDismissedEvent object
  """
  id: ID!

  """
  Identifies the previous state of the review with the 'review_dismissed' event.
  """
  previousReviewState: PullRequestReviewState!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the commit which caused the review to become stale.
  """
  pullRequestCommit: PullRequestCommit

  """
  The HTTP path for this review dismissed event.
  """
  resourcePath: URI!

  """
  Identifies the review associated with the 'review_dismissed' event.
  """
  review: PullRequestReview

  """
  The HTTP URL for this review dismissed event.
  """
  url: URI!
}

"""
A request for a user to review a pull request.
"""
type ReviewRequest implements Node {
  """
  Whether this request was created for a code owner
  """
  asCodeOwner: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ReviewRequest object
  """
  id: ID!

  """
  Identifies the pull request associated with this review request.
  """
  pullRequest: PullRequest!

  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  requestedReviewer: RequestedReviewer
}

"""
The connection type for ReviewRequest.
"""
type ReviewRequestConnection {
  """
  A list of edges.
  """
  edges: [ReviewRequestEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewRequest]

  """
  Information to aid in pagination.
  """
  createdAt: PreciseDateTime!

  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  id: ID!

    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    query: String!

"""
An edge in a connection.
"""
type ReviewRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewRequest
}

"""
Represents an 'review_request_removed' event on a given pull request.
"""
type ReviewRequestRemovedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestRemovedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review request was removed.
  """
  requestedReviewer: RequestedReviewer
}

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review was requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type ReviewStatusHovercardContext implements HovercardContext {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  The current status of the pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision
}

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
input RevokeEnterpriseOrganizationsMigratorRoleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of the user to revoke the migrator role
  """
  login: String!
}

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The organizations that had the migrator role revoked for the given user.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection
}

"""
Autogenerated input type of RevokeMigratorRole
"""
input RevokeMigratorRoleInput {
  """
  The user login or Team slug to revoke the migrator role from.
  """
  actor: String!

  """
  Specifies the type of the actor, can be either USER or TEAM.
  """
  actorType: ActorType!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization that the user/team belongs to.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of RevokeMigratorRole
"""
type RevokeMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Possible roles a user may have in relation to an organization.
"""
enum RoleInOrganization {
  """
  A user who is a direct member of the organization.
  """
  DIRECT_MEMBER

  """
  A user with full administrative access to the organization.
  """
  OWNER

  """
  A user who is unaffiliated with the organization.
  """
  UNAFFILIATED
}

"""
The level of enforcement for a rule or ruleset.
"""
enum RuleEnforcement {
  """
  Rules will be enforced
  """
  ACTIVE

  """
  Do not evaluate or enforce rules
  """
  DISABLED

  """
  Allow admins to test rules before enforcing them. Admins can view insights on
  the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
  """
  EVALUATE
}

"""
Types which can be parameters for `RepositoryRule` objects.
"""
union RuleParameters =
    BranchNamePatternParameters
  | CommitAuthorEmailPatternParameters
  | CommitMessagePatternParameters
  | CommitterEmailPatternParameters
  | PullRequestParameters
  | RequiredDeploymentsParameters
  | RequiredStatusChecksParameters
  | TagNamePatternParameters
  | UpdateParameters
  | WorkflowsParameters

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  Parameters used for the `branch_name_pattern` rule type
  """
  databaseId: Int

  """
  The Node ID of the Reactable object
  """
  id: ID!

  """
  Parameters used for the `commit_author_email_pattern` rule type
  """
  commitAuthorEmailPattern: CommitAuthorEmailPatternParametersInput

  """
  Parameters used for the `commit_message_pattern` rule type
  """
  commitMessagePattern: CommitMessagePatternParametersInput

  """
  Parameters used for the `committer_email_pattern` rule type
  """
  committerEmailPattern: CommitterEmailPatternParametersInput

  """
  Parameters used for the `pull_request` rule type
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Parameters used for the `required_deployments` rule type
  """
  requiredDeployments: RequiredDeploymentsParametersInput

  """
  Parameters used for the `required_status_checks` rule type
  """
  requiredStatusChecks: RequiredStatusChecksParametersInput

  """
  Parameters used for the `tag_name_pattern` rule type
  """
  tagNamePattern: TagNamePatternParametersInput

  """
  Parameters used for the `update` rule type
  """
  update: UpdateParametersInput

  """
  Parameters used for the `workflows` rule type
  """
  workflows: WorkflowsParametersInput
}

"""
Types which can have `RepositoryRule` objects.
"""
union RuleSource = Organization | Repository

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum SamlDigestAlgorithm {
  """
  SHA1
  """
  SHA1

  """
  SHA256
  """
  SHA256

  """
  SHA384
  """
  SHA384

  """
  SHA512
  """
  SHA512
}

"""
The possible signature algorithms used to sign SAML requests for a Identity Provider.
"""
enum SamlSignatureAlgorithm {
  """
  RSA-SHA1
  """
  RSA_SHA1

  """
  RSA-SHA256
  """
  RSA_SHA256

  """
  RSA-SHA384
  """
  RSA_SHA384

  """
  RSA-SHA512
  """
  RSA_SHA512
}

"""
A Saved Reply is text a user can use to reply quickly.
"""
type SavedReply implements Node {
  """
  The body of the saved reply.
  """
  body: String!

  """
  The saved reply body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Reaction object
  """
  id: ID!

  """
  The title of the saved reply.
  """
  title: String!

  """
  The user that saved this reply.
  """
  user: Actor
}

"""
The connection type for SavedReply.
"""
type SavedReplyConnection {
  """
  A list of edges.
  """
  edges: [SavedReplyEdge]

  """
  A list of nodes.
  """
  nodes: [SavedReply]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SavedReply
}

"""
Ordering options for saved reply connections.
"""
input SavedReplyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order saved replies by.
  """
  field: SavedReplyOrderField!
}

"""
Properties by which saved reply connections can be ordered.
"""
enum SavedReplyOrderField {
  """
  Order saved reply by when they were updated.
  """
  UPDATED_AT
}

"""
The results of a search.
"""
union SearchResultItem = App | Discussion | Issue | MarketplaceListing | Organization | PullRequest | Repository | User

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
type SearchResultItemConnection {
  """
  The total number of pieces of code that matched the search query. Regardless
  of the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  codeCount: Int!

  """
  The total number of discussions that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  discussionCount: Int!

  """
  A list of edges.
  """
  edges: [SearchResultItemEdge]

  """
  The total number of issues that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  issueCount: Int!

  """
  A list of nodes.
  """
  nodes: [SearchResultItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of repositories that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  repositoryCount: Int!

  """
  The total number of users that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  userCount: Int!

  """
  The total number of wiki pages that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  wikiCount: Int!
}

"""
An edge in a connection.
"""
type SearchResultItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SearchResultItem

  """
  Text matches on the result found.
  """
  textMatches: [TextMatch]
}

"""
Represents the individual results of a search.
"""
enum SearchType {
  """
  Returns matching discussions in repositories.
  """
  DISCUSSION

  """
  Returns results matching issues in repositories.
  """
  ISSUE

  """
  Returns results matching repositories.
  """
  REPOSITORY

  """
  Returns results matching users and organizations on GitHub.
  """
  USER
}

"""
A GitHub Security Advisory
"""
type SecurityAdvisory implements Node {
  """
  The classification of the advisory
  """
  classification: SecurityAdvisoryClassification!

  """
  The CVSS associated with this advisory
  """
  cvss: CVSS!

  """
  CWEs associated with this Advisory
  """
  cwes(
    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CWEConnection!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  This is a long plaintext description of the advisory
  """
  description: String!

  """
  The GitHub Security Advisory ID
  """
  ghsaId: String!

  """
  The Node ID of the SecurityAdvisory object
  """
  id: ID!

  """
  A list of identifiers for this advisory
  """
  identifiers: [SecurityAdvisoryIdentifier!]!

  """
  The permalink for the advisory's dependabot alerts page
  """
  notificationsPermalink: URI

  """
  The organization that originated the advisory
  """
  origin: String!

  """
  The permalink for the advisory
  """
  permalink: URI

  """
  When the advisory was published
  """
  publishedAt: DateTime!

  """
  A list of references for this advisory
  """
  createdAt: DateTime!

  """
  The Node ID of the ReadyForReviewEvent object
  """
  id: ID!

  """
  The severity of the advisory
  """
  severity: SecurityAdvisorySeverity!

  """
  A short plaintext summary of the advisory
  """
  summary: String!

  """
  When the advisory was last updated
  """
  updatedAt: DateTime!

  """
  Vulnerabilities associated with this Advisory
  """
  vulnerabilities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the returned topics.
    """
    orderBy: SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}

    """
    A package name to filter vulnerabilities by.
    """
    package: String

    """
    A list of severities to filter vulnerabilities by.
    """
    severities: [SecurityAdvisorySeverity!]
  ): SecurityVulnerabilityConnection!

  """
  When the advisory was withdrawn, if it has been withdrawn
  """
  withdrawnAt: DateTime
}

"""
Classification of the advisory.
"""
enum SecurityAdvisoryClassification {
  """
  Classification of general advisories.
  """
  GENERAL

  """
  Classification of malware advisories.
  """
  MALWARE
}

"""
The connection type for SecurityAdvisory.
"""
type SecurityAdvisoryConnection {
  """
  A list of edges.
  """
  edges: [SecurityAdvisoryEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityAdvisory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  id: ID!

"""
The possible ecosystems of a security vulnerability's package.
"""
enum SecurityAdvisoryEcosystem {
  """
  GitHub Actions
  """
  ACTIONS

  """
  PHP packages hosted at packagist.org
  """
  COMPOSER

  """
  Erlang/Elixir packages hosted at hex.pm
  """
  ERLANG

  """
  Go modules
  """
  GO

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

  """
  JavaScript packages hosted at npmjs.com
  """
  branchProtectionRule: BranchProtectionRule

  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    The head ref to compare against.
    """
    headRef: String!
  ): Comparison

  """
  The Node ID of the Ref object
  """
  id: ID!

  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

  """
  Python packages hosted at PyPI.org
  """
  PIP

  """
  Dart packages hosted at pub.dev
  """
  PUB

  """
  Ruby gems hosted at RubyGems.org
  """
  RUBYGEMS

  """
  A list of rules from active Repository and Organization rulesets that apply to this ref.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repository rules.
    """
    orderBy: RepositoryRuleOrder = {field: UPDATED_AT, direction: DESC}
  ): RepositoryRuleConnection

  """
  The object the ref points to. Returns null when object does not exist.
  """
  RUST

  """
  Swift packages
  """
  SWIFT
}

"""
An edge in a connection.
"""
type SecurityAdvisoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityAdvisory
}

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  The identifier type, e.g. GHSA, CVE
  """
  type: String!

  """
  The identifier
  """
  value: String!
}

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter {
  """
  The identifier type.
  """
  type: SecurityAdvisoryIdentifierType!

  """
  The identifier string. Supports exact or partial matching.
  """
  value: String!
}

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Ways in which lists of git refs can be ordered upon return.
"""
enum SecurityAdvisoryIdentifierType {
  """
  Common Vulnerabilities and Exposures Identifier.
  """
  CVE

  """
  GitHub Security Advisory ID.
  """
  GHSA
}

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security advisories by.
  """
  field: SecurityAdvisoryOrderField!
}

"""
Properties by which security advisory connections can be ordered.
"""
enum SecurityAdvisoryOrderField {
  """
  Order advisories by publication time
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveTopicAuditEntry object
  """
  id: ID!

  """
  Order advisories by update time
  """
  UPDATED_AT
}

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
  """
  ecosystem: SecurityAdvisoryEcosystem!

  """
  The package name
  """
  name: String!
}

"""
Branch protection rules that are enforced on the viewer.
"""
type SecurityAdvisoryPackageVersion {
  """
  The package name or version
  """
  identifier: String!
}

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  A publicly accessible reference
  """
  url: URI!
}

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  Critical.
  """
  CRITICAL

  """
  High.
  """
  HIGH

  """
  Low.
  """
  LOW

  """
  Moderate.
  """
  MODERATE
}

"""
An individual vulnerability within an Advisory
"""
type SecurityVulnerability {
  """
  The Advisory associated with this Vulnerability
  """
  advisory: SecurityAdvisory!

  """
  The first version containing a fix for the vulnerability
  """
  firstPatchedVersion: SecurityAdvisoryPackageVersion

  """
  A description of the vulnerable package
  """
  package: SecurityAdvisoryPackage!

  """
  The severity of the vulnerability within this package
  """
  severity: SecurityAdvisorySeverity!

  """
  When the vulnerability was last updated
  """
  updatedAt: DateTime!

  """
  A string that describes the vulnerable package versions.
  This string follows a basic syntax with a few forms.
  + `= 0.2.0` denotes a single vulnerable version.
  + `<= 1.0.8` denotes a version range up to and including the specified version
  + `< 0.1.11` denotes a version range up to, but excluding, the specified version
  + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
  + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
  """
  vulnerableVersionRange: String!
}

"""
The connection type for SecurityVulnerability.
"""
type SecurityVulnerabilityConnection {
  """
  A list of edges.
  """
  edges: [SecurityVulnerabilityEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityVulnerability]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReferencedEvent object
  """
  id: ID!

"""
An edge in a connection.
"""
type SecurityVulnerabilityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityVulnerability
}

"""
Ordering options for security vulnerability connections
"""
input SecurityVulnerabilityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  A list of users that can be assigned to issues in this repository.
  """
  assignableUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filters users with query on user name and login.
    """
    query: String
  ): UserConnection!

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  """
  Order vulnerability by update time
  """
  UPDATED_AT
}

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  collaborators(
    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: SamlSignatureAlgorithm!

  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

  """
  Identifies the date and time when the object was created.
  """
  ssoUrl: URI!
}

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
type SetOrganizationInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization that the interaction limit was set for.
  """
  organization: Organization
}

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput {
  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    userLogins: [String!]
  ): TeamConnection!

  """
  The HTTP path listing organization's teams
  """
  teamsResourcePath: URI!

  """
  The HTTP URL listing organization's teams
  """
  teamsUrl: URI!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  twitterUsername: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this organization.
  """
  url: URI!

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  user: User
}

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type SmimeSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Whether vulnerability alerts are enabled for the repository.
  """
  hasVulnerabilityAlertsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  homepageUrl: URI

  """
  The Node ID of the Repository object
  """
  id: ID!

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  websiteUrl: URI
}

"""
An audit entry in an organization audit log.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  True if the signature was made with GitHub's signing key.
  """
  releaseAssets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A name to filter the assets by.
    """
    name: String
  ): ReleaseAssetConnection!

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Name of the social media account as it appears on the profile.
  """
  displayName: String!

  """
  Software or company that hosts the social media account.
  """
  provider: SocialAccountProvider!

  """
  URL of the social media account.
  """
  url: URI!
}

"""
The connection type for SocialAccount.
"""
type SocialAccountConnection {
  """
  A list of edges.
  """
  edges: [SocialAccountEdge]

  """
  A list of nodes.
  """
  nodes: [SocialAccount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SocialAccount
}

"""
Software or company that hosts social media accounts.
"""
enum SocialAccountProvider {
  """
  Social media and networking website.
  """
  FACEBOOK

  """
  Catch-all for social media providers that do not yet have specific handling.
  """
  GENERIC

  """
  Fork of Mastodon with a greater focus on local posting.
  """
  HOMETOWN

  """
  Social media website with a focus on photo and video sharing.
  """
  downloadUrl: URI!

  """
  The Node ID of the ReleaseAsset object
  """
  id: ID!

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
type OrganizationIdentityProvider implements Node {
  """
  Professional networking website.
  """
  LINKEDIN

  """
  Open-source federated microblogging service.
  """
  externalIdentities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter to external identities with the users login
    """
    login: String

    """
    Filter to external identities with valid org membership only
    """
    membersOnly: Boolean

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

  """
  JavaScript package registry.
  """
  NPM

  """
  Social news aggregation and discussion website.
  """
  REDDIT

  """
  Live-streaming service.
  """
  TWITCH

  """
  Microblogging website.
  """
  TWITTER

  """
  Online video platform.
  """
  YOUTUBE
}

"""
Entities that can sponsor others via GitHub Sponsors
"""
union Sponsor = Organization | User

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The amount in cents.
  """
  amountInCents: Int!

  """
  How the default commit message will be generated when merging a pull request.
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  mergeCommitTitle: MergeCommitTitle!

  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    branch: String
  ): MergeQueue

  """
  Returns a single milestone from the current repository by number.
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

  """
  The sponsor's GitHub account.
  """
  sponsor: Sponsorable!

  """
  The maintainer's GitHub account.
  """
  sponsorable: Sponsorable!
}

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  A list of edges.
  """
  edges: [SponsorAndLifetimeValueEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorAndLifetimeValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorAndLifetimeValue
}

"""
Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
"""
input SponsorAndLifetimeValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order results by.
  """
  field: SponsorAndLifetimeValueOrderField!
}

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  LIFETIME_VALUE

  """
  Order results by the sponsor's login (username).
  """
  SPONSOR_LOGIN

  """
  Order results by the sponsor's relevance to the viewer.
  """
  SPONSOR_RELEVANCE
}

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  Finds and returns the Project according to the provided Project number.
  """
  nodes: [Sponsor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The HTTP path listing the repository's projects
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Sponsor
}

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
input SponsorOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsor entities by.
  """
  field: SponsorOrderField!
}

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN

  """
  Order sponsors by their relevance to the viewer.
  """
  RELEVANCE
}

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  estimatedNextSponsorsPayoutInCents: Int!

  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  hasSponsorsListing: Boolean!

  """
  Whether the given account is sponsoring this user/organization.
  """
  isSponsoredBy(
    """
    The target account's login.
    """
    accountLogin: String!
  ): Boolean!

  """
  True if the viewer is sponsored by this user/organization.
  """
  isSponsoringViewer: Boolean!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    states: [PullRequestState!]
  ): PullRequestConnection!

  """
  Identifies the date and time when the repository was last pushed to.
  """
  pushedAt: DateTime

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
union OrganizationOrUser = Organization | User

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise from which the user should be removed.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the user to remove from the enterprise.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  The user that was removed from the enterprise.
  """
  user: User

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
input RemoveEnterpriseOrganizationInput {
  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    last: Int
  ): RepositoryTopicConnection!

  """
  The HTTP path for this repository
  """
  resourcePath: URI!

  """
  Returns a single ruleset from the current repository by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!

    """
    Include rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true
  ): RepositoryRuleset

  """
  A list of rulesets for this repository.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  The security policy URL.
  """
  totalOrganizationCount: Int!
}

"""
Information for an uploaded package.
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  How the default commit message will be generated when squash merging a pull request.
  """
  squashMergeCommitMessage: SquashMergeCommitMessage!

  """
  How the default commit title will be generated when squash merging a pull request.
  """
  squashMergeCommitTitle: SquashMergeCommitTitle!

  """
  Whether a squash merge commit can use the pull request title as default.
  """
  squashPrTitleUsedAsDefault: Boolean!
    @deprecated(
      reason: "`squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC."
    )

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

"""
A file in a package version.
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """
    The number for the vulnerability alert to be returned.
    """
    number: Int!
  ): RepositoryVulnerabilityAlert

  """
  A list of vulnerability alerts that are on this repository.
  """
  vulnerabilityAlerts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    last: Int
  ): UserConnection!

  """
  Whether contributors are required to sign off on web-based commits in this repository.
  """
  webCommitSignoffRequired: Boolean!
}

"""
The affiliation of a user to a repository
"""
enum RepositoryAffiliation {
  """
  Repositories that the user has been added to as a collaborator.
  """
  COLLABORATOR

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!
}

"""
Entities that can be sponsored via GitHub Sponsors
"""
union SponsorableItem = Organization | User

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  Nauru
  """
  edges: [SponsorableItemEdge]

  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  nodes: [SponsorableItem]

  """
  New Zealand
  """
  NZ

  """
  Oman
  """
  OM

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  """
  Panama
  """
  PA

  """
  Peru
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  CREATED_AT
}

"""
Represents an owner of a package.
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

  """
  The Node ID of the RemovedFromMergeQueueEvent object
  """
  downloadsTotalCount: Int!
}

"""
A version tag contains the mapping between a tag name and a version.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The reason this pull request was removed from the queue.
  """
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  The platform that was used to pay for the sponsorship.
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

  """
  The user or organization that is being sponsored, the maintainer.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering of the returned package files.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

  """
  The associated sponsorship tier.
  """
  currentTitle: String!

  """
  The Node ID of the RenamedTitleEvent object
  """
  id: ID!

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
An object which has a renamable title
"""
union RenamedTitleSubject = Issue | PullRequest

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
enum SponsorsActivityAction {
  """
  The activity was cancelling a sponsorship.
  """
  CANCELLED_SPONSORSHIP

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

  """
  The activity was scheduling a downgrade or cancellation.
  """
  PENDING_CHANGE

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  The total size in kilobytes of all repositories in the connection. Value will
  never be larger than max 32-bit signed integer.
  """
  TIER_CHANGE
}

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  Serbia
  """
  edges: [SponsorsActivityEdge]

  """
  Russian Federation
  """
  nodes: [SponsorsActivity]

  """
  Rwanda
  """
  RW

  """
  Saudi Arabia
  """
  SA

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  Solomon Islands
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

  """
  Seychelles
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
type RepoAccessAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The source of this permission.
  """
  id: ID!

  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  repositoryDiscussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter discussions to only those that have been answered or not. Defaults to
    including both answered and unanswered discussions.
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: CREATED_AT, direction: DESC}

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  WEEK
}

"""
Parameters to be used for the repository_id condition
"""
type RepositoryIdConditionTarget {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
A subset of repository info.
"""
enum SponsorsCountryOrRegionCode {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  AF

  """
  Antigua and Barbuda
  """
  AG

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddMemberAuditEntry object
  """
  id: ID!

  """
  Albania
  """
  AL

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  AM

  """
  Angola
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

"""
Autogenerated input type of TransferEnterpriseOrganization
"""
input TransferEnterpriseOrganizationInput {
  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland
  """
  AX

  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  BE

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Identifies the date and time when the repository was last pushed to.
  """
  BH

  """
  Burundi
  """
  BI

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  BM

  """
  Brunei Darussalam
  """
  BN

  """
  Bolivia
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  id: ID!

"""
Ways in which star connections can be ordered.
"""
type TransferEnterpriseOrganizationPayload {
  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

  """
  Bahamas
  """
  BS

  """
  Bhutan
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

  """
  Bouvet Island
  """
  BV

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  BY

  """
  Belize
  """
  BZ

  """
  Canada
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Congo (Kinshasa)
  """
  CD

  """
  Central African Republic
  """
  CF

  """
  Congo (Brazzaville)
  """
  CG

  """
  Switzerland
  """
  CH

  """
  Côte d'Ivoire
  """
  CI

"""
Autogenerated input type of StartOrganizationMigration
"""
type RepositoryInvitation implements Node {
  """
  The email address that received the invitation.
  """
  email: String

  """
  The Node ID of the RepositoryInvitation object
  """
  id: ID!

  """
  Cook Islands
  """
  CK

  """
  Chile
  """
  CL

  """
  Cameroon
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoArchivedAuditEntry object
  """
  id: ID!

  """
  China
  """
  CN

  """
  Colombia
  """
  CO

"""
Autogenerated return type of StartOrganizationMigration
"""
type StartOrganizationMigrationPayload {
  """
  Costa Rica
  """
  CR

  """
  Cape Verde
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  CX

  """
  Cyprus
  """
  CY

  """
  Czech Republic
  """
  CZ

  """
  Germany
  """
  DE

  """
  Djibouti
  """
  DJ

  """
  Denmark
  """
  DK

  """
  Dominica
  """
  DM

  """
  Dominican Republic
  """
  DO

  """
  Algeria
  """
  DZ

  """
  Ecuador
  """
  RENAME

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type RepositoryMigration implements Migration & Node {
  """
  The migration flag to continue on error.
  """
  EE

"""
Autogenerated input type of UpdateSponsorshipPreferences
"""
input UpdateUserListInput {
  """
  Egypt
  """
  EG

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  id: ID!

  """
  Eritrea
  """
  ER

  """
  The migration source.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

  """
  Ethiopia
  """
  ET

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

  """
  Falkland Islands
  """
  FK

  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  FR

  """
  Gabon
  """
  GA

  """
  United Kingdom
  """
  GB

  """
  Grenada
  """
  GD

  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  GG

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  Ghana
  """
  GH

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
interface RepositoryNode {
  """
  Gibraltar
  """
  GI

  """
  Greenland
  """
  GL

  """
  Gambia
  """
  GM

  """
  Guinea
  """
  GN

  """
  Guadeloupe
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Equatorial Guinea
  """
  GQ

  """
  Greece
  """
  GR

  """
  South Georgia and South Sandwich Islands
  """
  GS

  """
  Guatemala
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  id: ID!

  """
  Guam
  """
  GU

  """
  Guinea-Bissau
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    last: Int
  ): ProjectColumnConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who originally created the project.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

  """
  The project's name.
  """
  name: String!

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Guyana
  """
  GY

  """
  Hong Kong
  """
  HK

  """
  Heard and McDonald Islands
  """
  HM

  """
  Honduras
  """
  HN

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  HR

  """
  Haiti
  """
  HT

  """
  Hungary
  """
  HU

  """
  Indonesia
  """
  ID

  """
  Ireland
  """
  IE

  """
  Israel
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  LOCK_BRANCH

  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  MERGE_QUEUE_LOCKED_REF

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
New projects that manage issues, pull requests and drafts using tables and boards.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  closed: Boolean!

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS

  """
  Commits pushed to matching refs must have verified signatures.
  """
  createdAt: DateTime!

  """
  Secret scanning
  """
  creator: Actor

  """
  Tag
  """
  databaseId: Int

  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  UPDATE

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  WORKFLOWS

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  number: Int!

  """
  Identifies the date and time when the object was created.
  """
  owner: ProjectV2Owner!

  """
  Identifies the primary key from the database.
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

  """
  The enforcement level of this ruleset
  """
  enforcement: RuleEnforcement!

  """
  The Node ID of the RepositoryRuleset object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

  """
  The HTTP path for this project
  """
  resourcePath: URI!

  """
  Source of ruleset.
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  Target of the ruleset.
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  A list of edges.
  """
  edges: [ProjectV2Edge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  A cursor for use in pagination.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The item at the end of the edge.
  """
  node: ProjectV2
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  createdAt: DateTime!

  """
  The bypass mode for this actor.
  """
  dataType: ProjectV2FieldType!

  """
  For organization owner bypasses, true
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  For role bypasses, the role database ID
  """
  name: String!

  """
  A list of nodes.
  """
  project: ProjectV2!

  """
  Identifies the total count of items in the connection.
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  A cursor for use in pagination.
  """
  createdAt: DateTime!

  """
  The item at the end of the edge.
  """
  dataType: ProjectV2FieldType!

  """
  Tag
  """
  TAG
}

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  Isle of Man
  """
  name: String!

  """
  India
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  Iran
  """
  edges: [ProjectV2FieldEdge]

  """
  Iceland
  """
  nodes: [ProjectV2Field]

  """
  Italy
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  Jersey
  """
  JE

  """
  Jamaica
  """
  JM

"""
Only allow users with bypass permission to update matching refs.
"""
type ProjectV2FieldEdge {
  """
  Jordan
  """
  JO

  """
  Japan
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  Kyrgyzstan
  """
  ASSIGNEES

  """
  Cambodia
  """
  DATE

  """
  Kiribati
  """
  ITERATION

  """
  Comoros
  """
  LABELS

  """
  Saint Kitts and Nevis
  """
  LINKED_PULL_REQUESTS

  """
  Korea, South
  """
  MILESTONE

  """
  Kuwait
  """
  NUMBER

  """
  Cayman Islands
  """
  REPOSITORY

  """
  Kazakhstan
  """
  REVIEWERS

  """
  Laos
  """
  SINGLE_SELECT

  """
  Lebanon
  """
  TEXT

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  Saint Lucia
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  Liechtenstein
  """
  content: ProjectV2ItemContent

  """
  Sri Lanka
  """
  createdAt: DateTime!

  """
  Liberia
  """
  creator: Actor

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  LS

  """
  Lithuania
  """
  LT

  """
  Luxembourg
  """
  LU

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

  """
  Libya
  """
  isArchived: Boolean!

  """
  Morocco
  """
  project: ProjectV2!

  """
  Moldova
  """
  type: ProjectV2ItemType!

  """
  Montenegro
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  Saint Martin (French part)
  """
  edges: [ProjectV2ItemEdge]

  """
  Madagascar
  """
  nodes: [ProjectV2Item]

  """
  Marshall Islands
  """
  MH

  """
  Macedonia
  """
  MK

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
How payment was made for funding a GitHub Sponsors sponsorship.
"""
type ProjectV2ItemEdge {
  """
  Mongolia
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Macau
  """
  createdAt: DateTime!

  """
  Northern Mariana Islands
  """
  creator: Actor

  """
  Martinique
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  Mauritania
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Norway
  """
  NO

  """
  Nepal
  """
  NP

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Russian Federation
  """
  RU

  """
  Rwanda
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfigurationInput!]!

  """
  The actor who created the item.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

"""
Autogenerated input type of RerequestCheckSuite
"""
input RerequestCheckSuiteInput {
  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput {
  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The ID of the published tier to retire.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ItemFieldValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

"""
Autogenerated return type of RevokeMigratorRole
"""
type RevokeMigratorRolePayload {
  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  Parameters used for the `committer_email_pattern` rule type
  """
  committerEmailPattern: CommitterEmailPatternParametersInput

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Parameters used for the `required_deployments` rule type
  """
  requiredDeployments: RequiredDeploymentsParametersInput

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Parameters used for the `workflows` rule type
  """
  workflows: WorkflowsParametersInput
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the environments
    """
    orderBy: Environments = {field: NAME, direction: ASC}
  ): EnvironmentConnection!

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

"""
Ordering options for saved reply connections.
"""
input SavedReplyOrder {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  The project view's name.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  When the advisory was last updated
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  GitHub Actions
  """
  edges: [ProjectV2ViewEdge]

  """
  PHP packages hosted at packagist.org
  """
  nodes: [ProjectV2View]

  """
  The HTTP path listing the repository's projects
  """
  PUB

  """
  Ruby gems hosted at RubyGems.org
  """
  RUBYGEMS

  """
  Rust crates
  """
  RUST

  """
  Swift packages
  """
  SWIFT
}

"""
An edge in a connection.
"""
type ProjectV2ViewEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  Common Vulnerabilities and Exposures Identifier.
  """
  CVE

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  HIGH

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  LOW

  """
  Moderate.
  """
  MODERATE
}

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  cursor: String!

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  CREATED_AT

  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  NUMBER

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  """
  The date and time of the workflow update
  """
  UPDATED_AT
}

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

"""
Autogenerated return type of SetEnterpriseIdentityProvider
"""
type SetEnterpriseIdentityProviderPayload {
  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput {
  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type SmimeSignature implements GitSignature {
  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Vatican City
  """
  VA

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
enum SponsorsCountryOrRegionCode {
  """
  The migration flag to continue on error.
  """
  AD

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Antigua and Barbuda
  """
  AG

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

"""
Represents a object that belongs to a repository.
"""
interface RepositoryNode {
  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  BG

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  LOCK_BRANCH

  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  MERGE_QUEUE_LOCKED_REF

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
type PullRequestChangedFile {
  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REQUIRED_SIGNATURES

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Secret scanning
  """
  SECRET_SCANNING

  """
  Tag
  """
  TAG

  """
  Tag name pattern
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  Only allow users with bypass permission to update matching refs.
  """
  UPDATE

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  WORKFLOWS

  """
  Workflow files cannot be modified.
  """
  WORKFLOW_UPDATES
}

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetBypassActorConnection

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The enforcement level of this ruleset
  """
  enforcement: RuleEnforcement!

  """
  The Node ID of the RepositoryRuleset object
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The type of rule.
    """
    type: RepositoryRuleType
  ): RepositoryRuleConnection

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  repositoryRoleName: String

  """
  Identifies the ruleset associated with the allowed actor
  """
  repositoryRuleset: RepositoryRuleset
}

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  ALWAYS

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRulesetBypassActor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  actorId: ID

  """
  The bypass mode for this actor.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode!

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRuleset]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRuleset
}

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  Branch
  """
  BRANCH

  """
  Tag
  """
  TAG
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  The Node ID of the RepositoryTopic object
  """
  id: ID!

  """
  Congo (Brazzaville)
  """
  CG

  """
  Switzerland
  """
  CH

  """
  Côte d'Ivoire
  """
  CI

  """
  Cook Islands
  """
  CK

  """
  Chile
  """
  CL

  """
  Cameroon
  """
  CM

  """
  China
  """
  CN

  """
  Colombia
  """
  CO

  """
  Costa Rica
  """
  CR

  """
  Cape Verde
  """
  CV

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Cyprus
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

  """
  Czech Republic
  """
  CZ

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  DE

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  DJ

  """
  Denmark
  """
  DK

  """
  Dominica
  """
  DM

"""
Autogenerated input type of UnsubscribeFromNotifications
"""
input UnsubscribeFromNotificationsInput
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  Dominican Republic
  """
  DO

  """
  Algeria
  """
  DZ

  """
  Ecuador
  """
  EC

"""
Autogenerated return type of UnsubscribeFromNotifications
"""
type UnsubscribeFromNotificationsPayload
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  Estonia
  """
  EE

  """
  Egypt
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  id: ID!

"""
Represents an 'unsubscribed' event on a given `Subscribable`.
"""
type UnsubscribedEvent implements Node {
  """
  Western Sahara
  """
  EH

  """
  Eritrea
  """
  ER

  """
  Spain
  """
  ES

  """
  Ethiopia
  """
  ET

  """
  Finland
  """
  FI

  """
  Fiji
  """
  FJ

  """
  Falkland Islands
  """
  FK

  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  FR

  """
  Gabon
  """
  GA

  """
  United Kingdom
  """
  GB

  """
  Grenada
  """
  GD

  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

"""
Parameters to be used for the tag_name_pattern rule
"""
type TagNamePatternParameters {
  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  GG

  """
  Ghana
  """
  GH

  """
  Gibraltar
  """
  GI

  """
  Greenland
  """
  GL

"""
Parameters to be used for the tag_name_pattern rule
"""
input TagNamePatternParametersInput {
  """
  Gambia
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  id: ID!

  """
  Guinea
  """
  GN

  """
  Guadeloupe
  """
  GP

  """
  Equatorial Guinea
  """
  GQ

  """
  Greece
  """
  GR

  """
  South Georgia and South Sandwich Islands
  """
  GS

  """
  Guatemala
  """
  GT

  """
  Guam
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Guinea-Bissau
  """
  GW

  """
  Guyana
  """
  GY

  """
  When was the alert auto-dismissed?
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

  """
  When was the alert created?
  """
  HK

  """
  Heard and McDonald Islands
  """
  HM

  """
  Honduras
  """
  HN

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  dismissComment: String

  """
  The reason the alert was dismissed
  """
  HR

  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  Hungary
  """
  HU

  """
  When was the alert fixed?
  """
  fixedAt: DateTime

  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  Israel
  """
  IL

  """
  Isle of Man
  """
  IM

  """
  India
  """
  IN

  """
  British Indian Ocean Territory
  """
  IO

  """
  Iraq
  """
  IQ

  """
  Iran
  """
  IR

  """
  Iceland
  """
  IS

  """
  Italy
  """
  IT

  """
  Jersey
  """
  JE

  """
  Jamaica
  """
  JM

  """
  Jordan
  """
  JO

  """
  Japan
  """
  JP

  """
  Kenya
  """
  KE

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  KG

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  KH

  """
  Kiribati
  """
  KI

  """
  An alert that has been automatically closed by Dependabot.
  """
  AUTO_DISMISSED

  """
  An alert that has been manually closed by a user.
  """
  KM

  """
  Saint Kitts and Nevis
  """
  KN

  """
  Korea, South
  """
  KR

  """
  Kuwait
  """
  KW

  """
  Cayman Islands
  """
  KY

  """
  Kazakhstan
  """
  KZ

  """
  Laos
  """
  union: Boolean = false

  """
  Lebanon
  """
  LB

  """
  Saint Lucia
  """
  LC

  """
  Liechtenstein
  """
  LI

  """
  Sri Lanka
  """
  LK

  """
  Liberia
  """
  LR

  """
  Lesotho
  """
  LS

  """
  Lithuania
  """
  LT

  """
  Luxembourg
  """
  LU

  """
  Latvia
  """
  LV

  """
  Libya
  """
  LY

"""
Types that can be requested reviewers.
"""
union RequestedReviewer = Bot | Mannequin | Team | User

  """
  Monaco
  """
  MC

  """
  Moldova
  """
  MD

  """
  Montenegro
  """
  ME

  """
  Saint Martin (French part)
  """
  MF

  """
  Madagascar
  """
  MG

  """
  Marshall Islands
  """
  MH

  """
  Macedonia
  """
  MK

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type RequiredStatusCheckDescription {
  """
  Mali
  """
  ML

  """
  Myanmar
  """
  MM

  """
  Mongolia
  """
  MN

  """
  Macau
  """
  MO

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfiguration!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
input RequiredStatusChecksParametersInput {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfigurationInput!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Autogenerated input type of RerequestCheckSuite
"""
input RerequestCheckSuiteInput {
  """
  Northern Mariana Islands
  """
  MP

  """
  Martinique
  """
  MQ

  """
  Mauritania
  """
  MR

  """
  Montserrat
  """
  MS

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the thread to resolve
  """
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The thread to resolve.
  """
  thread: PullRequestReviewThread
}

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the published tier to retire.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was retired.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  The description of the revert pull request.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates whether the revert pull request should be a draft.
  """
  draft: Boolean = false

  """
  The ID of the pull request to revert.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The title of the revert pull request.
  """
  title: String
}

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that was reverted.
  """
  pullRequest: PullRequest

  """
  The new pull request that reverts the input pull request.
  """
  revertPullRequest: PullRequest
}

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  actor: ReviewDismissalAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the ReviewDismissalAllowance object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union ReviewDismissalAllowanceActor = App | Team | User

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  A list of edges.
  """
  edges: [ReviewDismissalAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewDismissalAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewDismissalAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewDismissalAllowance
}

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Identifies the optional message associated with the 'review_dismissed' event.
  """
  dismissalMessage: String

  """
  Identifies the optional message associated with the event, rendered to HTML.
  """
  dismissalMessageHTML: String

  """
  The Node ID of the ReviewDismissedEvent object
  """
  id: ID!

  """
  Identifies the previous state of the review with the 'review_dismissed' event.
  """
  previousReviewState: PullRequestReviewState!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the commit which caused the review to become stale.
  """
  pullRequestCommit: PullRequestCommit

  """
  The HTTP path for this review dismissed event.
  """
  resourcePath: URI!

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
type PullRequestTimelineConnection {
  """
  Identifies the review associated with the 'review_dismissed' event.
  """
  review: PullRequestReview

  """
  The HTTP URL for this review dismissed event.
  """
  url: URI!
}

"""
A request for a user to review a pull request.
"""
type ReviewRequest implements Node {
  """
  Whether this request was created for a code owner
  """
  asCodeOwner: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ReviewRequest object
  """
  id: ID!

  """
  Identifies the pull request associated with this review request.
  """
  pullRequest: PullRequest!

  """
  The reviewer that is requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
An item in a pull request timeline
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

"""
The connection type for PullRequestTimelineItems.
"""
type ReviewRequestConnection {
  """
  A list of edges.
  """
  edges: [ReviewRequestEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewRequest
}

"""
Represents an 'review_request_removed' event on a given pull request.
"""
type ReviewRequestRemovedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestRemovedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review request was removed.
  """
  requestedReviewer: RequestedReviewer
}

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review was requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type ReviewStatusHovercardContext implements HovercardContext {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  The current status of the pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision
}

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
input RevokeEnterpriseOrganizationsMigratorRoleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of the user to revoke the migrator role
  """
  login: String!
}

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organizations that had the migrator role revoked for the given user.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection
}

"""
Autogenerated input type of RevokeMigratorRole
"""
input RevokeMigratorRoleInput {
  """
  The user login or Team slug to revoke the migrator role from.
  """
  actor: String!

  """
  Specifies the type of the actor, can be either USER or TEAM.
  """
  actorType: ActorType!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization that the user/team belongs to.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of RevokeMigratorRole
"""
type RevokeMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Possible roles a user may have in relation to an organization.
"""
enum RoleInOrganization {
  """
  A user who is a direct member of the organization.
  """
  DIRECT_MEMBER

  """
  A user with full administrative access to the organization.
  """
  OWNER

  """
  A user who is unaffiliated with the organization.
  """
  UNAFFILIATED
}

"""
The level of enforcement for a rule or ruleset.
"""
enum RuleEnforcement {
  """
  Rules will be enforced
  """
  ACTIVE

  """
  Do not evaluate or enforce rules
  """
  DISABLED

  """
  Allow admins to test rules before enforcing them. Admins can view insights on
  the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
  """
  EVALUATE
}

"""
Types which can be parameters for `RepositoryRule` objects.
"""
union RuleParameters =
    BranchNamePatternParameters
  | CommitAuthorEmailPatternParameters
  | CommitMessagePatternParameters
  | CommitterEmailPatternParameters
  | PullRequestParameters
  | RequiredDeploymentsParameters
  | RequiredStatusChecksParameters
  | TagNamePatternParameters
  | UpdateParameters
  | WorkflowsParameters

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  Parameters used for the `branch_name_pattern` rule type
  """
  branchNamePattern: BranchNamePatternParametersInput

  """
  Parameters used for the `commit_author_email_pattern` rule type
  """
  commitAuthorEmailPattern: CommitAuthorEmailPatternParametersInput

  """
  Parameters used for the `commit_message_pattern` rule type
  """
  commitMessagePattern: CommitMessagePatternParametersInput

  """
  Parameters used for the `committer_email_pattern` rule type
  """
  committerEmailPattern: CommitterEmailPatternParametersInput

  """
  Parameters used for the `pull_request` rule type
  """
  pullRequest: PullRequestParametersInput

  """
  Parameters used for the `required_deployments` rule type
  """
  requiredDeployments: RequiredDeploymentsParametersInput

  """
  Parameters used for the `required_status_checks` rule type
  """
  requiredStatusChecks: RequiredStatusChecksParametersInput

  """
  Parameters used for the `tag_name_pattern` rule type
  """
  tagNamePattern: TagNamePatternParametersInput

  """
  Parameters used for the `update` rule type
  """
  update: UpdateParametersInput

  """
  Parameters used for the `workflows` rule type
  """
  workflows: WorkflowsParametersInput
}

"""
Types which can have `RepositoryRule` objects.
"""
union RuleSource = Organization | Repository

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum SamlDigestAlgorithm {
  """
  SHA1
  """
  SHA1

  """
  SHA256
  """
  SHA256

  """
  SHA384
  """
  SHA384

  """
  SHA512
  """
  SHA512
}

"""
The possible signature algorithms used to sign SAML requests for a Identity Provider.
"""
enum SamlSignatureAlgorithm {
  """
  RSA-SHA1
  """
  RSA_SHA1

  """
  RSA-SHA256
  """
  RSA_SHA256

  """
  RSA-SHA384
  """
  RSA_SHA384

  """
  RSA-SHA512
  """
  RSA_SHA512
}

"""
A Saved Reply is text a user can use to reply quickly.
"""
type SavedReply implements Node {
  """
  The body of the saved reply.
  """
  body: String!

  """
  The saved reply body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the SavedReply object
  """
  id: ID!

  """
  The title of the saved reply.
  """
  title: String!

  """
  The user that saved this reply.
  """
  user: Actor
}

"""
The connection type for SavedReply.
"""
type SavedReplyConnection {
  """
  A list of edges.
  """
  edges: [SavedReplyEdge]

  """
  A list of nodes.
  """
  nodes: [SavedReply]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SavedReply
}

"""
Ordering options for saved reply connections.
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  The SHA after the push
  """
  nextSha: GitObjectID

  """
  The permalink for this push.
  """
  permalink: URI!

  """
  The SHA before the push
  """
  previousSha: GitObjectID

  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order saved replies by.
  """
  field: SavedReplyOrderField!
}

"""
Properties by which saved reply connections can be ordered.
"""
enum SavedReplyOrderField {
  """
  Order saved reply by when they were updated.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the PushAllowance object
  """
  id: ID!
}

"""
The results of a search.
"""
union SearchResultItem = App | Discussion | Issue | MarketplaceListing | Organization | PullRequest | Repository | User

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
type SearchResultItemConnection {
  """
  The total number of pieces of code that matched the search query. Regardless
  of the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  codeCount: Int!

  """
  The total number of discussions that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  discussionCount: Int!

  """
  A list of edges.
  """
  edges: [SearchResultItemEdge]

  """
  The total number of issues that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  issueCount: Int!

  """
  A list of nodes.
  """
  nodes: [SearchResultItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of repositories that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  repositoryCount: Int!

  """
  The total number of users that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  userCount: Int!

  """
  The total number of wiki pages that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  wikiCount: Int!
}

"""
An edge in a connection.
"""
type SearchResultItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SearchResultItem

  """
  Text matches on the result found.
  """
  textMatches: [TextMatch]
}

"""
Represents the individual results of a search.
"""
enum SearchType {
  """
  Returns matching discussions in repositories.
  """
  DISCUSSION

  """
  Returns results matching issues in repositories.
  """
  ISSUE

  """
  Returns results matching repositories.
  """
  REPOSITORY

  """
  Returns results matching users and organizations on GitHub.
  """
  USER
}

"""
A GitHub Security Advisory
"""
type SecurityAdvisory implements Node {
  """
  The classification of the advisory
  """
  classification: SecurityAdvisoryClassification!

  """
  The CVSS associated with this advisory
  """
  cvss: CVSS!

  """
  CWEs associated with this Advisory
  """
  cwes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CWEConnection!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  This is a long plaintext description of the advisory
  """
  description: String!

  """
  The GitHub Security Advisory ID
  """
  ghsaId: String!

  """
  The Node ID of the SecurityAdvisory object
  """
  id: ID!

  """
  A list of identifiers for this advisory
  """
  identifiers: [SecurityAdvisoryIdentifier!]!

  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  notificationsPermalink: URI

  """
  The organization that originated the advisory
  """
  origin: String!

  """
  The permalink for the advisory
  """
  permalink: URI

  """
  When the advisory was published
  """
  publishedAt: DateTime!

  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  search(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    query: String!

    """
    The types of search items to search within.
    """
    type: SearchType!
  ): SearchResultItemConnection!

  """
  The severity of the advisory
  """
  severity: SecurityAdvisorySeverity!

  """
  A short plaintext summary of the advisory
  """
  summary: String!

  """
  When the advisory was last updated
  """
  updatedAt: DateTime!

  """
  Vulnerabilities associated with this Advisory
  """
  vulnerabilities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the returned topics.
    """
    orderBy: SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}

    """
    A package name to filter vulnerabilities by.
    """
    package: String

    """
    A list of severities to filter vulnerabilities by.
    """
    severities: [SecurityAdvisorySeverity!]
  ): SecurityVulnerabilityConnection!

  """
  When the advisory was withdrawn, if it has been withdrawn
  """
  withdrawnAt: DateTime
}

"""
Classification of the advisory.
"""
enum SecurityAdvisoryClassification {
  """
  Classification of general advisories.
  """
  GENERAL

  """
  Classification of malware advisories.
  """
  MALWARE
}

"""
The connection type for SecurityAdvisory.
"""
type SecurityAdvisoryConnection {
  """
  A list of edges.
  """
  edges: [SecurityAdvisoryEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityAdvisory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible ecosystems of a security vulnerability's package.
"""
enum SecurityAdvisoryEcosystem {
  """
  GitHub Actions
  """
  ACTIONS

  """
  PHP packages hosted at packagist.org
  """
  COMPOSER

  """
  Erlang/Elixir packages hosted at hex.pm
  """
  ERLANG

  """
  Go modules
  """
  GO

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

  """
  Python packages hosted at PyPI.org
  """
  PIP

  """
  Dart packages hosted at pub.dev
  """
  PUB

  """
  Ruby gems hosted at RubyGems.org
  """
  RUBYGEMS

  """
  Rust crates
  """
  RUST

  """
  Swift packages
  """
  SWIFT
}

"""
An edge in a connection.
"""
type SecurityAdvisoryEdge {
  """
  A cursor for use in pagination.
  """
  databaseId: Int

  """
  The Node ID of the Reactable object
  """
  id: ID!

  """
  The item at the end of the edge.
  """
  node: SecurityAdvisory
}

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  The identifier type, e.g. GHSA, CVE
  """
  type: String!

  """
  The identifier
  """
  value: String!
}

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter {
  """
  The identifier type.
  """
  type: SecurityAdvisoryIdentifierType!

  """
  The identifier string. Supports exact or partial matching.
  """
  value: String!
}

"""
Identifier formats available for advisories.
"""
enum SecurityAdvisoryIdentifierType {
  """
  Common Vulnerabilities and Exposures Identifier.
  """
  CVE

  """
  GitHub Security Advisory ID.
  """
  GHSA
}

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security advisories by.
  """
  field: SecurityAdvisoryOrderField!
}

"""
Properties by which security advisory connections can be ordered.
"""
enum SecurityAdvisoryOrderField {
  """
  Order advisories by publication time
  """
  PUBLISHED_AT

  """
  Order advisories by update time
  """
  UPDATED_AT
}

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
  """
  databaseId: Int

  """
  The Node ID of the Reaction object
  """
  id: ID!

  """
  The package name
  """
  name: String!
}

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  The package name or version
  """
  identifier: String!
}

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  A publicly accessible reference
  """
  url: URI!
}

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  Critical.
  """
  CRITICAL

  """
  High.
  """
  HIGH

  """
  Low.
  """
  LOW

  """
  Moderate.
  """
  MODERATE
}

"""
An individual vulnerability within an Advisory
"""
type SecurityVulnerability {
  """
  The Advisory associated with this Vulnerability
  """
  advisory: SecurityAdvisory!

  """
  The first version containing a fix for the vulnerability
  """
  firstPatchedVersion: SecurityAdvisoryPackageVersion

  """
  A description of the vulnerable package
  """
  package: SecurityAdvisoryPackage!

  """
  The severity of the vulnerability within this package
  """
  severity: SecurityAdvisorySeverity!

  """
  When the vulnerability was last updated
  """
  updatedAt: DateTime!

  """
  A string that describes the vulnerable package versions.
  This string follows a basic syntax with a few forms.
  + `= 0.2.0` denotes a single vulnerable version.
  + `<= 1.0.8` denotes a version range up to and including the specified version
  + `< 0.1.11` denotes a version range up to, but excluding, the specified version
  + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
  + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
  """
  vulnerableVersionRange: String!
}

"""
The connection type for SecurityVulnerability.
"""
type SecurityVulnerabilityConnection {
  """
  A list of edges.
  """
  edges: [SecurityVulnerabilityEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityVulnerability]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SecurityVulnerabilityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityVulnerability
}

"""
Ordering options for security vulnerability connections
"""
input SecurityVulnerabilityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security vulnerabilities by.
  """
  field: SecurityVulnerabilityOrderField!
}

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  """
  Order vulnerability by update time
  """
  UPDATED_AT
}

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The digest algorithm used to sign SAML requests for the identity provider.
  """
  digestMethod: SamlDigestAlgorithm!

  """
  The ID of the enterprise on which to set an identity provider.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: String!

  """
  The Issuer Entity ID for the SAML identity provider
  """
  issuer: String

  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: SamlSignatureAlgorithm!

  """
  The URL endpoint for the identity provider's SAML SSO.
  """
  ssoUrl: URI!
}

"""
Autogenerated return type of SetEnterpriseIdentityProvider
"""
type SetEnterpriseIdentityProviderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The identity provider for the enterprise.
  """
  identityProvider: EnterpriseIdentityProvider
}

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the organization to set a limit for.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
type SetOrganizationInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization that the interaction limit was set for.
  """
  organization: Organization
}

"""
Autogenerated input type of SetRepositoryInteractionLimit
"""
input SetRepositoryInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReadyForReviewEvent object
  """
  id: ID!

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the repository to set a limit for.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that the interaction limit was set for.
  """
  repository: Repository
}

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  branchProtectionRule: BranchProtectionRule

  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    The head ref to compare against.
    """
    headRef: String!
  ): Comparison

  """
  The Node ID of the Ref object
  """
  id: ID!

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the user to set a limit for.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of rules from active Repository and Organization rulesets that apply to this ref.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repository rules.
    """
    orderBy: RepositoryRuleOrder = {field: UPDATED_AT, direction: DESC}
  ): RepositoryRuleConnection

  """
  The object the ref points to. Returns null when object does not exist.
  """
  user: User
}

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type SmimeSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  True if the signature is valid and verified by GitHub.
  """
  isValid: Boolean!

  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """
    The number for the vulnerability alert to be returned.
    """
    number: Int!
  ): RepositoryVulnerabilityAlert

  """
  A list of vulnerability alerts that are on this repository.
  """
  payload: String!

  """
  ASCII-armored signature header from object.
  """
  signature: String!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Ways in which lists of git refs can be ordered upon return.
"""
input RefOrder {
  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Whether contributors are required to sign off on web-based commits in this repository.
  """
  webCommitSignoffRequired: Boolean!
}

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Name of the social media account as it appears on the profile.
  """
  displayName: String!

  """
  Software or company that hosts the social media account.
  """
  provider: SocialAccountProvider!

  """
  URL of the social media account.
  """
  url: URI!
}

"""
The connection type for SocialAccount.
"""
type SocialAccountConnection {
  """
  A list of edges.
  """
  edges: [SocialAccountEdge]

  """
  A list of nodes.
  """
  nodes: [SocialAccount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SocialAccount
}

"""
Branch protection rules that are enforced on the viewer.
"""
enum SocialAccountProvider {
  """
  Social media and networking website.
  """
  FACEBOOK

  """
  Catch-all for social media providers that do not yet have specific handling.
  """
  GENERIC

  """
  Fork of Mastodon with a greater focus on local posting.
  """
  HOMETOWN

  """
  Social media website with a focus on photo and video sharing.
  """
  INSTAGRAM

  """
  Professional networking website.
  """
  LINKEDIN

  """
  Open-source federated microblogging service.
  """
  MASTODON

  """
  JavaScript package registry.
  """
  NPM

  """
  Social news aggregation and discussion website.
  """
  REDDIT

  """
  Live-streaming service.
  """
  TWITCH

  """
  Microblogging website.
  """
  TWITTER

  """
  Online video platform.
  """
  YOUTUBE
}

"""
Entities that can sponsor others via GitHub Sponsors
"""
union Sponsor = Organization | User

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The amount in cents.
  """
  amountInCents: Int!

  """
  The amount in USD, formatted as a string.
  """
  formattedAmount: String!

  """
  The sponsor's GitHub account.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReferencedEvent object
  """
  id: ID!

  """
  The maintainer's GitHub account.
  """
  sponsorable: Sponsorable!
}

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  A list of edges.
  """
  edges: [SponsorAndLifetimeValueEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorAndLifetimeValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorAndLifetimeValue
}

"""
Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
"""
input SponsorAndLifetimeValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order results by.
  """
  field: SponsorAndLifetimeValueOrderField!
}

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  LIFETIME_VALUE

  """
  Order results by the sponsor's login (username).
  """
  SPONSOR_LOGIN

  """
  Order results by the sponsor's relevance to the viewer.
  """
  SPONSOR_RELEVANCE
}

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  A list of edges.
  """
  edges: [SponsorEdge]

  """
  A list of nodes.
  """
  nodes: [Sponsor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!

  """
  The total size in kilobytes of all repositories in the connection. Value will
  never be larger than max 32-bit signed integer.
  """
  totalDiskUsage: Int!
}

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type SponsorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Sponsor
}

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
input SponsorOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsor entities by.
  """
  field: SponsorOrderField!
}

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN

  """
  Order sponsors by their relevance to the viewer.
  """
  RELEVANCE
}

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  descriptionHTML: HTML

  """
  The Node ID of the Release object
  """
  id: ID!

  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  hasSponsorsListing: Boolean!

  """
  Whether the given account is sponsoring this user/organization.
  """
  isSponsoredBy(
    """
    The target account's login.
    """
    accountLogin: String!
  ): Boolean!

  """
  True if the viewer is sponsored by this user/organization.
  """
  isSponsoringViewer: Boolean!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!
}

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A name to filter the assets by.
    """
    name: String
  ): ReleaseAssetConnection!

  """
  The repository that the release belongs to.
  """
  repository: Repository!

  """
  The HTTP path for this issue
  """
  resourcePath: URI!

  """
  A description of the release, rendered to HTML without any links in it.
  """
  shortDescriptionHTML(
    """
    How many characters to return.
    """
    repositoryId: ID
  ): DiscussionCommentConnection!
}

"""
An edge in a connection.
"""
type RepositoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Repository
}

"""
Parameters to be used for the repository_id condition
"""
type RepositoryIdConditionTarget {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
A subset of repository info.
"""
interface RepositoryInfo {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The description of the repository.
  """
  description: String

  """
  The description of the repository rendered to HTML.
  """
  downloadUrl: URI!

  """
  The Node ID of the ReleaseAsset object
  """
  id: ID!

  """
  Returns how many forks there are of this repository in the whole network.
  """
  forkCount: Int!

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  hasIssuesEnabled: Boolean!

  """
  Indicates if the repository has the Projects feature enabled.
  """
  hasProjectsEnabled: Boolean!

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  hasWikiEnabled: Boolean!

  """
  The repository's URL.
  """
  homepageUrl: URI

  """
  Indicates if the repository is unmaintained.
  """
  isArchived: Boolean!

  """
  Identifies if the repository is a fork.
  """
  isFork: Boolean!

  """
  Indicates if a repository is either owned by an organization, or is a private fork of an organization repository.
  """
  isInOrganization: Boolean!

  """
  Indicates if the repository has been locked or not.
  """
  isLocked: Boolean!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Identifies the date and time when the repository was last pushed to.
  """
  pushedAt: DateTime

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  email: String

  """
  The Node ID of the RepositoryInvitation object
  """
  id: ID!

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!
}

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise from which the user should be removed.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the user to remove from the enterprise.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  The user that was removed from the enterprise.
  """
  user: User

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
union SponsorableItem = Organization | User

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  Nicaragua
  """
  edges: [SponsorableItemEdge]

  """
  Netherlands
  """
  nodes: [SponsorableItem]

  """
  Norway
  """
  NO

  """
  Nepal
  """
  NP

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  """
  Nauru
  """
  NR

  """
  Niue
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  RENAME

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type RepositoryMigration implements Migration & Node {
  """
  The migration flag to continue on error.
  """
  id: ID!

  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  id: ID!

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

  """
  The migration source.
  """
  sponsorable: Sponsorable!

  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  sponsorsTier: SponsorsTier

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  timestamp: DateTime

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  The activity was cancelling a sponsorship.
  """
  CANCELLED_SPONSORSHIP

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

  """
  The activity was scheduling a downgrade or cancellation.
  """
  PENDING_CHANGE

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  TIER_CHANGE
}

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

  """
  The Node ID of the RemovedFromMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The reason this pull request was removed from the queue.
  """
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
type SponsorsActivityConnection {
  """
  Paraguay
  """
  edges: [SponsorsActivityEdge]

  """
  Qatar
  """
  databaseId: Int

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  id: ID!

  """
  Reunion
  """
  RE

  """
  Romania
  """
  RO

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  Serbia
  """
  RS

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  currentTitle: String!

  """
  The Node ID of the RenamedTitleEvent object
  """
  id: ID!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
input ReopenIssueInput {
  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
interface RepositoryNode {
  """
  Russian Federation
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repositories by.
  """
  field: RepositoryOrderField!
}

"""
Properties by which repository connections can be ordered.
"""
enum RepositoryOrderField {
  """
  Order repositories by creation time
  """
  CREATED_AT

  """
  Order repositories by name
  """
  NAME

  """
  Order repositories by push time
  """
  PUSHED_AT

  """
  Order repositories by number of stargazers
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

  """
  Order repositories by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Repository.
"""
interface RepositoryOwner {
  """
  A URL pointing to the owner's public avatar.
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The Node ID of the RepositoryOwner object
  """
  id: ID!

  """
  The username used to login.
  """
  login: String!

  """
  A list of repositories that the user owns.
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  id: ID!

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Find Repository.
  """
  repository(
    """
    Follow repository renames. If disabled, a repository referenced by its old name will return an error.
    """
    followRenames: Boolean = true

    """
    Name of Repository to find.
    """
    name: String!
  ): Repository

  """
  The HTTP URL for the owner.
  """
  resourcePath: URI!

  """
  The HTTP URL for the owner.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  PUBLIC
}

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddMemberAuditEntry object
  """
  id: ID!

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  LOCK_BRANCH

  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  id: ID!

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REQUIRED_SIGNATURES

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Secret scanning
  """
  SECRET_SCANNING

  """
  Tag
  """
  TAG

  """
  Tag name pattern
  """
  TAG_NAME_PATTERN

  """
  Only allow users with bypass permission to update matching refs.
  """
  UPDATE

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  WORKFLOWS

  """
  Workflow files cannot be modified.
  """
  WORKFLOW_UPDATES
}

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetBypassActorConnection

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The enforcement level of this ruleset
  """
  enforcement: RuleEnforcement!

  """
  The Node ID of the RepositoryRuleset object
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoArchivedAuditEntry object
  """
  id: ID!

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  repositoryRoleName: String

  """
  Identifies the ruleset associated with the allowed actor
  """
  repositoryRuleset: RepositoryRuleset
}

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  ALWAYS

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRulesetBypassActor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  actorId: ID

  """
  The bypass mode for this actor.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode!

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRuleset]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRuleset
}

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  Branch
  """
  BRANCH

  """
  Tag
  """
  TAG
}

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  Andorra
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  AF

  """
  Antigua and Barbuda
  """
  AG

  """
  Anguilla
  """
  AI

  """
  Albania
  """
  AL

  """
  Armenia
  """
  AM

  """
  Angola
  """
  AO

  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland
  """
  AX

  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  id: ID!

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Bahrain
  """
  BH

"""
Entities that can be subscribed to for web and email notifications.
"""
interface SubscribableThread {
  """
  Burundi
  """
  BI

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  BM

  """
  Brunei Darussalam
  """
  BN

  """
  Bolivia
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  BR

  """
  Bahamas
  """
  BS

  """
  Bhutan
  """
  BT

  """
  Bouvet Island
  """
  BV

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  BY

  """
  Belize
  """
  BZ

  """
  Canada
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Congo (Kinshasa)
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  id: ID!

  """
  Central African Republic
  """
  CF

  """
  Congo (Brazzaville)
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Switzerland
  """
  CH

  """
  Côte d'Ivoire
  """
  CI

  """
  Cook Islands
  """
  CK

  """
  Chile
  """
  CL

  """
  Cameroon
  """
  CM

  """
  China
  """
  CN

  """
  Colombia
  """
  CO

  """
  When was the alert auto-dismissed?
  """
  autoDismissedAt: DateTime

  """
  When was the alert created?
  """
  CR

  """
  Cape Verde
  """
  CV

  """
  Curaçao
  """
  CW

  """
  Comment explaining the reason the alert was dismissed
  """
  dismissComment: String

  """
  The reason the alert was dismissed
  """
  CX

  """
  Cyprus
  """
  CY

  """
  Czech Republic
  """
  CZ

  """
  When was the alert fixed?
  """
  fixedAt: DateTime

  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  id: ID!

  """
  Denmark
  """
  DK

  """
  Dominica
  """
  DM

  """
  Dominican Republic
  """
  DO

"""
Parameters to be used for the tag_name_pattern rule
"""
input TagNamePatternParametersInput {
  """
  Algeria
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  Ecuador
  """
  EC

  """
  Estonia
  """
  EE

  """
  Egypt
  """
  EG

  """
  Western Sahara
  """
  EH

"""
A team of users in an organization.
"""
enum ThreadSubscriptionFormAction {
  """
  Eritrea
  """
  ER

  """
  Spain
  """
  ES

  """
  Ethiopia
  """
  ET

  """
  Finland
  """
  FI

  """
  Fiji
  """
  FJ

"""
The possible states of a subscription.
"""
enum ThreadSubscriptionState {
  """
  Falkland Islands
  """
  FK

  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  FR

  """
  An alert that has been automatically closed by Dependabot.
  """
  AUTO_DISMISSED

  """
  An alert that has been manually closed by a user.
  """
  GA

  """
  United Kingdom
  """
  GB

  """
  Grenada
  """
  GD

  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  GG

  """
  Ghana
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  Gibraltar
  """
  GI

  """
  Greenland
  """
  GL

  """
  Gambia
  """
  GM

  """
  Guinea
  """
  GN

  """
  Guadeloupe
  """
  GP

  """
  Equatorial Guinea
  """
  GQ

  """
  Greece
  """
  GR

  """
  South Georgia and South Sandwich Islands
  """
  GS

  """
  Guatemala
  """
  GT

  """
  Guam
  """
  GU

"""
Types that can be requested reviewers.
"""
union RequestedReviewer = Bot | Mannequin | Team | User

  """
  Guyana
  """
  GY

  """
  Hong Kong
  """
  HK

  """
  Heard and McDonald Islands
  """
  HM

  """
  Honduras
  """
  HN

  """
  Croatia
  """
  HR

  """
  Haiti
  """
  HT

  """
  Hungary
  """
  HU

  """
  Indonesia
  """
  ID

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type RequiredStatusCheckDescription {
  """
  Ireland
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Israel
  """
  IL

  """
  Isle of Man
  """
  IM

  """
  India
  """
  IN

  """
  British Indian Ocean Territory
  """
  IO

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfiguration!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
input RequiredStatusChecksParametersInput {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfigurationInput!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Autogenerated input type of RerequestCheckSuite
"""
enum SponsorsTierOrderField {
  """
  Iraq
  """
  IQ

  """
  Iran
  """
  IR

  """
  Iceland
  """
  IS

  """
  Italy
  """
  IT

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the thread to resolve
  """
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The thread to resolve.
  """
  thread: PullRequestReviewThread
}

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the published tier to retire.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was retired.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  The description of the revert pull request.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates whether the revert pull request should be a draft.
  """
  draft: Boolean = false

  """
  The ID of the pull request to revert.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The title of the revert pull request.
  """
  title: String
}

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that was reverted.
  """
  pullRequest: PullRequest

  """
  The new pull request that reverts the input pull request.
  """
  revertPullRequest: PullRequest
}

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The actor that can dismiss.
  """
  actor: ReviewDismissalAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the ReviewDismissalAllowance object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union ReviewDismissalAllowanceActor = App | Team | User

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  A list of edges.
  """
  edges: [ReviewDismissalAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewDismissalAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewDismissalAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  The item at the end of the edge.
  """
  node: ReviewDismissalAllowance
}

"""
Represents a 'review_dismissed' event on a given issue or pull request.
"""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Identifies the optional message associated with the 'review_dismissed' event.
  """
  dismissalMessage: String

  """
  Identifies the optional message associated with the event, rendered to HTML.
  """
  dismissalMessageHTML: String

  """
  The Node ID of the ReviewDismissedEvent object
  """
  id: ID!

  """
  Identifies the previous state of the review with the 'review_dismissed' event.
  """
  previousReviewState: PullRequestReviewState!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the commit which caused the review to become stale.
  """
  pullRequestCommit: PullRequestCommit

  """
  The HTTP path for this review dismissed event.
  """
  resourcePath: URI!

  """
  Identifies the review associated with the 'review_dismissed' event.
  """
  review: PullRequestReview

  """
  The HTTP URL for this review dismissed event.
  """
  url: URI!
}

"""
A request for a user to review a pull request.
"""
type ReviewRequest implements Node {
  """
  Whether this request was created for a code owner
  """
  asCodeOwner: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ReviewRequest object
  """
  id: ID!

  """
  Identifies the pull request associated with this review request.
  """
  pullRequest: PullRequest!

  """
  The reviewer that is requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
The connection type for ReviewRequest.
"""
type ReviewRequestConnection {
  """
  A list of edges.
  """
  edges: [ReviewRequestEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewRequest]

  """
  Information to aid in pagination.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewRequest
}

"""
Represents an 'review_request_removed' event on a given pull request.
"""
type ReviewRequestRemovedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestRemovedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review request was removed.
  """
  requestedReviewer: RequestedReviewer
}

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review was requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type ReviewStatusHovercardContext implements HovercardContext {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  The current status of the pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision
}

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
input RevokeEnterpriseOrganizationsMigratorRoleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of the user to revoke the migrator role
  """
  login: String!
}

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The organizations that had the migrator role revoked for the given user.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection
}

"""
Autogenerated input type of RevokeMigratorRole
"""
input RevokeMigratorRoleInput {
  """
  The user login or Team slug to revoke the migrator role from.
  """
  actor: String!

  """
  Specifies the type of the actor, can be either USER or TEAM.
  """
  actorType: ActorType!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization that the user/team belongs to.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of RevokeMigratorRole
"""
type RevokeMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Possible roles a user may have in relation to an organization.
"""
enum RoleInOrganization {
  """
  A user who is a direct member of the organization.
  """
  DIRECT_MEMBER

  """
  A user with full administrative access to the organization.
  """
  OWNER

  """
  A user who is unaffiliated with the organization.
  """
  UNAFFILIATED
}

"""
The level of enforcement for a rule or ruleset.
"""
enum RuleEnforcement {
  """
  Rules will be enforced
  """
  ACTIVE

  """
  Do not evaluate or enforce rules
  """
  DISABLED

  """
  Allow admins to test rules before enforcing them. Admins can view insights on
  the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
  """
  EVALUATE
}

"""
Types which can be parameters for `RepositoryRule` objects.
"""
union RuleParameters =
    BranchNamePatternParameters
  | CommitAuthorEmailPatternParameters
  | CommitMessagePatternParameters
  | CommitterEmailPatternParameters
  | PullRequestParameters
  | RequiredDeploymentsParameters
  | RequiredStatusChecksParameters
  | TagNamePatternParameters
  | UpdateParameters
  | WorkflowsParameters

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  Parameters used for the `branch_name_pattern` rule type
  """
  branchNamePattern: BranchNamePatternParametersInput

  """
  Parameters used for the `commit_author_email_pattern` rule type
  """
  commitAuthorEmailPattern: CommitAuthorEmailPatternParametersInput

  """
  Parameters used for the `commit_message_pattern` rule type
  """
  commitMessagePattern: CommitMessagePatternParametersInput

  """
  Parameters used for the `committer_email_pattern` rule type
  """
  committerEmailPattern: CommitterEmailPatternParametersInput

  """
  Parameters used for the `pull_request` rule type
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Parameters used for the `required_deployments` rule type
  """
  requiredDeployments: RequiredDeploymentsParametersInput

  """
  Parameters used for the `required_status_checks` rule type
  """
  requiredStatusChecks: RequiredStatusChecksParametersInput

  """
  Parameters used for the `tag_name_pattern` rule type
  """
  tagNamePattern: TagNamePatternParametersInput

  """
  Parameters used for the `update` rule type
  """
  update: UpdateParametersInput

  """
  Parameters used for the `workflows` rule type
  """
  workflows: WorkflowsParametersInput
}

"""
Types which can have `RepositoryRule` objects.
"""
union RuleSource = Organization | Repository

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum SamlDigestAlgorithm {
  """
  SHA1
  """
  SHA1

  """
  SHA256
  """
  SHA256

  """
  SHA384
  """
  SHA384

  """
  SHA512
  """
  SHA512
}

"""
The possible signature algorithms used to sign SAML requests for a Identity Provider.
"""
enum SamlSignatureAlgorithm {
  """
  RSA-SHA1
  """
  RSA_SHA1

  """
  RSA-SHA256
  """
  RSA_SHA256

  """
  RSA-SHA384
  """
  RSA_SHA384

  """
  RSA-SHA512
  """
  RSA_SHA512
}

"""
A Saved Reply is text a user can use to reply quickly.
"""
type SavedReply implements Node {
  """
  The body of the saved reply.
  """
  body: String!

  """
  The saved reply body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the SavedReply object
  """
  id: ID!

  """
  The title of the saved reply.
  """
  title: String!

  """
  The user that saved this reply.
  """
  user: Actor
}

"""
The connection type for SavedReply.
"""
type SavedReplyConnection {
  """
  A list of edges.
  """
  edges: [SavedReplyEdge]

  """
  A list of nodes.
  """
  nodes: [SavedReply]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SavedReply
}

"""
Ordering options for saved reply connections.
"""
input SavedReplyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order saved replies by.
  """
  field: SavedReplyOrderField!
}

"""
Properties by which saved reply connections can be ordered.
"""
enum SavedReplyOrderField {
  """
  Order saved reply by when they were updated.
  """
  UPDATED_AT
}

"""
The results of a search.
"""
union SearchResultItem = App | Discussion | Issue | MarketplaceListing | Organization | PullRequest | Repository | User

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
type SearchResultItemConnection {
  """
  The total number of pieces of code that matched the search query. Regardless
  of the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  codeCount: Int!

  """
  The total number of discussions that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  discussionCount: Int!

  """
  A list of edges.
  """
  edges: [SearchResultItemEdge]

  """
  The total number of issues that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  issueCount: Int!

  """
  A list of nodes.
  """
  nodes: [SearchResultItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of repositories that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  repositoryCount: Int!

  """
  The total number of users that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  userCount: Int!

  """
  The total number of wiki pages that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  wikiCount: Int!
}

"""
An edge in a connection.
"""
type SearchResultItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SearchResultItem

  """
  Text matches on the result found.
  """
  textMatches: [TextMatch]
}

"""
Represents the individual results of a search.
"""
enum SearchType {
  """
  Returns matching discussions in repositories.
  """
  DISCUSSION

  """
  Returns results matching issues in repositories.
  """
  ISSUE

  """
  Returns results matching repositories.
  """
  REPOSITORY

  """
  Returns results matching users and organizations on GitHub.
  """
  USER
}

"""
A GitHub Security Advisory
"""
type SecurityAdvisory implements Node {
  """
  The classification of the advisory
  """
  classification: SecurityAdvisoryClassification!

  """
  The CVSS associated with this advisory
  """
  cvss: CVSS!

  """
  CWEs associated with this Advisory
  """
  cwes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CWEConnection!

  """
  Identifies the primary key from the database.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

  """
  This is a long plaintext description of the advisory
  """
  description: String!

  """
  The GitHub Security Advisory ID
  """
  ghsaId: String!

  """
  The Node ID of the SecurityAdvisory object
  """
  id: ID!

  """
  A list of identifiers for this advisory
  """
  identifiers: [SecurityAdvisoryIdentifier!]!

  """
  The permalink for the advisory's dependabot alerts page
  """
  notificationsPermalink: URI

  """
  The organization that originated the advisory
  """
  origin: String!

  """
  The permalink for the advisory
  """
  permalink: URI

  """
  When the advisory was published
  """
  publishedAt: DateTime!

  """
  A list of references for this advisory
  """
  references: [SecurityAdvisoryReference!]!

  """
  The severity of the advisory
  """
  severity: SecurityAdvisorySeverity!

  """
  A short plaintext summary of the advisory
  """
  summary: String!

  """
  When the advisory was last updated
  """
  updatedAt: DateTime!

  """
  Vulnerabilities associated with this Advisory
  """
  vulnerabilities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the returned topics.
    """
    orderBy: SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}

    """
    A package name to filter vulnerabilities by.
    """
    package: String

    """
    A list of severities to filter vulnerabilities by.
    """
    severities: [SecurityAdvisorySeverity!]
  ): SecurityVulnerabilityConnection!

  """
  When the advisory was withdrawn, if it has been withdrawn
  """
  withdrawnAt: DateTime
}

"""
Classification of the advisory.
"""
enum SecurityAdvisoryClassification {
  """
  Classification of general advisories.
  """
  GENERAL

  """
  Classification of malware advisories.
  """
  MALWARE
}

"""
The connection type for SecurityAdvisory.
"""
type SecurityAdvisoryConnection {
  """
  A list of edges.
  """
  edges: [SecurityAdvisoryEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityAdvisory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible ecosystems of a security vulnerability's package.
"""
enum SecurityAdvisoryEcosystem {
  """
  GitHub Actions
  """
  ACTIONS

  """
  PHP packages hosted at packagist.org
  """
  COMPOSER

  """
  Erlang/Elixir packages hosted at hex.pm
  """
  ERLANG

  """
  Go modules
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  id: ID!

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

  """
  Python packages hosted at PyPI.org
  """
  PIP

  """
  Dart packages hosted at pub.dev
  """
  PUB

  """
  Ruby gems hosted at RubyGems.org
  """
  RUBYGEMS

  """
  Rust crates
  """
  RUST

  """
  Swift packages
  """
  SWIFT
}

"""
An edge in a connection.
"""
type SecurityAdvisoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityAdvisory
}

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  The identifier type, e.g. GHSA, CVE
  """
  type: String!

  """
  The identifier
  """
  value: String!
}

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter {
  """
  The identifier type.
  """
  type: SecurityAdvisoryIdentifierType!

  """
  The identifier string. Supports exact or partial matching.
  """
  value: String!
}

"""
Identifier formats available for advisories.
"""
enum SecurityAdvisoryIdentifierType {
  """
  Common Vulnerabilities and Exposures Identifier.
  """
  CVE

  """
  GitHub Security Advisory ID.
  """
  GHSA
}

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security advisories by.
  """
  field: SecurityAdvisoryOrderField!
}

"""
Properties by which security advisory connections can be ordered.
"""
enum SecurityAdvisoryOrderField {
  """
  Order advisories by publication time
  """
  PUBLISHED_AT

  """
  Order advisories by update time
  """
  UPDATED_AT
}

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
  """
  ecosystem: SecurityAdvisoryEcosystem!

  """
  The package name
  """
  name: String!
}

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  The package name or version
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveTopicAuditEntry object
  """
  id: ID!

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  A publicly accessible reference
  """
  url: URI!
}

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  Critical.
  """
  CRITICAL

  """
  High.
  """
  HIGH

  """
  Low.
  """
  LOW

  """
  Moderate.
  """
  MODERATE
}

"""
An individual vulnerability within an Advisory
"""
type SecurityVulnerability {
  """
  The Advisory associated with this Vulnerability
  """
  advisory: SecurityAdvisory!

  """
  The first version containing a fix for the vulnerability
  """
  firstPatchedVersion: SecurityAdvisoryPackageVersion

  """
  A description of the vulnerable package
  """
  package: SecurityAdvisoryPackage!

  """
  The severity of the vulnerability within this package
  """
  severity: SecurityAdvisorySeverity!

  """
  When the vulnerability was last updated
  """
  updatedAt: DateTime!

  """
  A string that describes the vulnerable package versions.
  This string follows a basic syntax with a few forms.
  + `= 0.2.0` denotes a single vulnerable version.
  + `<= 1.0.8` denotes a version range up to and including the specified version
  + `< 0.1.11` denotes a version range up to, but excluding, the specified version
  + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
  + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
  """
  vulnerableVersionRange: String!
}

"""
The connection type for SecurityVulnerability.
"""
type SecurityVulnerabilityConnection {
  """
  A list of edges.
  """
  edges: [SecurityVulnerabilityEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityVulnerability]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SecurityVulnerabilityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityVulnerability
}

"""
Ordering options for security vulnerability connections
"""
input SecurityVulnerabilityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security vulnerabilities by.
  """
  field: SecurityVulnerabilityOrderField!
}

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  """
  Order vulnerability by update time
  """
  UPDATED_AT
}

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  A list of users that can be assigned to issues in this repository.
  """
  assignableUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filters users with query on user name and login.
    """
    query: String
  ): UserConnection!

  """
  The ID of the enterprise on which to set an identity provider.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: String!

  """
  The Issuer Entity ID for the SAML identity provider
  """
  issuer: String

  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: SamlSignatureAlgorithm!

  """
  The URL endpoint for the identity provider's SAML SSO.
  """
  collaborators(
    """
    Collaborators affiliation level with a repository.
    """
    affiliation: CollaboratorAffiliation

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The login of one specific collaborator.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    query: String
  ): RepositoryCollaboratorConnection

"""
Autogenerated return type of SetEnterpriseIdentityProvider
"""
type SetEnterpriseIdentityProviderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The identity provider for the enterprise.
  """
  identityProvider: EnterpriseIdentityProvider
}

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput {
  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

  """
  Identifies the date and time when the object was created.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the organization to set a limit for.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
type SetOrganizationInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization that the interaction limit was set for.
  """
  organization: Organization
}

"""
Autogenerated input type of SetRepositoryInteractionLimit
"""
input SetRepositoryInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the repository to set a limit for.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A discussion category by slug.
  """
  discussionCategory(
    """
    The slug of the discussion category to be returned.
    """
    slug: String!
  ): DiscussionCategory

  """
  A list of discussions that have been opened in the repository.
  """
  discussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Only show answered or unanswered discussions
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Only include discussions that belong to the category with this ID.
    """
    categoryId: ID = null

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: UPDATED_AT, direction: DESC}

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  environments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the environments
    """
    orderBy: Environments = {field: NAME, direction: ASC}
  ): EnvironmentConnection!

  """
  The ID of the user to set a limit for.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user that the interaction limit was set for.
  """
  forks(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type SmimeSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  True if the signature is valid and verified by GitHub.
  """
  isValid: Boolean!

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  ASCII-armored signature header from object.
  """
  signature: String!

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Whether vulnerability alerts are enabled for the repository.
  """
  hasVulnerabilityAlertsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  wasSignedByGitHub: Boolean!
}

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Name of the social media account as it appears on the profile.
  """
  homepageUrl: URI

  """
  The Node ID of the Repository object
  """
  id: ID!

  """
  Software or company that hosts the social media account.
  """
  provider: SocialAccountProvider!

  """
  URL of the social media account.
  """
  url: URI!
}

"""
The connection type for SocialAccount.
"""
type SocialAccountConnection {
  """
  A list of edges.
  """
  edges: [SocialAccountEdge]

  """
  A list of nodes.
  """
  nodes: [SocialAccount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SocialAccount
}

"""
Software or company that hosts social media accounts.
"""
enum SocialAccountProvider {
  """
  Social media and networking website.
  """
  FACEBOOK

  """
  Catch-all for social media providers that do not yet have specific handling.
  """
  GENERIC

  """
  Fork of Mastodon with a greater focus on local posting.
  """
  HOMETOWN

  """
  Social media website with a focus on photo and video sharing.
  """
  INSTAGRAM

  """
  Professional networking website.
  """
  LINKEDIN

  """
  Open-source federated microblogging service.
  """
  MASTODON

  """
  JavaScript package registry.
  """
  NPM

  """
  Social news aggregation and discussion website.
  """
  REDDIT

  """
  Live-streaming service.
  """
  TWITCH

  """
  Microblogging website.
  """
  TWITTER

  """
  Online video platform.
  """
  YOUTUBE
}

"""
Entities that can sponsor others via GitHub Sponsors
"""
union Sponsor = Organization | User

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The amount in cents.
  """
  amountInCents: Int!

  """
  The amount in USD, formatted as a string.
  """
  formattedAmount: String!

  """
  The sponsor's GitHub account.
  """
  sponsor: Sponsorable!

  """
  The maintainer's GitHub account.
  """
  sponsorable: Sponsorable!
}

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  A list of edges.
  """
  edges: [SponsorAndLifetimeValueEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorAndLifetimeValue]

  """
  How the default commit message will be generated when merging a pull request.
  """
  mergeCommitMessage: MergeCommitMessage!

  """
  How the default commit title will be generated when merging a pull request.
  """
  mergeCommitTitle: MergeCommitTitle!

  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    branch: String
  ): MergeQueue

  """
  Returns a single milestone from the current repository by number.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorAndLifetimeValue
}

"""
Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
"""
input SponsorAndLifetimeValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order results by.
  """
  field: SponsorAndLifetimeValueOrderField!
}

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  LIFETIME_VALUE

  """
  Order results by the sponsor's login (username).
  """
  SPONSOR_LOGIN

  """
  Order results by the sponsor's relevance to the viewer.
  """
  SPONSOR_RELEVANCE
}

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  A list of edges.
  """
  edges: [SponsorEdge]

  """
  A list of nodes.
  """
  nodes: [Sponsor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type SponsorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  Finds and returns the Project according to the provided Project number.
  """
  direction: OrderDirection!

  """
  The field to order sponsor entities by.
  """
  field: SponsorOrderField!
}

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  """
  The HTTP path listing the repository's projects
  """
  RELEVANCE
}

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  estimatedNextSponsorsPayoutInCents: Int!

  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  hasSponsorsListing: Boolean!

  """
  Whether the given account is sponsoring this user/organization.
  """
  isSponsoredBy(
    """
    The target account's login.
    """
    accountLogin: String!
  ): Boolean!

  """
  True if the viewer is sponsored by this user/organization.
  """
  isSponsoringViewer: Boolean!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  Identifies the date and time when the repository was last pushed to.
  """
  pushedAt: DateTime

  """
  Whether or not rebase-merging is enabled on this repository.
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    last: Int
  ): RepositoryTopicConnection!

  """
  The HTTP path for this repository
  """
  resourcePath: URI!

  """
  Returns a single ruleset from the current repository by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!

    """
    Include rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true
  ): RepositoryRuleset

  """
  A list of rulesets for this repository.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The security policy URL.
  """
  securityPolicyUrl: URI

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  How the default commit message will be generated when squash merging a pull request.
  """
  squashMergeCommitMessage: SquashMergeCommitMessage!

  """
  How the default commit title will be generated when squash merging a pull request.
  """
  squashMergeCommitTitle: SquashMergeCommitTitle!

  """
  Whether a squash merge commit can use the pull request title as default.
  """
  squashPrTitleUsedAsDefault: Boolean!
    @deprecated(
      reason: "`squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC."
    )

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """
    The number for the vulnerability alert to be returned.
    """
    number: Int!
  ): RepositoryVulnerabilityAlert

  """
  A list of vulnerability alerts that are on this repository.
  """
  vulnerabilityAlerts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    last: Int
  ): UserConnection!

  """
  Whether contributors are required to sign off on web-based commits in this repository.
  """
  webCommitSignoffRequired: Boolean!
}

"""
The affiliation of a user to a repository
"""
enum RepositoryAffiliation {
  """
  Repositories that the user has been added to as a collaborator.
  """
  COLLABORATOR

  """
  Repositories that the user has access to through being a member of an
  organization. This includes every repository on every team that the user is on.
  """
  ORGANIZATION_MEMBER

  """
  Repositories that are owned by the authenticated user.
  """
  OWNER
}

"""
Metadata for an audit entry with action repo.*
"""
interface RepositoryAuditEntryData {
  """
  The repository associated with the action
  """
  repository: Repository

  """
  The name of the repository
  """
  repositoryName: String

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!
}

"""
Entities that can be sponsored via GitHub Sponsors
"""
union SponsorableItem = Organization | User

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  Kazakhstan
  """
  edges: [SponsorableItemEdge]

  """
  Laos
  """
  nodes: [SponsorableItem]

  """
  Lebanon
  """
  LB

  """
  Saint Lucia
  """
  LC

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  """
  Liechtenstein
  """
  LI

  """
  Sri Lanka
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  The total size in kilobytes of all repositories in the connection. Value will
  never be larger than max 32-bit signed integer.
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  id: ID!

  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

  """
  The user or organization that is being sponsored, the maintainer.
  """
  repositoryDiscussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter discussions to only those that have been answered or not. Defaults to
    including both answered and unanswered discussions.
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: CREATED_AT, direction: DESC}

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!
}

  """
  The associated sponsorship tier.
  """
  sponsorsTier: SponsorsTier

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
Parameters to be used for the repository_id condition
"""
type RepositoryIdConditionTarget {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
A subset of repository info.
"""
interface RepositoryInfo {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The description of the repository.
  """
  description: String

  """
  The activity was cancelling a sponsorship.
  """
  CANCELLED_SPONSORSHIP

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  PENDING_CHANGE

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  SPONSOR_MATCH_DISABLED

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  TIER_CHANGE
}

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  Myanmar
  """
  edges: [SponsorsActivityEdge]

  """
  Mongolia
  """
  nodes: [SponsorsActivity]

  """
  Macau
  """
  MO

  """
  Northern Mariana Islands
  """
  MP

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  Martinique
  """
  MQ

  """
  Mauritania
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  Andorra
  """
  AD

  """
  Identifies the date and time when the repository was last pushed to.
  """
  AE

  """
  Afghanistan
  """
  AF

  """
  Antigua and Barbuda
  """
  AG

  """
  Anguilla
  """
  AI

  """
  Albania
  """
  AL

  """
  Armenia
  """
  AM

  """
  Angola
  """
  AO

  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland
  """
  AX

  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  BE

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  BH

  """
  Burundi
  """
  email: String

  """
  The Node ID of the RepositoryInvitation object
  """
  id: ID!

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  BM

  """
  Brunei Darussalam
  """
  BN

  """
  Bolivia
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  BR

  """
  Bahamas
  """
  BS

  """
  Bhutan
  """
  BT

  """
  Bouvet Island
  """
  BV

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  BY

  """
  Belize
  """
  BZ

  """
  Canada
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Congo (Kinshasa)
  """
  CD

  """
  Central African Republic
  """
  CF

  """
  Congo (Brazzaville)
  """
  RENAME

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type RepositoryMigration implements Migration & Node {
  """
  The migration flag to continue on error.
  """
  CH

  """
  Côte d'Ivoire
  """
  CI

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  id: ID!

  """
  Chile
  """
  CL

  """
  The migration source.
  """
  CM

  """
  China
  """
  CN

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  CO

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

  """
  Cape Verde
  """
  CV

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  CX

  """
  Cyprus
  """
  CY

  """
  Czech Republic
  """
  CZ

  """
  Germany
  """
  DE

  """
  Djibouti
  """
  DJ

  """
  Denmark
  """
  DK

  """
  Dominica
  """
  DM

  """
  Dominican Republic
  """
  DO

"""
Autogenerated input type of UnarchiveProjectV2Item
"""
input UnarchiveProjectV2ItemInput {
  """
  Algeria
  """
  DZ

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
interface RepositoryNode {
  """
  Ecuador
  """
  EC

  """
  Estonia
  """
  EE

  """
  Egypt
  """
  EG

  """
  Western Sahara
  """
  EH

  """
  Eritrea
  """
  ER

  """
  Spain
  """
  ES

  """
  Ethiopia
  """
  ET

  """
  Finland
  """
  FI

  """
  Fiji
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The Node ID of the RepositoryOwner object
  """
  id: ID!

  """
  Falkland Islands
  """
  FK

  """
  Micronesia
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  FR

  """
  Gabon
  """
  GA

  """
  United Kingdom
  """
  GB

"""
Represents a count of the state of a status context.
"""
type StatusContextStateCount {
  """
  Grenada
  """
  GD

  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  GG

  """
  Ghana
  """
  GH

  """
  Gibraltar
  """
  GI

  """
  Greenland
  """
  GL

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  LOCK_BRANCH

  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  MERGE_QUEUE_LOCKED_REF

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REQUIRED_SIGNATURES

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Secret scanning
  """
  SECRET_SCANNING

  """
  Tag
  """
  TAG

  """
  Tag name pattern
  """
  TAG_NAME_PATTERN

  """
  Only allow users with bypass permission to update matching refs.
  """
  UPDATE

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  WORKFLOWS

  """
  Workflow files cannot be modified.
  """
  WORKFLOW_UPDATES
}

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetBypassActorConnection

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The enforcement level of this ruleset
  """
  enforcement: RuleEnforcement!

  """
  The Node ID of the RepositoryRuleset object
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The type of rule.
    """
    type: RepositoryRuleType
  ): RepositoryRuleConnection

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  repositoryRoleName: String

  """
  Identifies the ruleset associated with the allowed actor
  """
  repositoryRuleset: RepositoryRuleset
}

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  ALWAYS

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRulesetBypassActor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  actorId: ID

  """
  The bypass mode for this actor.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode!

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRuleset]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRuleset
}

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  Branch
  """
  BRANCH

  """
  Tag
  """
  TAG
}

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  id: ID!

  """
  Gambia
  """
  GM

  """
  Guinea
  """
  GN

  """
  Guadeloupe
  """
  GP

  """
  Equatorial Guinea
  """
  GQ

  """
  Greece
  """
  GR

  """
  South Georgia and South Sandwich Islands
  """
  GS

  """
  Guatemala
  """
  GT

  """
  Guam
  """
  GU

  """
  Guinea-Bissau
  """
  GW

  """
  Guyana
  """
  GY

  """
  Hong Kong
  """
  HK

  """
  Heard and McDonald Islands
  """
  HM

  """
  Honduras
  """
  HN

  """
  Croatia
  """
  HR

  """
  Haiti
  """
  HT

  """
  Hungary
  """
  HU

  """
  Indonesia
  """
  ID

  """
  Ireland
  """
  IE

  """
  Israel
  """
  IL

  """
  Isle of Man
  """
  IM

  """
  India
  """
  IN

  """
  British Indian Ocean Territory
  """
  IO

  """
  Iraq
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  id: ID!

  """
  Iran
  """
  IR

  """
  Iceland
  """
  IS

  """
  Italy
  """
  IT

"""
Autogenerated input type of SubmitPullRequestReview
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  Jersey
  """
  JE

  """
  Jamaica
  """
  JM

  """
  Jordan
  """
  JO

"""
Autogenerated input type of UpdateProjectV2Collaborators
"""
input UpdateProjectV2CollaboratorsInput {
  """
  Japan
  """
  JP

  """
  Kenya
  """
  KE

  """
  Kyrgyzstan
  """
  KG

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Cambodia
  """
  KH

  """
  Kiribati
  """
  KI

  """
  Comoros
  """
  KM

  """
  Saint Kitts and Nevis
  """
  KN

  """
  Korea, South
  """
  KR

  """
  Kuwait
  """
  KW

  """
  Cayman Islands
  """
  KY

  """
  Kazakhstan
  """
  KZ

  """
  Laos
  """
  LA

  """
  Lebanon
  """
  LB

  """
  Saint Lucia
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  id: ID!

  """
  Liechtenstein
  """
  LI

  """
  Sri Lanka
  """
  LK

  """
  Liberia
  """
  LR

  """
  Lesotho
  """
  LS

  """
  Lithuania
  """
  LT

  """
  Luxembourg
  """
  LU

  """
  Latvia
  """
  LV

  """
  Libya
  """
  LY

  """
  Morocco
  """
  MA

  """
  When was the alert auto-dismissed?
  """
  autoDismissedAt: DateTime

  """
  When was the alert created?
  """
  MC

  """
  Moldova
  """
  MD

  """
  Montenegro
  """
  ME

  """
  Comment explaining the reason the alert was dismissed
  """
  dismissComment: String

  """
  The reason the alert was dismissed
  """
  MF

  """
  Madagascar
  """
  MG

  """
  Marshall Islands
  """
  MH

  """
  When was the alert fixed?
  """
  fixedAt: DateTime

  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  id: ID!

  """
  Myanmar
  """
  MM

  """
  Mongolia
  """
  MN

  """
  Macau
  """
  MO

  """
  Northern Mariana Islands
  """
  MP

  """
  Martinique
  """
  MQ

  """
  Mauritania
  """
  MR

  """
  Montserrat
  """
  MS

  """
  Malta
  """
  MT

"""
Autogenerated input type of UpdateProjectCard
"""
input UpdateProjectCardInput {
  """
  Mauritius
  """
  MU

  """
  Maldives
  """
  MV

  """
  Malawi
  """
  MW

  """
  Mexico
  """
  MX

  """
  Malaysia
  """
  MY

  """
  Mozambique
  """
  MZ

  """
  Namibia
  """
  NA

  """
  New Caledonia
  """
  NC

  """
  An alert that has been automatically closed by Dependabot.
  """
  AUTO_DISMISSED

  """
  An alert that has been manually closed by a user.
  """
  NE

  """
  Norfolk Island
  """
  NF

  """
  Nigeria
  """
  NG

  """
  Nicaragua
  """
  NI

  """
  Netherlands
  """
  NL

  """
  Norway
  """
  NO

  """
  Nepal
  """
  union: Boolean = false

  """
  Nauru
  """
  NR

  """
  Niue
  """
  NU

  """
  New Zealand
  """
  NZ

  """
  Oman
  """
  OM

"""
A team of users in an organization.
"""
input UnsubscribeFromNotificationsInput
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  Panama
  """
  PA

  """
  Peru
  """
  PE

"""
The possible states of a thread subscription form action
"""
enum ThreadSubscriptionFormAction {
  """
  French Polynesia
  """
  PF

  """
  Papua New Guinea
  """
  PG

  """
  Philippines
  """
  PH

  """
  Pakistan
  """
  PK

  """
  Poland
  """
  WAITING
}

"""
Types that can be requested reviewers.
"""
union RequestedReviewer = Bot | Mannequin | Team | User

  """
  Saint Pierre and Miquelon
  """
  PM

  """
  Pitcairn
  """
  PN

  """
  Puerto Rico
  """
  PR

  """
  Palestine
  """
  PS

  """
  Portugal
  """
  PT

  """
  Palau
  """
  PW

  """
  Paraguay
  """
  PY

    """
    The number of the pull request this is required for
    """
    pullRequestNumber: Int
  ): Boolean!
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type RequiredStatusCheckDescription {
  """
  Qatar
  """
  QA

  """
  Reunion
  """
  RE

  """
  Romania
  """
  RO

  """
  Serbia
  """
  RS

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfiguration!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
input RequiredStatusChecksParametersInput {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfigurationInput!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Autogenerated input type of RerequestCheckSuite
"""
input RerequestCheckSuiteInput {
  """
  Russian Federation
  """
  RU

"""
The possible states of a subscription.
"""
enum ThreadSubscriptionState {
  """
  Rwanda
  """
  RW

  """
  Saudi Arabia
  """
  SA

"""
How payment was made for funding a GitHub Sponsors sponsorship.
"""
enum SponsorshipPaymentSource {
  """
  Solomon Islands
  """
  SB

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the thread to resolve
  """
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The thread to resolve.
  """
  thread: PullRequestReviewThread
}

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the published tier to retire.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was retired.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  The description of the revert pull request.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates whether the revert pull request should be a draft.
  """
  draft: Boolean = false

  """
  The ID of the pull request to revert.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The title of the revert pull request.
  """
  title: String
}

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that was reverted.
  """
  pullRequest: PullRequest

  """
  The new pull request that reverts the input pull request.
  """
  revertPullRequest: PullRequest
}

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The actor that can dismiss.
  """
  actor: ReviewDismissalAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the ReviewDismissalAllowance object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union ReviewDismissalAllowanceActor = App | Team | User

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  A list of edges.
  """
  edges: [ReviewDismissalAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewDismissalAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewDismissalAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewDismissalAllowance
}

"""
Represents a 'review_dismissed' event on a given issue or pull request.
"""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Identifies the optional message associated with the 'review_dismissed' event.
  """
  dismissalMessage: String

  """
  Identifies the optional message associated with the event, rendered to HTML.
  """
  dismissalMessageHTML: String

  """
  The Node ID of the ReviewDismissedEvent object
  """
  id: ID!

  """
  Identifies the previous state of the review with the 'review_dismissed' event.
  """
  previousReviewState: PullRequestReviewState!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the commit which caused the review to become stale.
  """
  pullRequestCommit: PullRequestCommit

  """
  The HTTP path for this review dismissed event.
  """
  resourcePath: URI!

  """
  Identifies the review associated with the 'review_dismissed' event.
  """
  review: PullRequestReview

  """
  The HTTP URL for this review dismissed event.
  """
  url: URI!
}

"""
A request for a user to review a pull request.
"""
type ReviewRequest implements Node {
  """
  Whether this request was created for a code owner
  """
  asCodeOwner: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ReviewRequest object
  """
  id: ID!

  """
  Identifies the pull request associated with this review request.
  """
  pullRequest: PullRequest!

  """
  The reviewer that is requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
The connection type for ReviewRequest.
"""
type ReviewRequestConnection {
  """
  A list of edges.
  """
  edges: [ReviewRequestEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewRequest
}

"""
Represents an 'review_request_removed' event on a given pull request.
"""
type ReviewRequestRemovedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestRemovedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review request was removed.
  """
  requestedReviewer: RequestedReviewer
}

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review was requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type ReviewStatusHovercardContext implements HovercardContext {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  The current status of the pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision
}

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
input RevokeEnterpriseOrganizationsMigratorRoleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of the user to revoke the migrator role
  """
  login: String!
}

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organizations that had the migrator role revoked for the given user.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection
}

"""
Autogenerated input type of RevokeMigratorRole
"""
input RevokeMigratorRoleInput {
  """
  The user login or Team slug to revoke the migrator role from.
  """
  actor: String!

  """
  Specifies the type of the actor, can be either USER or TEAM.
  """
  actorType: ActorType!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization that the user/team belongs to.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of RevokeMigratorRole
"""
type RevokeMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Possible roles a user may have in relation to an organization.
"""
enum RoleInOrganization {
  """
  A user who is a direct member of the organization.
  """
  DIRECT_MEMBER

  """
  A user with full administrative access to the organization.
  """
  OWNER

  """
  A user who is unaffiliated with the organization.
  """
  UNAFFILIATED
}

"""
The level of enforcement for a rule or ruleset.
"""
enum RuleEnforcement {
  """
  Rules will be enforced
  """
  ACTIVE

  """
  Do not evaluate or enforce rules
  """
  DISABLED

  """
  Allow admins to test rules before enforcing them. Admins can view insights on
  the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
  """
  EVALUATE
}

"""
Types which can be parameters for `RepositoryRule` objects.
"""
union RuleParameters =
    BranchNamePatternParameters
  | CommitAuthorEmailPatternParameters
  | CommitMessagePatternParameters
  | CommitterEmailPatternParameters
  | PullRequestParameters
  | RequiredDeploymentsParameters
  | RequiredStatusChecksParameters
  | TagNamePatternParameters
  | UpdateParameters
  | WorkflowsParameters

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  Parameters used for the `branch_name_pattern` rule type
  """
  branchNamePattern: BranchNamePatternParametersInput

  """
  Parameters used for the `commit_author_email_pattern` rule type
  """
  commitAuthorEmailPattern: CommitAuthorEmailPatternParametersInput

  """
  Parameters used for the `commit_message_pattern` rule type
  """
  commitMessagePattern: CommitMessagePatternParametersInput

  """
  Parameters used for the `committer_email_pattern` rule type
  """
  committerEmailPattern: CommitterEmailPatternParametersInput

  """
  Parameters used for the `pull_request` rule type
  """
  pullRequest: PullRequestParametersInput

  """
  Parameters used for the `required_deployments` rule type
  """
  requiredDeployments: RequiredDeploymentsParametersInput

  """
  Parameters used for the `required_status_checks` rule type
  """
  requiredStatusChecks: RequiredStatusChecksParametersInput

  """
  Parameters used for the `tag_name_pattern` rule type
  """
  tagNamePattern: TagNamePatternParametersInput

  """
  Parameters used for the `update` rule type
  """
  update: UpdateParametersInput

  """
  Parameters used for the `workflows` rule type
  """
  workflows: WorkflowsParametersInput
}

"""
Types which can have `RepositoryRule` objects.
"""
union RuleSource = Organization | Repository

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum SamlDigestAlgorithm {
  """
  SHA1
  """
  SHA1

  """
  SHA256
  """
  SHA256

  """
  SHA384
  """
  SHA384

  """
  SHA512
  """
  SHA512
}

"""
The possible signature algorithms used to sign SAML requests for a Identity Provider.
"""
enum SamlSignatureAlgorithm {
  """
  RSA-SHA1
  """
  RSA_SHA1

  """
  RSA-SHA256
  """
  RSA_SHA256

  """
  RSA-SHA384
  """
  RSA_SHA384

  """
  RSA-SHA512
  """
  RSA_SHA512
}

"""
A Saved Reply is text a user can use to reply quickly.
"""
type SavedReply implements Node {
  """
  The body of the saved reply.
  """
  body: String!

  """
  The saved reply body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the SavedReply object
  """
  id: ID!

  """
  The title of the saved reply.
  """
  title: String!

  """
  The user that saved this reply.
  """
  user: Actor
}

"""
The connection type for SavedReply.
"""
type SavedReplyConnection {
  """
  A list of edges.
  """
  edges: [SavedReplyEdge]

  """
  A list of nodes.
  """
  nodes: [SavedReply]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SavedReply
}

"""
Ordering options for saved reply connections.
"""
input SavedReplyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order saved replies by.
  """
  field: SavedReplyOrderField!
}

"""
Properties by which saved reply connections can be ordered.
"""
enum SavedReplyOrderField {
  """
  Order saved reply by when they were updated.
  """
  UPDATED_AT
}

"""
The results of a search.
"""
union SearchResultItem = App | Discussion | Issue | MarketplaceListing | Organization | PullRequest | Repository | User

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
type SearchResultItemConnection {
  """
  The total number of pieces of code that matched the search query. Regardless
  of the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  codeCount: Int!

  """
  The total number of discussions that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  discussionCount: Int!

  """
  A list of edges.
  """
  edges: [SearchResultItemEdge]

  """
  The total number of issues that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  issueCount: Int!

  """
  A list of nodes.
  """
  nodes: [SearchResultItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of repositories that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  repositoryCount: Int!

  """
  The total number of users that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  userCount: Int!

  """
  The total number of wiki pages that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  wikiCount: Int!
}

"""
An edge in a connection.
"""
type SearchResultItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SearchResultItem

  """
  Text matches on the result found.
  """
  textMatches: [TextMatch]
}

"""
Represents the individual results of a search.
"""
enum SearchType {
  """
  Returns matching discussions in repositories.
  """
  DISCUSSION

  """
  Returns results matching issues in repositories.
  """
  ISSUE

  """
  Returns results matching repositories.
  """
  REPOSITORY

  """
  Returns results matching users and organizations on GitHub.
  """
  USER
}

"""
A GitHub Security Advisory
"""
type SecurityAdvisory implements Node {
  """
  The classification of the advisory
  """
  classification: SecurityAdvisoryClassification!

  """
  The CVSS associated with this advisory
  """
  cvss: CVSS!

  """
  CWEs associated with this Advisory
  """
  cwes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CWEConnection!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  This is a long plaintext description of the advisory
  """
  description: String!

  """
  The GitHub Security Advisory ID
  """
  ghsaId: String!

  """
  The Node ID of the SecurityAdvisory object
  """
  id: ID!

  """
  A list of identifiers for this advisory
  """
  identifiers: [SecurityAdvisoryIdentifier!]!

  """
  The permalink for the advisory's dependabot alerts page
  """
  notificationsPermalink: URI

  """
  The organization that originated the advisory
  """
  origin: String!

  """
  The permalink for the advisory
  """
  permalink: URI

  """
  When the advisory was published
  """
  publishedAt: DateTime!

  """
  A list of references for this advisory
  """
  references: [SecurityAdvisoryReference!]!

  """
  The severity of the advisory
  """
  severity: SecurityAdvisorySeverity!

  """
  A short plaintext summary of the advisory
  """
  summary: String!

  """
  When the advisory was last updated
  """
  updatedAt: DateTime!

  """
  Vulnerabilities associated with this Advisory
  """
  vulnerabilities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the returned topics.
    """
    orderBy: SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}

    """
    A package name to filter vulnerabilities by.
    """
    package: String

    """
    A list of severities to filter vulnerabilities by.
    """
    severities: [SecurityAdvisorySeverity!]
  ): SecurityVulnerabilityConnection!

  """
  When the advisory was withdrawn, if it has been withdrawn
  """
  withdrawnAt: DateTime
}

"""
Classification of the advisory.
"""
enum SecurityAdvisoryClassification {
  """
  Classification of general advisories.
  """
  GENERAL

  """
  Classification of malware advisories.
  """
  MALWARE
}

"""
The connection type for SecurityAdvisory.
"""
type SecurityAdvisoryConnection {
  """
  A list of edges.
  """
  edges: [SecurityAdvisoryEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityAdvisory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible ecosystems of a security vulnerability's package.
"""
enum SecurityAdvisoryEcosystem {
  """
  GitHub Actions
  """
  ACTIONS

  """
  PHP packages hosted at packagist.org
  """
  COMPOSER

  """
  Erlang/Elixir packages hosted at hex.pm
  """
  ERLANG

  """
  Go modules
  """
  GO

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

  """
  Python packages hosted at PyPI.org
  """
  PIP

  """
  Dart packages hosted at pub.dev
  """
  PUB

  """
  Ruby gems hosted at RubyGems.org
  """
  RUBYGEMS

  """
  Rust crates
  """
  RUST

  """
  Swift packages
  """
  SWIFT
}

"""
An edge in a connection.
"""
type SecurityAdvisoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityAdvisory
}

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  The identifier type, e.g. GHSA, CVE
  """
  type: String!

  """
  The identifier
  """
  value: String!
}

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter {
  """
  The identifier type.
  """
  type: SecurityAdvisoryIdentifierType!

  """
  The identifier string. Supports exact or partial matching.
  """
  value: String!
}

"""
Identifier formats available for advisories.
"""
enum SecurityAdvisoryIdentifierType {
  """
  Common Vulnerabilities and Exposures Identifier.
  """
  CVE

  """
  GitHub Security Advisory ID.
  """
  GHSA
}

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security advisories by.
  """
  field: SecurityAdvisoryOrderField!
}

"""
Properties by which security advisory connections can be ordered.
"""
enum SecurityAdvisoryOrderField {
  """
  Order advisories by publication time
  """
  PUBLISHED_AT

  """
  Order advisories by update time
  """
  UPDATED_AT
}

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
  """
  ecosystem: SecurityAdvisoryEcosystem!

  """
  The package name
  """
  name: String!
}

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  The package name or version
  """
  identifier: String!
}

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  A publicly accessible reference
  """
  url: URI!
}

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  Critical.
  """
  CRITICAL

  """
  High.
  """
  HIGH

  """
  Low.
  """
  LOW

  """
  Moderate.
  """
  MODERATE
}

"""
An individual vulnerability within an Advisory
"""
type SecurityVulnerability {
  """
  The Advisory associated with this Vulnerability
  """
  advisory: SecurityAdvisory!

  """
  The first version containing a fix for the vulnerability
  """
  firstPatchedVersion: SecurityAdvisoryPackageVersion

  """
  A description of the vulnerable package
  """
  package: SecurityAdvisoryPackage!

  """
  The severity of the vulnerability within this package
  """
  severity: SecurityAdvisorySeverity!

  """
  When the vulnerability was last updated
  """
  updatedAt: DateTime!

  """
  A string that describes the vulnerable package versions.
  This string follows a basic syntax with a few forms.
  + `= 0.2.0` denotes a single vulnerable version.
  + `<= 1.0.8` denotes a version range up to and including the specified version
  + `< 0.1.11` denotes a version range up to, but excluding, the specified version
  + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
  + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
  """
  vulnerableVersionRange: String!
}

"""
The connection type for SecurityVulnerability.
"""
type SecurityVulnerabilityConnection {
  """
  A list of edges.
  """
  edges: [SecurityVulnerabilityEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityVulnerability]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SecurityVulnerabilityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityVulnerability
}

"""
Ordering options for security vulnerability connections
"""
input SecurityVulnerabilityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security vulnerabilities by.
  """
  field: SecurityVulnerabilityOrderField!
}

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  """
  Order vulnerability by update time
  """
  UPDATED_AT
}

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The digest algorithm used to sign SAML requests for the identity provider.
  """
  digestMethod: SamlDigestAlgorithm!

  """
  The ID of the enterprise on which to set an identity provider.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: String!

  """
  The Issuer Entity ID for the SAML identity provider
  """
  issuer: String

  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: SamlSignatureAlgorithm!

  """
  The URL endpoint for the identity provider's SAML SSO.
  """
  ssoUrl: URI!
}

"""
Autogenerated return type of SetEnterpriseIdentityProvider
"""
type SetEnterpriseIdentityProviderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The identity provider for the enterprise.
  """
  identityProvider: EnterpriseIdentityProvider
}

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the organization to set a limit for.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
type SetOrganizationInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization that the interaction limit was set for.
  """
  organization: Organization
}

"""
Autogenerated input type of SetRepositoryInteractionLimit
"""
input SetRepositoryInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the repository to set a limit for.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that the interaction limit was set for.
  """
  repository: Repository
}

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the user to set a limit for.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user that the interaction limit was set for.
  """
  user: User
}

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type SmimeSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  True if the signature is valid and verified by GitHub.
  """
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """
  ASCII-armored signature header from object.
  """
  signature: String!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  True if the signature was made with GitHub's signing key.
  """
  wasSignedByGitHub: Boolean!
}

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Name of the social media account as it appears on the profile.
  """
  displayName: String!

  """
  Software or company that hosts the social media account.
  """
  provider: SocialAccountProvider!

  """
  URL of the social media account.
  """
  url: URI!
}

"""
The connection type for SocialAccount.
"""
type SocialAccountConnection {
  """
  A list of edges.
  """
  edges: [SocialAccountEdge]

  """
  A list of nodes.
  """
  nodes: [SocialAccount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SocialAccount
}

"""
Software or company that hosts social media accounts.
"""
enum SocialAccountProvider {
  """
  Social media and networking website.
  """
  FACEBOOK

  """
  Catch-all for social media providers that do not yet have specific handling.
  """
  GENERIC

  """
  Fork of Mastodon with a greater focus on local posting.
  """
  HOMETOWN

  """
  Social media website with a focus on photo and video sharing.
  """
  INSTAGRAM

  """
  Professional networking website.
  """
  LINKEDIN

  """
  Open-source federated microblogging service.
  """
  MASTODON

  """
  JavaScript package registry.
  """
  NPM

  """
  Social news aggregation and discussion website.
  """
  REDDIT

  """
  Live-streaming service.
  """
  TWITCH

  """
  Microblogging website.
  """
  TWITTER

  """
  Online video platform.
  """
  YOUTUBE
}

"""
Entities that can sponsor others via GitHub Sponsors
"""
union Sponsor = Organization | User

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The amount in cents.
  """
  amountInCents: Int!

  """
  The amount in USD, formatted as a string.
  """
  formattedAmount: String!

  """
  The sponsor's GitHub account.
  """
  sponsor: Sponsorable!

  """
  The maintainer's GitHub account.
  """
  sponsorable: Sponsorable!
}

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  A list of edges.
  """
  edges: [SponsorAndLifetimeValueEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorAndLifetimeValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorAndLifetimeValue
}

"""
Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
"""
input SponsorAndLifetimeValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order results by.
  """
  field: SponsorAndLifetimeValueOrderField!
}

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  LIFETIME_VALUE

  """
  Order results by the sponsor's login (username).
  """
  SPONSOR_LOGIN

  """
  Order results by the sponsor's relevance to the viewer.
  """
  SPONSOR_RELEVANCE
}

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  A list of edges.
  """
  edges: [SponsorEdge]

  """
  A list of nodes.
  """
  nodes: [Sponsor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type SponsorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Sponsor
}

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
input SponsorOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsor entities by.
  """
  field: SponsorOrderField!
}

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN

  """
  Order sponsors by their relevance to the viewer.
  """
  RELEVANCE
}

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  estimatedNextSponsorsPayoutInCents: Int!

  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  hasSponsorsListing: Boolean!

  """
  Whether the given account is sponsoring this user/organization.
  """
  isSponsoredBy(
    """
    The target account's login.
    """
    accountLogin: String!
  ): Boolean!

  """
  True if the viewer is sponsored by this user/organization.
  """
  isSponsoringViewer: Boolean!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!
}

"""
Entities that can be sponsored via GitHub Sponsors
"""
union SponsorableItem = Organization | User

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  Suriname
  """
  edges: [SponsorableItemEdge]

  """
  South Sudan
  """
  nodes: [SponsorableItem]

  """
  Sao Tome and Principe
  """
  ST

  """
  El Salvador
  """
  SV

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  """
  Sint Maarten (Dutch part)
  """
  SX

  """
  Swaziland
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  id: ID!

  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

  """
  The user or organization that is being sponsored, the maintainer.
  """
  sponsorable: Sponsorable!

  """
  The associated sponsorship tier.
  """
  sponsorsTier: SponsorsTier

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  The activity was cancelling a sponsorship.
  """
  CANCELLED_SPONSORSHIP

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

  """
  The activity was scheduling a downgrade or cancellation.
  """
  PENDING_CHANGE

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  TIER_CHANGE
}

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  Tanzania
  """
  edges: [SponsorsActivityEdge]

  """
  Ukraine
  """
  nodes: [SponsorsActivity]

  """
  Uganda
  """
  UG

  """
  United States Minor Outlying Islands
  """
  UM

  """
  United States of America
  """
  US

"""
Autogenerated return type of StartOrganizationMigration
"""
type SponsorsActivityEdge {
  """
  Uruguay
  """
  UY

  """
  Uzbekistan
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  Andorra
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  AF

  """
  Antigua and Barbuda
  """
  AG

  """
  Anguilla
  """
  AI

  """
  Albania
  """
  AL

  """
  Armenia
  """
  AM

  """
  Angola
  """
  AO

  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland
  """
  AX

  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  BE

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  BH

  """
  Burundi
  """
  BI

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  BM

  """
  Brunei Darussalam
  """
  BN

  """
  Bolivia
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  BR

  """
  Bahamas
  """
  BS

  """
  Bhutan
  """
  BT

  """
  Bouvet Island
  """
  BV

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  BY

  """
  Belize
  """
  BZ

  """
  Canada
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Congo (Kinshasa)
  """
  CD

  """
  Central African Republic
  """
  CF

  """
  Congo (Brazzaville)
  """
  CG

  """
  Switzerland
  """
  CH

"""
Autogenerated input type of TransferEnterpriseOrganization
"""
input TransferEnterpriseOrganizationInput {
  """
  Côte d'Ivoire
  """
  CI

  """
  Cook Islands
  """
  CK

  """
  Chile
  """
  CL

  """
  Cameroon
  """
  CM

  """
  China
  """
  CN

  """
  Colombia
  """
  CO

  """
  Costa Rica
  """
  CR

  """
  Cape Verde
  """
  CV

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  CX

  """
  Cyprus
  """
  CY

  """
  Czech Republic
  """
  CZ

  """
  Germany
  """
  DE

  """
  Djibouti
  """
  DJ

  """
  Denmark
  """
  DK

  """
  Dominica
  """
  DM

  """
  Dominican Republic
  """
  DO

  """
  Algeria
  """
  DZ

  """
  Ecuador
  """
  EC

"""
Represents a count of the state of a status context.
"""
type StatusContextStateCount {
  """
  Estonia
  """
  EE

  """
  Egypt
  """
  EG

"""
The possible commit status states.
"""
input UnmarkProjectV2AsTemplateInput {
  """
  Western Sahara
  """
  EH

  """
  Eritrea
  """
  ER

"""
A Stripe Connect account for receiving sponsorship funds from GitHub Sponsors.
"""
type StripeConnectAccount {
  """
  Spain
  """
  ES

  """
  Ethiopia
  """
  ET

  """
  Finland
  """
  FI

  """
  Fiji
  """
  FJ

  """
  Falkland Islands
  """
  FK

  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  FR

  """
  Gabon
  """
  GA

  """
  United Kingdom
  """
  GB

  """
  Grenada
  """
  GD

  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  GG

  """
  Ghana
  """
  GH

  """
  Gibraltar
  """
  GI

  """
  Greenland
  """
  GL

  """
  Gambia
  """
  GM

  """
  Guinea
  """
  GN

  """
  Guadeloupe
  """
  GP

  """
  Equatorial Guinea
  """
  GQ

  """
  Greece
  """
  GR

  """
  South Georgia and South Sandwich Islands
  """
  GS

  """
  Guatemala
  """
  GT

  """
  Guam
  """
  GU

  """
  Guinea-Bissau
  """
  GW

"""
Autogenerated input type of UpdateSponsorshipPreferences
"""
interface Subscribable {
  """
  Guyana
  """
  GY

  """
  Hong Kong
  """
  HK

  """
  Heard and McDonald Islands
  """
  HM

  """
  Honduras
  """
  HN

  """
  Croatia
  """
  HR

  """
  Haiti
  """
  HT

  """
  Hungary
  """
  HU

  """
  Indonesia
  """
  ID

  """
  Ireland
  """
  IE

  """
  Israel
  """
  IL

  """
  Isle of Man
  """
  IM

  """
  India
  """
  IN

  """
  British Indian Ocean Territory
  """
  IO

"""
The possible states of a subscription.
"""
enum ThreadSubscriptionState {
  """
  Iraq
  """
  IQ

  """
  Iran
  """
  IR

  """
  Iceland
  """
  IS

  """
  Italy
  """
  IT

  """
  Jersey
  """
  JE

  """
  Jamaica
  """
  JM

  """
  Jordan
  """
  JO

  """
  Japan
  """
  JP

  """
  Kenya
  """
  KE

  """
  Kyrgyzstan
  """
  KG

  """
  Cambodia
  """
  KH

"""
A topic aggregates entities that are related to a subject.
"""
type Topic implements Node & Starrable {
  """
  Kiribati
  """
  KI

  """
  Comoros
  """
  KM

  """
  Saint Kitts and Nevis
  """
  KN

  """
  Korea, South
  """
  KR

  """
  Kuwait
  """
  KW

  """
  Cayman Islands
  """
  KY

  """
  Kazakhstan
  """
  KZ

  """
  Laos
  """
  LA

  """
  Lebanon
  """
  LB

"""
The possible default commit titles for squash merges.
"""
enum SquashMergeCommitTitle {
  """
  Saint Lucia
  """
  LC

  """
  Liechtenstein
  """
  LI

"""
Represents an SSH signature on a Commit or Tag.
"""
type SshSignature implements GitSignature {
  """
  Sri Lanka
  """
  LK

  """
  Liberia
  """
  LR

  """
  Lesotho
  """
  LS

  """
  Lithuania
  """
  LT

  """
  Luxembourg
  """
  LU

  """
  Latvia
  """
  LV

  """
  Libya
  """
  LY

  """
  Morocco
  """
  MA

  """
  Monaco
  """
  MC

  """
  Moldova
  """
  MD

  """
  Montenegro
  """
  ME

  """
  Saint Martin (French part)
  """
  MF

  """
  Madagascar
  """
  MG

  """
  Marshall Islands
  """
  MH

  """
  Macedonia
  """
  MK

  """
  Mali
  """
  ML

  """
  Myanmar
  """
  MM

  """
  Mongolia
  """
  MN

  """
  Macau
  """
  MO

  """
  Northern Mariana Islands
  """
  MP

  """
  Martinique
  """
  MQ

  """
  Mauritania
  """
  MR

  """
  Montserrat
  """
  MS

  """
  Malta
  """
  MT

  """
  Mauritius
  """
  MU

"""
Autogenerated input type of StartOrganizationMigration
"""
input StartOrganizationMigrationInput {
  """
  Maldives
  """
  MV

  """
  Malawi
  """
  MW

  """
  Mexico
  """
  MX

  """
  Malaysia
  """
  MY

  """
  Mozambique
  """
  MZ

  """
  Namibia
  """
  NA

  """
  New Caledonia
  """
  NC

"""
Autogenerated input type of UnarchiveProjectV2Item
"""
input UnarchiveProjectV2ItemInput {
  """
  Niger
  """
  NE

  """
  Norfolk Island
  """
  NF

  """
  Nigeria
  """
  NG

  """
  Nicaragua
  """
  NI

  """
  Netherlands
  """
  NL

  """
  Norway
  """
  NO

  """
  Nepal
  """
  NP

  """
  Nauru
  """
  NR

  """
  Niue
  """
  NU

  """
  New Zealand
  """
  NZ

  """
  Oman
  """
  OM

  """
  Panama
  """
  PA

"""
Autogenerated return type of TransferEnterpriseOrganization
"""
type TransferEnterpriseOrganizationPayload {
  """
  Peru
  """
  PE

  """
  French Polynesia
  """
  PF

"""
Autogenerated input type of TransferIssue
"""
input UnsubscribeFromNotificationsInput
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  Papua New Guinea
  """
  PG

  """
  Philippines
  """
  PH

  """
  Pakistan
  """
  PK

  """
  Poland
  """
  PL

  """
  Saint Pierre and Miquelon
  """
  PM

  """
  Pitcairn
  """
  PN

  """
  Puerto Rico
  """
  PR

  """
  Palestine
  """
  PS

  """
  Portugal
  """
  PT

  """
  Palau
  """
  PW

  """
  Paraguay
  """
  PY

  """
  Qatar
  """
  QA

  """
  Reunion
  """
  RE

  """
  Romania
  """
  RO

  """
  Serbia
  """
  RS

  """
  Russian Federation
  """
  RU

"""
Required status check
"""
input StatusCheckConfigurationInput {
  """
  Rwanda
  """
  RW

  """
  Saudi Arabia
  """
  SA

"""
Represents the rollup for both the check runs and status for a commit.
"""
type StatusCheckRollup implements Node {
  """
  Solomon Islands
  """
  SB

  """
  Seychelles
  """
  SC

  """
  Sudan
  """
  SD

  """
  Sweden
  """
  SE

  """
  Singapore
  """
  SG

  """
  Saint Helena
  """
  SH

  """
  Slovenia
  """
  SI

  """
  Svalbard and Jan Mayen Islands
  """
  SJ

  """
  Slovakia
  """
  SK

  """
  Sierra Leone
  """
  SL

  """
  San Marino
  """
  SM

  """
  Senegal
  """
  SN

  """
  Somalia
  """
  SO

  """
  Suriname
  """
  SR

  """
  South Sudan
  """
  SS

  """
  Sao Tome and Principe
  """
  ST

  """
  El Salvador
  """
  SV

  """
  Sint Maarten (Dutch part)
  """
  SX

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Swaziland
  """
  SZ

  """
  Turks and Caicos Islands
  """
  TC

  """
  Chad
  """
  TD

"""
A user is an individual's account on GitHub that owns repositories and can make new content.
"""
type User implements Actor & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  French Southern Lands
  """
  TF

  """
  Togo
  """
  TG

  """
  Thailand
  """
  TH

  """
  Tajikistan
  """
  TJ

  """
  Tokelau
  """
  TK

  """
  Timor-Leste
  """
  TL

  """
  Turkmenistan
  """
  TM

  """
  Tunisia
  """
  TN

  """
  Tonga
  """
  TO

  """
  Türkiye
  """
  TR

"""
The possible commit status states.
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  Trinidad and Tobago
  """
  TT

  """
  Tuvalu
  """
  TV

  """
  Taiwan
  """
  TW

  """
  Tanzania
  """
  TZ

  """
  Ukraine
  """
  UA

  """
  Uganda
  """
  UG

  """
  United States Minor Outlying Islands
  """
  UM

  """
  United States of America
  """
  US

  """
  Uruguay
  """
  UY

  """
  Uzbekistan
  """
  UZ

  """
  Vatican City
  """
  VA

  """
  Saint Vincent and the Grenadines
  """
  VC

  """
  Venezuela
  """
  VE

  """
  Virgin Islands, British
  """
  VG

  """
  Virgin Islands, U.S.
  """
  VI

  """
  Vietnam
  """
  VN

  """
  Vanuatu
  """
  VU

  """
  Wallis and Futuna Islands
  """
  WF

  """
  Samoa
  """
  WS

  """
  Yemen
  """
  YE

  """
  Mayotte
  """
  YT

  """
  South Africa
  """
  ZA

  """
  Zambia
  """
  ZM

  """
  Zimbabwe
  """
  ZW
}

"""
Autogenerated input type of UnarchiveRepository
"""
input UnlinkProjectV2FromRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  editor: Actor

  """
  The Node ID of the TeamDiscussion object
  """
  id: ID!

  """
  The ID of the project to unlink from the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to unlink from the project.
  """
  isPinned: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated return type of UnlinkProjectV2FromRepository
"""
type UnlinkProjectV2FromRepositoryPayload {
  """
  Whether or not the discussion is only visible to team members and organization owners.
  """
  isPrivate: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The repository the project is no longer linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of UnlinkProjectV2FromTeam
"""
interface Subscribable {
  """
  The Node ID of the Subscribable object
  """
  id: ID!

  """
  The Stripe Connect account currently in use for payouts for this Sponsors
  listing, if any. Will only return a value when queried by the maintainer
  themselves, or by an admin of the sponsorable organization.
  """
  activeStripeConnectAccount: StripeConnectAccount

  """
  The name of the country or region with the maintainer's bank account or fiscal
  host. Will only return a value when queried by the maintainer themselves, or
  by an admin of the sponsorable organization.
  """
  billingCountryOrRegion: String

  """
  The email address used by GitHub to contact the sponsorable about their GitHub
  Sponsors profile. Will only return a value when queried by the maintainer
  themselves, or by an admin of the sponsorable organization.
  """
  contactEmailAddress: String

  """
  Identifies the date and time when the object was created.
  """
  number: Int!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The HTTP path for the Sponsors dashboard for this Sponsors listing.
  """
  dashboardResourcePath: URI!

  """
  The HTTP URL for the Sponsors dashboard for this Sponsors listing.
  """
  dashboardUrl: URI!

  """
  The records featured on the GitHub Sponsors profile.
  """
  featuredItems(
    """
    The types of featured items to return.
    """
    featureableTypes: [SponsorsListingFeaturedItemFeatureableType!] = [REPOSITORY, USER]
  ): [SponsorsListingFeaturedItem!]!

  """
  The fiscal host used for payments, if any. Will only return a value when
  queried by the maintainer themselves, or by an admin of the sponsorable organization.
  """
  fiscalHost: Organization

  """
  The full description of the listing.
  """
  createdAt: PreciseDateTime!

"""
Entities that can be subscribed to for web and email notifications.
"""
interface SubscribableThread {
  """
  The Node ID of the SubscribableThread object
  """
  fullDescriptionHTML: HTML!

  """
  The Node ID of the SponsorsListing object
  """
  id: ID!

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

"""
Represents a 'subscribed' event on a given `Subscribable`.
"""
type SubscribedEvent implements Node {
  """
  The Node ID of the TeamAddRepositoryAuditEntry object
  """
  id: ID!

  """
  The name of the country or region where the maintainer resides. Will only
  return a value when queried by the maintainer themselves, or by an admin of
  the sponsorable organization.
  """
  residenceCountryOrRegion: String

  """
  The HTTP path for this Sponsors listing.
  """
  resourcePath: URI!

  """
  The short description of the listing.
  """
  createdAt: DateTime!

  """
  The Node ID of the SubscribedEvent object
  """
  id: ID!

  """
  The ID of the team to unlink from the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of UnlinkProjectV2FromTeam
"""
type UnlinkProjectV2FromTeamPayload {
  """
  The tiers for this GitHub Sponsors profile.
  """
  tiers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include tiers that aren't published. Only admins of the Sponsors
    listing can see draft tiers. Only admins of the Sponsors listing and viewers
    who are currently sponsoring on a retired tier can see those retired tiers.
    Defaults to including only published tiers, which are visible to anyone who
    can see the GitHub Sponsors profile.
    """
    includeUnpublished: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Sponsors tiers returned from the connection.
    """
    orderBy: SponsorsTierOrder = {field: MONTHLY_PRICE_IN_CENTS, direction: ASC}
  ): SponsorsTierConnection

  """
  The HTTP URL for this Sponsors listing.
  """
  url: URI!
}

"""
A record that can be featured on a GitHub Sponsors profile.
"""
union SponsorsListingFeatureableItem = Repository | User

"""
A record that is promoted on a GitHub Sponsors profile.
"""
type SponsorsListingFeaturedItem implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Will either be a description from the sponsorable maintainer about why they
  featured this item, or the item's description itself, such as a user's bio
  from their GitHub profile page.
  """
  description: String

  """
  The record that is featured on the GitHub Sponsors profile.
  """
  featureable: SponsorsListingFeatureableItem!

  """
  The Node ID of the SponsorsListingFeaturedItem object
  """
  id: ID!

  """
  The position of this featured item on the GitHub Sponsors profile with a lower
  position indicating higher precedence. Starts at 1.
  """
  position: Int!

  """
  The GitHub Sponsors profile that features this record.
  """
  sponsorsListing: SponsorsListing!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The different kinds of records that can be featured on a GitHub Sponsors profile page.
"""
enum SponsorsListingFeaturedItemFeatureableType {
  """
  A repository owned by the user or organization with the GitHub Sponsors profile.
  """
  REPOSITORY

  """
  A user who belongs to the organization with the GitHub Sponsors profile.
  """
  USER
}

"""
Autogenerated input type of UnlinkRepositoryFromProject
"""
input UpdateParametersInput {
  """
  The list of required deployment environments
  """
  title: String!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  url: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  descriptionHTML: HTML!

  """
  The Node ID of the SponsorsTier object
  """
  id: ID!

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  Whether the project is public or not.
  """
  public: Boolean

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  Are successful deployments required before merging.
  """
  commitUrl: URI!

  """
  The Node ID of the Tag object
  """
  id: ID!

  """
  Are merge commits prohibited from being pushed to this branch.
  """
  clientMutationId: String

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnlockedEvent object
  """
  id: ID!

  """
  Indicates whether this tier is still a work in progress by the sponsorable and
  not yet published to the associated GitHub Sponsors profile. Draft tiers
  cannot be used for new sponsorships and will not be in use on existing
  sponsorships. Draft tiers cannot be seen by anyone but the admins of the
  GitHub Sponsors profile.
  """
  isDraft: Boolean!

  """
  Indicates whether this tier is published to the associated GitHub Sponsors
  profile. Published tiers are visible to anyone who can see the GitHub Sponsors
  profile, and are available for use in sponsorships if the GitHub Sponsors
  profile is publicly visible.
  """
  isPublished: Boolean!

  """
  Indicates whether this tier has been retired from the associated GitHub
  Sponsors profile. Retired tiers are no longer shown on the GitHub Sponsors
  profile and cannot be chosen for new sponsorships. Existing sponsorships may
  still use retired tiers if the sponsor selected the tier before it was retired.
  """
  isRetired: Boolean!

  """
  The sponsorships using this tier.
  """
  sponsorships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to return private sponsorships using this tier. Defaults to
    only returning public sponsorships on this tier.
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

"""
Parameters to be used for the tag_name_pattern rule
"""
type TagNamePatternParameters {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean!

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
Parameters to be used for the tag_name_pattern rule
"""
input TagNamePatternParametersInput {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
A team of users in an organization.
"""
input UpdateRepositoryRulesetInput {
  """
  The organization with the updated web commit signoff setting.
  """
  createdAt: DateTime!

  """
  The Node ID of the Sponsorship object
  """
  id: ID!

"""
The possible states of a thread subscription form action
"""
enum ThreadSubscriptionFormAction {
  """
  Whether the sponsorship is active. False implies the sponsor is a past sponsor
  of the maintainer, while true implies they are a current sponsor.
  """
  isActive: Boolean!

  """
  Whether this sponsorship represents a one-time payment versus a recurring sponsorship.
  """
  authorAssociation: CommentAuthorAssociation!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Whether the sponsor has chosen to receive sponsorship update emails sent from
  the sponsorable. Only returns a non-null value when the viewer has permission to know this.
  """
  SUBSCRIBE

  """
  The User can unsubscribe to the thread
  """
  UNSUBSCRIBE
}

"""
The possible states of a subscription.
"""
enum ThreadSubscriptionState {
  """
  The platform that was most recently used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The privacy level for this sponsorship.
  """
  DISABLED

  """
  The User is never notified because they are ignoring the list
  """
  bodyVersion: String!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The User is never notified because they are ignoring the thread
  """
  IGNORING_THREAD

  """
  The User is not recieving notifications from this thread
  """
  NONE

  """
  The User is notified becuase they are watching the list
  """
  SUBSCRIBED_TO_LIST

  """
  The User is notified because they are subscribed to the thread
  """
  discussion: TeamDiscussion!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The User is notified because they chose custom settings for this thread.
  """
  editor: Actor

  """
  The Node ID of the TeamDiscussionComment object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamChangeParentTeamAuditEntry object
  """
  id: ID!

  """
  The User is notified because they chose custom settings for this thread.
  """
  SUBSCRIBED_TO_THREAD_TYPE

  """
  The subscription status is currently unavailable.
  """
  UNAVAILABLE
}

"""
A topic aggregates entities that are related to a subject.
"""
type Topic implements Node & Starrable {
  """
  The Node ID of the Topic object
  """
  editTeamUrl: URI!

  """
  The Node ID of the Team object
  """
  id: ID!

  """
  The author of the newsletter.
  """
  author: User

  """
  The contents of the newsletter, the message the sponsorable wanted to give.
  """
  name: String!

  """
  A list of related topics, including aliases of this topic, sorted with the most relevant
  first. Returns up to 10 Topics.
  """
  createdAt: DateTime!

  """
  The Node ID of the SponsorshipNewsletter object
  """
  id: ID!

  """
  A list of repositories.
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

  """
  The HTTP path for this comment
  """
  resourcePath: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If true, only repositories whose owner can be sponsored via GitHub Sponsors will be returned.
    """
    sponsorableOnly: Boolean = false

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    role: TeamMemberRole
  ): TeamMemberConnection!

  """
  The HTTP path for the team' members
  """
  membersResourcePath: URI!

  """
  The HTTP URL for the team' members
  """
  membersUrl: URI!

  """
  The name of the team.
  """
  name: String!

  """
  The HTTP path creating a new team
  """
  newTeamResourcePath: URI!

  """
  The HTTP URL creating a new team
  """
  newTeamUrl: URI!

  """
  The notification setting that the team has set.
  """
  notificationSetting: TeamNotificationSetting!

  """
  The organization that owns this team.
  """
  organization: Organization!

  """
  The parent team of the team.
  """
  parentTeam: Team

  """
  Returns a count of how many stargazers there are on this object
  """
  url: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
How payment was made for funding a GitHub Sponsors sponsorship.
"""
enum SponsorshipPaymentSource {
  """
  Payment was made through GitHub.
  """
  GITHUB

  """
  Payment was made through Patreon.
  """
  PATREON
}

"""
The privacy of a sponsorship
"""
enum SponsorshipPrivacy {
  """
  Finds and returns the project according to the provided project number.
  """
  projectV2(
    """
    The Project number.
    """
    number: Int!
  ): ProjectV2

  """
  List of projects this team has collaborator access to.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filtering options for projects returned from this connection
    """
    filterBy: ProjectV2Filters = {}

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    The query to search projects by.
    """
    query: String = ""
  ): ProjectV2Connection!

"""
The possible default commit messages for squash merges.
"""
enum SquashMergeCommitMessage {
  """
  Default to a blank commit message.
  """
  BLANK

  """
  Default to the branch's commit messages.
  """
  COMMIT_MESSAGES

  """
  Default to the pull request's body.
  """
  PR_BODY
}

"""
The possible default commit titles for squash merges.
"""
enum SquashMergeCommitTitle {
  """
  Default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
  """
  COMMIT_OR_PR_TITLE

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
Represents an SSH signature on a Commit or Tag.
"""
type SshSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  True if the signature is valid and verified by GitHub.
  """
  isValid: Boolean!

  """
  Hex-encoded fingerprint of the key that signed this object.
  """
  keyFingerprint: String

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """
  ASCII-armored signature header from object.
  """
  signature: String!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  True if the signature was made with GitHub's signing key.
  """
  wasSignedByGitHub: Boolean!
}

"""
Ways in which star connections can be ordered.
"""
input StarOrder {
  """
  A list of repositories this team has access to.
  """
  stargazers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Order for the connection.
    """
    orderBy: TeamRepositoryOrder

    """
    The search string to look for. Repositories will be returned where the name contains your search string.
    """
    orderBy: StarOrder
  ): StargazerConnection!

  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
enum TopicSuggestionDeclineReason {
  """
  The suggested topic is not relevant to the repository.
  """
  NOT_RELEVANT @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  The viewer does not like the suggested topic.
  """
  PERSONAL_PREFERENCE @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  The name of project.
  """
  TOO_GENERAL @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  The Node ID of the UnlabeledEvent object
  """
  TOO_SPECIFIC @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")
}

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated input type of TransferEnterpriseOrganization
"""
interface Starrable {
  """
  The Node ID of the Starrable object
  """
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise where the organization should be transferred.
  """
  destinationEnterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the organization to transfer.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of TransferEnterpriseOrganization
"""
type TransferEnterpriseOrganizationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization for which a transfer was initiated.
  """
  organization: Organization
}

"""
Autogenerated input type of TransferIssue
"""
input UnlinkProjectV2FromRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether to create labels if they don't exist in the target repository (matched by name)
  """
  createLabelsIfMissing: Boolean = false

  """
  The Node ID of the issue to be transferred
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to unlink from the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of UnlinkProjectV2FromRepository
"""
type UnlinkProjectV2FromRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is no longer linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of StartOrganizationMigration
"""
input StartOrganizationMigrationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The migration source access token.
  """
  sourceAccessToken: String!

  """
  The URL of the organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The ID of the enterprise the target organization belongs to.
  """
  targetEnterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The name of the target organization.
  """
  targetOrgName: String!
}

"""
Autogenerated return type of StartOrganizationMigration
"""
type StartOrganizationMigrationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new organization migration.
  """
  orgMigration: OrganizationMigration
}

"""
Autogenerated input type of StartRepositoryMigration
"""
input StartRepositoryMigrationInput {
  """
  The migration source access token.
  """
  accessToken: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether to continue the migration on error. Defaults to `true`.
  """
  continueOnError: Boolean

  """
  The signed URL to access the user-uploaded git archive.
  """
  gitArchiveUrl: String

  """
  The GitHub personal access token of the user importing to the target repository.
  """
  createdAt: PreciseDateTime!

  """
  Whether to lock the source repository.
  """
  lockSource: Boolean

  """
  The signed URL to access the user-uploaded metadata archive.
  """
  id: ID!

  """
  The Node ID of the TransferredEvent object
  """
  id: ID!

  """
  The ID of the team to unlink from the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of UnlinkProjectV2FromTeam
"""
type UnlinkProjectV2FromTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the migration source.
  """
  authorAssociation: CommentAuthorAssociation!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The URL of the source repository.
  """
  sourceRepositoryUrl: URI

  """
  The visibility of the imported repository.
  """
  targetRepoVisibility: String
}

"""
Autogenerated input type of UnlinkRepositoryFromProject
"""
type UpdatePatreonSponsorabilityPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new repository migration.
  """
  sponsorsListing: SponsorsListing
}

"""
The possible team notification values.
"""
enum TeamNotificationSetting {
  """
  No one will receive notifications.
  """
  bodyVersion: String!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Everyone will receive notifications when the team is @mentioned.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    When provided, filters the connection such that results begin with the comment with this number.
    """
    fromComment: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Order for connection
    """
    orderBy: TeamDiscussionCommentOrder
  ): TeamDiscussionCommentConnection!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Ways in which team connections can be ordered.
"""
input UnmarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  contexts: [StatusContext!]!

  """
  The Node ID of the Status object
  """
  id: ID!

  """
  The ID of the Project to unmark as a template.
  """
  commentsUrl: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Required status check
"""
type StatusCheckConfiguration {
  """
  The status check context name that must be present on the commit.
  """
  context: String!

  """
  The optional integration ID that this status check must originate from.
  """
  integrationId: Int
}

"""
Required status check
"""
input StatusCheckConfigurationInput {
  """
  The status check context name that must be present on the commit.
  """
  context: String!

  """
  The optional integration ID that this status check must originate from.
  """
  integrationId: Int
}

"""
Represents the rollup for both the check runs and status for a commit.
"""
type UnmarkProjectV2AsTemplatePayload {
  """
  The programming language this file is written in.
  """
  language: Language

  """
  Number of lines in the file.
  """
  contexts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): StatusCheckRollupContextConnection!

  """
  The Node ID of the StatusCheckRollup object
  """
  id: ID!

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
"""
input UpdateProjectCardInput {
  """
  The number of check runs in this rollup.
  """
  checkRunCount: Int!

  """
  Counts of check runs by state.
  """
  checkRunCountsByState: [CheckRunStateCount!]

  """
  A list of edges.
  """
  editor: Actor

  """
  The Node ID of the TeamDiscussion object
  """
  id: ID!

  """
  Entry file name. (Base64-encoded)
  """
  nameRaw: Base64String!

  """
  The number of status contexts in this rollup.
  """
  statusContextCount: Int!

  """
  Counts of status contexts by state.
  """
  statusContextCountsByState: [StatusContextStateCount!]

  """
  Identifies the total count of items in the connection.
  """
  isPinned: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated return type of UpdateProjectV2Collaborators
"""
type UpdateProjectV2CollaboratorsPayload {
  """
  Whether or not the discussion is only visible to team members and organization owners.
  """
  isPrivate: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The Node ID of the UnlockedEvent object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamAddRepositoryAuditEntry object
  """
  id: ID!

  """
  The Node ID of the TeamRemoveMemberAuditEntry object
  """
  number: Int!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The full path of the file. (Base64-encoded)
  """
  pathRaw: Base64String

  """
  The Repository the tree entry belongs to
  """
  duplicate: IssueOrPullRequest

  """
  Entry byte size
  """
  description: String

  """
  The Node ID of the StatusContext object
  """
  id: ID!

  """
  If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule
  """
  resourcePath: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The ProjectCard ID to update.
  """
  team: Team!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The title of the discussion
  """
  title: String!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Represents a count of the state of a status context.
"""
type StatusContextStateCount {
  """
  The number of statuses with this state.
  """
  count: Int!

  """
  The state of a status context.
  """
  state: StatusState!
}

"""
The possible commit status states.
"""
input UnarchiveProjectV2ItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the ProjectV2Item to unarchive.
  """
  url: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The ID of the Project to archive the item from.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnarchiveProjectV2Item
"""
type UnarchiveProjectV2ItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item unarchived from the project.
  """
  viewerCanPin: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
A Stripe Connect account for receiving sponsorship funds from GitHub Sponsors.
"""
type StripeConnectAccount {
  """
  The account number used to identify this Stripe Connect account.
  """
  accountId: String!

  """
  The name of the country or region of an external account, such as a bank
  account, tied to the Stripe Connect account. Will only return a value when
  queried by the maintainer of the associated GitHub Sponsors profile
  themselves, or by an admin of the sponsorable organization.
  """
  billingCountryOrRegion: String

  """
  The name of the country or region of the Stripe Connect account. Will only
  return a value when queried by the maintainer of the associated GitHub
  Sponsors profile themselves, or by an admin of the sponsorable organization.
  """
  countryOrRegion: String

  """
  Whether this Stripe Connect account is currently in use for the associated GitHub Sponsors profile.
  """
  isActive: Boolean!

  """
  The GitHub Sponsors profile associated with this Stripe Connect account.
  """
  sponsorsListing: SponsorsListing!

  """
  The URL to access this Stripe Connect account on Stripe's website.
  """
  stripeDashboardUrl: URI!
}

"""
Autogenerated input type of SubmitPullRequestReview
"""
type UpdateProjectCardPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated ProjectCard.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
Autogenerated input type of UpdateProjectColumn
"""
input UpdateProjectColumnInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of project column.
  """
  name: String!

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  The value for the allow private repository forking policy on the enterprise.
  """
  policyValue: EnterpriseAllowPrivateRepositoryForkingPolicyValue

  """
  The value for the allow private repository forking setting on the enterprise.
  """
  projectColumnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

"""
Autogenerated return type of UpdateProjectColumn
"""
type UpdateProjectColumnPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the pinned issue that was unpinned
  """
  authorAssociation: CommentAuthorAssociation!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The Node ID of the UnassignedEvent object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamRemoveRepositoryAuditEntry object
  """
  id: ID!

  """
  The issue that was unpinned
  """
  projectColumn: ProjectColumn
}

"""
Autogenerated input type of UpdateProject
"""
input UpdateProjectInput {
  """
  The description of project.
  """
  bodyVersion: String!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  The name of the submodule in .gitmodules (Base64-encoded)
  """
  nameRaw: Base64String!

  """
  The path in the superproject that this submodule is located in
  """
  databaseId: Int

  """
  The path in the superproject that this submodule is located in (Base64-encoded)
  """
  pathRaw: Base64String!

  """
  The commit revision of the subproject repository being tracked by the submodule
  """
  discussion: TeamDiscussion!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The actor who edited the comment.
  """
  editor: Actor

  """
  The Node ID of the TeamDiscussionComment object
  """
  id: ID!

"""
Autogenerated input type of UnmarkProjectV2AsTemplate
"""
input UnmarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamChangeParentTeamAuditEntry object
  """
  id: ID!

  """
  The ID of the Project to unmark as a template.
  """
  number: Int!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated return type of UnmarkProjectV2AsTemplate
"""
type UnmarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
"""
interface Subscribable {
  """
  The Node ID of the Subscribable object
  """
  id: ID!

  """
  The Project ID to update.
  """
  resourcePath: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean

"""
Entities that can be subscribed to for web and email notifications.
"""
interface SubscribableThread {
  """
  The Node ID of the SubscribableThread object
  """
  id: ID!

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

"""
Represents a 'subscribed' event on a given `Subscribable`.
"""
type SubscribedEvent implements Node {
  """
  The ids of users or teams that can approve deployments to this environment
  """
  url: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The Node ID of the UnmarkedAsDuplicateEvent object
  """
  createdAt: DateTime!

  """
  The Node ID of the SubscribedEvent object
  """
  id: ID!

  """
  Whether the project is open or closed.
  """
  state: ProjectState
}

"""
Autogenerated input type of UnsubscribeFromNotifications
"""
input UnsubscribeFromNotificationsInput
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The NotificationThread IDs of the objects to unsubscribe from.
  """
  ids: [ID!]!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
Autogenerated return type of UnsubscribeFromNotifications
"""
type UnsubscribeFromNotificationsPayload
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Represents an 'unsubscribed' event on a given `Subscribable`.
"""
type UpdateProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnsubscribedEvent object
  """
  id: ID!

  """
  The id of the pinned issue that was unpinned
  """
  id: ID

  """
  The issue that was unpinned
  """
  project: Project
}

"""
Autogenerated input type of UpdateProjectV2Collaborators
"""
input UpdateProjectV2CollaboratorsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The collaborators to update.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnlabeledEvent object
  """
  commitUrl: URI!

  """
  The Node ID of the Tag object
  """
  id: ID!

  """
  The Node ID of the UnpinnedEvent object
  """
  id: ID!

  """
  The ID of the project to update the collaborators for.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated input type of UnlinkProjectV2FromRepository
"""
input UnlinkProjectV2FromRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to unlink from the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Parameters to be used for the tag_name_pattern rule
"""
type TagNamePatternParameters {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean!

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
Parameters to be used for the tag_name_pattern rule
"""
input TagNamePatternParametersInput {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
A team of users in an organization.
"""
type UnlinkProjectV2FromRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is no longer linked to.
  """
  authorAssociation: CommentAuthorAssociation!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated input type of UnlinkProjectV2FromTeam
"""
input UnlinkProjectV2FromTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to unlink from the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of UnlinkProjectV2FromTeam
"""
type UnlinkProjectV2FromTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  bodyVersion: String!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The team the project is unlinked from
  """
  team: Team
}

    """
    Order for connection
    """
    orderBy: TeamDiscussionCommentOrder
  ): TeamDiscussionCommentConnection!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The User can subscribe to the thread
  """
  commentsResourcePath: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The User can unsubscribe to the thread
  """
  commentsUrl: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
The possible states of a subscription.
"""
enum ThreadSubscriptionState {
  """
  The subscription status is currently disabled.
  """
  DISABLED

  """
  The User is never notified because they are ignoring the list
  """
  IGNORING_LIST

  """
  The User is never notified because they are ignoring the thread
  """
  IGNORING_THREAD

  """
  The User is not recieving notifications from this thread
  """
  editor: Actor

  """
  The Node ID of the TeamDiscussion object
  """
  id: ID!

  """
  The User is notified becuase they are watching the list
  """
  SUBSCRIBED_TO_LIST

  """
  The User is notified because they are subscribed to the thread
  """
  isPinned: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Whether or not the discussion is only visible to team members and organization owners.
  """
  isPrivate: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The User is notified because they chose custom settings for this thread.
  """
  SUBSCRIBED_TO_THREAD_TYPE

  """
  The subscription status is currently unavailable.
  """
  editTeamUrl: URI!

  """
  The Node ID of the Team object
  """
  id: ID!

"""
A topic aggregates entities that are related to a subject.
"""
type Topic implements Node & Starrable {
  """
  The Node ID of the Topic object
  """
  id: ID!

  """
  The topic's name.
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The collaborators granted a role
  """
  collaborators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The HTTP path for this discussion
  """
  resourcePath: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The team that defines the context of this discussion.
  """
  team: Team!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The notification setting that the team has set.
  """
  notificationSetting: TeamNotificationSetting!

  """
  The organization that owns this team.
  """
  title: String!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ActorConnection
}

"""
Autogenerated input type of UpdateRepositoryRuleset
"""
input UpdateRepositoryRulesetInput {
  """
  A list of actors that are allowed to bypass rules in this ruleset.
  """
  url: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Finds and returns the project according to the provided project number.
  """
  projectV2(
    """
    The Project number.
    """
    number: Int!
  ): ProjectV2

  """
  List of projects this team has collaborator access to.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filtering options for projects returned from this connection
    """
    filterBy: ProjectV2Filters = {}

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    The query to search projects by.
    """
    query: String = ""
  ): ProjectV2Connection!

  """
  A list of repositories this team has access to.
  """
  clientMutationId: String

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If true, only repositories whose owner can be sponsored via GitHub Sponsors will be returned.
    """
    sponsorableOnly: Boolean = false

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    last: Int

    """
    Order for the connection.
    """
    orderBy: TeamRepositoryOrder

    """
    The search string to look for. Repositories will be returned where the name contains your search string.
    """
    query: String
  ): TeamRepositoryConnection!

  """
  The HTTP path for this team's repositories
  """
  repositoriesResourcePath: URI!

  """
  The HTTP URL for this team's repositories
  """
  repositoriesUrl: URI!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Whether or not the current viewer can pin this discussion.
  """
  viewerCanPin: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  The NotificationThread IDs of the objects to unsubscribe from.
  """
  ids: [ID!]!
    @possibleTypes(
      concreteTypes: ["Commit", "Discussion", "Issue", "PullRequest", "Repository", "Team", "TeamDiscussion"]
      abstractType: "Subscribable"
    )
}

"""
The possible team notification values.
"""
enum TeamNotificationSetting {
  """
  No one will receive notifications.
  """
  NOTIFICATIONS_DISABLED

  """
  Everyone will receive notifications when the team is @mentioned.
  """
  NOTIFICATIONS_ENABLED
}

"""
Ways in which team connections can be ordered.
"""
type UnsubscribeFromNotificationsPayload
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Represents an 'unsubscribed' event on a given `Subscribable`.
"""
type UnsubscribedEvent implements Node {
  """
  Can admins override branch protection.
  """
  conditions: RepositoryRuleConditionsInput

  """
  Whether users can pull changes from upstream when the branch is locked. Set to
  `true` to allow fork syncing. Set to `false` to prevent fork syncing.
  """
  authorAssociation: CommentAuthorAssociation!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The Node ID of the UnlockedEvent object
  """
  id: ID!

  """
  The Node ID of the UnsubscribedEvent object
  """
  id: ID!

  """
  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
  """
  lockBranch: Boolean

  """
  The glob-like pattern used to determine matching branches.
  """
  bodyVersion: String!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The ids of users or teams that can approve deployments to this environment
  """
  enforcement: RuleEnforcement

  """
  Whether the most recent push must be approved by someone other than the person who pushed it
  """
  requireLastPushApproval: Boolean

  """
  Number of approving reviews required to update matching branches.
  """
  NOT_RELEVANT @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  The list of required deployment environments
  """
  discussion: TeamDiscussion!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  editor: Actor

  """
  The Node ID of the TeamDiscussionComment object
  """
  id: ID!

  """
  The Node ID of the TeamRemoveMemberAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamAddMemberAuditEntry object
  """
  id: ID!

  """
  The list of rules for this ruleset
  """
  TOO_GENERAL @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  The target of the ruleset.
  """
  number: Int!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated return type of UpdateRepositoryRuleset
"""
type UpdateRepositoryRulesetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created Ruleset.
  """
  ruleset: RepositoryRuleset
}

"""
Autogenerated input type of TransferEnterpriseOrganization
"""
input TransferEnterpriseOrganizationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise where the organization should be transferred.
  """
  resourcePath: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The ID of the organization to transfer.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of TransferEnterpriseOrganization
"""
type TransferEnterpriseOrganizationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  url: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The organization for which a transfer was initiated.
  """
  organization: Organization
}

"""
Autogenerated input type of TransferIssue
"""
input UpdateRepositoryWebCommitSignoffSettingInput {
  """
  Can admins override branch protection.
  """
  clientMutationId: String

  """
  Whether to create labels if they don't exist in the target repository (matched by name)
  """
  createLabelsIfMissing: Boolean = false

  """
  The Node ID of the issue to be transferred
  """
  lockAllowsFetchAndMerge: Boolean

"""
Autogenerated input type of UnmarkProjectV2AsTemplate
"""
input UnmarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to unmark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnmarkProjectV2AsTemplate
"""
type UnmarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
"""
type UnmarkedAsDuplicateEvent implements Node {
  """
  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
  """
  lockBranch: Boolean

  """
  The glob-like pattern used to determine matching branches.
  """
  requiresDeployments: Boolean

  """
  Are merge commits prohibited from being pushed to this branch.
  """
  fromRepository: Repository

  """
  The Node ID of the TransferredEvent object
  """
  id: ID!

  """
  Whether the most recent push must be approved by someone other than the person who pushed it
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the UnmarkedAsDuplicateEvent object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamAddRepositoryAuditEntry object
  """
  id: ID!

  """
  The Node ID of the TeamRemoveRepositoryAuditEntry object
  """
  id: ID!

  """
  Number of approving reviews required to update matching branches.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The list of required deployment environments
  """
  requiredDeploymentEnvironments: [String!]

  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  entries: [TreeEntry!]

  """
  The Node ID of the Tree object
  """
  id: ID!

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  The updated repository.
  """
  repository: Repository
}

"""
Autogenerated input type of UpdateSponsorshipPreferences
"""
input UpdateUserListInput {
  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  countMembersAlreadyRequested: Boolean = true

  """
  Turn on or off review assignment
  """
  clientMutationId: String

  """
  The programming language this file is written in.
  """
  language: Language

  """
  Number of lines in the file.
  """
  requiresDeployments: Boolean

  """
  The id of the pinned issue that was unpinned
  """
  id: ID

  """
  The issue that was unpinned
  """
  description: String

  """
  Entry file name. (Base64-encoded)
  """
  nameRaw: Base64String!

  """
  Entry file object.
  """
  isPrivate: Boolean

  """
  Include the members of any child teams when assigning
  """
  createdAt: DateTime!

  """
  The Node ID of the UnpinnedEvent object
  """
  id: ID!

  """
  The full path of the file. (Base64-encoded)
  """
  pathRaw: Base64String

  """
  The Repository the tree entry belongs to
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  Entry byte size
  """
  size: Int!

  """
  If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule
  """
  removeTeamRequest: Boolean = true

  """
  The number of team members to assign
  """
  name: String
}

"""
An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string.
"""
scalar URI

"""
Autogenerated input type of UnarchiveProjectV2Item
"""
input UnarchiveProjectV2ItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the ProjectV2Item to unarchive.
  """
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])

  """
  The ID of the Project to archive the item from.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnarchiveProjectV2Item
"""
type UnarchiveProjectV2ItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item unarchived from the project.
  """
  item: ProjectV2Item
}

"""
Autogenerated input type of UnarchiveRepository
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamChangeParentTeamAuditEntry object
  """
  id: ID!

  """
  The list that was just updated
  """
  list: UserList
}

"""
The possible team notification values.
"""
enum TeamNotificationSetting {
  """
  No one will receive notifications.
  """
  NOTIFICATIONS_DISABLED

  """
  Everyone will receive notifications when the team is @mentioned.
  """
  NOTIFICATIONS_ENABLED
}

"""
Ways in which team connections can be ordered.
"""
input UnsubscribeFromNotificationsInput
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The NotificationThread IDs of the objects to unsubscribe from.
  """
  ids: [ID!]!
    @possibleTypes(
      concreteTypes: ["Commit", "Discussion", "Issue", "PullRequest", "Repository", "Team", "TeamDiscussion"]
      abstractType: "Subscribable"
    )
}

"""
Autogenerated return type of UnsubscribeFromNotifications
"""
type UnsubscribeFromNotificationsPayload
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Represents an 'unsubscribed' event on a given `Subscribable`.
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item to add to the list
  """
  createdAt: DateTime!

  """
  The Node ID of the UnassignedEvent object
  """
  id: ID!

  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  countMembersAlreadyRequested: Boolean = true

  """
  Turn on or off review assignment
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  The suggested lists to create and add this item to
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
The possible states of a thread subscription form action
"""
enum ThreadSubscriptionFormAction {
  """
  The User cannot subscribe or unsubscribe to the thread
  """
  NONE

  """
  The User can subscribe to the thread
  """
  SUBSCRIBE

  """
  The User can unsubscribe to the thread
  """
  UNSUBSCRIBE
}

"""
The possible states of a subscription.
"""
enum ThreadSubscriptionState {
  """
  The subscription status is currently disabled.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamRemoveMemberAuditEntry object
  """
  id: ID!

  """
  The User is never notified because they are ignoring the list
  """
  IGNORING_LIST

  """
  The User is never notified because they are ignoring the thread
  """
  IGNORING_THREAD

  """
  The User is not recieving notifications from this thread
  """
  NONE

  """
  The User is notified becuase they are watching the list
  """
  SUBSCRIBED_TO_LIST

  """
  The User is notified because they are subscribed to the thread
  """
  SUBSCRIBED_TO_THREAD

  """
  The User is notified because they chose custom settings for this thread.
  """
  SUBSCRIBED_TO_THREAD_EVENTS

  """
  The User is notified because they chose custom settings for this thread.
  """
  SUBSCRIBED_TO_THREAD_TYPE

  """
  The subscription status is currently unavailable.
  """
  UNAVAILABLE
}

"""
A topic aggregates entities that are related to a subject.
"""
type Topic implements Node & Starrable {
  """
  The Node ID of the Topic object
  """
  id: ID!

  """
  Include the members of any child teams when assigning
  """
  authorAssociation: CommentAuthorAssociation!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Notify the entire team of the PR if it is delegated
  """
  item: UserListItems

  """
  Remove the team review request when assigning
  """
  removeTeamRequest: Boolean = true

  """
  The number of team members to assign
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  bodyVersion: String!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  Determine if this repository owner has any items that can be pinned to their profile.
  """
  anyPinnableItems(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    orderBy: TeamDiscussionCommentOrder
  ): TeamDiscussionCommentConnection!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The HTTP path for discussion comments
  """
  commentsResourcePath: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Can admins override branch protection.
  """
  commentsUrl: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  Whether users can pull changes from upstream when the branch is locked. Set to
  `true` to allow fork syncing. Set to `false` to prevent fork syncing.
  """
  lockAllowsFetchAndMerge: Boolean

  """
  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
  """
  lockBranch: Boolean

  """
  The glob-like pattern used to determine matching branches.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamRemoveRepositoryAuditEntry object
  """
  editor: Actor

  """
  The Node ID of the TeamDiscussion object
  """
  id: ID!

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  Whether the most recent push must be approved by someone other than the person who pushed it
  """
  isPinned: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Whether or not the discussion is only visible to team members and organization owners.
  """
  isPrivate: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  The list of required deployment environments
  """
  requiredDeploymentEnvironments: [String!]

  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  number: Int!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  NOT_RELEVANT @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  The Node ID of the UnlabeledEvent object
  """
  id: ID!

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  resourcePath: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  team: Team!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated input type of UnlinkProjectV2FromRepository
"""
input UnlinkProjectV2FromRepositoryInput {
  """
  The title of the discussion
  """
  title: String!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The ID of the project to unlink from the repository.
  """
  TOO_GENERAL @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  The ID of the repository to unlink from the project.
  """
  url: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated return type of UnlinkProjectV2FromRepository
"""
type UnlinkProjectV2FromRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is no longer linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of TransferEnterpriseOrganization
"""
input TransferEnterpriseOrganizationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise where the organization should be transferred.
  """
  destinationEnterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the organization to transfer.
  """
  viewerCanPin: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated return type of TransferEnterpriseOrganization
"""
type TransferEnterpriseOrganizationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization for which a transfer was initiated.
  """
  organization: Organization
}

"""
Autogenerated input type of TransferIssue
"""
input UnlinkProjectV2FromTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether to create labels if they don't exist in the target repository (matched by name)
  """
  createLabelsIfMissing: Boolean = false

  """
  The Node ID of the issue to be transferred
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to unlink from the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of UnlinkProjectV2FromTeam
"""
type UnlinkProjectV2FromTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is unlinked from
  """
  authorAssociation: CommentAuthorAssociation!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated input type of UnlinkRepositoryFromProject
"""
type UpdatePatreonSponsorabilityPayload {
  """
  The name of the ruleset.
  """
  name: String

  """
  Are successful deployments required before merging.
  """
  fromRepository: Repository

  """
  The Node ID of the TransferredEvent object
  """
  id: ID!

  """
  Are merge commits prohibited from being pushed to this branch.
  """
  bodyVersion: String!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  Indicates if the repository should have the issues feature enabled.
  """
  rules: [RepositoryRuleInput!]

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  discussion: TeamDiscussion!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The Node ID of the Tree object
  """
  editor: Actor

  """
  The Node ID of the TeamDiscussionComment object
  """
  id: ID!

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

"""
Autogenerated return type of UpdateRepositoryWebCommitSignoffSetting
"""
type UpdateRepositoryWebCommitSignoffSettingPayload {
  """
  The organization with the updated web commit signoff setting.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  number: Int!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  The value for the allow private repository forking policy on the enterprise.
  """
  policyValue: EnterpriseAllowPrivateRepositoryForkingPolicyValue

  """
  The programming language this file is written in.
  """
  language: Language

  """
  Number of lines in the file.
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  resourcePath: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  createdAt: DateTime!

  """
  Entry file name. (Base64-encoded)
  """
  url: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
The possible states of a thread subscription form action
"""
enum ThreadSubscriptionFormAction {
  """
  The User cannot subscribe or unsubscribe to the thread
  """
  NONE

  """
  The User can subscribe to the thread
  """
  SUBSCRIBE

  """
  The User can unsubscribe to the thread
  """
  UNSUBSCRIBE
}

"""
The possible states of a subscription.
"""
enum ThreadSubscriptionState {
  """
  The subscription status is currently disabled.
  """
  DISABLED

  """
  The User is never notified because they are ignoring the list
  """
  IGNORING_LIST

  """
  The User is never notified because they are ignoring the thread
  """
  IGNORING_THREAD

  """
  The User is not recieving notifications from this thread
  """
  NONE

  """
  The User is notified becuase they are watching the list
  """
  SUBSCRIBED_TO_LIST

  """
  The User is notified because they are subscribed to the thread
  """
  SUBSCRIBED_TO_THREAD

  """
  The User is notified because they chose custom settings for this thread.
  """
  SUBSCRIBED_TO_THREAD_EVENTS

  """
  The User is notified because they chose custom settings for this thread.
  """
  SUBSCRIBED_TO_THREAD_TYPE

  """
  The subscription status is currently unavailable.
  """
  UNAVAILABLE
}

"""
A topic aggregates entities that are related to a subject.
"""
type Topic implements Node & Starrable {
  """
  The Node ID of the Topic object
  """
  id: ID!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The full path of the file. (Base64-encoded)
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If true, only repositories whose owner can be sponsored via GitHub Sponsors will be returned.
    """
    sponsorableOnly: Boolean = false

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Entry byte size
  """
  size: Int!

  """
  If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule
  """
  policyValue: EnterpriseAllowPrivateRepositoryForkingPolicyValue

  """
  The value for the allow private repository forking setting on the enterprise.
  """
  sponsorsListing: SponsorsListing
}

"""
An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string.
"""
scalar URI

"""
Autogenerated input type of UnarchiveProjectV2Item
"""
input UnarchiveProjectV2ItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the ProjectV2Item to unarchive.
  """
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])

  """
  The ID of the Project to archive the item from.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnarchiveProjectV2Item
"""
type UnarchiveProjectV2ItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item unarchived from the project.
  """
  item: ProjectV2Item
}

"""
Autogenerated input type of UnarchiveRepository
"""
enum TopicSuggestionDeclineReason {
  """
  The suggested topic is not relevant to the repository.
  """
  NOT_RELEVANT @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  A unique identifier for the client performing the mutation.
  """
  PERSONAL_PREFERENCE @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  TOO_GENERAL @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  TOO_SPECIFIC @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

"""
Autogenerated input type of UpdateProjectV2Collaborators
"""
input UpdateProjectV2CollaboratorsInput {
  """
  The organization with the updated web commit signoff setting.
  """
  organization: Organization
}

"""
Autogenerated input type of TransferEnterpriseOrganization
"""
input TransferEnterpriseOrganizationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise where the organization should be transferred.
  """
  destinationEnterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the organization to transfer.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of TransferEnterpriseOrganization
"""
type TransferEnterpriseOrganizationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization for which a transfer was initiated.
  """
  organization: Organization
}

"""
Autogenerated input type of TransferIssue
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  createdAt: DateTime!

  """
  Whether to create labels if they don't exist in the target repository (matched by name)
  """
  createLabelsIfMissing: Boolean = false

  """
  The Node ID of the issue to be transferred
  """
  id: ID!

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
The possible team notification values.
"""
enum TeamNotificationSetting {
  """
  No one will receive notifications.
  """
  NOTIFICATIONS_DISABLED

  """
  Everyone will receive notifications when the team is @mentioned.
  """
  NOTIFICATIONS_ENABLED
}

"""
Ways in which team connections can be ordered.
"""
type UpdatePatreonSponsorabilityPayload {
  """
  Turn on or off review assignment
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  The collaborators granted a role
  """
  collaborators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The repository this came from
  """
  fromRepository: Repository

  """
  The Node ID of the TransferredEvent object
  """
  id: ID!

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UnmarkProjectV2AsTemplate
"""
input UnmarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to unmark as a template.
  """
  entries: [TreeEntry!]

  """
  The Node ID of the Tree object
  """
  id: ID!

"""
Autogenerated return type of UnmarkProjectV2AsTemplate
"""
type UnmarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
"""
input UpdateProjectCardInput {
  """
  Notify the entire team of the PR if it is delegated
  """
  clientMutationId: String

  """
  Whether or not the ProjectCard should be archived
  """
  isArchived: Boolean

  """
  The programming language this file is written in.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamRemoveMemberAuditEntry object
  """
  id: ID!

  """
  Number of lines in the file.
  """
  preventSelfReview: Boolean

  """
  The ids of users or teams that can approve deployments to this environment
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the UnmarkedAsDuplicateEvent object
  """
  id: ID!

  """
  Entry file name. (Base64-encoded)
  """
  nameRaw: Base64String!

  """
  Entry file object.
  """
  projectCardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])
}

"""
Autogenerated return type of UpdateProjectCard
"""
type UnlabeledEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The full path of the file. (Base64-encoded)
  """
  pathRaw: Base64String

  """
  The Repository the tree entry belongs to
  """
  id: ID!

  """
  Entry byte size
  """
  size: Int!

  """
  If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule
  """
  clientMutationId: String

  """
  The updated ProjectCard.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
Autogenerated input type of UnlinkProjectV2FromRepository
"""
Autogenerated input type of UnarchiveProjectV2Item
"""
input UnarchiveProjectV2ItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the ProjectV2Item to unarchive.
  """
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])

  """
  The ID of the Project to archive the item from.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnarchiveProjectV2Item
"""
type UnarchiveProjectV2ItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item unarchived from the project.
  """
  item: ProjectV2Item
}

"""
Autogenerated input type of UnarchiveRepository
"""
input UnarchiveRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to unlink from the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of UnlinkProjectV2FromRepository
"""
type UnlinkProjectV2FromRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is no longer linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of UnlinkProjectV2FromTeam
"""
input UnlinkProjectV2FromTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamRemoveRepositoryAuditEntry object
  """
  id: ID!

  """
  The ID of the project to unlink from the team.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnassignedEvent object
  """
  id: ID!

  """
  The ID of the team to unlink from the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of UnlinkProjectV2FromTeam
"""
type UnlinkProjectV2FromTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is unlinked from
  """
  team: Team
}

"""
Autogenerated input type of UnlinkRepositoryFromProject
"""
input UpdateProjectColumnInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of project column.
  """
  name: String!

  """
  The ProjectColumn ID to update.
  """
  projectColumnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

"""
Autogenerated return type of UpdateProjectColumn
"""
type UpdateProjectColumnPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  The updated project column.
  """
  projectColumn: ProjectColumn
}

"""
Autogenerated input type of UpdateProject
"""
input UpdateProjectInput {
  """
  The description of project.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the pinned issue that was unpinned
  """
  id: ID

  """
  The issue that was unpinned
  """
  policyValue: EnterpriseAllowPrivateRepositoryForkingPolicyValue

  """
  The value for the allow private repository forking setting on the enterprise.
  """
  name: String

  """
  The Project ID to update.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnpinnedEvent object
  """
  id: ID!

  """
  Whether the project is public or not.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnlabeledEvent object
  """
  id: ID!

  """
  The Node ID of the UnlockedEvent object
  """
  id: ID!

  """
  Whether the project is open or closed.
  """
  state: ProjectState
}

"""
Autogenerated input type of UnlinkProjectV2FromRepository
"""
input UnlinkProjectV2FromRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to unlink from the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of UnlinkProjectV2FromRepository
"""
type UnlinkProjectV2FromRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is no longer linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of UnlinkProjectV2FromTeam
"""
input UnlinkProjectV2FromTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to unlink from the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of UnlinkProjectV2FromTeam
"""
type UnlinkProjectV2FromTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is unlinked from
  """
  team: Team
}

"""
Autogenerated input type of UnlinkRepositoryFromProject
"""
type UpdateProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated project.
  """
  project: Project
}

"""
Autogenerated input type of UpdateProjectV2Collaborators
"""
input UpdateProjectV2CollaboratorsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The collaborators to update.
  """
  collaborators: [ProjectV2Collaborator!]!

"""
Autogenerated input type of UnsubscribeFromNotifications
"""
input UnsubscribeFromNotificationsInput
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The NotificationThread IDs of the objects to unsubscribe from.
  """
  ids: [ID!]!
    @possibleTypes(
      concreteTypes: ["Commit", "Discussion", "Issue", "PullRequest", "Repository", "Team", "TeamDiscussion"]
      abstractType: "Subscribable"
    )
}

"""
Autogenerated return type of UnsubscribeFromNotifications
"""
type UnsubscribeFromNotificationsPayload
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
The possible states of a thread subscription form action
"""
enum ThreadSubscriptionFormAction {
  """
  The User cannot subscribe or unsubscribe to the thread
  """
  NONE

  """
  The User can subscribe to the thread
  """
  SUBSCRIBE

  """
  The User can unsubscribe to the thread
  """
  UNSUBSCRIBE
}

"""
The possible states of a subscription.
"""
enum ThreadSubscriptionState {
  """
  The subscription status is currently disabled.
  """
  DISABLED

  """
  The User is never notified because they are ignoring the list
  """
  IGNORING_LIST

  """
  The User is never notified because they are ignoring the thread
  """
  IGNORING_THREAD

  """
  The User is not recieving notifications from this thread
  """
  NONE

  """
  The User is notified becuase they are watching the list
  """
  SUBSCRIBED_TO_LIST

  """
  The User is notified because they are subscribed to the thread
  """
  SUBSCRIBED_TO_THREAD

  """
  The User is notified because they chose custom settings for this thread.
  """
  SUBSCRIBED_TO_THREAD_EVENTS

  """
  The User is notified because they chose custom settings for this thread.
  """
  SUBSCRIBED_TO_THREAD_TYPE

  """
  The subscription status is currently unavailable.
  """
  UNAVAILABLE
}

"""
A topic aggregates entities that are related to a subject.
"""
type Topic implements Node & Starrable {
  """
  The Node ID of the Topic object
  """
  id: ID!

  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean

  """
  The ids of users or teams that can approve deployments to this environment
  """
  createdAt: DateTime!

  """
  The Node ID of the UnlockedEvent object
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If true, only repositories whose owner can be sponsored via GitHub Sponsors will be returned.
    """
    sponsorableOnly: Boolean = false

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

"""
Autogenerated return type of UpdateProjectV2Collaborators
"""
type UpdateProjectV2CollaboratorsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The collaborators granted a role
  """
  collaborators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Order for connection
    """
    orderBy: StarOrder
  ): StargazerConnection!

  """
  Returns a boolean indicating whether the viewing user has starred this starrable.
  """
  viewerHasStarred: Boolean!
}

"""
Metadata for an audit entry with a topic.
"""
interface TopicAuditEntryData {
  """
  The name of the topic added to the repository
  """
  topic: Topic

  """
  The name of the topic added to the repository
  """
  topicName: String
}

"""
Reason that the suggested topic is declined.
"""
enum TopicSuggestionDeclineReason {
  """
  The suggested topic is not relevant to the repository.
  """
  NOT_RELEVANT @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  The viewer does not like the suggested topic.
  """
  PERSONAL_PREFERENCE @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  The suggested topic is too general for the repository.
  """
  TOO_GENERAL @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  The suggested topic is too specific for the repository (e.g. #ruby-on-rails-version-4-2-1).
  """
  TOO_SPECIFIC @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")
}

"""
Autogenerated input type of UnmarkProjectV2AsTemplate
"""
input UnmarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to unmark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated input type of TransferEnterpriseOrganization
"""
input TransferEnterpriseOrganizationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise where the organization should be transferred.
  """
  destinationEnterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the organization to transfer.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of TransferEnterpriseOrganization
"""
type TransferEnterpriseOrganizationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization for which a transfer was initiated.
  """
  organization: Organization
}

"""
Autogenerated input type of TransferIssue
"""
type UnmarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether to create labels if they don't exist in the target repository (matched by name)
  """
  createLabelsIfMissing: Boolean = false

  """
  The Node ID of the issue to be transferred
  """
  issueId: ID! @possibleTypes(concreteTypes: ["Issue"])

  """
  The Node ID of the repository the issue should be transferred to
  """
  projectV2: ProjectV2
}

"""
Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
"""
type UnmarkedAsDuplicateEvent implements Node {
  """
  Indicates if the repository should require signoff on web-based commits.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The update branch method to use. If omitted, defaults to 'MERGE'
  """
  updateMethod: PullRequestBranchUpdateMethod
}

"""
Autogenerated return type of UpdateRepositoryWebCommitSignoffSetting
"""
type UpdateRepositoryWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the UnmarkedAsDuplicateEvent object
  """
  fromRepository: Repository

  """
  The Node ID of the TransferredEvent object
  """
  id: ID!

  """
  The updated repository.
  """
  repository: Repository
}

"""
Autogenerated input type of UpdateSponsorshipPreferences
"""
input UpdateUserListInput {
  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  countMembersAlreadyRequested: Boolean = true

  """
  Turn on or off review assignment
  """
  clientMutationId: String

  """
  A description of the list
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
Autogenerated input type of UnmarkProjectV2AsTemplate
"""
input UnmarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  entries: [TreeEntry!]

  """
  The Node ID of the Tree object
  """
  id: ID!

  """
  The ID of the Project to unmark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnmarkProjectV2AsTemplate
"""
type UnmarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
"""
type UnmarkedAsDuplicateEvent implements Node {
  """
  Whether or not the list is private
  """
  isPrivate: Boolean

  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

  """
  The programming language this file is written in.
  """
  language: Language

  """
  Number of lines in the file.
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  Whether users can pull changes from upstream when the branch is locked. Set to
  `true` to allow fork syncing. Set to `false` to prevent fork syncing.
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the UnmarkedAsDuplicateEvent object
  """
  id: ID!

  """
  Entry file name. (Base64-encoded)
  """
  nameRaw: Base64String!

  """
  Entry file object.
  """
  lockBranch: Boolean

  """
  The id of the pinned issue that was unpinned
  """
  id: ID

  """
  The issue that was unpinned
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  The full path of the file. (Base64-encoded)
  """
  pathRaw: Base64String

  """
  The Repository the tree entry belongs to
  """
  requireLastPushApproval: Boolean

  """
  Entry byte size
  """
  size: Int!

  """
  If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule
  """
  createdAt: DateTime!

  """
  The Node ID of the UnpinnedEvent object
  """
  id: ID!

"""
Autogenerated input type of UnarchiveProjectV2Item
"""
input UnarchiveProjectV2ItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the ProjectV2Item to unarchive.
  """
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])

  """
  The ID of the Project to archive the item from.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnarchiveProjectV2Item
"""
type UnarchiveProjectV2ItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item unarchived from the project.
  """
  item: ProjectV2Item
}

"""
Autogenerated input type of UnarchiveRepository
"""
input UnarchiveRepositoryInput {
  """
  The list of required deployment environments
  """
  requiredDeploymentEnvironments: [String!]

  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  list: UserList
}

"""
Autogenerated input type of UpdateUserListsForItem
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the pinned issue that was unpinned
  """
  id: ID

  """
  The issue that was unpinned
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  countMembersAlreadyRequested: Boolean = true

  """
  Turn on or off review assignment
  """
  createdAt: DateTime!

  """
  The Node ID of the UnpinnedEvent object
  """
  createdAt: DateTime!

  """
  The Node ID of the UnassignedEvent object
  """
  id: ID!

  """
  The suggested lists to create and add this item to
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated input type of UnsubscribeFromNotifications
"""
input UnsubscribeFromNotificationsInput
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The NotificationThread IDs of the objects to unsubscribe from.
  """
  ids: [ID!]!
    @possibleTypes(
      concreteTypes: ["Commit", "Discussion", "Issue", "PullRequest", "Repository", "Team", "TeamDiscussion"]
      abstractType: "Subscribable"
    )
}

"""
Autogenerated return type of UnsubscribeFromNotifications
"""
type UnsubscribeFromNotificationsPayload
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Autogenerated input type of UnsubscribeFromNotifications
"""
input UnsubscribeFromNotificationsInput
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The NotificationThread IDs of the objects to unsubscribe from.
  """
  ids: [ID!]!
    @possibleTypes(
      concreteTypes: ["Commit", "Discussion", "Issue", "PullRequest", "Repository", "Team", "TeamDiscussion"]
      abstractType: "Subscribable"
    )
}

"""
Autogenerated return type of UnsubscribeFromNotifications
"""
type UnsubscribeFromNotificationsPayload
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Represents an 'unsubscribed' event on a given `Subscribable`.
"""
type UpdateUserListsForItemPayload {
  """
  Are successful deployments required before merging.
  """
  requiresDeployments: Boolean

  """
  Are merge commits prohibited from being pushed to this branch.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnsubscribedEvent object
  """
  id: ID!

  """
  The Node ID of the UnsubscribedEvent object
  """
  id: ID!

  """
  The item that was added
  """
  item: UserListItems

  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

  """
  Notify the entire team of the PR if it is delegated
  """
  lists: [UserList!]

  """
  Remove the team review request when assigning
  """
  removeTeamRequest: Boolean = true

  """
  The number of team members to assign
  """
  user: User
}

"""
A user is an individual's account on GitHub that owns repositories and can make new content.
"""
type User implements Actor & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnlabeledEvent object
  """
  id: ID!

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

"""
Autogenerated input type of UnlinkProjectV2FromRepository
"""
input UnlinkProjectV2FromRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to unlink from the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of UnlinkProjectV2FromRepository
"""
type UnlinkProjectV2FromRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is no longer linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of UnlinkProjectV2FromTeam
"""
input UnlinkProjectV2FromTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to unlink from the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of UnlinkProjectV2FromTeam
"""
type UnlinkProjectV2FromTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is unlinked from
  """
  team: Team
}

"""
Autogenerated input type of UnlinkRepositoryFromProject
"""
input UpdateUserListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Will new commits pushed to matching branches dismiss pull request review approvals.
  """
  dismissesStaleReviews: Boolean

  """
  Can admins override branch protection.
  """
  description: String

  """
  Whether users can pull changes from upstream when the branch is locked. Set to
  `true` to allow fork syncing. Set to `false` to prevent fork syncing.
  """
  lockAllowsFetchAndMerge: Boolean

  """
  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
  """
  lockBranch: Boolean

  """
  The glob-like pattern used to determine matching branches.
  """
  lockAllowsFetchAndMerge: Boolean

  """
  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
  """
  lockBranch: Boolean

  """
  Whether the most recent push must be approved by someone other than the person who pushed it
  """
  requireLastPushApproval: Boolean

  """
  Number of approving reviews required to update matching branches.
  """
  hasDiscussionsEnabled: Boolean

  """
  The list of required deployment environments
  """
  requiredDeploymentEnvironments: [String!]

  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  hasIssuesEnabled: Boolean

  """
  Whether the most recent push must be approved by someone other than the person who pushed it
  """
  requireLastPushApproval: Boolean

  """
  Number of approving reviews required to update matching branches.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The list of required deployment environments
  """
  requiredDeploymentEnvironments: [String!]

  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  updateMethod: PullRequestBranchUpdateMethod
}

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean

  """
  Are successful deployments required before merging.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnlockedEvent object
  """
  id: ID!

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A list of actors that are allowed to bypass rules in this ruleset.
  """
  bypassActors: [RepositoryRulesetBypassActorInput!]

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  Are successful deployments required before merging.
  """
  requiresDeployments: Boolean

  """
  Are merge commits prohibited from being pushed to this branch.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  Indicates if the repository should have the wiki feature enabled.
  """
  repositoryRulesetId: ID! @possibleTypes(concreteTypes: ["RepositoryRuleset"])

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  The ID of the repository to update.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  environmentId: ID! @possibleTypes(concreteTypes: ["Environment"])

"""
Autogenerated input type of UnmarkProjectV2AsTemplate
"""
input UnmarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to unmark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnmarkProjectV2AsTemplate
"""
type UnmarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
"""
type UnmarkedAsDuplicateEvent implements Node {
  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean

  """
  The ids of users or teams that can approve deployments to this environment
  """
  reviewers: [ID!]

  """
  The organization with the updated web commit signoff setting.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the UnmarkedAsDuplicateEvent object
  """
  id: ID!

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateProjectCard
"""
input UpdateProjectCardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not the ProjectCard should be archived
  """
  isArchived: Boolean

"""
Autogenerated return type of UpdateProjectV2Collaborators
"""
type UpdateProjectV2CollaboratorsPayload {
  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean

  """
  The id of the pinned issue that was unpinned
  """
  id: ID

  """
  The issue that was unpinned
  """
  note: String

  """
  The ProjectCard ID to update.
  """
  projectCardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])
}

"""
Autogenerated return type of UpdateProjectCard
"""
type UpdateProjectCardPayload {
  """
  The suggested lists to create and add this item to
  """
  createdAt: DateTime!

  """
  The Node ID of the UnpinnedEvent object
  """
  id: ID!

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  The updated ProjectCard.
  """
  projectCard: ProjectCard
}

"""
Autogenerated input type of UpdateProjectColumn
"""
input UpdateProjectColumnInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of project column.
  """
  name: String!

  """
  The value for the allow private repository forking policy on the enterprise.
  """
  policyValue: EnterpriseAllowPrivateRepositoryForkingPolicyValue

  """
  The value for the allow private repository forking setting on the enterprise.
  """
  projectColumnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

"""
Autogenerated return type of UpdateProjectColumn
"""
type UpdateProjectColumnPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated project column.
  """
  projectColumn: ProjectColumn
}

"""
Autogenerated input type of UnsubscribeFromNotifications
"""
input UnsubscribeFromNotificationsInput
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The NotificationThread IDs of the objects to unsubscribe from.
  """
  ids: [ID!]!
    @possibleTypes(
      concreteTypes: ["Commit", "Discussion", "Issue", "PullRequest", "Repository", "Team", "TeamDiscussion"]
      abstractType: "Subscribable"
    )
}

"""
Autogenerated return type of UnsubscribeFromNotifications
"""
type UnsubscribeFromNotificationsPayload
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Represents an 'unsubscribed' event on a given `Subscribable`.
"""
input UpdateProjectInput {
  """
  The description of project.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnsubscribedEvent object
  """
  id: ID!

  """
  The name of project.
  """
  name: String

  """
  The Project ID to update.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])

  """
  Whether the project is public or not.
  """
  public: Boolean

  """
  Whether the project is open or closed.
  """
  state: ProjectState
}

"""
Autogenerated return type of UpdateProject
"""
type UpdateProjectPayload {
  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean

  """
  The value for the allow private repository forking policy on the enterprise.
  """
  policyValue: EnterpriseAllowPrivateRepositoryForkingPolicyValue

  """
  The value for the allow private repository forking policy on the enterprise.
  """
  policyValue: EnterpriseAllowPrivateRepositoryForkingPolicyValue

  """
  The value for the allow private repository forking setting on the enterprise.
  """
  project: Project
}

"""
Autogenerated input type of UpdateProjectV2Collaborators
"""
input UpdateProjectV2CollaboratorsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The collaborators to update.
  """
  collaborators: [ProjectV2Collaborator!]!

  """
  The ID of the project to update the collaborators for.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UpdateProjectV2Collaborators
"""
type UpdateProjectV2CollaboratorsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The collaborators granted a role
  """
  collaborators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Can admins override branch protection.
  """
  preventSelfReview: Boolean

  """
  Whether users can pull changes from upstream when the branch is locked. Set to
  `true` to allow fork syncing. Set to `false` to prevent fork syncing.
  """
  lockAllowsFetchAndMerge: Boolean

  """
  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
  """
  lockBranch: Boolean

  """
  The glob-like pattern used to determine matching branches.
  """
  reviewers: [ID!]

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ActorConnection
}

  """
  The lists to which this item should belong
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  Whether the most recent push must be approved by someone other than the person who pushed it
  """
  requireLastPushApproval: Boolean

  """
  Number of approving reviews required to update matching branches.
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  The list of required deployment environments
  """
  requiredDeploymentEnvironments: [String!]

  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  clientMutationId: String

  """
  The item that was added
  """
  item: UserListItems

  """
  The lists to which this item belongs
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  user: User
}

"""
Autogenerated input type of UpdateRepositoryRuleset
"""
input UpdateRepositoryRulesetInput {
  """
  A list of actors that are allowed to bypass rules in this ruleset.
  """
  bypassActors: [RepositoryRulesetBypassActorInput!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list of conditions for this ruleset
  """
  conditions: RepositoryRuleConditionsInput

  """
  Are successful deployments required before merging.
  """
  requiresDeployments: Boolean

  """
  Are merge commits prohibited from being pushed to this branch.
  """
  enforcement: RuleEnforcement

  """
  The name of the ruleset.
  """
  name: String

  """
  The global relay id of the repository ruleset to be updated.
  """
  repositoryRulesetId: ID! @possibleTypes(concreteTypes: ["RepositoryRuleset"])

  """
  The list of rules for this ruleset
  """
  rules: [RepositoryRuleInput!]

  """
  The target of the ruleset.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The update branch method to use. If omitted, defaults to 'MERGE'
  """
  updateMethod: PullRequestBranchUpdateMethod
}

"""
Autogenerated return type of UpdateRepositoryRuleset
"""
type UpdateRepositoryRulesetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created Ruleset.
  """
  ruleset: RepositoryRuleset
}

"""
Autogenerated input type of UpdateRepositoryWebCommitSignoffSetting
"""
input UpdateRepositoryWebCommitSignoffSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the repository to update.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  Indicates if the repository should require signoff on web-based commits.
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateRepositoryWebCommitSignoffSetting
"""
type UpdateRepositoryWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  The updated repository.
  """
  repository: Repository
}

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  Notify the entire team of the PR if it is delegated
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  The organization with the updated web commit signoff setting.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  The item to add to the list
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  Turn on or off review assignment
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  The item that was added
  """
  item: UserListItems

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  The organization with the updated web commit signoff setting.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

"""
Autogenerated input type of UpdateProjectV2Collaborators
"""
input UpdateProjectV2CollaboratorsInput {
  """
  The organization with the updated web commit signoff setting.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  The value for the allow private repository forking policy on the enterprise.
  """
  policyValue: EnterpriseAllowPrivateRepositoryForkingPolicyValue

  """
  The value for the allow private repository forking setting on the enterprise.
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateProjectCard
"""
input UpdateProjectCardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not the ProjectCard should be archived
  """
  isArchived: Boolean

"""
Autogenerated return type of UpdateProjectV2Collaborators
"""
type UpdateProjectV2CollaboratorsPayload {
  """
  The note of ProjectCard.
  """
  note: String

  """
  The ProjectCard ID to update.
  """
  projectCardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])
}

"""
Autogenerated return type of UpdateProjectCard
"""
type UpdateProjectCardPayload {
  """
  The IDs of the assignees of the draft issue.
  """
  description: String

  """
  The updated ProjectCard.
  """
  projectCard: ProjectCard
}

"""
Autogenerated input type of UpdateProjectColumn
"""
input UpdateProjectColumnInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of project column.
  """
  name: String!

  """
  The ProjectColumn ID to update.
  """
  projectColumnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

"""
Autogenerated return type of UpdateProjectColumn
"""
type UpdateProjectColumnPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated project column.
  """
  projectColumn: ProjectColumn
}

"""
Autogenerated input type of UpdateProject
"""
input UpdateProjectInput {
  """
  The description of project.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of project.
  """
  name: String

  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean

  """
  The ids of users or teams that can approve deployments to this environment
  """
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])

  """
  Whether the project is public or not.
  """
  public: Boolean

  """
  Whether the project is open or closed.
  """
  state: ProjectState
}

"""
Autogenerated return type of UpdateProject
"""
type UpdateProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated project.
  """
  project: Project
}

"""
Autogenerated input type of UpdateProjectV2Collaborators
"""
input UpdateProjectV2CollaboratorsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The collaborators to update.
  """
  collaborators: [ProjectV2Collaborator!]!

  """
  The ID of the project to update the collaborators for.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UpdateProjectV2Collaborators
"""
type UpdateProjectV2CollaboratorsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The collaborators granted a role
  """
  collaborators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean

  """
  The ids of users or teams that can approve deployments to this environment
  """
  reviewers: [ID!]

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ActorConnection
}

"""
Autogenerated input type of UpdateSponsorshipPreferences
"""
type UpdateUserListsForItemPayload {
  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

  """
  Notify the entire team of the PR if it is delegated
  """
  clientMutationId: String

  """
  Remove the team review request when assigning
  """
  removeTeamRequest: Boolean = true

  """
  The number of team members to assign
  """
  item: UserListItems

  """
  The lists to which this item belongs
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The update branch method to use. If omitted, defaults to 'MERGE'
  """
  updateMethod: PullRequestBranchUpdateMethod
}

"""
Autogenerated input type of UpdateUserList
"""
input UpdateUserListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean

  """
  The ids of users or teams that can approve deployments to this environment
  """
  isPrivate: Boolean

  """
  The ID of the list to update.
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  The name of the list
  """
  name: String
}

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just updated
  """
  list: UserList
}

"""
Autogenerated input type of UpdateUserListsForItem
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item to add to the list
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  The lists to which this item should belong
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  The suggested lists to create and add this item to
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item that was added
  """
  item: UserListItems

  """
  The lists to which this item belongs
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  user: User
}

"""
Autogenerated input type of UpdateUserList
"""
input UpdateUserListInput {
  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  countMembersAlreadyRequested: Boolean = true

  """
  Turn on or off review assignment
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Whether or not the list is private
  """
  isPrivate: Boolean

  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

  """
  Notify the entire team of the PR if it is delegated
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  Remove the team review request when assigning
  """
  removeTeamRequest: Boolean = true

  """
  The number of team members to assign
  """
  name: String
}

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just updated
  """
  list: UserList
}

"""
Autogenerated input type of UpdateUserListsForItem
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item to add to the list
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  countMembersAlreadyRequested: Boolean = true

  """
  Turn on or off review assignment
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  The suggested lists to create and add this item to
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

  """
  Notify the entire team of the PR if it is delegated
  """
  item: UserListItems

  """
  Remove the team review request when assigning
  """
  removeTeamRequest: Boolean = true

  """
  The number of team members to assign
  """
  user: User
}

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  description: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  The organization with the updated web commit signoff setting.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  Indicates if the repository should have the wiki feature enabled.
  """
  isPrivate: Boolean

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  The organization with the updated web commit signoff setting.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The node ID of the environment.
  """
  environmentId: ID! @possibleTypes(concreteTypes: ["Environment"])

  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean

  """
  The ids of users or teams that can approve deployments to this environment
  """
  message: String

"""
Autogenerated input type of UpdateProjectV2Collaborators
"""
input UpdateProjectV2CollaboratorsInput {
  """
  The organization with the updated web commit signoff setting.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  The list of rules for this ruleset
  """
  rules: [RepositoryRuleInput!]

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateProjectCard
"""
input UpdateProjectCardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not the ProjectCard should be archived
  """
  isArchived: Boolean

"""
Autogenerated return type of UpdateProjectV2Collaborators
"""
type UpdateProjectV2CollaboratorsPayload {
  """
  The note of ProjectCard.
  """
  note: String

  """
  The ProjectCard ID to update.
  """
  projectCardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])
}

"""
Autogenerated return type of UpdateProjectCard
"""
type UpdateProjectCardPayload {
  """
  Indicates if the repository should have the discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean

  """
  The updated ProjectCard.
  """
  projectCard: ProjectCard
}

"""
Autogenerated input type of UpdateProjectColumn
"""
input UpdateProjectColumnInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of project column.
  """
  name: String!

  """
  The ProjectColumn ID to update.
  """
  projectColumnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

"""
Autogenerated return type of UpdateProjectColumn
"""
type UpdateProjectColumnPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated project column.
  """
  projectColumn: ProjectColumn
}

"""
Autogenerated input type of UpdateProject
"""
input UpdateProjectInput {
  """
  The description of project.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of project.
  """
  name: String

  """
  The Project ID to update.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])

  """
  Whether the project is public or not.
  """
  public: Boolean

  """
  Whether the project is open or closed.
  """
  state: ProjectState
}

"""
Autogenerated return type of UpdateProject
"""
type UpdateProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated project.
  """
  project: Project
}

"""
Autogenerated input type of UpdateProjectV2Collaborators
"""
input UpdateProjectV2CollaboratorsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The collaborators to update.
  """
  collaborators: [ProjectV2Collaborator!]!

  """
  The ID of the project to update the collaborators for.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UpdateProjectV2Collaborators
"""
type UpdateProjectV2CollaboratorsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The collaborators granted a role
  """
  collaborators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ActorConnection
}

"""
Autogenerated input type of UpdateSponsorshipPreferences
"""
input UpdateSponsorshipPreferencesInput {
  """
  The lists to which this item belongs
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  user: User
}

"""
Autogenerated input type of UpdateUserList
"""
input UpdateUserListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Whether or not the list is private
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The update branch method to use. If omitted, defaults to 'MERGE'
  """
  updateMethod: PullRequestBranchUpdateMethod
}

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just updated
  """
  list: UserList
}

"""
Autogenerated input type of UpdateUserListsForItem
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item to add to the list
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  The lists to which this item should belong
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  The suggested lists to create and add this item to
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  countMembersAlreadyRequested: Boolean = true

  """
  Turn on or off review assignment
  """
  item: UserListItems

  """
  The lists to which this item belongs
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  user: User
}

"""
A user is an individual's account on GitHub that owns repositories and can make new content.
"""
type User implements Actor & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  countMembersAlreadyRequested: Boolean = true

  """
  Turn on or off review assignment
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  The organization with the updated web commit signoff setting.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  Indicates if the repository should have the wiki feature enabled.
  """
  isPrivate: Boolean

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateProjectCard
"""
input UpdateProjectCardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not the ProjectCard should be archived
  """
  isArchived: Boolean

  """
  The note of ProjectCard.
  """
  note: String

  """
  The ProjectCard ID to update.
  """
  projectCardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])
}

"""
Autogenerated return type of UpdateProjectCard
"""
type UpdateProjectCardPayload {
  """
  The global relay id of the repository ruleset to be updated.
  """
  repositoryRulesetId: ID! @possibleTypes(concreteTypes: ["RepositoryRuleset"])

  """
  The updated ProjectCard.
  """
  projectCard: ProjectCard
}

"""
Autogenerated input type of UpdateProjectColumn
"""
input UpdateProjectColumnInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of project column.
  """
  name: String!

"""
Autogenerated return type of UpdateRepositoryRuleset
"""
type UpdateRepositoryRulesetPayload {
  """
  The ProjectColumn ID to update.
  """
  projectColumnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

"""
Autogenerated return type of UpdateProjectColumn
"""
type UpdateProjectColumnPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated project column.
  """
  projectColumn: ProjectColumn
}

"""
Autogenerated input type of UpdateProject
"""
input UpdateProjectInput {
  """
  The description of project.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of project.
  """
  name: String

  """
  The Project ID to update.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])

  """
  Whether the project is public or not.
  """
  public: Boolean

  """
  Whether the project is open or closed.
  """
  state: ProjectState
}

"""
Autogenerated return type of UpdateProject
"""
type UpdateProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated project.
  """
  project: Project
}

"""
Autogenerated input type of UpdateProjectV2Collaborators
"""
input UpdateProjectV2CollaboratorsInput {
  """
  message: String

  """
  The collaborators to update.
  """
  collaborators: [ProjectV2Collaborator!]!

  """
  The ID of the project to update the collaborators for.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UpdateProjectV2Collaborators
"""
type UpdateProjectV2CollaboratorsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The collaborators granted a role
  """
  collaborators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ActorConnection
}

  """
  The enforcement level for this ruleset
  """
  enforcement: RuleEnforcement

  """
  The name of the ruleset.
  """
  name: String

  """
  The global relay id of the repository ruleset to be updated.
  """
  repositoryRulesetId: ID! @possibleTypes(concreteTypes: ["RepositoryRuleset"])

  """
  The list of rules for this ruleset
  """
  rules: [RepositoryRuleInput!]

  """
  The target of the ruleset.
  """
  target: RepositoryRulesetTarget
}

"""
Autogenerated return type of UpdateRepositoryRuleset
"""
type UpdateRepositoryRulesetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created Ruleset.
  """
  ruleset: RepositoryRuleset
}

"""
Autogenerated input type of UpdateRepositoryWebCommitSignoffSetting
"""
input UpdateRepositoryWebCommitSignoffSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the repository to update.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  Indicates if the repository should require signoff on web-based commits.
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateRepositoryWebCommitSignoffSetting
"""
type UpdateRepositoryWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  The updated repository.
  """
  repository: Repository
}

"""
Autogenerated input type of UpdateSponsorshipPreferences
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  countMembersAlreadyRequested: Boolean = true

  """
  Turn on or off review assignment
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  The lists to which this item should belong
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  The suggested lists to create and add this item to
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

  """
  Notify the entire team of the PR if it is delegated
  """
  clientMutationId: String

  """
  Remove the team review request when assigning
  """
  removeTeamRequest: Boolean = true

  """
  The number of team members to assign
  """
  item: UserListItems

  """
  The lists to which this item belongs
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  user: User
}

"""
Autogenerated input type of UpdateUserList
"""
input UpdateUserListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Indicates if the repository should have the discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean

  """
  Indicates if the repository should have the issues feature enabled.
  """
  isPrivate: Boolean

  """
  The ID of the list to update.
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean

  """
  Indicates if the repository should have the wiki feature enabled.
  """
  name: String
}

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just updated
  """
  list: UserList
}

"""
Autogenerated input type of UpdateUserListsForItem
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item to add to the list
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  The lists to which this item should belong
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The update branch method to use. If omitted, defaults to 'MERGE'
  """
  updateMethod: PullRequestBranchUpdateMethod
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item that was added
  """
  item: UserListItems

  """
  The lists to which this item belongs
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  user: User
}

"""
Autogenerated input type of UpdateRepositoryRuleset
"""
input UpdateRepositoryRulesetInput {
  """
  A list of actors that are allowed to bypass rules in this ruleset.
  """
  bypassActors: [RepositoryRulesetBypassActorInput!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list of conditions for this ruleset
  """
  conditions: RepositoryRuleConditionsInput

  """
  The enforcement level for this ruleset
  """
  enforcement: RuleEnforcement

  """
  The name of the ruleset.
  """
  name: String

  """
  The global relay id of the repository ruleset to be updated.
  """
  repositoryRulesetId: ID! @possibleTypes(concreteTypes: ["RepositoryRuleset"])

  """
  The list of rules for this ruleset
  """
  rules: [RepositoryRuleInput!]

  """
  The target of the ruleset.
  """
  target: RepositoryRulesetTarget
}

"""
Autogenerated return type of UpdateRepositoryRuleset
"""
type UpdateRepositoryRulesetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created Ruleset.
  """
  ruleset: RepositoryRuleset
}

"""
Autogenerated input type of UpdateRepositoryWebCommitSignoffSetting
"""
input UpdateRepositoryWebCommitSignoffSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the repository to update.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  Indicates if the repository should require signoff on web-based commits.
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateRepositoryWebCommitSignoffSetting
"""
type UpdateRepositoryWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  The updated repository.
  """
  repository: Repository
}

"""
Autogenerated input type of UpdateSponsorshipPreferences
"""
input UpdateUserListInput {
  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  countMembersAlreadyRequested: Boolean = true

  """
  Turn on or off review assignment
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Whether or not the list is private
  """
  isPrivate: Boolean

  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

  """
  Notify the entire team of the PR if it is delegated
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  Remove the team review request when assigning
  """
  removeTeamRequest: Boolean = true

  """
  The number of team members to assign
  """
  name: String
}

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just updated
  """
  list: UserList
}

"""
Autogenerated input type of UpdateUserListsForItem
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item to add to the list
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  countMembersAlreadyRequested: Boolean = true

  """
  Turn on or off review assignment
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  The suggested lists to create and add this item to
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

  """
  Notify the entire team of the PR if it is delegated
  """
  item: UserListItems

  """
  Remove the team review request when assigning
  """
  removeTeamRequest: Boolean = true

  """
  The number of team members to assign
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  user: User
}

"""
A user is an individual's account on GitHub that owns repositories and can make new content.
"""
type User implements Actor & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  Determine if this repository owner has any items that can be pinned to their profile.
  """
  anyPinnableItems(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

"""
Autogenerated input type of UpdateUserList
"""
input UpdateUserListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Indicates if the repository should have the discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean

  """
  Indicates if the repository should have the issues feature enabled.
  """
  hasIssuesEnabled: Boolean

  """
  Indicates if the repository should have the project boards feature enabled.
  """
  hasProjectsEnabled: Boolean

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean

  """
  Indicates if the repository should have the wiki feature enabled.
  """
  hasWikiEnabled: Boolean

  """
  The ID of the list to update.
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  The name of the list
  """
  name: String
}

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just updated
  """
  list: UserList
}

"""
Autogenerated input type of UpdateRepositoryRuleset
"""
input UpdateRepositoryRulesetInput {
  """
  A list of actors that are allowed to bypass rules in this ruleset.
  """
  bypassActors: [RepositoryRulesetBypassActorInput!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list of conditions for this ruleset
  """
  conditions: RepositoryRuleConditionsInput

  """
  The enforcement level for this ruleset
  """
  enforcement: RuleEnforcement

  """
  The name of the ruleset.
  """
  name: String

  """
  The global relay id of the repository ruleset to be updated.
  """
  repositoryRulesetId: ID! @possibleTypes(concreteTypes: ["RepositoryRuleset"])

  """
  The list of rules for this ruleset
  """
  rules: [RepositoryRuleInput!]

  """
  The target of the ruleset.
  """
  target: RepositoryRulesetTarget
}

"""
Autogenerated return type of UpdateRepositoryRuleset
"""
type UpdateRepositoryRulesetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created Ruleset.
  """
  ruleset: RepositoryRuleset
}

"""
Autogenerated input type of UpdateRepositoryWebCommitSignoffSetting
"""
input UpdateRepositoryWebCommitSignoffSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the repository to update.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  Indicates if the repository should require signoff on web-based commits.
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateRepositoryWebCommitSignoffSetting
"""
type UpdateRepositoryWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  The updated repository.
  """
  repository: Repository
}

"""
Autogenerated input type of UpdateSponsorshipPreferences
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  countMembersAlreadyRequested: Boolean = true

  """
  Turn on or off review assignment
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  The lists to which this item should belong
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  The suggested lists to create and add this item to
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

  """
  Notify the entire team of the PR if it is delegated
  """
  clientMutationId: String

  """
  Remove the team review request when assigning
  """
  removeTeamRequest: Boolean = true

  """
  The number of team members to assign
  """
  item: UserListItems

  """
  The lists to which this item belongs
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  user: User
}

"""
Autogenerated input type of UpdateUserList
"""
input UpdateUserListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Whether or not the list is private
  """
  isPrivate: Boolean

  """
  The ID of the list to update.
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  The name of the list
  """
  name: String
}

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just updated
  """
  list: UserList
}

"""
Autogenerated input type of UpdateUserListsForItem
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item to add to the list
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  The lists to which this item should belong
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  The suggested lists to create and add this item to
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item that was added
  """
  item: UserListItems

  """
  The lists to which this item belongs
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  user: User
}

"""
Autogenerated input type of UpdateUserList
"""
input UpdateUserListInput {
  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  countMembersAlreadyRequested: Boolean = true

  """
  Turn on or off review assignment
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Whether or not the list is private
  """
  isPrivate: Boolean

  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

  """
  Notify the entire team of the PR if it is delegated
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  Remove the team review request when assigning
  """
  removeTeamRequest: Boolean = true

  """
  The number of team members to assign
  """
  name: String
}

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just updated
  """
  list: UserList
}

"""
Autogenerated input type of UpdateUserListsForItem
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item to add to the list
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  The lists to which this item should belong
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  The suggested lists to create and add this item to
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item that was added
  """
  item: UserListItems

  """
  The lists to which this item belongs
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  user: User
}

"""
A user is an individual's account on GitHub that owns repositories and can make new content.
"""
type User implements Actor & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

"""
Autogenerated input type of UpdateUserList
"""
input UpdateUserListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Whether or not the list is private
  """
  isPrivate: Boolean

  """
  The ID of the list to update.
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  The name of the list
  """
  name: String
}

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just updated
  """
  list: UserList
}

"""
Autogenerated input type of UpdateUserListsForItem
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item to add to the list
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  The lists to which this item should belong
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  The suggested lists to create and add this item to
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item that was added
  """
  item: UserListItems

  """
  The lists to which this item belongs
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  user: User
}

"""
A user is an individual's account on GitHub that owns repositories and can make new content.
"""
type User implements Actor & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  A user-curated list of repositories
  """
  lists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserListConnection!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  A user-curated list of repositories
  """
  lists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserListConnection!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  A user-curated list of repositories
  """
  lists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for gists returned from the connection
    """
    orderBy: GistOrder

    """
    Filters Gists according to privacy.
    """
    privacy: GistPrivacy
  ): GistConnection!

  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  hasSponsorsListing: Boolean!

  """
  The hovercard information for this user in a given context
  """
  hovercard(
    """
    The ID of the subject to get the hovercard in the context of
    """
    primarySubjectId: ID
  ): Hovercard!

  """
  The Node ID of the User object
  """
  id: ID!

  """
  The interaction ability settings for this user.
  """
  interactionAbility: RepositoryInteractionAbility

  """
  Whether or not this user is a participant in the GitHub Security Bug Bounty.
  """
  isBountyHunter: Boolean!

  """
  Whether or not this user is a participant in the GitHub Campus Experts Program.
  """
  isCampusExpert: Boolean!

  """
  Whether or not this user is a GitHub Developer Program member.
  """
  isDeveloperProgramMember: Boolean!

  """
  Whether or not this user is a GitHub employee.
  """
  isEmployee: Boolean!

  """
  Whether or not this user is following the viewer. Inverse of viewerIsFollowing
  """
  location: String

  """
  The username used to login.
  """
  login: String!

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """
  The user's public profile name.
  """
  name: String

  """
  Whether the given account is sponsoring this user/organization.
  """
  organization(
    """
    The login of the organization to find.
    """
    login: String!
  ): Organization

  """
  Verified email addresses that match verified domains for a specified organization the user is a member of.
  """
  organizationVerifiedDomainEmails(
    """
    The login of the organization to match verified domains from.
    """
    login: String!
  ): [String!]!

  """
  A list of organizations the user belongs to.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  A list of packages under the owner.
  """
  packages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Find a project by number.
  """
  issues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filtering options for issues returned from the connection.
    """
    filterBy: IssueFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    A list of label names to filter the pull requests by.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection.
    """
    orderBy: IssueOrder

    """
    A list of states to filter the issues by.
    """
    states: [IssueState!]
  ): IssueConnection!

  """
  Showcases a selection of repositories and gists that the profile owner has
  either curated or that have been selected automatically based on popularity.
  """
  itemShowcase: ProfileItemShowcase!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  A user-curated list of repositories
  """
  lists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserListConnection!

  """
  The user's public profile location.
  """
  location: String

  """
  The username used to login.
  """
  login: String!

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """
  The user's public profile name.
  """
  name: String

  """
  Find an organization by its login that the user belongs to.
  """
  organization(
    """
    The login of the organization to find.
    """
    login: String!
  ): Organization

  """
  Find a project by number.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  A list of packages under the owner.
  """
  packages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Find packages by their names.
    """
    names: [String]

    """
    Ordering of the returned packages.
    """
    orderBy: PackageOrder = {field: CREATED_AT, direction: DESC}

    """
    Filter registry package by type.
    """
    packageType: PackageType

    """
    Find packages in a repository by ID.
    """
    repositoryId: ID
  ): PackageConnection!

  """
  A list of repositories and gists this profile owner can pin to their profile.
  """
  pinnableItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter the types of pinnable items that are returned.
    """
    types: [PinnableItemType!]
  ): PinnableItemConnection!

  """
  A list of repositories and gists this profile owner has pinned to their profile
  """
  pinnedItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter the types of pinned items that are returned.
    """
    types: [PinnableItemType!]
  ): PinnableItemConnection!

  """
  Returns how many more items this profile owner can pin to their profile.
  """
  pinnedItemsRemaining: Int!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing user's projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing user's projects
  """
  projectsUrl: URI!

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  The user's profile pronouns
  """
  pronouns: String

  """
  A list of public keys associated with this user.
  """
  publicKeys(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PublicKeyConnection!

  """
  A list of pull requests associated with this user.
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    The base ref name to filter the pull requests by.
    """
    baseRefName: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    The head ref name to filter the pull requests by.
    """
    headRefName: String

    """
    A list of label names to filter the pull requests by.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests returned from the connection.
    """
    orderBy: IssueOrder

    """
    A list of states to filter the pull requests by.
    """
    states: [PullRequestState!]
  ): PullRequestConnection!

  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!

  """
  A list of repositories that the user owns.
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  A list of repositories that the user recently contributed to.
  """
  repositoriesContributedTo(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    If non-null, include only the specified types of contributions. The
    GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]
    """
    contributionTypes: [RepositoryContributionType]

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssues: Boolean

    """
    If true, include user repositories
    """
    includeUserRepositories: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    If non-null, filters repositories according to privacy
    """
    privacy: RepositoryPrivacy
  ): RepositoryConnection!

  """
  Find Repository.
  """
  repository(
    """
    Follow repository renames. If disabled, a repository referenced by its old name will return an error.
    """
    followRenames: Boolean = true

    """
    Name of Repository to find.
    """
    name: String!
  ): Repository

  """
  Discussion comments this user has authored.
  """
  repositoryDiscussionComments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter discussion comments to only those that were marked as the answer
    """
    onlyAnswers: Boolean = false

    """
    Filter discussion comments to only those in a specific repository.
    """
    repositoryId: ID
  ): DiscussionCommentConnection!

  """
  Discussions this user has started.
  """
  repositoryDiscussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter discussions to only those that have been answered or not. Defaults to
    including both answered and unanswered discussions.
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: CREATED_AT, direction: DESC}

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  The HTTP path for this user
  """
  resourcePath: URI!

  """
  Replies this user has saved
  """
  savedReplies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The field to order saved replies by.
    """
    orderBy: SavedReplyOrder = {field: UPDATED_AT, direction: DESC}
  ): SavedReplyConnection

  """
  The user's social media accounts, ordered as they appear on the user's profile.
  """
  socialAccounts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SocialAccountConnection!

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Repositories the user has starred.
  """
  starredRepositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Order for connection
    """
    orderBy: StarOrder

    """
    Filters starred repositories to only return repositories owned by the viewer.
    """
    ownedByViewer: Boolean
  ): StarredRepositoryConnection!

  """
  The user's description of what they're currently doing.
  """
  status: UserStatus

  """
  Suggested names for user lists
  """
  suggestedListNames: [UserListSuggestion!]!

  """
  Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created
  """
  topRepositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder!

    """
    How far back in time to fetch contributed repositories
    """
    since: DateTime
  ): RepositoryConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The user's Twitter username.
  """
  twitterUsername: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this user
  """
  url: URI!

  """
  Can the viewer pin repositories and gists to the profile?
  """
  viewerCanChangePinnedItems: Boolean!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!

  """
  Whether or not the viewer is able to follow the user.
  """
  viewerCanFollow: Boolean!

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  Whether or not this user is followed by the viewer. Inverse of isFollowingViewer.
  """
  viewerIsFollowing: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!

  """
  A list of repositories the given user is watching.
  """
  watching(
    """
    Affiliation options for repositories returned from the connection. If none
    specified, the results will include repositories for which the current
    viewer is an owner or collaborator, or member.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  A URL pointing to the user's public website/blog.
  """
  websiteUrl: URI
}

"""
The possible durations that a user can be blocked for.
"""
enum UserBlockDuration {
  """
  The user was blocked for 1 day
  """
  ONE_DAY

  """
  The user was blocked for 30 days
  """
  ONE_MONTH

  """
  The user was blocked for 7 days
  """
  ONE_WEEK

  """
  The user was blocked permanently
  """
  PERMANENT

  """
  The user was blocked for 3 days
  """
  THREE_DAYS
}

"""
Represents a 'user_blocked' event on a given user.
"""
type UserBlockedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Number of days that the user was blocked for.
  """
  blockDuration: UserBlockDuration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the UserBlockedEvent object
  """
  id: ID!

  """
  The user who was blocked.
  """
  subject: User
}

"""
The connection type for User.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edit on user content
"""
type UserContentEdit implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the date and time when the object was deleted.
  """
  deletedAt: DateTime

  """
  The actor who deleted this content
  """
  deletedBy: Actor

  """
  A summary of the changes for this edit
  """
  diff: String

  """
  When this content was edited
  """
  editedAt: DateTime!

  """
  The actor who edited this content
  """
  editor: Actor

  """
  The Node ID of the UserContentEdit object
  """
  id: ID!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A list of edits to content.
"""
type UserContentEditConnection {
  """
  A list of edges.
  """
  edges: [UserContentEditEdge]

  """
  A list of nodes.
  """
  nodes: [UserContentEdit]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type UserContentEditEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: UserContentEdit
}

"""
Represents a user.
"""
type UserEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User
}

"""
Email attributes from External Identity
"""
type UserEmailMetadata {
  """
  Boolean to identify primary emails
  """
  primary: Boolean

  """
  Type of email
  """
  type: String

  """
  Email id
  """
  value: String!
}

"""
A user-curated list of repositories
"""
type UserList implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The description of this list
  """
  description: String

  """
  The Node ID of the UserList object
  """
  id: ID!

  """
  Whether or not this list is private
  """
  isPrivate: Boolean!

  """
  The items associated with this list
  """
  items(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserListItemsConnection!

  """
  The date and time at which this list was created or last had items added to it
  """
  lastAddedAt: DateTime!

  """
  The name of this list
  """
  name: String!

  """
  The slug of this list
  """
  slug: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The user to which this list belongs
  """
  user: User!
}

"""
The connection type for UserList.
"""
type UserListConnection {
  """
  A list of edges.
  """
  edges: [UserListEdge]

  """
  A list of nodes.
  """
  nodes: [UserList]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type UserListEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: UserList
}

"""
Types that can be added to a user list.
"""
union UserListItems = Repository

"""
The connection type for UserListItems.
"""
type UserListItemsConnection {
  """
  A list of edges.
  """
  edges: [UserListItemsEdge]

  """
  A list of nodes.
  """
  nodes: [UserListItems]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type UserListItemsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: UserListItems
}

"""
Represents a suggested user list.
"""
type UserListSuggestion {
  """
  The ID of the suggested user list
  """
  id: ID

  """
  The name of the suggested user list
  """
  name: String
}

"""
The user's description of what they're currently doing.
"""
type UserStatus implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  An emoji summarizing the user's status.
  """
  emoji: String

  """
  The status emoji as HTML.
  """
  emojiHTML: HTML

  """
  If set, the status will not be shown after this date.
  """
  expiresAt: DateTime

  """
  The Node ID of the UserStatus object
  """
  id: ID!

  """
  Whether this status indicates the user is not fully available on GitHub.
  """
  indicatesLimitedAvailability: Boolean!

  """
  A brief message describing what the user is doing.
  """
  message: String

  """
  The organization whose members can see this status. If null, this status is publicly visible.
  """
  organization: Organization

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The user who has this status.
  """
  user: User!
}

"""
The connection type for UserStatus.
"""
type UserStatusConnection {
  """
  A list of edges.
  """
  edges: [UserStatusEdge]

  """
  A list of nodes.
  """
  nodes: [UserStatus]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type UserStatusEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: UserStatus
}

"""
Ordering options for user status connections.
"""
input UserStatusOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order user statuses by.
  """
  field: UserStatusOrderField!
}

"""
Properties by which user status connections can be ordered.
"""
enum UserStatusOrderField {
  """
  Order user statuses by when they were updated.
  """
  UPDATED_AT
}

"""
A domain that can be verified or approved for an organization or an enterprise.
"""
type VerifiableDomain implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The DNS host name that should be used for verification.
  """
  dnsHostName: URI

  """
  The unicode encoded domain.
  """
  domain: URI!

  """
  Whether a TXT record for verification with the expected host name was found.
  """
  hasFoundHostName: Boolean!

  """
  Whether a TXT record for verification with the expected verification token was found.
  """
  hasFoundVerificationToken: Boolean!

  """
  The Node ID of the VerifiableDomain object
  """
  id: ID!

  """
  Whether or not the domain is approved.
  """
  isApproved: Boolean!

  """
  Whether this domain is required to exist for an organization or enterprise policy to be enforced.
  """
  isRequiredForPolicyEnforcement: Boolean!

  """
  Whether or not the domain is verified.
  """
  isVerified: Boolean!

  """
  The owner of the domain.
  """
  owner: VerifiableDomainOwner!

  """
  The punycode encoded domain.
  """
  punycodeEncodedDomain: URI!

  """
  The time that the current verification token will expire.
  """
  tokenExpirationTime: DateTime

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The current verification token for the domain.
  """
  verificationToken: String
}

"""
The connection type for VerifiableDomain.
"""
type VerifiableDomainConnection {
  """
  A list of edges.
  """
  edges: [VerifiableDomainEdge]

  """
  A list of nodes.
  """
  nodes: [VerifiableDomain]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type VerifiableDomainEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: VerifiableDomain
}

"""
Ordering options for verifiable domain connections.
"""
input VerifiableDomainOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order verifiable domains by.
  """
  field: VerifiableDomainOrderField!
}

"""
Properties by which verifiable domain connections can be ordered.
"""
enum VerifiableDomainOrderField {
  """
  Order verifiable domains by their creation date.
  """
  CREATED_AT

  """
  Order verifiable domains by the domain name.
  """
  DOMAIN
}

"""
Types that can own a verifiable domain.
"""
union VerifiableDomainOwner = Enterprise | Organization

"""
Autogenerated input type of VerifyVerifiableDomain
"""
input VerifyVerifiableDomainInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the verifiable domain to verify.
  """
  id: ID! @possibleTypes(concreteTypes: ["VerifiableDomain"])
}

"""
Autogenerated return type of VerifyVerifiableDomain
"""
type VerifyVerifiableDomainPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The verifiable domain that was verified.
  """
  domain: VerifiableDomain
}

"""
A hovercard context with a message describing how the viewer is related.
"""
type ViewerHovercardContext implements HovercardContext {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  Identifies the user who is related to this context.
  """
  viewer: User!
}

"""
A subject that may be upvoted.
"""
interface Votable {
  """
  Number of upvotes that this subject has received.
  """
  upvoteCount: Int!

  """
  Whether or not the current user can add or remove an upvote on this subject.
  """
  viewerCanUpvote: Boolean!

  """
  Whether or not the current user has already upvoted this subject.
  """
  viewerHasUpvoted: Boolean!
}

"""
A workflow contains meta information about an Actions workflow file.
"""
type Workflow implements Node & UniformResourceLocatable {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  name: String!

  """
  The HTTP path for this workflow
  """
  resourcePath: URI!

  """
  The runs of the workflow.
  """
  runs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the connection
    """
    orderBy: WorkflowRunOrder = {field: CREATED_AT, direction: DESC}
  ): WorkflowRunConnection!

  """
  The state of the workflow.
  """
  state: WorkflowState!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this workflow
  """
  url: URI!
}

"""
A workflow that must run for this rule to pass
"""
type WorkflowFileReference {
  """
  The path to the workflow file
  """
  path: String!

  """
  The ref (branch or tag) of the workflow file to use
  """
  ref: String

  """
  The ID of the repository where the workflow is defined
  """
  repositoryId: Int!

  """
  The commit SHA of the workflow file to use
  """
  sha: String
}

"""
A workflow that must run for this rule to pass
"""
input WorkflowFileReferenceInput {
  """
  The path to the workflow file
  """
  path: String!

  """
  The ref (branch or tag) of the workflow file to use
  """
  ref: String

  """
  The ID of the repository where the workflow is defined
  """
  repositoryId: Int!

  """
  The commit SHA of the workflow file to use
  """
  sha: String
}

"""
A workflow run.
"""
type WorkflowRun implements Node & UniformResourceLocatable {
  """
  The check suite this workflow run belongs to.
  """
  checkSuite: CheckSuite!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The log of deployment reviews
  """
  deploymentReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DeploymentReviewConnection!

  """
  The event that triggered the workflow run
  """
  event: String!

  """
  The workflow file
  """
  file: WorkflowRunFile

  """
  The Node ID of the WorkflowRun object
  """
  id: ID!

  """
  The pending deployment requests of all check runs in this workflow run
  """
  pendingDeploymentRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DeploymentRequestConnection!

  """
  The HTTP path for this workflow run
  """
  resourcePath: URI!

  """
  A number that uniquely identifies this workflow run in its parent workflow.
  """
  runNumber: Int!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this workflow run
  """
  url: URI!

  """
  The workflow executed in this workflow run.
  """
  workflow: Workflow!
}

"""
The connection type for WorkflowRun.
"""
type WorkflowRunConnection {
  """
  A list of edges.
  """
  edges: [WorkflowRunEdge]

  """
  A list of nodes.
  """
  nodes: [WorkflowRun]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type WorkflowRunEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: WorkflowRun
}

"""
An executed workflow file for a workflow run.
"""
type WorkflowRunFile implements Node & UniformResourceLocatable {
  """
  The Node ID of the WorkflowRunFile object
  """
  id: ID!

  """
  The path of the workflow file relative to its repository.
  """
  path: String!

  """
  The direct link to the file in the repository which stores the workflow file.
  """
  repositoryFileUrl: URI!

  """
  The repository name and owner which stores the workflow file.
  """
  repositoryName: URI!

  """
  The HTTP path for this workflow run file
  """
  resourcePath: URI!

  """
  The parent workflow run execution for this file.
  """
  run: WorkflowRun!

  """
  The HTTP URL for this workflow run file
  """
  url: URI!

  """
  If the viewer has permissions to push to the repository which stores the workflow.
  """
  viewerCanPushRepository: Boolean!

  """
  If the viewer has permissions to read the repository which stores the workflow.
  """
  viewerCanReadRepository: Boolean!
}

"""
Ways in which lists of workflow runs can be ordered upon return.
"""
input WorkflowRunOrder {
  """
  The direction in which to order workflow runs by the specified field.
  """
  direction: OrderDirection!

  """
  The field by which to order workflows.
  """
  field: WorkflowRunOrderField!
}

"""
Properties by which workflow run connections can be ordered.
"""
enum WorkflowRunOrderField {
  """
  Order workflow runs by most recently created
  """
  CREATED_AT
}

"""
The possible states for a workflow.
"""
enum WorkflowState {
  """
  The workflow is active.
  """
  ACTIVE

  """
  The workflow was deleted from the git repository.
  """
  DELETED

  """
  The workflow was disabled by default on a fork.
  """
  DISABLED_FORK

  """
  The workflow was disabled for inactivity in the repository.
  """
  DISABLED_INACTIVITY

  """
  The workflow was disabled manually.
  """
  DISABLED_MANUALLY
}

"""
Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
"""
type WorkflowsParameters {
  """
  Workflows that must pass for this rule to pass.
  """
  workflows: [WorkflowFileReference!]!
}

"""
Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
"""
input WorkflowsParametersInput {
  """
  Workflows that must pass for this rule to pass.
  """
  workflows: [WorkflowFileReferenceInput!]!
}

"""
A valid x509 certificate string
"""
scalar X509Certificate
