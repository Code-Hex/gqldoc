
"""
Marks an element of a GraphQL schema as only available via a preview header
"""
directive @preview(
  """
  The identifier of the API preview that toggles this field.
  """
  toggledBy: String!
) on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

"""
Defines what type of global IDs are accepted for a mutation argument of type ID.
"""
directive @possibleTypes(
  """
  Abstract type of accepted global ID
  """
  abstractType: String

  """
  Accepted types of global IDs.
  """
  concreteTypes: [String!]!
) on INPUT_FIELD_DEFINITION

"""
Autogenerated input type of AbortQueuedMigrations
"""
input AbortQueuedMigrationsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization that is running the migrations.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of AbortQueuedMigrations
"""
type AbortQueuedMigrationsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Autogenerated input type of AbortRepositoryMigration
"""
input AbortRepositoryMigrationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the migration to be aborted.
  """
  migrationId: ID! @possibleTypes(concreteTypes: ["RepositoryMigration"])
}

"""
Autogenerated return type of AbortRepositoryMigration
"""
type AbortRepositoryMigrationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Autogenerated input type of AcceptEnterpriseAdministratorInvitation
"""
input AcceptEnterpriseAdministratorInvitationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the invitation being accepted
  """
  invitationId: ID! @possibleTypes(concreteTypes: ["EnterpriseAdministratorInvitation"])
}

"""
Autogenerated return type of AcceptEnterpriseAdministratorInvitation
"""
type AcceptEnterpriseAdministratorInvitationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The invitation that was accepted.
  """
  invitation: EnterpriseAdministratorInvitation

  """
  A message confirming the result of accepting an administrator invitation.
  """
  message: String
}

"""
Autogenerated input type of AcceptTopicSuggestion
"""
input AcceptTopicSuggestionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of the suggested topic.

  **Upcoming Change on 2024-04-01 UTC**
  **Description:** `name` will be removed.
  **Reason:** Suggested topics are no longer supported
  """
  name: String

  """
  The Node ID of the repository.

  **Upcoming Change on 2024-04-01 UTC**
  **Description:** `repositoryId` will be removed.
  **Reason:** Suggested topics are no longer supported
  """
  repositoryId: ID @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of AcceptTopicSuggestion
"""
type AcceptTopicSuggestionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The accepted topic.
  """
  topic: Topic @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")
}

"""
Represents an object which can take actions on GitHub. Typically a User or Bot.
"""
interface Actor {
  """
  A URL pointing to the actor's public avatar.
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The username of the actor.
  """
  login: String!

  """
  The HTTP path for this actor.
  """
  resourcePath: URI!

  """
  The HTTP URL for this actor.
  """
  url: URI!
}

"""
Location information for an actor
"""
type ActorLocation {
  """
  City
  """
  city: String

  """
  Country name
  """
  country: String

  """
  Country code
  """
  countryCode: String

  """
  Region name
  """
  region: String

  """
  Region or state code
  """
  regionCode: String
}

"""
The actor's type.
"""
enum ActorType {
  """
  Indicates a team actor.
  """
  TEAM

  """
  Indicates a user actor.
  """
  USER
}

"""
Autogenerated input type of AddAssigneesToAssignable
"""
input AddAssigneesToAssignableInput {
  """
  The id of the assignable object to add assignees to.
  """
  assignableId: ID! @possibleTypes(concreteTypes: ["Issue", "PullRequest"], abstractType: "Assignable")

  """
  The id of users to add as assignees.
  """
  assigneeIds: [ID!]! @possibleTypes(concreteTypes: ["User"])

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of AddAssigneesToAssignable
"""
type AddAssigneesToAssignablePayload {
  """
  The item that was assigned.
  """
  assignable: Assignable

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of AddComment
"""
input AddCommentInput {
  """
  The contents of the comment.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the subject to modify.
  """
  subjectId: ID! @possibleTypes(concreteTypes: ["Issue", "PullRequest"], abstractType: "IssueOrPullRequest")
}

"""
Autogenerated return type of AddComment
"""
type AddCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The edge from the subject's comment connection.
  """
  commentEdge: IssueCommentEdge

  """
  The subject
  """
  subject: Node

  """
  The edge from the subject's timeline connection.
  """
  timelineEdge: IssueTimelineItemEdge
}

"""
Autogenerated input type of AddDiscussionComment
"""
input AddDiscussionCommentInput {
  """
  The contents of the comment.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the discussion to comment on.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])

  """
  The Node ID of the discussion comment within this discussion to reply to.
  """
  replyToId: ID @possibleTypes(concreteTypes: ["DiscussionComment"])
}

"""
Autogenerated return type of AddDiscussionComment
"""
type AddDiscussionCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created discussion comment.
  """
  comment: DiscussionComment
}

"""
Autogenerated input type of AddDiscussionPollVote
"""
input AddDiscussionPollVoteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the discussion poll option to vote for.
  """
  pollOptionId: ID! @possibleTypes(concreteTypes: ["DiscussionPollOption"])
}

"""
Autogenerated return type of AddDiscussionPollVote
"""
type AddDiscussionPollVotePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The poll option that a vote was added to.
  """
  pollOption: DiscussionPollOption
}

"""
Autogenerated input type of AddEnterpriseOrganizationMember
"""
input AddEnterpriseOrganizationMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise which owns the organization.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the organization the users will be added to.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  The role to assign the users in the organization
  """
  role: OrganizationMemberRole

  """
  The IDs of the enterprise members to add.
  """
  userIds: [ID!]!
}

"""
Autogenerated return type of AddEnterpriseOrganizationMember
"""
type AddEnterpriseOrganizationMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The users who were added to the organization.
  """
  users: [User!]
}

"""
Autogenerated input type of AddEnterpriseSupportEntitlement
"""
input AddEnterpriseSupportEntitlementInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Enterprise which the admin belongs to.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of a member who will receive the support entitlement.
  """
  login: String!
}

"""
Autogenerated return type of AddEnterpriseSupportEntitlement
"""
type AddEnterpriseSupportEntitlementPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of adding the support entitlement.
  """
  message: String
}

"""
Autogenerated input type of AddLabelsToLabelable
"""
input AddLabelsToLabelableInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ids of the labels to add.
  """
  labelIds: [ID!]! @possibleTypes(concreteTypes: ["Label"])

  """
  The id of the labelable object to add labels to.
  """
  labelableId: ID! @possibleTypes(concreteTypes: ["Discussion", "Issue", "PullRequest"], abstractType: "Labelable")
}

"""
Autogenerated return type of AddLabelsToLabelable
"""
type AddLabelsToLabelablePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item that was labeled.
  """
  labelable: Labelable
}

"""
Autogenerated input type of AddProjectCard
"""
input AddProjectCardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The content of the card. Must be a member of the ProjectCardItem union
  """
  contentId: ID @possibleTypes(concreteTypes: ["Issue", "PullRequest"], abstractType: "ProjectCardItem")

  """
  The note on the card.
  """
  note: String

  """
  The Node ID of the ProjectColumn.
  """
  projectColumnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

"""
Autogenerated return type of AddProjectCard
"""
type AddProjectCardPayload {
  """
  The edge from the ProjectColumn's card connection.
  """
  cardEdge: ProjectCardEdge

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ProjectColumn
  """
  projectColumn: ProjectColumn
}

"""
Autogenerated input type of AddProjectColumn
"""
input AddProjectColumnInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of the column.
  """
  name: String!

  """
  The Node ID of the project.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])
}

"""
Autogenerated return type of AddProjectColumn
"""
type AddProjectColumnPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The edge from the project's column connection.
  """
  columnEdge: ProjectColumnEdge

  """
  The project
  """
  project: Project
}

"""
Autogenerated input type of AddProjectV2DraftIssue
"""
input AddProjectV2DraftIssueInput {
  """
  The IDs of the assignees of the draft issue.
  """
  assigneeIds: [ID!] @possibleTypes(concreteTypes: ["User"])

  """
  The body of the draft issue.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to add the draft issue to.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The title of the draft issue. A project item can also be created by providing
  the URL of an Issue or Pull Request if you have access.
  """
  title: String!
}

"""
Autogenerated return type of AddProjectV2DraftIssue
"""
type AddProjectV2DraftIssuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The draft issue added to the project.
  """
  projectItem: ProjectV2Item
}

"""
Autogenerated input type of AddProjectV2ItemById
"""
input AddProjectV2ItemByIdInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the Issue or Pull Request to add.
  """
  contentId: ID!
    @possibleTypes(concreteTypes: ["DraftIssue", "Issue", "PullRequest"], abstractType: "ProjectV2ItemContent")

  """
  The ID of the Project to add the item to.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of AddProjectV2ItemById
"""
type AddProjectV2ItemByIdPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item added to the project.
  """
  item: ProjectV2Item
}

"""
Autogenerated input type of AddPullRequestReviewComment
"""
input AddPullRequestReviewCommentInput {
  """
  The text of the comment. This field is required

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `body` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The SHA of the commit to comment on.

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `commitOID` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation
  """
  commitOID: GitObjectID

  """
  The comment id to reply to.

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `inReplyTo` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation
  """
  inReplyTo: ID @possibleTypes(concreteTypes: ["PullRequestReviewComment"])

  """
  The relative path of the file to comment on.

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `path` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation
  """
  path: String

  """
  The line index in the diff to comment on.

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `position` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation
  """
  position: Int

  """
  The node ID of the pull request reviewing

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `pullRequestId` will be removed. use
  addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation
  """
  pullRequestId: ID @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The Node ID of the review to modify.

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `pullRequestReviewId` will be removed. use
  addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation
  """
  pullRequestReviewId: ID @possibleTypes(concreteTypes: ["PullRequestReview"])
}

"""
Autogenerated return type of AddPullRequestReviewComment
"""
type AddPullRequestReviewCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created comment.
  """
  comment: PullRequestReviewComment

  """
  The edge from the review's comment connection.
  """
  commentEdge: PullRequestReviewCommentEdge
}

"""
Autogenerated input type of AddPullRequestReview
"""
input AddPullRequestReviewInput {
  """
  The contents of the review body comment.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The review line comments.

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `comments` will be removed. use the `threads` argument instead
  **Reason:** We are deprecating comment fields that use diff-relative positioning
  """
  comments: [DraftPullRequestReviewComment]

  """
  The commit OID the review pertains to.
  """
  commitOID: GitObjectID

  """
  The event to perform on the pull request review.
  """
  event: PullRequestReviewEvent

  """
  The Node ID of the pull request to modify.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The review line comment threads.
  """
  threads: [DraftPullRequestReviewThread]
}

"""
Autogenerated return type of AddPullRequestReview
"""
type AddPullRequestReviewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created pull request review.
  """
  pullRequestReview: PullRequestReview

  """
  The edge from the pull request's review connection.
  """
  reviewEdge: PullRequestReviewEdge
}

"""
Autogenerated input type of AddPullRequestReviewThread
"""
input AddPullRequestReviewThreadInput {
  """
  Body of the thread's first comment.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The line of the blob to which the thread refers, required for line-level
  threads. The end of the line range for multi-line comments.
  """
  line: Int

  """
  Path to the file being commented on.
  """
  path: String!

  """
  The node ID of the pull request reviewing
  """
  pullRequestId: ID @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The Node ID of the review to modify.
  """
  pullRequestReviewId: ID @possibleTypes(concreteTypes: ["PullRequestReview"])

  """
  The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.
  """
  side: DiffSide = RIGHT

  """
  The first line of the range to which the comment refers.
  """
  startLine: Int

  """
  The side of the diff on which the start line resides.
  """
  startSide: DiffSide = RIGHT

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType = LINE
}

"""
Autogenerated return type of AddPullRequestReviewThread
"""
type AddPullRequestReviewThreadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created thread.
  """
  thread: PullRequestReviewThread
}

"""
Autogenerated input type of AddPullRequestReviewThreadReply
"""
input AddPullRequestReviewThreadReplyInput {
  """
  The text of the reply.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the pending review to which the reply will belong.
  """
  pullRequestReviewId: ID @possibleTypes(concreteTypes: ["PullRequestReview"])

  """
  The Node ID of the thread to which this reply is being written.
  """
  pullRequestReviewThreadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
Autogenerated return type of AddPullRequestReviewThreadReply
"""
type AddPullRequestReviewThreadReplyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created reply.
  """
  comment: PullRequestReviewComment
}

"""
Autogenerated input type of AddReaction
"""
input AddReactionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of the emoji to react with.
  """
  content: ReactionContent!

  """
  The Node ID of the subject to modify.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "Discussion"
        "DiscussionComment"
        "Issue"
        "IssueComment"
        "PullRequest"
        "PullRequestReview"
        "PullRequestReviewComment"
        "Release"
        "TeamDiscussion"
        "TeamDiscussionComment"
      ]
      abstractType: "Reactable"
    )
}

"""
Autogenerated return type of AddReaction
"""
type AddReactionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The reaction object.
  """
  reaction: Reaction

  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  subject: Reactable
}

"""
Autogenerated input type of AddStar
"""
input AddStarInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Starrable ID to star.
  """
  starrableId: ID! @possibleTypes(concreteTypes: ["Gist", "Repository", "Topic"], abstractType: "Starrable")
}

"""
Autogenerated return type of AddStar
"""
type AddStarPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The starrable.
  """
  starrable: Starrable
}

"""
Autogenerated input type of AddUpvote
"""
input AddUpvoteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the discussion or comment to upvote.
  """
  subjectId: ID! @possibleTypes(concreteTypes: ["Discussion", "DiscussionComment"], abstractType: "Votable")
}

"""
Autogenerated return type of AddUpvote
"""
type AddUpvotePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The votable subject.
  """
  subject: Votable
}

"""
Autogenerated input type of AddVerifiableDomain
"""
input AddVerifiableDomainInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The URL of the domain
  """
  domain: URI!

  """
  The ID of the owner to add the domain to
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["Enterprise", "Organization"], abstractType: "VerifiableDomainOwner")
}

"""
Autogenerated return type of AddVerifiableDomain
"""
type AddVerifiableDomainPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The verifiable domain that was added.
  """
  domain: VerifiableDomain
}

"""
Represents an 'added_to_merge_queue' event on a given pull request.
"""
type AddedToMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who added this Pull Request to the merge queue
  """
  enqueuer: User

  """
  The Node ID of the AddedToMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was added to.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest
}

"""
Represents a 'added_to_project' event on a given issue or pull request.
"""
type AddedToProjectEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the AddedToProjectEvent object
  """
  id: ID!

  """
  Project referenced by event.
  """
  project: Project @preview(toggledBy: "starfox-preview")

  """
  Project card referenced by this project event.
  """
  projectCard: ProjectCard @preview(toggledBy: "starfox-preview")

  """
  Column name referenced by this project event.
  """
  projectColumnName: String! @preview(toggledBy: "starfox-preview")
}

"""
Represents an announcement banner.
"""
interface AnnouncementBanner {
  """
  The text of the announcement
  """
  announcement: String

  """
  The expiration date of the announcement, if any
  """
  announcementExpiresAt: DateTime

  """
  Whether the announcement can be dismissed by the user
  """
  announcementUserDismissible: Boolean
}

"""
A GitHub App.
"""
type App implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The description of the app.
  """
  description: String

  """
  The Node ID of the App object
  """
  id: ID!

  """
  The IP addresses of the app.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for IP allow list entries returned.
    """
    orderBy: IpAllowListEntryOrder = {field: ALLOW_LIST_VALUE, direction: ASC}
  ): IpAllowListEntryConnection!

  """
  The hex color code, without the leading '#', for the logo background.
  """
  logoBackgroundColor: String!

  """
  A URL pointing to the app's logo.
  """
  logoUrl(
    """
    The size of the resulting image.
    """
    size: Int
  ): URI!

  """
  The name of the app.
  """
  name: String!

  """
  A slug based on the name of the app for use in URLs.
  """
  slug: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The URL to the app's homepage.
  """
  url: URI!
}

"""
Autogenerated input type of ApproveDeployments
"""
input ApproveDeploymentsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Optional comment for approving deployments
  """
  comment: String = ""

  """
  The ids of environments to reject deployments
  """
  environmentIds: [ID!]!

  """
  The node ID of the workflow run containing the pending deployments.
  """
  workflowRunId: ID! @possibleTypes(concreteTypes: ["WorkflowRun"])
}

"""
Autogenerated return type of ApproveDeployments
"""
type ApproveDeploymentsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The affected deployments.
  """
  deployments: [Deployment!]
}

"""
Autogenerated input type of ApproveVerifiableDomain
"""
input ApproveVerifiableDomainInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the verifiable domain to approve.
  """
  id: ID! @possibleTypes(concreteTypes: ["VerifiableDomain"])
}

"""
Autogenerated return type of ApproveVerifiableDomain
"""
type ApproveVerifiableDomainPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The verifiable domain that was approved.
  """
  domain: VerifiableDomain
}

"""
Autogenerated input type of ArchiveProjectV2Item
"""
input ArchiveProjectV2ItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the ProjectV2Item to archive.
  """
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])

  """
  The ID of the Project to archive the item from.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of ArchiveProjectV2Item
"""
type ArchiveProjectV2ItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item archived from the project.
  """
  item: ProjectV2Item
}

"""
Autogenerated input type of ArchiveRepository
"""
input ArchiveRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the repository to mark as archived.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of ArchiveRepository
"""
type ArchiveRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that was marked as archived.
  """
  repository: Repository
}

"""
An object that can have users assigned to it.
"""
interface Assignable {
  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!
}

"""
Represents an 'assigned' event on any assignable object.
"""
type AssignedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the assignable associated with the event.
  """
  assignable: Assignable!

  """
  Identifies the user or mannequin that was assigned.
  """
  assignee: Assignee

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the AssignedEvent object
  """
  id: ID!

  """
  Identifies the user who was assigned.
  """
  user: User
    @deprecated(reason: "Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.")
}

"""
Types that can be assigned to issues.
"""
union Assignee = Bot | Mannequin | Organization | User

"""
An entry in the audit log.
"""
interface AuditEntry {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Types that can initiate an audit log event.
"""
union AuditEntryActor = Bot | Organization | User

"""
Ordering options for Audit Log connections.
"""
input AuditLogOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection

  """
  The field to order Audit Logs by.
  """
  field: AuditLogOrderField
}

"""
Properties by which Audit Log connections can be ordered.
"""
enum AuditLogOrderField {
  """
  Order audit log entries by timestamp
  """
  CREATED_AT
}

"""
Represents a 'auto_merge_disabled' event on a given pull request.
"""
type AutoMergeDisabledEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who disabled auto-merge for this Pull Request
  """
  disabler: User

  """
  The Node ID of the AutoMergeDisabledEvent object
  """
  id: ID!

  """
  PullRequest referenced by event
  """
  pullRequest: PullRequest

  """
  The reason auto-merge was disabled
  """
  reason: String

  """
  The reason_code relating to why auto-merge was disabled
  """
  reasonCode: String
}

"""
Represents a 'auto_merge_enabled' event on a given pull request.
"""
type AutoMergeEnabledEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who enabled auto-merge for this Pull Request
  """
  enabler: User

  """
  The Node ID of the AutoMergeEnabledEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest
}

"""
Represents an auto-merge request for a pull request
"""
type AutoMergeRequest {
  """
  The email address of the author of this auto-merge request.
  """
  authorEmail: String

  """
  The commit message of the auto-merge request. If a merge queue is required by
  the base branch, this value will be set by the merge queue when merging.
  """
  commitBody: String

  """
  The commit title of the auto-merge request. If a merge queue is required by
  the base branch, this value will be set by the merge queue when merging
  """
  commitHeadline: String

  """
  When was this auto-merge request was enabled.
  """
  enabledAt: DateTime

  """
  The actor who created the auto-merge request.
  """
  enabledBy: Actor

  """
  The merge method of the auto-merge request. If a merge queue is required by
  the base branch, this value will be set by the merge queue when merging.
  """
  mergeMethod: PullRequestMergeMethod!

  """
  The pull request that this auto-merge request is set against.
  """
  pullRequest: PullRequest!
}

"""
Represents a 'auto_rebase_enabled' event on a given pull request.
"""
type AutoRebaseEnabledEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who enabled auto-merge (rebase) for this Pull Request
  """
  enabler: User

  """
  The Node ID of the AutoRebaseEnabledEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest
}

"""
Represents a 'auto_squash_enabled' event on a given pull request.
"""
type AutoSquashEnabledEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who enabled auto-merge (squash) for this Pull Request
  """
  enabler: User

  """
  The Node ID of the AutoSquashEnabledEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest
}

"""
Represents a 'automatic_base_change_failed' event on a given pull request.
"""
type AutomaticBaseChangeFailedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the AutomaticBaseChangeFailedEvent object
  """
  id: ID!

  """
  The new base for this PR
  """
  newBase: String!

  """
  The old base for this PR
  """
  oldBase: String!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!
}

"""
Represents a 'automatic_base_change_succeeded' event on a given pull request.
"""
type AutomaticBaseChangeSucceededEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the AutomaticBaseChangeSucceededEvent object
  """
  id: ID!

  """
  The new base for this PR
  """
  newBase: String!

  """
  The old base for this PR
  """
  oldBase: String!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!
}

"""
A (potentially binary) string encoded using base64.
"""
scalar Base64String

"""
Represents a 'base_ref_changed' event on a given issue or pull request.
"""
type BaseRefChangedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the name of the base ref for the pull request after it was changed.
  """
  currentRefName: String!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the BaseRefChangedEvent object
  """
  id: ID!

  """
  Identifies the name of the base ref for the pull request before it was changed.
  """
  previousRefName: String!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!
}

"""
Represents a 'base_ref_deleted' event on a given pull request.
"""
type BaseRefDeletedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the name of the Ref associated with the `base_ref_deleted` event.
  """
  baseRefName: String

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the BaseRefDeletedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest
}

"""
Represents a 'base_ref_force_pushed' event on a given pull request.
"""
type BaseRefForcePushedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the after commit SHA for the 'base_ref_force_pushed' event.
  """
  afterCommit: Commit

  """
  Identifies the before commit SHA for the 'base_ref_force_pushed' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the BaseRefForcePushedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the fully qualified ref name for the 'base_ref_force_pushed' event.
  """
  ref: Ref
}

"""
Represents non-fractional signed whole numeric values. Since the value may
exceed the size of a 32-bit integer, it's encoded as a string.
"""
scalar BigInt

"""
Represents a Git blame.
"""
type Blame {
  """
  The list of ranges from a Git blame.
  """
  ranges: [BlameRange!]!
}

"""
Represents a range of information from a Git blame.
"""
type BlameRange {
  """
  Identifies the recency of the change, from 1 (new) to 10 (old). This is
  calculated as a 2-quantile and determines the length of distance between the
  median age of all the changes in the file and the recency of the current
  range's change.
  """
  age: Int!

  """
  Identifies the line author
  """
  commit: Commit!

  """
  The ending line for the range
  """
  endingLine: Int!

  """
  The starting line for the range
  """
  startingLine: Int!
}

"""
Represents a Git blob.
"""
type Blob implements GitObject & Node {
  """
  An abbreviated version of the Git object ID
  """
  abbreviatedOid: String!

  """
  Byte size of Blob object
  """
  byteSize: Int!

  """
  The HTTP path for this Git object
  """
  commitResourcePath: URI!

  """
  The HTTP URL for this Git object
  """
  commitUrl: URI!

  """
  The Node ID of the Blob object
  """
  id: ID!

  """
  Indicates whether the Blob is binary or text. Returns null if unable to determine the encoding.
  """
  isBinary: Boolean

  """
  Indicates whether the contents is truncated
  """
  isTruncated: Boolean!

  """
  The Git object ID
  """
  oid: GitObjectID!

  """
  The Repository the Git object belongs to
  """
  repository: Repository!

  """
  UTF8 text data or null if the Blob is binary
  """
  text: String
}

"""
A special type of user which takes actions on behalf of GitHub Apps.
"""
type Bot implements Actor & Node & UniformResourceLocatable {
  """
  A URL pointing to the GitHub App's public avatar.
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Bot object
  """
  id: ID!

  """
  The username of the actor.
  """
  login: String!

  """
  The HTTP path for this bot
  """
  resourcePath: URI!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this bot
  """
  url: URI!
}

"""
Types which can be actors for `BranchActorAllowance` objects.
"""
union BranchActorAllowanceActor = App | Team | User

"""
Parameters to be used for the branch_name_pattern rule
"""
type BranchNamePatternParameters {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean!

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
Parameters to be used for the branch_name_pattern rule
"""
input BranchNamePatternParametersInput {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
A branch protection rule.
"""
type BranchProtectionRule implements Node {
  """
  Can this branch be deleted.
  """
  allowsDeletions: Boolean!

  """
  Are force pushes allowed on this branch.
  """
  allowsForcePushes: Boolean!

  """
  Is branch creation a protected operation.
  """
  blocksCreations: Boolean!

  """
  A list of conflicts matching branches protection rule and other branch protection rules
  """
  branchProtectionRuleConflicts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BranchProtectionRuleConflictConnection!

  """
  A list of actors able to force push for this branch protection rule.
  """
  bypassForcePushAllowances(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BypassForcePushAllowanceConnection!

  """
  A list of actors able to bypass PRs for this branch protection rule.
  """
  bypassPullRequestAllowances(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BypassPullRequestAllowanceConnection!

  """
  The actor who created this branch protection rule.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Will new commits pushed to matching branches dismiss pull request review approvals.
  """
  dismissesStaleReviews: Boolean!

  """
  The Node ID of the BranchProtectionRule object
  """
  id: ID!

  """
  Can admins override branch protection.
  """
  isAdminEnforced: Boolean!

  """
  Whether users can pull changes from upstream when the branch is locked. Set to
  `true` to allow fork syncing. Set to `false` to prevent fork syncing.
  """
  lockAllowsFetchAndMerge: Boolean!

  """
  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
  """
  lockBranch: Boolean!

  """
  Repository refs that are protected by this rule
  """
  matchingRefs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filters refs with query on name
    """
    query: String
  ): RefConnection!

  """
  Identifies the protection rule pattern.
  """
  pattern: String!

  """
  A list push allowances for this branch protection rule.
  """
  pushAllowances(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PushAllowanceConnection!

  """
  The repository associated with this branch protection rule.
  """
  repository: Repository

  """
  Whether the most recent push must be approved by someone other than the person who pushed it
  """
  requireLastPushApproval: Boolean!

  """
  Number of approving reviews required to update matching branches.
  """
  requiredApprovingReviewCount: Int

  """
  List of required deployment environments that must be deployed successfully to update matching branches
  """
  requiredDeploymentEnvironments: [String]

  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  requiredStatusCheckContexts: [String]

  """
  List of required status checks that must pass for commits to be accepted to matching branches.
  """
  requiredStatusChecks: [RequiredStatusCheckDescription!]

  """
  Are approving reviews required to update matching branches.
  """
  requiresApprovingReviews: Boolean!

  """
  Are reviews from code owners required to update matching branches.
  """
  requiresCodeOwnerReviews: Boolean!

  """
  Are commits required to be signed.
  """
  requiresCommitSignatures: Boolean!

  """
  Are conversations required to be resolved before merging.
  """
  requiresConversationResolution: Boolean!

  """
  Does this branch require deployment to specific environments before merging
  """
  requiresDeployments: Boolean!

  """
  Are merge commits prohibited from being pushed to this branch.
  """
  requiresLinearHistory: Boolean!

  """
  Are status checks required to update matching branches.
  """
  requiresStatusChecks: Boolean!

  """
  Are branches required to be up to date before merging.
  """
  requiresStrictStatusChecks: Boolean!

  """
  Is pushing to matching branches restricted.
  """
  restrictsPushes: Boolean!

  """
  Is dismissal of pull request reviews restricted.
  """
  restrictsReviewDismissals: Boolean!

  """
  A list review dismissal allowances for this branch protection rule.
  """
  reviewDismissalAllowances(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewDismissalAllowanceConnection!
}

"""
A conflict between two branch protection rules.
"""
type BranchProtectionRuleConflict {
  """
  Identifies the branch protection rule.
  """
  branchProtectionRule: BranchProtectionRule

  """
  Identifies the conflicting branch protection rule.
  """
  conflictingBranchProtectionRule: BranchProtectionRule

  """
  Identifies the branch ref that has conflicting rules
  """
  ref: Ref
}

"""
The connection type for BranchProtectionRuleConflict.
"""
type BranchProtectionRuleConflictConnection {
  """
  A list of edges.
  """
  edges: [BranchProtectionRuleConflictEdge]

  """
  A list of nodes.
  """
  nodes: [BranchProtectionRuleConflict]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BranchProtectionRuleConflictEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BranchProtectionRuleConflict
}

"""
The connection type for BranchProtectionRule.
"""
type BranchProtectionRuleConnection {
  """
  A list of edges.
  """
  edges: [BranchProtectionRuleEdge]

  """
  A list of nodes.
  """
  nodes: [BranchProtectionRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BranchProtectionRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BranchProtectionRule
}

"""
Information about a sponsorship to make for a user or organization with a GitHub
Sponsors profile, as part of sponsoring many users or organizations at once.
"""
input BulkSponsorship {
  """
  The amount to pay to the sponsorable in US dollars. Valid values: 1-12000.
  """
  amount: Int!

  """
  The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.
  """
  sponsorableId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "Sponsorable")

  """
  The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.
  """
  sponsorableLogin: String
}

"""
Types that can represent a repository ruleset bypass actor.
"""
union BypassActor = App | Team

"""
A user, team, or app who has the ability to bypass a force push requirement on a protected branch.
"""
type BypassForcePushAllowance implements Node {
  """
  The actor that can force push.
  """
  actor: BranchActorAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the BypassForcePushAllowance object
  """
  id: ID!
}

"""
The connection type for BypassForcePushAllowance.
"""
type BypassForcePushAllowanceConnection {
  """
  A list of edges.
  """
  edges: [BypassForcePushAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [BypassForcePushAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BypassForcePushAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BypassForcePushAllowance
}

"""
A user, team, or app who has the ability to bypass a pull request requirement on a protected branch.
"""
type BypassPullRequestAllowance implements Node {
  """
  The actor that can bypass.
  """
  actor: BranchActorAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the BypassPullRequestAllowance object
  """
  id: ID!
}

"""
The connection type for BypassPullRequestAllowance.
"""
type BypassPullRequestAllowanceConnection {
  """
  A list of edges.
  """
  edges: [BypassPullRequestAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [BypassPullRequestAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BypassPullRequestAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BypassPullRequestAllowance
}

"""
The Common Vulnerability Scoring System
"""
type CVSS {
  """
  The CVSS score associated with this advisory
  """
  score: Float!

  """
  The CVSS vector string associated with this advisory
  """
  vectorString: String
}

"""
A common weakness enumeration
"""
type CWE implements Node {
  """
  The id of the CWE
  """
  cweId: String!

  """
  A detailed description of this CWE
  """
  description: String!

  """
  The Node ID of the CWE object
  """
  id: ID!

  """
  The name of this CWE
  """
  name: String!
}

"""
The connection type for CWE.
"""
type CWEConnection {
  """
  A list of edges.
  """
  edges: [CWEEdge]

  """
  A list of nodes.
  """
  nodes: [CWE]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CWEEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CWE
}

"""
Autogenerated input type of CancelEnterpriseAdminInvitation
"""
input CancelEnterpriseAdminInvitationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the pending enterprise administrator invitation.
  """
  invitationId: ID! @possibleTypes(concreteTypes: ["EnterpriseAdministratorInvitation"])
}

"""
Autogenerated return type of CancelEnterpriseAdminInvitation
"""
type CancelEnterpriseAdminInvitationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The invitation that was canceled.
  """
  invitation: EnterpriseAdministratorInvitation

  """
  A message confirming the result of canceling an administrator invitation.
  """
  message: String
}

"""
Autogenerated input type of CancelSponsorship
"""
input CancelSponsorshipInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the user or organization who is acting as the sponsor, paying for
  the sponsorship. Required if sponsorLogin is not given.
  """
  sponsorId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "Sponsor")

  """
  The username of the user or organization who is acting as the sponsor, paying
  for the sponsorship. Required if sponsorId is not given.
  """
  sponsorLogin: String

  """
  The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.
  """
  sponsorableId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "Sponsorable")

  """
  The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of CancelSponsorship
"""
type CancelSponsorshipPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was being used at the time of cancellation.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of ChangeUserStatus
"""
input ChangeUserStatusInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:.
  """
  emoji: String

  """
  If set, the user status will not be shown after this date.
  """
  expiresAt: DateTime

  """
  Whether this status should indicate you are not fully available on GitHub, e.g., you are away.
  """
  limitedAvailability: Boolean = false

  """
  A short description of your current status.
  """
  message: String

  """
  The ID of the organization whose members will be allowed to see the status. If
  omitted, the status will be publicly visible.
  """
  organizationId: ID @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of ChangeUserStatus
"""
type ChangeUserStatusPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Your updated status.
  """
  status: UserStatus
}

"""
A single check annotation.
"""
type CheckAnnotation {
  """
  The annotation's severity level.
  """
  annotationLevel: CheckAnnotationLevel

  """
  The path to the file that this annotation was made on.
  """
  blobUrl: URI!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The position of this annotation.
  """
  location: CheckAnnotationSpan!

  """
  The annotation's message.
  """
  message: String!

  """
  The path that this annotation was made on.
  """
  path: String!

  """
  Additional information about the annotation.
  """
  rawDetails: String

  """
  The annotation's title
  """
  title: String
}

"""
The connection type for CheckAnnotation.
"""
type CheckAnnotationConnection {
  """
  A list of edges.
  """
  edges: [CheckAnnotationEdge]

  """
  A list of nodes.
  """
  nodes: [CheckAnnotation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Information from a check run analysis to specific lines of code.
"""
input CheckAnnotationData {
  """
  Represents an annotation's information level
  """
  annotationLevel: CheckAnnotationLevel!

  """
  The location of the annotation
  """
  location: CheckAnnotationRange!

  """
  A short description of the feedback for these lines of code.
  """
  message: String!

  """
  The path of the file to add an annotation to.
  """
  path: String!

  """
  Details about this annotation.
  """
  rawDetails: String

  """
  The title that represents the annotation.
  """
  title: String
}

"""
An edge in a connection.
"""
type CheckAnnotationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CheckAnnotation
}

"""
Represents an annotation's information level.
"""
enum CheckAnnotationLevel {
  """
  An annotation indicating an inescapable error.
  """
  FAILURE

  """
  An annotation indicating some information.
  """
  NOTICE

  """
  An annotation indicating an ignorable error.
  """
  WARNING
}

"""
A character position in a check annotation.
"""
type CheckAnnotationPosition {
  """
  Column number (1 indexed).
  """
  column: Int

  """
  Line number (1 indexed).
  """
  line: Int!
}

"""
Information from a check run analysis to specific lines of code.
"""
input CheckAnnotationRange {
  """
  The ending column of the range.
  """
  endColumn: Int

  """
  The ending line of the range.
  """
  endLine: Int!

  """
  The starting column of the range.
  """
  startColumn: Int

  """
  The starting line of the range.
  """
  startLine: Int!
}

"""
An inclusive pair of positions for a check annotation.
"""
type CheckAnnotationSpan {
  """
  End position (inclusive).
  """
  end: CheckAnnotationPosition!

  """
  Start position (inclusive).
  """
  start: CheckAnnotationPosition!
}

"""
The possible states for a check suite or run conclusion.
"""
enum CheckConclusionState {
  """
  The check suite or run requires action.
  """
  ACTION_REQUIRED

  """
  The check suite or run has been cancelled.
  """
  CANCELLED

  """
  The check suite or run has failed.
  """
  FAILURE

  """
  The check suite or run was neutral.
  """
  NEUTRAL

  """
  The check suite or run was skipped.
  """
  SKIPPED

  """
  The check suite or run was marked stale by GitHub. Only GitHub can use this conclusion.
  """
  STALE

  """
  The check suite or run has failed at startup.
  """
  STARTUP_FAILURE

  """
  The check suite or run has succeeded.
  """
  SUCCESS

  """
  The check suite or run has timed out.
  """
  TIMED_OUT
}

"""
A check run.
"""
type CheckRun implements Node & RequirableByPullRequest & UniformResourceLocatable {
  """
  The check run's annotations
  """
  annotations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CheckAnnotationConnection

  """
  The check suite that this run is a part of.
  """
  checkSuite: CheckSuite!

  """
  Identifies the date and time when the check run was completed.
  """
  completedAt: DateTime

  """
  The conclusion of the check run.
  """
  conclusion: CheckConclusionState

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The corresponding deployment for this job, if any
  """
  deployment: Deployment

  """
  The URL from which to find full details of the check run on the integrator's site.
  """
  detailsUrl: URI

  """
  A reference for the check run on the integrator's system.
  """
  externalId: String

  """
  The Node ID of the CheckRun object
  """
  id: ID!

  """
  Whether this is required to pass before merging for a specific pull request.
  """
  isRequired(
    """
    The id of the pull request this is required for
    """
    pullRequestId: ID

    """
    The number of the pull request this is required for
    """
    pullRequestNumber: Int
  ): Boolean!

  """
  The name of the check for this check run.
  """
  name: String!

  """
  Information about a pending deployment, if any, in this check run
  """
  pendingDeploymentRequest: DeploymentRequest

  """
  The permalink to the check run summary.
  """
  permalink: URI!

  """
  The repository associated with this check run.
  """
  repository: Repository!

  """
  The HTTP path for this check run.
  """
  resourcePath: URI!

  """
  Identifies the date and time when the check run was started.
  """
  startedAt: DateTime

  """
  The current status of the check run.
  """
  status: CheckStatusState!

  """
  The check run's steps
  """
  steps(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Step number
    """
    number: Int
  ): CheckStepConnection

  """
  A string representing the check run's summary
  """
  summary: String

  """
  A string representing the check run's text
  """
  text: String

  """
  A string representing the check run
  """
  title: String

  """
  The HTTP URL for this check run.
  """
  url: URI!
}

"""
Possible further actions the integrator can perform.
"""
input CheckRunAction {
  """
  A short explanation of what this action would do.
  """
  description: String!

  """
  A reference for the action on the integrator's system.
  """
  identifier: String!

  """
  The text to be displayed on a button in the web UI.
  """
  label: String!
}

"""
The connection type for CheckRun.
"""
type CheckRunConnection {
  """
  A list of edges.
  """
  edges: [CheckRunEdge]

  """
  A list of nodes.
  """
  nodes: [CheckRun]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CheckRunEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CheckRun
}

"""
The filters that are available when fetching check runs.
"""
input CheckRunFilter {
  """
  Filters the check runs created by this application ID.
  """
  appId: Int

  """
  Filters the check runs by this name.
  """
  checkName: String

  """
  Filters the check runs by this type.
  """
  checkType: CheckRunType

  """
  Filters the check runs by these conclusions.
  """
  conclusions: [CheckConclusionState!]

  """
  Filters the check runs by this status. Superceded by statuses.
  """
  status: CheckStatusState

  """
  Filters the check runs by this status. Overrides status.
  """
  statuses: [CheckStatusState!]
}

"""
Descriptive details about the check run.
"""
input CheckRunOutput {
  """
  The annotations that are made as part of the check run.
  """
  annotations: [CheckAnnotationData!]

  """
  Images attached to the check run output displayed in the GitHub pull request UI.
  """
  images: [CheckRunOutputImage!]

  """
  The summary of the check run (supports Commonmark).
  """
  summary: String!

  """
  The details of the check run (supports Commonmark).
  """
  text: String

  """
  A title to provide for this check run.
  """
  title: String!
}

"""
Images attached to the check run output displayed in the GitHub pull request UI.
"""
input CheckRunOutputImage {
  """
  The alternative text for the image.
  """
  alt: String!

  """
  A short image description.
  """
  caption: String

  """
  The full URL of the image.
  """
  imageUrl: URI!
}

"""
The possible states of a check run in a status rollup.
"""
enum CheckRunState {
  """
  The check run requires action.
  """
  ACTION_REQUIRED

  """
  The check run has been cancelled.
  """
  CANCELLED

  """
  The check run has been completed.
  """
  COMPLETED

  """
  The check run has failed.
  """
  FAILURE

  """
  The check run is in progress.
  """
  IN_PROGRESS

  """
  The check run was neutral.
  """
  NEUTRAL

  """
  The check run is in pending state.
  """
  PENDING

  """
  The check run has been queued.
  """
  QUEUED

  """
  The check run was skipped.
  """
  SKIPPED

  """
  The check run was marked stale by GitHub. Only GitHub can use this conclusion.
  """
  STALE

  """
  The check run has failed at startup.
  """
  STARTUP_FAILURE

  """
  The check run has succeeded.
  """
  SUCCESS

  """
  The check run has timed out.
  """
  TIMED_OUT

  """
  The check run is in waiting state.
  """
  WAITING
}

"""
Represents a count of the state of a check run.
"""
type CheckRunStateCount {
  """
  The number of check runs with this state.
  """
  count: Int!

  """
  The state of a check run.
  """
  state: CheckRunState!
}

"""
The possible types of check runs.
"""
enum CheckRunType {
  """
  Every check run available.
  """
  ALL

  """
  The latest check run.
  """
  LATEST
}

"""
The possible states for a check suite or run status.
"""
enum CheckStatusState {
  """
  The check suite or run has been completed.
  """
  COMPLETED

  """
  The check suite or run is in progress.
  """
  IN_PROGRESS

  """
  The check suite or run is in pending state.
  """
  PENDING

  """
  The check suite or run has been queued.
  """
  QUEUED

  """
  The check suite or run has been requested.
  """
  REQUESTED

  """
  The check suite or run is in waiting state.
  """
  WAITING
}

"""
A single check step.
"""
type CheckStep {
  """
  Identifies the date and time when the check step was completed.
  """
  completedAt: DateTime

  """
  The conclusion of the check step.
  """
  conclusion: CheckConclusionState

  """
  A reference for the check step on the integrator's system.
  """
  externalId: String

  """
  The step's name.
  """
  name: String!

  """
  The index of the step in the list of steps of the parent check run.
  """
  number: Int!

  """
  Number of seconds to completion.
  """
  secondsToCompletion: Int

  """
  Identifies the date and time when the check step was started.
  """
  startedAt: DateTime

  """
  The current status of the check step.
  """
  status: CheckStatusState!
}

"""
The connection type for CheckStep.
"""
type CheckStepConnection {
  """
  A list of edges.
  """
  edges: [CheckStepEdge]

  """
  A list of nodes.
  """
  nodes: [CheckStep]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CheckStepEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CheckStep
}

"""
A check suite.
"""
type CheckSuite implements Node {
  """
  The GitHub App which created this check suite.
  """
  app: App

  """
  The name of the branch for this check suite.
  """
  branch: Ref

  """
  The check runs associated with a check suite.
  """
  checkRuns(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filters the check runs by this type.
    """
    filterBy: CheckRunFilter

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CheckRunConnection

  """
  The commit for this check suite
  """
  commit: Commit!

  """
  The conclusion of this check suite.
  """
  conclusion: CheckConclusionState

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who triggered the check suite.
  """
  creator: User

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the CheckSuite object
  """
  id: ID!

  """
  A list of open pull requests matching the check suite.
  """
  matchingPullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    The base ref name to filter the pull requests by.
    """
    baseRefName: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    The head ref name to filter the pull requests by.
    """
    headRefName: String

    """
    A list of label names to filter the pull requests by.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests returned from the connection.
    """
    orderBy: IssueOrder

    """
    A list of states to filter the pull requests by.
    """
    states: [PullRequestState!]
  ): PullRequestConnection

  """
  The push that triggered this check suite.
  """
  push: Push

  """
  The repository associated with this check suite.
  """
  repository: Repository!

  """
  The HTTP path for this check suite
  """
  resourcePath: URI!

  """
  The status of this check suite.
  """
  status: CheckStatusState!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this check suite
  """
  url: URI!

  """
  The workflow run associated with this check suite.
  """
  workflowRun: WorkflowRun
}

"""
The auto-trigger preferences that are available for check suites.
"""
input CheckSuiteAutoTriggerPreference {
  """
  The node ID of the application that owns the check suite.
  """
  appId: ID!

  """
  Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository.
  """
  setting: Boolean!
}

"""
The connection type for CheckSuite.
"""
type CheckSuiteConnection {
  """
  A list of edges.
  """
  edges: [CheckSuiteEdge]

  """
  A list of nodes.
  """
  nodes: [CheckSuite]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CheckSuiteEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CheckSuite
}

"""
The filters that are available when fetching check suites.
"""
input CheckSuiteFilter {
  """
  Filters the check suites created by this application ID.
  """
  appId: Int

  """
  Filters the check suites by this name.
  """
  checkName: String
}

"""
An object which can have its data claimed or claim data from another.
"""
union Claimable = Mannequin | User

"""
Autogenerated input type of ClearLabelsFromLabelable
"""
input ClearLabelsFromLabelableInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the labelable object to clear the labels from.
  """
  labelableId: ID! @possibleTypes(concreteTypes: ["Discussion", "Issue", "PullRequest"], abstractType: "Labelable")
}

"""
Autogenerated return type of ClearLabelsFromLabelable
"""
type ClearLabelsFromLabelablePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item that was unlabeled.
  """
  labelable: Labelable
}

"""
Autogenerated input type of ClearProjectV2ItemFieldValue
"""
input ClearProjectV2ItemFieldValueInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the field to be cleared.
  """
  fieldId: ID!
    @possibleTypes(
      concreteTypes: ["ProjectV2Field", "ProjectV2IterationField", "ProjectV2SingleSelectField"]
      abstractType: "ProjectV2FieldConfiguration"
    )

  """
  The ID of the item to be cleared.
  """
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])

  """
  The ID of the Project.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of ClearProjectV2ItemFieldValue
"""
type ClearProjectV2ItemFieldValuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated item.
  """
  projectV2Item: ProjectV2Item
}

"""
Autogenerated input type of CloneProject
"""
input CloneProjectInput {
  """
  The description of the project.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not to clone the source project's workflows.
  """
  includeWorkflows: Boolean!

  """
  The name of the project.
  """
  name: String!

  """
  The visibility of the project, defaults to false (private).
  """
  public: Boolean

  """
  The source project to clone.
  """
  sourceId: ID! @possibleTypes(concreteTypes: ["Project"])

  """
  The owner ID to create the project under.
  """
  targetOwnerId: ID! @possibleTypes(concreteTypes: ["Organization", "Repository", "User"], abstractType: "ProjectOwner")
}

"""
Autogenerated return type of CloneProject
"""
type CloneProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the JobStatus for populating cloned fields.
  """
  jobStatusId: String

  """
  The new cloned project.
  """
  project: Project
}

"""
Autogenerated input type of CloneTemplateRepository
"""
input CloneTemplateRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A short description of the new repository.
  """
  description: String

  """
  Whether to copy all branches from the template to the new repository. Defaults
  to copying only the default branch of the template.
  """
  includeAllBranches: Boolean = false

  """
  The name of the new repository.
  """
  name: String!

  """
  The ID of the owner for the new repository.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "RepositoryOwner")

  """
  The Node ID of the template repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  Indicates the repository's visibility level.
  """
  visibility: RepositoryVisibility!
}

"""
Autogenerated return type of CloneTemplateRepository
"""
type CloneTemplateRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new repository.
  """
  repository: Repository
}

"""
An object that can be closed
"""
interface Closable {
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!
}

"""
Autogenerated input type of CloseDiscussion
"""
input CloseDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be closed.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])

  """
  The reason why the discussion is being closed.
  """
  reason: DiscussionCloseReason = RESOLVED
}

"""
Autogenerated return type of CloseDiscussion
"""
type CloseDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was closed.
  """
  discussion: Discussion
}

"""
Autogenerated input type of CloseIssue
"""
input CloseIssueInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the issue to be closed.
  """
  issueId: ID! @possibleTypes(concreteTypes: ["Issue"])

  """
  The reason the issue is to be closed.
  """
  stateReason: IssueClosedStateReason
}

"""
Autogenerated return type of CloseIssue
"""
type CloseIssuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The issue that was closed.
  """
  issue: Issue
}

"""
Autogenerated input type of ClosePullRequest
"""
input ClosePullRequestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the pull request to be closed.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""
Autogenerated return type of ClosePullRequest
"""
type ClosePullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that was closed.
  """
  pullRequest: PullRequest
}

"""
Represents a 'closed' event on any `Closable`.
"""
type ClosedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Object that was closed.
  """
  closable: Closable!

  """
  Object which triggered the creation of this event.
  """
  closer: Closer

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ClosedEvent object
  """
  id: ID!

  """
  The HTTP path for this closed event.
  """
  resourcePath: URI!

  """
  The reason the issue state was changed to closed.
  """
  stateReason: IssueStateReason

  """
  The HTTP URL for this closed event.
  """
  url: URI!
}

"""
The object which triggered a `ClosedEvent`.
"""
union Closer = Commit | PullRequest

"""
The Code of Conduct for a repository
"""
type CodeOfConduct implements Node {
  """
  The body of the Code of Conduct
  """
  body: String

  """
  The Node ID of the CodeOfConduct object
  """
  id: ID!

  """
  The key for the Code of Conduct
  """
  key: String!

  """
  The formal name of the Code of Conduct
  """
  name: String!

  """
  The HTTP path for this Code of Conduct
  """
  resourcePath: URI

  """
  The HTTP URL for this Code of Conduct
  """
  url: URI
}

"""
Collaborators affiliation level with a subject.
"""
enum CollaboratorAffiliation {
  """
  All collaborators the authenticated user can see.
  """
  ALL

  """
  All collaborators with permissions to an organization-owned subject, regardless of organization membership status.
  """
  DIRECT

  """
  All outside collaborators of an organization-owned subject.
  """
  OUTSIDE
}

"""
Represents a comment.
"""
interface Comment {
  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  The actor who edited the comment.
  """
  editor: Actor

  """
  The Node ID of the Comment object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Did the viewer author this comment.
  """
  viewerDidAuthor: Boolean!
}

"""
A comment author association with repository.
"""
enum CommentAuthorAssociation {
  """
  Author has been invited to collaborate on the repository.
  """
  COLLABORATOR

  """
  Author has previously committed to the repository.
  """
  CONTRIBUTOR

  """
  Author has not previously committed to GitHub.
  """
  FIRST_TIMER

  """
  Author has not previously committed to the repository.
  """
  FIRST_TIME_CONTRIBUTOR

  """
  Author is a placeholder for an unclaimed user.
  """
  MANNEQUIN

  """
  Author is a member of the organization that owns the repository.
  """
  MEMBER

  """
  Author has no association with the repository.
  """
  NONE

  """
  Author is the owner of the repository.
  """
  OWNER
}

"""
The possible errors that will prevent a user from updating a comment.
"""
enum CommentCannotUpdateReason {
  """
  Unable to create comment because repository is archived.
  """
  ARCHIVED

  """
  You cannot update this comment
  """
  DENIED

  """
  You must be the author or have write access to this repository to update this comment.
  """
  INSUFFICIENT_ACCESS

  """
  Unable to create comment because issue is locked.
  """
  LOCKED

  """
  You must be logged in to update this comment.
  """
  LOGIN_REQUIRED

  """
  Repository is under maintenance.
  """
  MAINTENANCE

  """
  At least one email address must be verified to update this comment.
  """
  VERIFIED_EMAIL_REQUIRED
}

"""
Represents a 'comment_deleted' event on a given issue or pull request.
"""
type CommentDeletedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The user who authored the deleted comment.
  """
  deletedCommentAuthor: Actor

  """
  The Node ID of the CommentDeletedEvent object
  """
  id: ID!
}

"""
Represents a Git commit.
"""
type Commit implements GitObject & Node & Subscribable & UniformResourceLocatable {
  """
  An abbreviated version of the Git object ID
  """
  abbreviatedOid: String!

  """
  The number of additions in this commit.
  """
  additions: Int!

  """
  The merged Pull Request that introduced the commit to the repository. If the
  commit is not present in the default branch, additionally returns open Pull
  Requests associated with the commit
  """
  associatedPullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection

  """
  Authorship details of the commit.
  """
  author: GitActor

  """
  Check if the committer and the author match.
  """
  authoredByCommitter: Boolean!

  """
  The datetime when this commit was authored.
  """
  authoredDate: DateTime!

  """
  The list of authors for this commit based on the git author and the Co-authored-by
  message trailer. The git author will always be first.
  """
  authors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GitActorConnection!

  """
  Fetches `git blame` information.
  """
  blame(
    """
    The file whose Git blame information you want.
    """
    path: String!
  ): Blame!

  """
  We recommend using the `changedFilesIfAvailable` field instead of
  `changedFiles`, as `changedFiles` will cause your request to return an error
  if GitHub is unable to calculate the number of changed files.
  """
  changedFiles: Int!
    @deprecated(
      reason: "`changedFiles` will be removed. Use `changedFilesIfAvailable` instead. Removal on 2023-01-01 UTC."
    )

  """
  The number of changed files in this commit. If GitHub is unable to calculate
  the number of changed files (for example due to a timeout), this will return
  `null`. We recommend using this field instead of `changedFiles`.
  """
  changedFilesIfAvailable: Int

  """
  The check suites associated with a commit.
  """
  checkSuites(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filters the check suites by this type.
    """
    filterBy: CheckSuiteFilter

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CheckSuiteConnection

  """
  Comments made on the commit.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CommitCommentConnection!

  """
  The HTTP path for this Git object
  """
  commitResourcePath: URI!

  """
  The HTTP URL for this Git object
  """
  commitUrl: URI!

  """
  The datetime when this commit was committed.
  """
  committedDate: DateTime!

  """
  Check if committed via GitHub web UI.
  """
  committedViaWeb: Boolean!

  """
  Committer details of the commit.
  """
  committer: GitActor

  """
  The number of deletions in this commit.
  """
  deletions: Int!

  """
  The deployments associated with a commit.
  """
  deployments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Environments to list deployments for
    """
    environments: [String!]

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for deployments returned from the connection.
    """
    orderBy: DeploymentOrder = {field: CREATED_AT, direction: ASC}
  ): DeploymentConnection

  """
  The tree entry representing the file located at the given path.
  """
  file(
    """
    The path for the file
    """
    path: String!
  ): TreeEntry

  """
  The linear commit history starting from (and including) this commit, in the same order as `git log`.
  """
  history(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    If non-null, filters history to only show commits with matching authorship.
    """
    author: CommitAuthor

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    If non-null, filters history to only show commits touching files under this path.
    """
    path: String

    """
    Allows specifying a beginning time or date for fetching commits.
    """
    since: GitTimestamp

    """
    Allows specifying an ending time or date for fetching commits.
    """
    until: GitTimestamp
  ): CommitHistoryConnection!

  """
  The Node ID of the Commit object
  """
  id: ID!

  """
  The Git commit message
  """
  message: String!

  """
  The Git commit message body
  """
  messageBody: String!

  """
  The commit message body rendered to HTML.
  """
  messageBodyHTML: HTML!

  """
  The Git commit message headline
  """
  messageHeadline: String!

  """
  The commit message headline rendered to HTML.
  """
  messageHeadlineHTML: HTML!

  """
  The Git object ID
  """
  oid: GitObjectID!

  """
  The organization this commit was made on behalf of.
  """
  onBehalfOf: Organization

  """
  The parents of a commit.
  """
  parents(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CommitConnection!

  """
  The datetime when this commit was pushed.
  """
  pushedDate: DateTime @deprecated(reason: "`pushedDate` is no longer supported. Removal on 2023-07-01 UTC.")

  """
  The Repository this commit belongs to
  """
  repository: Repository!

  """
  The HTTP path for this commit
  """
  resourcePath: URI!

  """
  Commit signing information, if present.
  """
  signature: GitSignature

  """
  Status information for this commit
  """
  status: Status

  """
  Check and Status rollup information for this commit.
  """
  statusCheckRollup: StatusCheckRollup

  """
  Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file.
  """
  submodules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SubmoduleConnection!

  """
  Returns a URL to download a tarball archive for a repository.
  Note: For private repositories, these links are temporary and expire after five minutes.
  """
  tarballUrl: URI!

  """
  Commit's root Tree
  """
  tree: Tree!

  """
  The HTTP path for the tree of this commit
  """
  treeResourcePath: URI!

  """
  The HTTP URL for the tree of this commit
  """
  treeUrl: URI!

  """
  The HTTP URL for this commit
  """
  url: URI!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: SubscriptionState

  """
  Returns a URL to download a zipball archive for a repository.
  Note: For private repositories, these links are temporary and expire after five minutes.
  """
  zipballUrl: URI!
}

"""
Specifies an author for filtering Git commits.
"""
input CommitAuthor {
  """
  Email addresses to filter by. Commits authored by any of the specified email addresses will be returned.
  """
  emails: [String!]

  """
  ID of a User to filter by. If non-null, only commits authored by this user
  will be returned. This field takes precedence over emails.
  """
  id: ID
}

"""
Parameters to be used for the commit_author_email_pattern rule
"""
type CommitAuthorEmailPatternParameters {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean!

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
Parameters to be used for the commit_author_email_pattern rule
"""
input CommitAuthorEmailPatternParametersInput {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
Represents a comment on a given Commit.
"""
type CommitComment implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Identifies the comment body.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Identifies the commit associated with the comment, if the commit exists.
  """
  commit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The actor who edited the comment.
  """
  editor: Actor

  """
  The Node ID of the CommitComment object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  Identifies the file path associated with the comment.
  """
  path: String

  """
  Identifies the line position associated with the comment.
  """
  position: Int

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path permalink for this commit comment.
  """
  resourcePath: URI!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL permalink for this commit comment.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!

  """
  Did the viewer author this comment.
  """
  viewerDidAuthor: Boolean!
}

"""
The connection type for CommitComment.
"""
type CommitCommentConnection {
  """
  A list of edges.
  """
  edges: [CommitCommentEdge]

  """
  A list of nodes.
  """
  nodes: [CommitComment]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CommitCommentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CommitComment
}

"""
A thread of comments on a commit.
"""
type CommitCommentThread implements Node & RepositoryNode {
  """
  The comments that exist in this thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CommitCommentConnection!

  """
  The commit the comments were made on.
  """
  commit: Commit

  """
  The Node ID of the CommitCommentThread object
  """
  id: ID!

  """
  The file the comments were made on.
  """
  path: String

  """
  The position in the diff for the commit that the comment was made on.
  """
  position: Int

  """
  The repository associated with this node.
  """
  repository: Repository!
}

"""
The connection type for Commit.
"""
type CommitConnection {
  """
  A list of edges.
  """
  edges: [CommitEdge]

  """
  A list of nodes.
  """
  nodes: [Commit]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Ordering options for commit contribution connections.
"""
input CommitContributionOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field by which to order commit contributions.
  """
  field: CommitContributionOrderField!
}

"""
Properties by which commit contribution connections can be ordered.
"""
enum CommitContributionOrderField {
  """
  Order commit contributions by how many commits they represent.
  """
  COMMIT_COUNT

  """
  Order commit contributions by when they were made.
  """
  OCCURRED_AT
}

"""
This aggregates commits made by a user within one repository.
"""
type CommitContributionsByRepository {
  """
  The commit contributions, each representing a day.
  """
  contributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for commit contributions returned from the connection.
    """
    orderBy: CommitContributionOrder = {field: OCCURRED_AT, direction: DESC}
  ): CreatedCommitContributionConnection!

  """
  The repository in which the commits were made.
  """
  repository: Repository!

  """
  The HTTP path for the user's commits to the repository in this time range.
  """
  resourcePath: URI!

  """
  The HTTP URL for the user's commits to the repository in this time range.
  """
  url: URI!
}

"""
An edge in a connection.
"""
type CommitEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Commit
}

"""
The connection type for Commit.
"""
type CommitHistoryConnection {
  """
  A list of edges.
  """
  edges: [CommitEdge]

  """
  A list of nodes.
  """
  nodes: [Commit]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
A message to include with a new commit
"""
input CommitMessage {
  """
  The body of the message.
  """
  body: String

  """
  The headline of the message.
  """
  headline: String!
}

"""
Parameters to be used for the commit_message_pattern rule
"""
type CommitMessagePatternParameters {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean!

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
Parameters to be used for the commit_message_pattern rule
"""
input CommitMessagePatternParametersInput {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
A git ref for a commit to be appended to.

The ref must be a branch, i.e. its fully qualified name must start
with `refs/heads/` (although the input is not required to be fully
qualified).

The Ref may be specified by its global node ID or by the
`repositoryNameWithOwner` and `branchName`.

### Examples

Specify a branch using a global node ID:

    { "id": "MDM6UmVmMTpyZWZzL2hlYWRzL21haW4=" }

Specify a branch using `repositoryNameWithOwner` and `branchName`:

    {
      "repositoryNameWithOwner": "github/graphql-client",
      "branchName": "main"
    }
"""
input CommittableBranch {
  """
  The unqualified name of the branch to append the commit to.
  """
  branchName: String

  """
  The Node ID of the Ref to be updated.
  """
  id: ID

  """
  The nameWithOwner of the repository to commit to.
  """
  repositoryNameWithOwner: String
}

"""
Parameters to be used for the committer_email_pattern rule
"""
type CommitterEmailPatternParameters {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean!

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
Parameters to be used for the committer_email_pattern rule
"""
input CommitterEmailPatternParametersInput {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
Represents a comparison between two commit revisions.
"""
type Comparison implements Node {
  """
  The number of commits ahead of the base branch.
  """
  aheadBy: Int!

  """
  The base revision of this comparison.
  """
  baseTarget: GitObject!

  """
  The number of commits behind the base branch.
  """
  behindBy: Int!

  """
  The commits which compose this comparison.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ComparisonCommitConnection!

  """
  The head revision of this comparison.
  """
  headTarget: GitObject!

  """
  The Node ID of the Comparison object
  """
  id: ID!

  """
  The status of this comparison.
  """
  status: ComparisonStatus!
}

"""
The connection type for Commit.
"""
type ComparisonCommitConnection {
  """
  The total count of authors and co-authors across all commits.
  """
  authorCount: Int!

  """
  A list of edges.
  """
  edges: [CommitEdge]

  """
  A list of nodes.
  """
  nodes: [Commit]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The status of a git comparison between two refs.
"""
enum ComparisonStatus {
  """
  The head ref is ahead of the base ref.
  """
  AHEAD

  """
  The head ref is behind the base ref.
  """
  BEHIND

  """
  The head ref is both ahead and behind of the base ref, indicating git history has diverged.
  """
  DIVERGED

  """
  The head ref and base ref are identical.
  """
  IDENTICAL
}

"""
Represents a 'connected' event on a given issue or pull request.
"""
type ConnectedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ConnectedEvent object
  """
  id: ID!

  """
  Reference originated in a different repository.
  """
  isCrossRepository: Boolean!

  """
  Issue or pull request that made the reference.
  """
  source: ReferencedSubject!

  """
  Issue or pull request which was connected.
  """
  subject: ReferencedSubject!
}

"""
The Contributing Guidelines for a repository.
"""
type ContributingGuidelines {
  """
  The body of the Contributing Guidelines.
  """
  body: String

  """
  The HTTP path for the Contributing Guidelines.
  """
  resourcePath: URI

  """
  The HTTP URL for the Contributing Guidelines.
  """
  url: URI
}

"""
Represents a contribution a user made on GitHub, such as opening an issue.
"""
interface Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
A calendar of contributions made on GitHub by a user.
"""
type ContributionCalendar {
  """
  A list of hex color codes used in this calendar. The darker the color, the more contributions it represents.
  """
  colors: [String!]!

  """
  Determine if the color set was chosen because it's currently Halloween.
  """
  isHalloween: Boolean!

  """
  A list of the months of contributions in this calendar.
  """
  months: [ContributionCalendarMonth!]!

  """
  The count of total contributions in the calendar.
  """
  totalContributions: Int!

  """
  A list of the weeks of contributions in this calendar.
  """
  weeks: [ContributionCalendarWeek!]!
}

"""
Represents a single day of contributions on GitHub by a user.
"""
type ContributionCalendarDay {
  """
  The hex color code that represents how many contributions were made on this day compared to others in the calendar.
  """
  color: String!

  """
  How many contributions were made by the user on this day.
  """
  contributionCount: Int!

  """
  Indication of contributions, relative to other days. Can be used to indicate
  which color to represent this day on a calendar.
  """
  contributionLevel: ContributionLevel!

  """
  The day this square represents.
  """
  date: Date!

  """
  A number representing which day of the week this square represents, e.g., 1 is Monday.
  """
  weekday: Int!
}

"""
A month of contributions in a user's contribution graph.
"""
type ContributionCalendarMonth {
  """
  The date of the first day of this month.
  """
  firstDay: Date!

  """
  The name of the month.
  """
  name: String!

  """
  How many weeks started in this month.
  """
  totalWeeks: Int!

  """
  The year the month occurred in.
  """
  year: Int!
}

"""
A week of contributions in a user's contribution graph.
"""
type ContributionCalendarWeek {
  """
  The days of contributions in this week.
  """
  contributionDays: [ContributionCalendarDay!]!

  """
  The date of the earliest square in this week.
  """
  firstDay: Date!
}

"""
Varying levels of contributions from none to many.
"""
enum ContributionLevel {
  """
  Lowest 25% of days of contributions.
  """
  FIRST_QUARTILE

  """
  Highest 25% of days of contributions. More contributions than the third quartile.
  """
  FOURTH_QUARTILE

  """
  No contributions occurred.
  """
  NONE

  """
  Second lowest 25% of days of contributions. More contributions than the first quartile.
  """
  SECOND_QUARTILE

  """
  Second highest 25% of days of contributions. More contributions than second quartile, less than the fourth quartile.
  """
  THIRD_QUARTILE
}

"""
Ordering options for contribution connections.
"""
input ContributionOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!
}

"""
A contributions collection aggregates contributions such as opened issues and commits created by a user.
"""
type ContributionsCollection {
  """
  Commit contributions made by the user, grouped by repository.
  """
  commitContributionsByRepository(
    """
    How many repositories should be included.
    """
    maxRepositories: Int = 25
  ): [CommitContributionsByRepository!]!

  """
  A calendar of this user's contributions on GitHub.
  """
  contributionCalendar: ContributionCalendar!

  """
  The years the user has been making contributions with the most recent year first.
  """
  contributionYears: [Int!]!

  """
  Determine if this collection's time span ends in the current month.
  """
  doesEndInCurrentMonth: Boolean!

  """
  The date of the first restricted contribution the user made in this time
  period. Can only be non-null when the user has enabled private contribution counts.
  """
  earliestRestrictedContributionDate: Date

  """
  The ending date and time of this collection.
  """
  endedAt: DateTime!

  """
  The first issue the user opened on GitHub. This will be null if that issue was
  opened outside the collection's time range and ignoreTimeRange is false. If
  the issue is not visible but the user has opted to show private contributions,
  a RestrictedContribution will be returned.
  """
  firstIssueContribution: CreatedIssueOrRestrictedContribution

  """
  The first pull request the user opened on GitHub. This will be null if that
  pull request was opened outside the collection's time range and
  ignoreTimeRange is not true. If the pull request is not visible but the user
  has opted to show private contributions, a RestrictedContribution will be returned.
  """
  firstPullRequestContribution: CreatedPullRequestOrRestrictedContribution

  """
  The first repository the user created on GitHub. This will be null if that
  first repository was created outside the collection's time range and
  ignoreTimeRange is false. If the repository is not visible, then a
  RestrictedContribution is returned.
  """
  firstRepositoryContribution: CreatedRepositoryOrRestrictedContribution

  """
  Does the user have any more activity in the timeline that occurred prior to the collection's time range?
  """
  hasActivityInThePast: Boolean!

  """
  Determine if there are any contributions in this collection.
  """
  hasAnyContributions: Boolean!

  """
  Determine if the user made any contributions in this time frame whose details
  are not visible because they were made in a private repository. Can only be
  true if the user enabled private contribution counts.
  """
  hasAnyRestrictedContributions: Boolean!

  """
  Whether or not the collector's time span is all within the same day.
  """
  isSingleDay: Boolean!

  """
  A list of issues the user opened.
  """
  issueContributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Should the user's first issue ever be excluded from the result.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented issue be excluded from the result.
    """
    excludePopular: Boolean = false

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for contributions returned from the connection.
    """
    orderBy: ContributionOrder = {direction: DESC}
  ): CreatedIssueContributionConnection!

  """
  Issue contributions made by the user, grouped by repository.
  """
  issueContributionsByRepository(
    """
    Should the user's first issue ever be excluded from the result.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented issue be excluded from the result.
    """
    excludePopular: Boolean = false

    """
    How many repositories should be included.
    """
    maxRepositories: Int = 25
  ): [IssueContributionsByRepository!]!

  """
  When the user signed up for GitHub. This will be null if that sign up date
  falls outside the collection's time range and ignoreTimeRange is false.
  """
  joinedGitHubContribution: JoinedGitHubContribution

  """
  The date of the most recent restricted contribution the user made in this time
  period. Can only be non-null when the user has enabled private contribution counts.
  """
  latestRestrictedContributionDate: Date

  """
  When this collection's time range does not include any activity from the user, use this
  to get a different collection from an earlier time range that does have activity.
  """
  mostRecentCollectionWithActivity: ContributionsCollection

  """
  Returns a different contributions collection from an earlier time range than this one
  that does not have any contributions.
  """
  mostRecentCollectionWithoutActivity: ContributionsCollection

  """
  The issue the user opened on GitHub that received the most comments in the specified
  time frame.
  """
  popularIssueContribution: CreatedIssueContribution

  """
  The pull request the user opened on GitHub that received the most comments in the
  specified time frame.
  """
  popularPullRequestContribution: CreatedPullRequestContribution

  """
  Pull request contributions made by the user.
  """
  pullRequestContributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Should the user's first pull request ever be excluded from the result.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented pull request be excluded from the result.
    """
    excludePopular: Boolean = false

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for contributions returned from the connection.
    """
    orderBy: ContributionOrder = {direction: DESC}
  ): CreatedPullRequestContributionConnection!

  """
  Pull request contributions made by the user, grouped by repository.
  """
  pullRequestContributionsByRepository(
    """
    Should the user's first pull request ever be excluded from the result.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented pull request be excluded from the result.
    """
    excludePopular: Boolean = false

    """
    How many repositories should be included.
    """
    maxRepositories: Int = 25
  ): [PullRequestContributionsByRepository!]!

  """
  Pull request review contributions made by the user. Returns the most recently
  submitted review for each PR reviewed by the user.
  """
  pullRequestReviewContributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for contributions returned from the connection.
    """
    orderBy: ContributionOrder = {direction: DESC}
  ): CreatedPullRequestReviewContributionConnection!

  """
  Pull request review contributions made by the user, grouped by repository.
  """
  pullRequestReviewContributionsByRepository(
    """
    How many repositories should be included.
    """
    maxRepositories: Int = 25
  ): [PullRequestReviewContributionsByRepository!]!

  """
  A list of repositories owned by the user that the user created in this time range.
  """
  repositoryContributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Should the user's first repository ever be excluded from the result.
    """
    excludeFirst: Boolean = false

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for contributions returned from the connection.
    """
    orderBy: ContributionOrder = {direction: DESC}
  ): CreatedRepositoryContributionConnection!

  """
  A count of contributions made by the user that the viewer cannot access. Only
  non-zero when the user has chosen to share their private contribution counts.
  """
  restrictedContributionsCount: Int!

  """
  The beginning date and time of this collection.
  """
  startedAt: DateTime!

  """
  How many commits were made by the user in this time span.
  """
  totalCommitContributions: Int!

  """
  How many issues the user opened.
  """
  totalIssueContributions(
    """
    Should the user's first issue ever be excluded from this count.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented issue be excluded from this count.
    """
    excludePopular: Boolean = false
  ): Int!

  """
  How many pull requests the user opened.
  """
  totalPullRequestContributions(
    """
    Should the user's first pull request ever be excluded from this count.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented pull request be excluded from this count.
    """
    excludePopular: Boolean = false
  ): Int!

  """
  How many pull request reviews the user left.
  """
  totalPullRequestReviewContributions: Int!

  """
  How many different repositories the user committed to.
  """
  totalRepositoriesWithContributedCommits: Int!

  """
  How many different repositories the user opened issues in.
  """
  totalRepositoriesWithContributedIssues(
    """
    Should the user's first issue ever be excluded from this count.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented issue be excluded from this count.
    """
    excludePopular: Boolean = false
  ): Int!

  """
  How many different repositories the user left pull request reviews in.
  """
  totalRepositoriesWithContributedPullRequestReviews: Int!

  """
  How many different repositories the user opened pull requests in.
  """
  totalRepositoriesWithContributedPullRequests(
    """
    Should the user's first pull request ever be excluded from this count.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented pull request be excluded from this count.
    """
    excludePopular: Boolean = false
  ): Int!

  """
  How many repositories the user created.
  """
  totalRepositoryContributions(
    """
    Should the user's first repository ever be excluded from this count.
    """
    excludeFirst: Boolean = false
  ): Int!

  """
  The user who made the contributions in this collection.
  """
  user: User!
}

"""
Autogenerated input type of ConvertProjectCardNoteToIssue
"""
input ConvertProjectCardNoteToIssueInput {
  """
  The body of the newly created issue.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ProjectCard ID to convert.
  """
  projectCardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])

  """
  The ID of the repository to create the issue in.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  The title of the newly created issue. Defaults to the card's note text.
  """
  title: String
}

"""
Autogenerated return type of ConvertProjectCardNoteToIssue
"""
type ConvertProjectCardNoteToIssuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated ProjectCard.
  """
  projectCard: ProjectCard
}

"""
Autogenerated input type of ConvertPullRequestToDraft
"""
input ConvertPullRequestToDraftInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the pull request to convert to draft
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""
Autogenerated return type of ConvertPullRequestToDraft
"""
type ConvertPullRequestToDraftPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that is now a draft.
  """
  pullRequest: PullRequest
}

"""
Represents a 'convert_to_draft' event on a given pull request.
"""
type ConvertToDraftEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ConvertToDraftEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  The HTTP path for this convert to draft event.
  """
  resourcePath: URI!

  """
  The HTTP URL for this convert to draft event.
  """
  url: URI!
}

"""
Represents a 'converted_note_to_issue' event on a given issue or pull request.
"""
type ConvertedNoteToIssueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ConvertedNoteToIssueEvent object
  """
  id: ID!

  """
  Project referenced by event.
  """
  project: Project @preview(toggledBy: "starfox-preview")

  """
  Project card referenced by this project event.
  """
  projectCard: ProjectCard @preview(toggledBy: "starfox-preview")

  """
  Column name referenced by this project event.
  """
  projectColumnName: String! @preview(toggledBy: "starfox-preview")
}

"""
Represents a 'converted_to_discussion' event on a given issue.
"""
type ConvertedToDiscussionEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The discussion that the issue was converted into.
  """
  discussion: Discussion

  """
  The Node ID of the ConvertedToDiscussionEvent object
  """
  id: ID!
}

"""
Autogenerated input type of CopyProjectV2
"""
input CopyProjectV2Input {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Include draft issues in the new project
  """
  includeDraftIssues: Boolean = false

  """
  The owner ID of the new project.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "OrganizationOrUser")

  """
  The ID of the source Project to copy.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The title of the project.
  """
  title: String!
}

"""
Autogenerated return type of CopyProjectV2
"""
type CopyProjectV2Payload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The copied project.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of CreateAttributionInvitation
"""
input CreateAttributionInvitationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the owner scoping the reattributable data.
  """
  ownerId: ID!
    @possibleTypes(concreteTypes: ["Bot", "Enterprise", "Mannequin", "Organization", "User"], abstractType: "Account")

  """
  The Node ID of the account owning the data to reattribute.
  """
  sourceId: ID!
    @possibleTypes(concreteTypes: ["Bot", "Enterprise", "Mannequin", "Organization", "User"], abstractType: "Account")

  """
  The Node ID of the account which may claim the data.
  """
  targetId: ID!
    @possibleTypes(concreteTypes: ["Bot", "Enterprise", "Mannequin", "Organization", "User"], abstractType: "Account")
}

"""
Autogenerated return type of CreateAttributionInvitation
"""
type CreateAttributionInvitationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The owner scoping the reattributable data.
  """
  owner: Organization

  """
  The account owning the data to reattribute.
  """
  source: Claimable

  """
  The account which may claim the data.
  """
  target: Claimable
}

"""
Autogenerated input type of CreateBranchProtectionRule
"""
input CreateBranchProtectionRuleInput {
  """
  Can this branch be deleted.
  """
  allowsDeletions: Boolean

  """
  Are force pushes allowed on this branch.
  """
  allowsForcePushes: Boolean

  """
  Is branch creation a protected operation.
  """
  blocksCreations: Boolean

  """
  A list of User, Team, or App IDs allowed to bypass force push targeting matching branches.
  """
  bypassForcePushActorIds: [ID!]

  """
  A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches.
  """
  bypassPullRequestActorIds: [ID!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Will new commits pushed to matching branches dismiss pull request review approvals.
  """
  dismissesStaleReviews: Boolean

  """
  Can admins override branch protection.
  """
  isAdminEnforced: Boolean

  """
  Whether users can pull changes from upstream when the branch is locked. Set to
  `true` to allow fork syncing. Set to `false` to prevent fork syncing.
  """
  lockAllowsFetchAndMerge: Boolean

  """
  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
  """
  lockBranch: Boolean

  """
  The glob-like pattern used to determine matching branches.
  """
  pattern: String!

  """
  A list of User, Team, or App IDs allowed to push to matching branches.
  """
  pushActorIds: [ID!]

  """
  The global relay id of the repository in which a new branch protection rule should be created in.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  Whether the most recent push must be approved by someone other than the person who pushed it
  """
  requireLastPushApproval: Boolean

  """
  Number of approving reviews required to update matching branches.
  """
  requiredApprovingReviewCount: Int

  """
  The list of required deployment environments
  """
  requiredDeploymentEnvironments: [String!]

  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  requiredStatusCheckContexts: [String!]

  """
  The list of required status checks
  """
  requiredStatusChecks: [RequiredStatusCheckInput!]

  """
  Are approving reviews required to update matching branches.
  """
  requiresApprovingReviews: Boolean

  """
  Are reviews from code owners required to update matching branches.
  """
  requiresCodeOwnerReviews: Boolean

  """
  Are commits required to be signed.
  """
  requiresCommitSignatures: Boolean

  """
  Are conversations required to be resolved before merging.
  """
  requiresConversationResolution: Boolean

  """
  Are successful deployments required before merging.
  """
  requiresDeployments: Boolean

  """
  Are merge commits prohibited from being pushed to this branch.
  """
  requiresLinearHistory: Boolean

  """
  Are status checks required to update matching branches.
  """
  requiresStatusChecks: Boolean

  """
  Are branches required to be up to date before merging.
  """
  requiresStrictStatusChecks: Boolean

  """
  Is pushing to matching branches restricted.
  """
  restrictsPushes: Boolean

  """
  Is dismissal of pull request reviews restricted.
  """
  restrictsReviewDismissals: Boolean

  """
  A list of User, Team, or App IDs allowed to dismiss reviews on pull requests targeting matching branches.
  """
  reviewDismissalActorIds: [ID!]
}

"""
Autogenerated return type of CreateBranchProtectionRule
"""
type CreateBranchProtectionRulePayload {
  """
  The newly created BranchProtectionRule.
  """
  branchProtectionRule: BranchProtectionRule

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of CreateCheckRun
"""
input CreateCheckRunInput {
  """
  Possible further actions the integrator can perform, which a user may trigger.
  """
  actions: [CheckRunAction!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The time that the check run finished.
  """
  completedAt: DateTime

  """
  The final conclusion of the check.
  """
  conclusion: CheckConclusionState

  """
  The URL of the integrator's site that has the full details of the check.
  """
  detailsUrl: URI

  """
  A reference for the run on the integrator's system.
  """
  externalId: String

  """
  The SHA of the head commit.
  """
  headSha: GitObjectID!

  """
  The name of the check.
  """
  name: String!

  """
  Descriptive details about the run.
  """
  output: CheckRunOutput

  """
  The node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  The time that the check run began.
  """
  startedAt: DateTime

  """
  The current status.
  """
  status: RequestableCheckStatusState
}

"""
Autogenerated return type of CreateCheckRun
"""
type CreateCheckRunPayload {
  """
  The newly created check run.
  """
  checkRun: CheckRun

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of CreateCheckSuite
"""
input CreateCheckSuiteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The SHA of the head commit.
  """
  headSha: GitObjectID!

  """
  The Node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of CreateCheckSuite
"""
type CreateCheckSuitePayload {
  """
  The newly created check suite.
  """
  checkSuite: CheckSuite

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of CreateCommitOnBranch
"""
input CreateCommitOnBranchInput {
  """
  The Ref to be updated.  Must be a branch.
  """
  branch: CommittableBranch!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The git commit oid expected at the head of the branch prior to the commit
  """
  expectedHeadOid: GitObjectID!

  """
  A description of changes to files in this commit.
  """
  fileChanges: FileChanges

  """
  The commit message the be included with the commit.
  """
  message: CommitMessage!
}

"""
Autogenerated return type of CreateCommitOnBranch
"""
type CreateCommitOnBranchPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new commit.
  """
  commit: Commit

  """
  The ref which has been updated to point to the new commit.
  """
  ref: Ref
}

"""
Autogenerated input type of CreateDeployment
"""
input CreateDeploymentInput @preview(toggledBy: "flash-preview") {
  """
  Attempt to automatically merge the default branch into the requested ref, defaults to true.
  """
  autoMerge: Boolean = true

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Short description of the deployment.
  """
  description: String = ""

  """
  Name for the target deployment environment.
  """
  environment: String = "production"

  """
  JSON payload with extra information about the deployment.
  """
  payload: String = "{}"

  """
  The node ID of the ref to be deployed.
  """
  refId: ID! @possibleTypes(concreteTypes: ["Ref"])

  """
  The node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  The status contexts to verify against commit status checks. To bypass required
  contexts, pass an empty array. Defaults to all unique contexts.
  """
  requiredContexts: [String!]

  """
  Specifies a task to execute.
  """
  task: String = "deploy"
}

"""
Autogenerated return type of CreateDeployment
"""
type CreateDeploymentPayload @preview(toggledBy: "flash-preview") {
  """
  True if the default branch has been auto-merged into the deployment ref.
  """
  autoMerged: Boolean

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new deployment.
  """
  deployment: Deployment
}

"""
Autogenerated input type of CreateDeploymentStatus
"""
input CreateDeploymentStatusInput @preview(toggledBy: "flash-preview") {
  """
  Adds a new inactive status to all non-transient, non-production environment
  deployments with the same repository and environment name as the created
  status's deployment.
  """
  autoInactive: Boolean = true

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The node ID of the deployment.
  """
  deploymentId: ID! @possibleTypes(concreteTypes: ["Deployment"])

  """
  A short description of the status. Maximum length of 140 characters.
  """
  description: String = ""

  """
  If provided, updates the environment of the deploy. Otherwise, does not modify the environment.
  """
  environment: String

  """
  Sets the URL for accessing your environment.
  """
  environmentUrl: String = ""

  """
  The log URL to associate with this status.       This URL should contain
  output to keep the user updated while the task is running       or serve as
  historical information for what happened in the deployment.
  """
  logUrl: String = ""

  """
  The state of the deployment.
  """
  state: DeploymentStatusState!
}

"""
Autogenerated return type of CreateDeploymentStatus
"""
type CreateDeploymentStatusPayload @preview(toggledBy: "flash-preview") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new deployment status.
  """
  deploymentStatus: DeploymentStatus
}

"""
Autogenerated input type of CreateDiscussion
"""
input CreateDiscussionInput {
  """
  The body of the discussion.
  """
  body: String!

  """
  The id of the discussion category to associate with this discussion.
  """
  categoryId: ID! @possibleTypes(concreteTypes: ["DiscussionCategory"])

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the repository on which to create the discussion.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  The title of the discussion.
  """
  title: String!
}

"""
Autogenerated return type of CreateDiscussion
"""
type CreateDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was just created.
  """
  discussion: Discussion
}

"""
Autogenerated input type of CreateEnterpriseOrganization
"""
input CreateEnterpriseOrganizationInput {
  """
  The logins for the administrators of the new organization.
  """
  adminLogins: [String!]!

  """
  The email used for sending billing receipts.
  """
  billingEmail: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise owning the new organization.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of the new organization.
  """
  login: String!

  """
  The profile name of the new organization.
  """
  profileName: String!
}

"""
Autogenerated return type of CreateEnterpriseOrganization
"""
type CreateEnterpriseOrganizationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The enterprise that owns the created organization.
  """
  enterprise: Enterprise

  """
  The organization that was created.
  """
  organization: Organization
}

"""
Autogenerated input type of CreateEnvironment
"""
input CreateEnvironmentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of the environment.
  """
  name: String!

  """
  The node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of CreateEnvironment
"""
type CreateEnvironmentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new or existing environment.
  """
  environment: Environment
}

"""
Autogenerated input type of CreateIpAllowListEntry
"""
input CreateIpAllowListEntryInput {
  """
  An IP address or range of addresses in CIDR notation.
  """
  allowListValue: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether the IP allow list entry is active when an IP allow list is enabled.
  """
  isActive: Boolean!

  """
  An optional name for the IP allow list entry.
  """
  name: String

  """
  The ID of the owner for which to create the new IP allow list entry.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["App", "Enterprise", "Organization"], abstractType: "IpAllowListOwner")
}

"""
Autogenerated return type of CreateIpAllowListEntry
"""
type CreateIpAllowListEntryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The IP allow list entry that was created.
  """
  ipAllowListEntry: IpAllowListEntry
}

"""
Autogenerated input type of CreateIssue
"""
input CreateIssueInput {
  """
  The Node ID for the user assignee for this issue.
  """
  assigneeIds: [ID!] @possibleTypes(concreteTypes: ["User"])

  """
  The body for the issue description.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of an issue template in the repository, assigns labels and assignees from the template to the issue
  """
  issueTemplate: String

  """
  An array of Node IDs of labels for this issue.
  """
  labelIds: [ID!] @possibleTypes(concreteTypes: ["Label"])

  """
  The Node ID of the milestone for this issue.
  """
  milestoneId: ID @possibleTypes(concreteTypes: ["Milestone"])

  """
  An array of Node IDs for projects associated with this issue.
  """
  projectIds: [ID!] @possibleTypes(concreteTypes: ["Project"])

  """
  The Node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  The title for the issue.
  """
  title: String!
}

"""
Autogenerated return type of CreateIssue
"""
type CreateIssuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new issue.
  """
  issue: Issue
}

"""
Autogenerated input type of CreateLabel
"""
input CreateLabelInput @preview(toggledBy: "bane-preview") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A 6 character hex code, without the leading #, identifying the color of the label.
  """
  color: String!

  """
  A brief description of the label, such as its purpose.
  """
  description: String

  """
  The name of the label.
  """
  name: String!

  """
  The Node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of CreateLabel
"""
type CreateLabelPayload @preview(toggledBy: "bane-preview") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new label.
  """
  label: Label
}

"""
Autogenerated input type of CreateLinkedBranch
"""
input CreateLinkedBranchInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the issue to link to.
  """
  issueId: ID! @possibleTypes(concreteTypes: ["Issue"])

  """
  The name of the new branch. Defaults to issue number and title.
  """
  name: String

  """
  The commit SHA to base the new branch on.
  """
  oid: GitObjectID!

  """
  ID of the repository to create the branch in. Defaults to the issue repository.
  """
  repositoryId: ID @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of CreateLinkedBranch
"""
type CreateLinkedBranchPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The issue that was linked to.
  """
  issue: Issue

  """
  The new branch issue reference.
  """
  linkedBranch: LinkedBranch
}

"""
Autogenerated input type of CreateMigrationSource
"""
input CreateMigrationSourceInput {
  """
  The migration source access token.
  """
  accessToken: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The GitHub personal access token of the user importing to the target repository.
  """
  githubPat: String

  """
  The migration source name.
  """
  name: String!

  """
  The ID of the organization that will own the migration source.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  The migration source type.
  """
  type: MigrationSourceType!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  url: String
}

"""
Autogenerated return type of CreateMigrationSource
"""
type CreateMigrationSourcePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The created migration source.
  """
  migrationSource: MigrationSource
}

"""
Autogenerated input type of CreateProject
"""
input CreateProjectInput {
  """
  The description of project.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of project.
  """
  name: String!

  """
  The owner ID to create the project under.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization", "Repository", "User"], abstractType: "ProjectOwner")

  """
  A list of repository IDs to create as linked repositories for the project
  """
  repositoryIds: [ID!] @possibleTypes(concreteTypes: ["Repository"])

  """
  The name of the GitHub-provided template.
  """
  template: ProjectTemplate
}

"""
Autogenerated return type of CreateProject
"""
type CreateProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new project.
  """
  project: Project
}

"""
Autogenerated input type of CreateProjectV2Field
"""
input CreateProjectV2FieldInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The data type of the field.
  """
  dataType: ProjectV2CustomFieldType!

  """
  The name of the field.
  """
  name: String!

  """
  The ID of the Project to create the field in.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  Options for a single select field. At least one value is required if data_type is SINGLE_SELECT
  """
  singleSelectOptions: [ProjectV2SingleSelectFieldOptionInput!]
}

"""
Autogenerated return type of CreateProjectV2Field
"""
type CreateProjectV2FieldPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new field.
  """
  projectV2Field: ProjectV2FieldConfiguration
}

"""
Autogenerated input type of CreateProjectV2
"""
input CreateProjectV2Input {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The owner ID to create the project under.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "OrganizationOrUser")

  """
  The repository to link the project to.
  """
  repositoryId: ID @possibleTypes(concreteTypes: ["Repository"])

  """
  The team to link the project to. The team will be granted read permissions.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The title of the project.
  """
  title: String!
}

"""
Autogenerated return type of CreateProjectV2
"""
type CreateProjectV2Payload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new project.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of CreatePullRequest
"""
input CreatePullRequestInput {
  """
  The name of the branch you want your changes pulled into. This should be an existing branch
  on the current repository. You cannot update the base branch on a pull request to point
  to another repository.
  """
  baseRefName: String!

  """
  The contents of the pull request.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates whether this pull request should be a draft.
  """
  draft: Boolean = false

  """
  The name of the branch where your changes are implemented. For cross-repository pull requests
  in the same network, namespace `head_ref_name` with a user like this: `username:branch`.
  """
  headRefName: String!

  """
  The Node ID of the head repository.
  """
  headRepositoryId: ID @possibleTypes(concreteTypes: ["Repository"])

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean = true

  """
  The Node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  The title of the pull request.
  """
  title: String!
}

"""
Autogenerated return type of CreatePullRequest
"""
type CreatePullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new pull request.
  """
  pullRequest: PullRequest
}

"""
Autogenerated input type of CreateRef
"""
input CreateRefInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The fully qualified name of the new Ref (ie: `refs/heads/my_new_branch`).
  """
  name: String!

  """
  The GitObjectID that the new Ref shall target. Must point to a commit.
  """
  oid: GitObjectID!

  """
  The Node ID of the Repository to create the Ref in.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of CreateRef
"""
type CreateRefPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created ref.
  """
  ref: Ref
}

"""
Autogenerated input type of CreateRepository
"""
input CreateRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A short description of the new repository.
  """
  description: String

  """
  Indicates if the repository should have the issues feature enabled.
  """
  hasIssuesEnabled: Boolean = true

  """
  Indicates if the repository should have the wiki feature enabled.
  """
  hasWikiEnabled: Boolean = false

  """
  The URL for a web page about this repository.
  """
  homepageUrl: URI

  """
  The name of the new repository.
  """
  name: String!

  """
  The ID of the owner for the new repository.
  """
  ownerId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "RepositoryOwner")

  """
  When an organization is specified as the owner, this ID identifies the team
  that should be granted access to the new repository.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  Whether this repository should be marked as a template such that anyone who
  can access it can create new repositories with the same files and directory structure.
  """
  template: Boolean = false

  """
  Indicates the repository's visibility level.
  """
  visibility: RepositoryVisibility!
}

"""
Autogenerated return type of CreateRepository
"""
type CreateRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new repository.
  """
  repository: Repository
}

"""
Autogenerated input type of CreateRepositoryRuleset
"""
input CreateRepositoryRulesetInput {
  """
  A list of actors that are allowed to bypass rules in this ruleset.
  """
  bypassActors: [RepositoryRulesetBypassActorInput!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The set of conditions for this ruleset
  """
  conditions: RepositoryRuleConditionsInput!

  """
  The enforcement level for this ruleset
  """
  enforcement: RuleEnforcement!

  """
  The name of the ruleset.
  """
  name: String!

  """
  The list of rules for this ruleset
  """
  rules: [RepositoryRuleInput!]

  """
  The global relay id of the source in which a new ruleset should be created in.
  """
  sourceId: ID! @possibleTypes(concreteTypes: ["Organization", "Repository"], abstractType: "RuleSource")

  """
  The target of the ruleset.
  """
  target: RepositoryRulesetTarget
}

"""
Autogenerated return type of CreateRepositoryRuleset
"""
type CreateRepositoryRulesetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created Ruleset.
  """
  ruleset: RepositoryRuleset
}

"""
Autogenerated input type of CreateSponsorsListing
"""
input CreateSponsorsListingInput {
  """
  The country or region where the sponsorable's bank account is located.
  Required if fiscalHostLogin is not specified, ignored when fiscalHostLogin is specified.
  """
  billingCountryOrRegionCode: SponsorsCountryOrRegionCode

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The email address we should use to contact you about the GitHub Sponsors
  profile being created. This will not be shared publicly. Must be a verified
  email address already on your GitHub account. Only relevant when the
  sponsorable is yourself. Defaults to your primary email address on file if omitted.
  """
  contactEmail: String

  """
  The username of the supported fiscal host's GitHub organization, if you want
  to receive sponsorship payouts through a fiscal host rather than directly to a
  bank account. For example, 'Open-Source-Collective' for Open Source Collective
  or 'numfocus' for numFOCUS. Case insensitive. See https://docs.github.com/sponsors/receiving-sponsorships-through-github-sponsors/using-a-fiscal-host-to-receive-github-sponsors-payouts
  for more information.
  """
  fiscalHostLogin: String

  """
  The URL for your profile page on the fiscal host's website, e.g.,
  https://opencollective.com/babel or https://numfocus.org/project/bokeh.
  Required if fiscalHostLogin is specified.
  """
  fiscallyHostedProjectProfileUrl: String

  """
  Provide an introduction to serve as the main focus that appears on your GitHub
  Sponsors profile. It's a great opportunity to help potential sponsors learn
  more about you, your work, and why their sponsorship is important to you.
  GitHub-flavored Markdown is supported.
  """
  fullDescription: String

  """
  The country or region where the sponsorable resides. This is for tax purposes.
  Required if the sponsorable is yourself, ignored when sponsorableLogin
  specifies an organization.
  """
  residenceCountryOrRegionCode: SponsorsCountryOrRegionCode

  """
  The username of the organization to create a GitHub Sponsors profile for, if
  desired. Defaults to creating a GitHub Sponsors profile for the authenticated
  user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of CreateSponsorsListing
"""
type CreateSponsorsListingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of CreateSponsorsTier
"""
input CreateSponsorsTierInput {
  """
  The value of the new tier in US dollars. Valid values: 1-12000.
  """
  amount: Int!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A description of what this tier is, what perks sponsors might receive, what a sponsorship at this tier means for you, etc.
  """
  description: String!

  """
  Whether sponsorships using this tier should happen monthly/yearly or just once.
  """
  isRecurring: Boolean = true

  """
  Whether to make the tier available immediately for sponsors to choose.
  Defaults to creating a draft tier that will not be publicly visible.
  """
  publish: Boolean = false

  """
  Optional ID of the private repository that sponsors at this tier should gain
  read-only access to. Must be owned by an organization.
  """
  repositoryId: ID @possibleTypes(concreteTypes: ["Repository"])

  """
  Optional name of the private repository that sponsors at this tier should gain
  read-only access to. Must be owned by an organization. Necessary if
  repositoryOwnerLogin is given. Will be ignored if repositoryId is given.
  """
  repositoryName: String

  """
  Optional login of the organization owner of the private repository that
  sponsors at this tier should gain read-only access to. Necessary if
  repositoryName is given. Will be ignored if repositoryId is given.
  """
  repositoryOwnerLogin: String

  """
  The ID of the user or organization who owns the GitHub Sponsors profile.
  Defaults to the current user if omitted and sponsorableLogin is not given.
  """
  sponsorableId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "Sponsorable")

  """
  The username of the user or organization who owns the GitHub Sponsors profile.
  Defaults to the current user if omitted and sponsorableId is not given.
  """
  sponsorableLogin: String

  """
  Optional message new sponsors at this tier will receive.
  """
  welcomeMessage: String
}

"""
Autogenerated return type of CreateSponsorsTier
"""
type CreateSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new tier.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of CreateSponsorship
"""
input CreateSponsorshipInput {
  """
  The amount to pay to the sponsorable in US dollars. Required if a tierId is not specified. Valid values: 1-12000.
  """
  amount: Int

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether the sponsorship should happen monthly/yearly or just this one time. Required if a tierId is not specified.
  """
  isRecurring: Boolean

  """
  Specify whether others should be able to see that the sponsor is sponsoring
  the sponsorable. Public visibility still does not reveal which tier is used.
  """
  privacyLevel: SponsorshipPrivacy = PUBLIC

  """
  Whether the sponsor should receive email updates from the sponsorable.
  """
  receiveEmails: Boolean = true

  """
  The ID of the user or organization who is acting as the sponsor, paying for
  the sponsorship. Required if sponsorLogin is not given.
  """
  sponsorId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "Sponsor")

  """
  The username of the user or organization who is acting as the sponsor, paying
  for the sponsorship. Required if sponsorId is not given.
  """
  sponsorLogin: String

  """
  The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.
  """
  sponsorableId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "Sponsorable")

  """
  The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.
  """
  sponsorableLogin: String

  """
  The ID of one of sponsorable's existing tiers to sponsor at. Required if amount is not specified.
  """
  tierId: ID @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of CreateSponsorship
"""
type CreateSponsorshipPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The sponsorship that was started.
  """
  sponsorship: Sponsorship
}

"""
Autogenerated input type of CreateSponsorships
"""
input CreateSponsorshipsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Specify whether others should be able to see that the sponsor is sponsoring
  the sponsorables. Public visibility still does not reveal the dollar value of
  the sponsorship.
  """
  privacyLevel: SponsorshipPrivacy = PUBLIC

  """
  Whether the sponsor should receive email updates from the sponsorables.
  """
  receiveEmails: Boolean = false

  """
  The username of the user or organization who is acting as the sponsor, paying for the sponsorships.
  """
  sponsorLogin: String!

  """
  The list of maintainers to sponsor and for how much apiece.
  """
  sponsorships: [BulkSponsorship!]!
}

"""
Autogenerated return type of CreateSponsorships
"""
type CreateSponsorshipsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The users and organizations who received a sponsorship.
  """
  sponsorables: [Sponsorable!]
}

"""
Autogenerated input type of CreateTeamDiscussionComment
"""
input CreateTeamDiscussionCommentInput {
  """
  The content of the comment. This field is required.

  **Upcoming Change on 2024-07-01 UTC**
  **Description:** `body` will be removed. Follow the guide at
  https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
  find a suitable replacement.
  **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the discussion to which the comment belongs. This field is required.

  **Upcoming Change on 2024-07-01 UTC**
  **Description:** `discussionId` will be removed. Follow the guide at
  https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
  find a suitable replacement.
  **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
  """
  discussionId: ID @possibleTypes(concreteTypes: ["TeamDiscussion"])
}

"""
Autogenerated return type of CreateTeamDiscussionComment
"""
type CreateTeamDiscussionCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new comment.
  """
  teamDiscussionComment: TeamDiscussionComment
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )
}

"""
Autogenerated input type of CreateTeamDiscussion
"""
input CreateTeamDiscussionInput {
  """
  The content of the discussion. This field is required.

  **Upcoming Change on 2024-07-01 UTC**
  **Description:** `body` will be removed. Follow the guide at
  https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
  find a suitable replacement.
  **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If true, restricts the visibility of this discussion to team members and
  organization owners. If false or not specified, allows any organization member
  to view this discussion.

  **Upcoming Change on 2024-07-01 UTC**
  **Description:** `private` will be removed. Follow the guide at
  https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
  find a suitable replacement.
  **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
  """
  private: Boolean

  """
  The ID of the team to which the discussion belongs. This field is required.

  **Upcoming Change on 2024-07-01 UTC**
  **Description:** `teamId` will be removed. Follow the guide at
  https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
  find a suitable replacement.
  **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The title of the discussion. This field is required.

  **Upcoming Change on 2024-07-01 UTC**
  **Description:** `title` will be removed. Follow the guide at
  https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
  find a suitable replacement.
  **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
  """
  title: String
}

"""
Autogenerated return type of CreateTeamDiscussion
"""
type CreateTeamDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new discussion.
  """
  teamDiscussion: TeamDiscussion
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )
}

"""
Autogenerated input type of CreateUserList
"""
input CreateUserListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Whether or not the list is private
  """
  isPrivate: Boolean = false

  """
  The name of the new list
  """
  name: String!
}

"""
Autogenerated return type of CreateUserList
"""
type CreateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just created
  """
  list: UserList

  """
  The user who created the list
  """
  viewer: User
}

"""
Represents the contribution a user made by committing to a repository.
"""
type CreatedCommitContribution implements Contribution {
  """
  How many commits were made on this day to this repository by the user.
  """
  commitCount: Int!

  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The repository the user made a commit in.
  """
  repository: Repository!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
The connection type for CreatedCommitContribution.
"""
type CreatedCommitContributionConnection {
  """
  A list of edges.
  """
  edges: [CreatedCommitContributionEdge]

  """
  A list of nodes.
  """
  nodes: [CreatedCommitContribution]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of commits across days and repositories in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CreatedCommitContributionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CreatedCommitContribution
}

"""
Represents the contribution a user made on GitHub by opening an issue.
"""
type CreatedIssueContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  The issue that was opened.
  """
  issue: Issue!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
The connection type for CreatedIssueContribution.
"""
type CreatedIssueContributionConnection {
  """
  A list of edges.
  """
  edges: [CreatedIssueContributionEdge]

  """
  A list of nodes.
  """
  nodes: [CreatedIssueContribution]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CreatedIssueContributionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CreatedIssueContribution
}

"""
Represents either a issue the viewer can access or a restricted contribution.
"""
union CreatedIssueOrRestrictedContribution = CreatedIssueContribution | RestrictedContribution

"""
Represents the contribution a user made on GitHub by opening a pull request.
"""
type CreatedPullRequestContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The pull request that was opened.
  """
  pullRequest: PullRequest!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
The connection type for CreatedPullRequestContribution.
"""
type CreatedPullRequestContributionConnection {
  """
  A list of edges.
  """
  edges: [CreatedPullRequestContributionEdge]

  """
  A list of nodes.
  """
  nodes: [CreatedPullRequestContribution]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CreatedPullRequestContributionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CreatedPullRequestContribution
}

"""
Represents either a pull request the viewer can access or a restricted contribution.
"""
union CreatedPullRequestOrRestrictedContribution = CreatedPullRequestContribution | RestrictedContribution

"""
Represents the contribution a user made by leaving a review on a pull request.
"""
type CreatedPullRequestReviewContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The pull request the user reviewed.
  """
  pullRequest: PullRequest!

  """
  The review the user left on the pull request.
  """
  pullRequestReview: PullRequestReview!

  """
  The repository containing the pull request that the user reviewed.
  """
  repository: Repository!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
The connection type for CreatedPullRequestReviewContribution.
"""
type CreatedPullRequestReviewContributionConnection {
  """
  A list of edges.
  """
  edges: [CreatedPullRequestReviewContributionEdge]

  """
  A list of nodes.
  """
  nodes: [CreatedPullRequestReviewContribution]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CreatedPullRequestReviewContributionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CreatedPullRequestReviewContribution
}

"""
Represents the contribution a user made on GitHub by creating a repository.
"""
type CreatedRepositoryContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The repository that was created.
  """
  repository: Repository!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
The connection type for CreatedRepositoryContribution.
"""
type CreatedRepositoryContributionConnection {
  """
  A list of edges.
  """
  edges: [CreatedRepositoryContributionEdge]

  """
  A list of nodes.
  """
  nodes: [CreatedRepositoryContribution]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CreatedRepositoryContributionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CreatedRepositoryContribution
}

"""
Represents either a repository the viewer can access or a restricted contribution.
"""
union CreatedRepositoryOrRestrictedContribution = CreatedRepositoryContribution | RestrictedContribution

"""
Represents a mention made by one issue or pull request to another.
"""
type CrossReferencedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the CrossReferencedEvent object
  """
  id: ID!

  """
  Reference originated in a different repository.
  """
  isCrossRepository: Boolean!

  """
  Identifies when the reference was made.
  """
  referencedAt: DateTime!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  Issue or pull request that made the reference.
  """
  source: ReferencedSubject!

  """
  Issue or pull request to which the reference was made.
  """
  target: ReferencedSubject!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  Checks if the target will be closed when the source is merged.
  """
  willCloseTarget: Boolean!
}

"""
An ISO-8601 encoded date string.
"""
scalar Date

"""
An ISO-8601 encoded UTC date string.
"""
scalar DateTime

"""
Autogenerated input type of DeclineTopicSuggestion
"""
input DeclineTopicSuggestionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of the suggested topic.

  **Upcoming Change on 2024-04-01 UTC**
  **Description:** `name` will be removed.
  **Reason:** Suggested topics are no longer supported
  """
  name: String

  """
  The reason why the suggested topic is declined.

  **Upcoming Change on 2024-04-01 UTC**
  **Description:** `reason` will be removed.
  **Reason:** Suggested topics are no longer supported
  """
  reason: TopicSuggestionDeclineReason

  """
  The Node ID of the repository.

  **Upcoming Change on 2024-04-01 UTC**
  **Description:** `repositoryId` will be removed.
  **Reason:** Suggested topics are no longer supported
  """
  repositoryId: ID @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of DeclineTopicSuggestion
"""
type DeclineTopicSuggestionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The declined topic.
  """
  topic: Topic @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")
}

"""
The possible base permissions for repositories.
"""
enum DefaultRepositoryPermissionField {
  """
  Can read, write, and administrate repos by default
  """
  ADMIN

  """
  No access
  """
  NONE

  """
  Can read repos by default
  """
  READ

  """
  Can read and write repos by default
  """
  WRITE
}

"""
Entities that can be deleted.
"""
interface Deletable {
  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!
}

"""
Autogenerated input type of DeleteBranchProtectionRule
"""
input DeleteBranchProtectionRuleInput {
  """
  The global relay id of the branch protection rule to be deleted.
  """
  branchProtectionRuleId: ID! @possibleTypes(concreteTypes: ["BranchProtectionRule"])

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteBranchProtectionRule
"""
type DeleteBranchProtectionRulePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteDeployment
"""
input DeleteDeploymentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the deployment to be deleted.
  """
  id: ID! @possibleTypes(concreteTypes: ["Deployment"])
}

"""
Autogenerated return type of DeleteDeployment
"""
type DeleteDeploymentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteDiscussionComment
"""
input DeleteDiscussionCommentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node id of the discussion comment to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["DiscussionComment"])
}

"""
Autogenerated return type of DeleteDiscussionComment
"""
type DeleteDiscussionCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion comment that was just deleted.
  """
  comment: DiscussionComment
}

"""
Autogenerated input type of DeleteDiscussion
"""
input DeleteDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the discussion to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of DeleteDiscussion
"""
type DeleteDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was just deleted.
  """
  discussion: Discussion
}

"""
Autogenerated input type of DeleteEnvironment
"""
input DeleteEnvironmentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the environment to be deleted.
  """
  id: ID! @possibleTypes(concreteTypes: ["Environment"])
}

"""
Autogenerated return type of DeleteEnvironment
"""
type DeleteEnvironmentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteIpAllowListEntry
"""
input DeleteIpAllowListEntryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the IP allow list entry to delete.
  """
  ipAllowListEntryId: ID! @possibleTypes(concreteTypes: ["IpAllowListEntry"])
}

"""
Autogenerated return type of DeleteIpAllowListEntry
"""
type DeleteIpAllowListEntryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The IP allow list entry that was deleted.
  """
  ipAllowListEntry: IpAllowListEntry
}

"""
Autogenerated input type of DeleteIssueComment
"""
input DeleteIssueCommentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the comment to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["IssueComment"])
}

"""
Autogenerated return type of DeleteIssueComment
"""
type DeleteIssueCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteIssue
"""
input DeleteIssueInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the issue to delete.
  """
  issueId: ID! @possibleTypes(concreteTypes: ["Issue"])
}

"""
Autogenerated return type of DeleteIssue
"""
type DeleteIssuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the issue belonged to
  """
  repository: Repository
}

"""
Autogenerated input type of DeleteLabel
"""
input DeleteLabelInput @preview(toggledBy: "bane-preview") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the label to be deleted.
  """
  id: ID! @possibleTypes(concreteTypes: ["Label"])
}

"""
Autogenerated return type of DeleteLabel
"""
type DeleteLabelPayload @preview(toggledBy: "bane-preview") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteLinkedBranch
"""
input DeleteLinkedBranchInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the linked branch
  """
  linkedBranchId: ID! @possibleTypes(concreteTypes: ["LinkedBranch"])
}

"""
Autogenerated return type of DeleteLinkedBranch
"""
type DeleteLinkedBranchPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The issue the linked branch was unlinked from.
  """
  issue: Issue
}

"""
Autogenerated input type of DeletePackageVersion
"""
input DeletePackageVersionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the package version to be deleted.
  """
  packageVersionId: ID! @possibleTypes(concreteTypes: ["PackageVersion"])
}

"""
Autogenerated return type of DeletePackageVersion
"""
type DeletePackageVersionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not the operation succeeded.
  """
  success: Boolean
}

"""
Autogenerated input type of DeleteProjectCard
"""
input DeleteProjectCardInput {
  """
  The id of the card to delete.
  """
  cardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteProjectCard
"""
type DeleteProjectCardPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The column the deleted card was in.
  """
  column: ProjectColumn

  """
  The deleted card ID.
  """
  deletedCardId: ID
}

"""
Autogenerated input type of DeleteProjectColumn
"""
input DeleteProjectColumnInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the column to delete.
  """
  columnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

"""
Autogenerated return type of DeleteProjectColumn
"""
type DeleteProjectColumnPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The deleted column ID.
  """
  deletedColumnId: ID

  """
  The project the deleted column was in.
  """
  project: Project
}

"""
Autogenerated input type of DeleteProject
"""
input DeleteProjectInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Project ID to update.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])
}

"""
Autogenerated return type of DeleteProject
"""
type DeleteProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository or organization the project was removed from.
  """
  owner: ProjectOwner
}

"""
Autogenerated input type of DeleteProjectV2Field
"""
input DeleteProjectV2FieldInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the field to delete.
  """
  fieldId: ID!
    @possibleTypes(
      concreteTypes: ["ProjectV2Field", "ProjectV2IterationField", "ProjectV2SingleSelectField"]
      abstractType: "ProjectV2FieldConfiguration"
    )
}

"""
Autogenerated return type of DeleteProjectV2Field
"""
type DeleteProjectV2FieldPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The deleted field.
  """
  projectV2Field: ProjectV2FieldConfiguration
}

"""
Autogenerated input type of DeleteProjectV2
"""
input DeleteProjectV2Input {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to delete.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated input type of DeleteProjectV2Item
"""
input DeleteProjectV2ItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the item to be removed.
  """
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])

  """
  The ID of the Project from which the item should be removed.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of DeleteProjectV2Item
"""
type DeleteProjectV2ItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the deleted item.
  """
  deletedItemId: ID
}

"""
Autogenerated return type of DeleteProjectV2
"""
type DeleteProjectV2Payload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The deleted Project.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of DeleteProjectV2Workflow
"""
input DeleteProjectV2WorkflowInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the workflow to be removed.
  """
  workflowId: ID! @possibleTypes(concreteTypes: ["ProjectV2Workflow"])
}

"""
Autogenerated return type of DeleteProjectV2Workflow
"""
type DeleteProjectV2WorkflowPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the deleted workflow.
  """
  deletedWorkflowId: ID

  """
  The project the deleted workflow was in.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of DeletePullRequestReviewComment
"""
input DeletePullRequestReviewCommentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the comment to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["PullRequestReviewComment"])
}

"""
Autogenerated return type of DeletePullRequestReviewComment
"""
type DeletePullRequestReviewCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request review the deleted comment belonged to.
  """
  pullRequestReview: PullRequestReview

  """
  The deleted pull request review comment.
  """
  pullRequestReviewComment: PullRequestReviewComment
}

"""
Autogenerated input type of DeletePullRequestReview
"""
input DeletePullRequestReviewInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the pull request review to delete.
  """
  pullRequestReviewId: ID! @possibleTypes(concreteTypes: ["PullRequestReview"])
}

"""
Autogenerated return type of DeletePullRequestReview
"""
type DeletePullRequestReviewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The deleted pull request review.
  """
  pullRequestReview: PullRequestReview
}

"""
Autogenerated input type of DeleteRef
"""
input DeleteRefInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the Ref to be deleted.
  """
  refId: ID! @possibleTypes(concreteTypes: ["Ref"])
}

"""
Autogenerated return type of DeleteRef
"""
type DeleteRefPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteRepositoryRuleset
"""
input DeleteRepositoryRulesetInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The global relay id of the repository ruleset to be deleted.
  """
  repositoryRulesetId: ID! @possibleTypes(concreteTypes: ["RepositoryRuleset"])
}

"""
Autogenerated return type of DeleteRepositoryRuleset
"""
type DeleteRepositoryRulesetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteTeamDiscussionComment
"""
input DeleteTeamDiscussionCommentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the comment to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["TeamDiscussionComment"])
}

"""
Autogenerated return type of DeleteTeamDiscussionComment
"""
type DeleteTeamDiscussionCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteTeamDiscussion
"""
input DeleteTeamDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion ID to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["TeamDiscussion"])
}

"""
Autogenerated return type of DeleteTeamDiscussion
"""
type DeleteTeamDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteUserList
"""
input DeleteUserListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the list to delete.
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])
}

"""
Autogenerated return type of DeleteUserList
"""
type DeleteUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The owner of the list that will be deleted
  """
  user: User
}

"""
Autogenerated input type of DeleteVerifiableDomain
"""
input DeleteVerifiableDomainInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the verifiable domain to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["VerifiableDomain"])
}

"""
Autogenerated return type of DeleteVerifiableDomain
"""
type DeleteVerifiableDomainPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The owning account from which the domain was deleted.
  """
  owner: VerifiableDomainOwner
}

"""
Represents a 'demilestoned' event on a given issue or pull request.
"""
type DemilestonedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the DemilestonedEvent object
  """
  id: ID!

  """
  Identifies the milestone title associated with the 'demilestoned' event.
  """
  milestoneTitle: String!

  """
  Object referenced by event.
  """
  subject: MilestoneItem!
}

"""
A Dependabot Update for a dependency in a repository
"""
type DependabotUpdate implements RepositoryNode {
  """
  The error from a dependency update
  """
  error: DependabotUpdateError

  """
  The associated pull request
  """
  pullRequest: PullRequest

  """
  The repository associated with this node.
  """
  repository: Repository!
}

"""
An error produced from a Dependabot Update
"""
type DependabotUpdateError {
  """
  The body of the error
  """
  body: String!

  """
  The error code
  """
  errorType: String!

  """
  The title of the error
  """
  title: String!
}

"""
A dependency manifest entry
"""
type DependencyGraphDependency @preview(toggledBy: "hawkgirl-preview") {
  """
  Does the dependency itself have dependencies?
  """
  hasDependencies: Boolean!

  """
  The original name of the package, as it appears in the manifest.
  """
  packageLabel: String!
    @deprecated(
      reason: "`packageLabel` will be removed. Use normalized `packageName` field instead. Removal on 2022-10-01 UTC."
    )

  """
  The dependency package manager
  """
  packageManager: String

  """
  The name of the package in the canonical form used by the package manager.
  """
  packageName: String!

  """
  The repository containing the package
  """
  repository: Repository

  """
  The dependency version requirements
  """
  requirements: String!
}

"""
The connection type for DependencyGraphDependency.
"""
type DependencyGraphDependencyConnection @preview(toggledBy: "hawkgirl-preview") {
  """
  A list of edges.
  """
  edges: [DependencyGraphDependencyEdge]

  """
  A list of nodes.
  """
  nodes: [DependencyGraphDependency]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DependencyGraphDependencyEdge @preview(toggledBy: "hawkgirl-preview") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DependencyGraphDependency
}

"""
The possible ecosystems of a dependency graph package.
"""
enum DependencyGraphEcosystem {
  """
  GitHub Actions
  """
  ACTIONS

  """
  PHP packages hosted at packagist.org
  """
  COMPOSER

  """
  Go modules
  """
  GO

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

  """
  Python packages hosted at PyPI.org
  """
  PIP

  """
  Dart packages hosted at pub.dev
  """
  PUB

  """
  Ruby gems hosted at RubyGems.org
  """
  RUBYGEMS

  """
  Rust crates
  """
  RUST

  """
  Swift packages
  """
  SWIFT
}

"""
Dependency manifest for a repository
"""
type DependencyGraphManifest implements Node @preview(toggledBy: "hawkgirl-preview") {
  """
  Path to view the manifest file blob
  """
  blobPath: String!

  """
  A list of manifest dependencies
  """
  dependencies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DependencyGraphDependencyConnection

  """
  The number of dependencies listed in the manifest
  """
  dependenciesCount: Int

  """
  Is the manifest too big to parse?
  """
  exceedsMaxSize: Boolean!

  """
  Fully qualified manifest filename
  """
  filename: String!

  """
  The Node ID of the DependencyGraphManifest object
  """
  id: ID!

  """
  Were we able to parse the manifest?
  """
  parseable: Boolean!

  """
  The repository containing the manifest
  """
  repository: Repository!
}

"""
The connection type for DependencyGraphManifest.
"""
type DependencyGraphManifestConnection @preview(toggledBy: "hawkgirl-preview") {
  """
  A list of edges.
  """
  edges: [DependencyGraphManifestEdge]

  """
  A list of nodes.
  """
  nodes: [DependencyGraphManifest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DependencyGraphManifestEdge @preview(toggledBy: "hawkgirl-preview") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DependencyGraphManifest
}

"""
A repository deploy key.
"""
type DeployKey implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the DeployKey object
  """
  id: ID!

  """
  The deploy key.
  """
  key: String!

  """
  Whether or not the deploy key is read only.
  """
  readOnly: Boolean!

  """
  The deploy key title.
  """
  title: String!

  """
  Whether or not the deploy key has been verified.
  """
  verified: Boolean!
}

"""
The connection type for DeployKey.
"""
type DeployKeyConnection {
  """
  A list of edges.
  """
  edges: [DeployKeyEdge]

  """
  A list of nodes.
  """
  nodes: [DeployKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeployKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DeployKey
}

"""
Represents a 'deployed' event on a given pull request.
"""
type DeployedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The deployment associated with the 'deployed' event.
  """
  deployment: Deployment!

  """
  The Node ID of the DeployedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  The ref associated with the 'deployed' event.
  """
  ref: Ref
}

"""
Represents triggered deployment instance.
"""
type Deployment implements Node {
  """
  Identifies the commit sha of the deployment.
  """
  commit: Commit

  """
  Identifies the oid of the deployment commit, even if the commit has been deleted.
  """
  commitOid: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the actor who triggered the deployment.
  """
  creator: Actor!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The deployment description.
  """
  description: String

  """
  The latest environment to which this deployment was made.
  """
  environment: String

  """
  The Node ID of the Deployment object
  """
  id: ID!

  """
  The latest environment to which this deployment was made.
  """
  latestEnvironment: String

  """
  The latest status of this deployment.
  """
  latestStatus: DeploymentStatus

  """
  The original environment to which this deployment was made.
  """
  originalEnvironment: String

  """
  Extra information that a deployment system might need.
  """
  payload: String

  """
  Identifies the Ref of the deployment, if the deployment was created by ref.
  """
  ref: Ref

  """
  Identifies the repository associated with the deployment.
  """
  repository: Repository!

  """
  The current state of the deployment.
  """
  state: DeploymentState

  """
  A list of statuses associated with the deployment.
  """
  statuses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DeploymentStatusConnection

  """
  The deployment task.
  """
  task: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for Deployment.
"""
type DeploymentConnection {
  """
  A list of edges.
  """
  edges: [DeploymentEdge]

  """
  A list of nodes.
  """
  nodes: [Deployment]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeploymentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Deployment
}

"""
Represents a 'deployment_environment_changed' event on a given pull request.
"""
type DeploymentEnvironmentChangedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The deployment status that updated the deployment environment.
  """
  deploymentStatus: DeploymentStatus!

  """
  The Node ID of the DeploymentEnvironmentChangedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!
}

"""
Ordering options for deployment connections
"""
input DeploymentOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order deployments by.
  """
  field: DeploymentOrderField!
}

"""
Properties by which deployment connections can be ordered.
"""
enum DeploymentOrderField {
  """
  Order collection by creation time
  """
  CREATED_AT
}

"""
A protection rule.
"""
type DeploymentProtectionRule {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean

  """
  The teams or users that can review the deployment
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DeploymentReviewerConnection!

  """
  The timeout in minutes for this protection rule.
  """
  timeout: Int!

  """
  The type of protection rule.
  """
  type: DeploymentProtectionRuleType!
}

"""
The connection type for DeploymentProtectionRule.
"""
type DeploymentProtectionRuleConnection {
  """
  A list of edges.
  """
  edges: [DeploymentProtectionRuleEdge]

  """
  A list of nodes.
  """
  nodes: [DeploymentProtectionRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeploymentProtectionRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DeploymentProtectionRule
}

"""
The possible protection rule types.
"""
enum DeploymentProtectionRuleType {
  """
  Required reviewers
  """
  REQUIRED_REVIEWERS

  """
  Wait timer
  """
  WAIT_TIMER
}

"""
A request to deploy a workflow run to an environment.
"""
type DeploymentRequest {
  """
  Whether or not the current user can approve the deployment
  """
  currentUserCanApprove: Boolean!

  """
  The target environment of the deployment
  """
  environment: Environment!

  """
  The teams or users that can review the deployment
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DeploymentReviewerConnection!

  """
  The wait timer in minutes configured in the environment
  """
  waitTimer: Int!

  """
  The wait timer in minutes configured in the environment
  """
  waitTimerStartedAt: DateTime
}

"""
The connection type for DeploymentRequest.
"""
type DeploymentRequestConnection {
  """
  A list of edges.
  """
  edges: [DeploymentRequestEdge]

  """
  A list of nodes.
  """
  nodes: [DeploymentRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeploymentRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DeploymentRequest
}

"""
A deployment review.
"""
type DeploymentReview implements Node {
  """
  The comment the user left.
  """
  comment: String!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The environments approved or rejected
  """
  environments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EnvironmentConnection!

  """
  The Node ID of the DeploymentReview object
  """
  id: ID!

  """
  The decision of the user.
  """
  state: DeploymentReviewState!

  """
  The user that reviewed the deployment.
  """
  user: User!
}

"""
The connection type for DeploymentReview.
"""
type DeploymentReviewConnection {
  """
  A list of edges.
  """
  edges: [DeploymentReviewEdge]

  """
  A list of nodes.
  """
  nodes: [DeploymentReview]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeploymentReviewEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DeploymentReview
}

"""
The possible states for a deployment review.
"""
enum DeploymentReviewState {
  """
  The deployment was approved.
  """
  APPROVED

  """
  The deployment was rejected.
  """
  REJECTED
}

"""
Users and teams.
"""
union DeploymentReviewer = Team | User

"""
The connection type for DeploymentReviewer.
"""
type DeploymentReviewerConnection {
  """
  A list of edges.
  """
  edges: [DeploymentReviewerEdge]

  """
  A list of nodes.
  """
  nodes: [DeploymentReviewer]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeploymentReviewerEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DeploymentReviewer
}

"""
The possible states in which a deployment can be.
"""
enum DeploymentState {
  """
  The pending deployment was not updated after 30 minutes.
  """
  ABANDONED

  """
  The deployment is currently active.
  """
  ACTIVE

  """
  An inactive transient deployment.
  """
  DESTROYED

  """
  The deployment experienced an error.
  """
  ERROR

  """
  The deployment has failed.
  """
  FAILURE

  """
  The deployment is inactive.
  """
  INACTIVE

  """
  The deployment is in progress.
  """
  IN_PROGRESS

  """
  The deployment is pending.
  """
  PENDING

  """
  The deployment has queued
  """
  QUEUED

  """
  The deployment was successful.
  """
  SUCCESS

  """
  The deployment is waiting.
  """
  WAITING
}

"""
Describes the status of a given deployment attempt.
"""
type DeploymentStatus implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the actor who triggered the deployment.
  """
  creator: Actor!

  """
  Identifies the deployment associated with status.
  """
  deployment: Deployment!

  """
  Identifies the description of the deployment.
  """
  description: String

  """
  Identifies the environment of the deployment at the time of this deployment status
  """
  environment: String @preview(toggledBy: "flash-preview")

  """
  Identifies the environment URL of the deployment.
  """
  environmentUrl: URI

  """
  The Node ID of the DeploymentStatus object
  """
  id: ID!

  """
  Identifies the log URL of the deployment.
  """
  logUrl: URI

  """
  Identifies the current state of the deployment.
  """
  state: DeploymentStatusState!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for DeploymentStatus.
"""
type DeploymentStatusConnection {
  """
  A list of edges.
  """
  edges: [DeploymentStatusEdge]

  """
  A list of nodes.
  """
  nodes: [DeploymentStatus]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeploymentStatusEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DeploymentStatus
}

"""
The possible states for a deployment status.
"""
enum DeploymentStatusState {
  """
  The deployment experienced an error.
  """
  ERROR

  """
  The deployment has failed.
  """
  FAILURE

  """
  The deployment is inactive.
  """
  INACTIVE

  """
  The deployment is in progress.
  """
  IN_PROGRESS

  """
  The deployment is pending.
  """
  PENDING

  """
  The deployment is queued
  """
  QUEUED

  """
  The deployment was successful.
  """
  SUCCESS

  """
  The deployment is waiting.
  """
  WAITING
}

"""
Autogenerated input type of DequeuePullRequest
"""
input DequeuePullRequestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the pull request to be dequeued.
  """
  id: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""
Autogenerated return type of DequeuePullRequest
"""
type DequeuePullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The merge queue entry of the dequeued pull request.
  """
  mergeQueueEntry: MergeQueueEntry
}

"""
The possible sides of a diff.
"""
enum DiffSide {
  """
  The left side of the diff.
  """
  LEFT

  """
  The right side of the diff.
  """
  RIGHT
}

"""
Autogenerated input type of DisablePullRequestAutoMerge
"""
input DisablePullRequestAutoMergeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the pull request to disable auto merge on.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""
Autogenerated return type of DisablePullRequestAutoMerge
"""
type DisablePullRequestAutoMergePayload {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request auto merge was disabled on.
  """
  pullRequest: PullRequest
}

"""
Represents a 'disconnected' event on a given issue or pull request.
"""
type DisconnectedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the DisconnectedEvent object
  """
  id: ID!

  """
  Reference originated in a different repository.
  """
  isCrossRepository: Boolean!

  """
  Issue or pull request from which the issue was disconnected.
  """
  source: ReferencedSubject!

  """
  Issue or pull request which was disconnected.
  """
  subject: ReferencedSubject!
}

"""
A discussion in a repository.
"""
type Discussion implements Closable & Comment & Deletable & Labelable & Lockable & Node & Reactable & RepositoryNode & Subscribable & Updatable & Votable {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The comment chosen as this discussion's answer, if any.
  """
  answer: DiscussionComment

  """
  The time when a user chose this discussion's answer, if answered.
  """
  answerChosenAt: DateTime

  """
  The user who chose this discussion's answer, if answered.
  """
  answerChosenBy: Actor

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  The main text of the discussion post.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  The category for this discussion.
  """
  category: DiscussionCategory!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  The replies to the discussion.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DiscussionCommentConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The actor who edited the comment.
  """
  editor: Actor

  """
  The Node ID of the Discussion object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Only return answered/unanswered discussions
  """
  isAnswered: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  `true` if the object is locked
  """
  locked: Boolean!

  """
  The number identifying this discussion within the repository.
  """
  number: Int!

  """
  The poll associated with this discussion, if one exists.
  """
  poll: DiscussionPoll

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The path for this discussion.
  """
  resourcePath: URI!

  """
  Identifies the reason for the discussion's state.
  """
  stateReason: DiscussionStateReason

  """
  The title of this discussion.
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  Number of upvotes that this subject has received.
  """
  upvoteCount: Int!

  """
  The URL for this discussion.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!

  """
  Whether or not the current user can add or remove an upvote on this subject.
  """
  viewerCanUpvote: Boolean!

  """
  Did the viewer author this comment.
  """
  viewerDidAuthor: Boolean!

  """
  Whether or not the current user has already upvoted this subject.
  """
  viewerHasUpvoted: Boolean!

  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: SubscriptionState
}

"""
A category for discussions in a repository.
"""
type DiscussionCategory implements Node & RepositoryNode {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  A description of this category.
  """
  description: String

  """
  An emoji representing this category.
  """
  emoji: String!

  """
  This category's emoji rendered as HTML.
  """
  emojiHTML: HTML!

  """
  The Node ID of the DiscussionCategory object
  """
  id: ID!

  """
  Whether or not discussions in this category support choosing an answer with the markDiscussionCommentAsAnswer mutation.
  """
  isAnswerable: Boolean!

  """
  The name of this category.
  """
  name: String!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The slug of this category.
  """
  slug: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for DiscussionCategory.
"""
type DiscussionCategoryConnection {
  """
  A list of edges.
  """
  edges: [DiscussionCategoryEdge]

  """
  A list of nodes.
  """
  nodes: [DiscussionCategory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DiscussionCategoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DiscussionCategory
}

"""
The possible reasons for closing a discussion.
"""
enum DiscussionCloseReason {
  """
  The discussion is a duplicate of another
  """
  DUPLICATE

  """
  The discussion is no longer relevant
  """
  OUTDATED

  """
  The discussion has been resolved
  """
  RESOLVED
}

"""
A comment on a discussion.
"""
type DiscussionComment implements Comment & Deletable & Minimizable & Node & Reactable & Updatable & UpdatableComment & Votable {
  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The time when this replied-to comment was deleted
  """
  deletedAt: DateTime

  """
  The discussion this comment was created in
  """
  discussion: Discussion

  """
  The actor who edited the comment.
  """
  editor: Actor

  """
  The Node ID of the DiscussionComment object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Has this comment been chosen as the answer of its discussion?
  """
  isAnswer: Boolean!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The threaded replies to this comment.
  """
  replies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DiscussionCommentConnection!

  """
  The discussion comment this comment is a reply to
  """
  replyTo: DiscussionComment

  """
  The path for this discussion comment.
  """
  resourcePath: URI!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  Number of upvotes that this subject has received.
  """
  upvoteCount: Int!

  """
  The URL for this discussion comment.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can the current user mark this comment as an answer?
  """
  viewerCanMarkAsAnswer: Boolean!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  Can the current user unmark this comment as an answer?
  """
  viewerCanUnmarkAsAnswer: Boolean!

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!

  """
  Whether or not the current user can add or remove an upvote on this subject.
  """
  viewerCanUpvote: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!

  """
  Did the viewer author this comment.
  """
  viewerDidAuthor: Boolean!

  """
  Whether or not the current user has already upvoted this subject.
  """
  viewerHasUpvoted: Boolean!
}

"""
The connection type for DiscussionComment.
"""
type DiscussionCommentConnection {
  """
  A list of edges.
  """
  edges: [DiscussionCommentEdge]

  """
  A list of nodes.
  """
  nodes: [DiscussionComment]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DiscussionCommentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DiscussionComment
}

"""
The connection type for Discussion.
"""
type DiscussionConnection {
  """
  A list of edges.
  """
  edges: [DiscussionEdge]

  """
  A list of nodes.
  """
  nodes: [Discussion]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DiscussionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Discussion
}

"""
Ways in which lists of discussions can be ordered upon return.
"""
input DiscussionOrder {
  """
  The direction in which to order discussions by the specified field.
  """
  direction: OrderDirection!

  """
  The field by which to order discussions.
  """
  field: DiscussionOrderField!
}

"""
Properties by which discussion connections can be ordered.
"""
enum DiscussionOrderField {
  """
  Order discussions by creation time.
  """
  CREATED_AT

  """
  Order discussions by most recent modification time.
  """
  UPDATED_AT
}

"""
A poll for a discussion.
"""
type DiscussionPoll implements Node {
  """
  The discussion that this poll belongs to.
  """
  discussion: Discussion

  """
  The Node ID of the DiscussionPoll object
  """
  id: ID!

  """
  The options for this poll.
  """
  options(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the options for the discussion poll.
    """
    orderBy: DiscussionPollOptionOrder = {field: AUTHORED_ORDER, direction: ASC}
  ): DiscussionPollOptionConnection

  """
  The question that is being asked by this poll.
  """
  question: String!

  """
  The total number of votes that have been cast for this poll.
  """
  totalVoteCount: Int!

  """
  Indicates if the viewer has permission to vote in this poll.
  """
  viewerCanVote: Boolean!

  """
  Indicates if the viewer has voted for any option in this poll.
  """
  viewerHasVoted: Boolean!
}

"""
An option for a discussion poll.
"""
type DiscussionPollOption implements Node {
  """
  The Node ID of the DiscussionPollOption object
  """
  id: ID!

  """
  The text for this option.
  """
  option: String!

  """
  The discussion poll that this option belongs to.
  """
  poll: DiscussionPoll

  """
  The total number of votes that have been cast for this option.
  """
  totalVoteCount: Int!

  """
  Indicates if the viewer has voted for this option in the poll.
  """
  viewerHasVoted: Boolean!
}

"""
The connection type for DiscussionPollOption.
"""
type DiscussionPollOptionConnection {
  """
  A list of edges.
  """
  edges: [DiscussionPollOptionEdge]

  """
  A list of nodes.
  """
  nodes: [DiscussionPollOption]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DiscussionPollOptionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DiscussionPollOption
}

"""
Ordering options for discussion poll option connections.
"""
input DiscussionPollOptionOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order poll options by.
  """
  field: DiscussionPollOptionOrderField!
}

"""
Properties by which discussion poll option connections can be ordered.
"""
enum DiscussionPollOptionOrderField {
  """
  Order poll options by the order that the poll author specified when creating the poll.
  """
  AUTHORED_ORDER

  """
  Order poll options by the number of votes it has.
  """
  VOTE_COUNT
}

"""
The possible states of a discussion.
"""
enum DiscussionState {
  """
  A discussion that has been closed
  """
  CLOSED

  """
  A discussion that is open
  """
  OPEN
}

"""
The possible state reasons of a discussion.
"""
enum DiscussionStateReason {
  """
  The discussion is a duplicate of another
  """
  DUPLICATE

  """
  The discussion is no longer relevant
  """
  OUTDATED

  """
  The discussion was reopened
  """
  REOPENED

  """
  The discussion has been resolved
  """
  RESOLVED
}

"""
Autogenerated input type of DismissPullRequestReview
"""
input DismissPullRequestReviewInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The contents of the pull request review dismissal message.
  """
  message: String!

  """
  The Node ID of the pull request review to modify.
  """
  pullRequestReviewId: ID! @possibleTypes(concreteTypes: ["PullRequestReview"])
}

"""
Autogenerated return type of DismissPullRequestReview
"""
type DismissPullRequestReviewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The dismissed pull request review.
  """
  pullRequestReview: PullRequestReview
}

"""
The possible reasons that a Dependabot alert was dismissed.
"""
enum DismissReason {
  """
  A fix has already been started
  """
  FIX_STARTED

  """
  This alert is inaccurate or incorrect
  """
  INACCURATE

  """
  Vulnerable code is not actually used
  """
  NOT_USED

  """
  No bandwidth to fix this
  """
  NO_BANDWIDTH

  """
  Risk is tolerable to this project
  """
  TOLERABLE_RISK
}

"""
Autogenerated input type of DismissRepositoryVulnerabilityAlert
"""
input DismissRepositoryVulnerabilityAlertInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The reason the Dependabot alert is being dismissed.
  """
  dismissReason: DismissReason!

  """
  The Dependabot alert ID to dismiss.
  """
  repositoryVulnerabilityAlertId: ID! @possibleTypes(concreteTypes: ["RepositoryVulnerabilityAlert"])
}

"""
Autogenerated return type of DismissRepositoryVulnerabilityAlert
"""
type DismissRepositoryVulnerabilityAlertPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Dependabot alert that was dismissed
  """
  repositoryVulnerabilityAlert: RepositoryVulnerabilityAlert
}

"""
A draft issue within a project.
"""
type DraftIssue implements Node {
  """
  A list of users to assigned to this draft issue.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The body of the draft issue.
  """
  body: String!

  """
  The body of the draft issue rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body of the draft issue rendered to text.
  """
  bodyText: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created this draft issue.
  """
  creator: Actor

  """
  The Node ID of the DraftIssue object
  """
  id: ID!

  """
  List of items linked with the draft issue (currently draft issue can be linked to only one item).
  """
  projectV2Items(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Projects that link to this draft issue (currently draft issue can be linked to only one project).
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!

  """
  The title of the draft issue
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Specifies a review comment to be left with a Pull Request Review.
"""
input DraftPullRequestReviewComment {
  """
  Body of the comment to leave.
  """
  body: String!

  """
  Path to the file being commented on.
  """
  path: String!

  """
  Position in the file to leave a comment on.
  """
  position: Int!
}

"""
Specifies a review comment thread to be left with a Pull Request Review.
"""
input DraftPullRequestReviewThread {
  """
  Body of the comment to leave.
  """
  body: String!

  """
  The line of the blob to which the thread refers. The end of the line range for multi-line comments.
  """
  line: Int!

  """
  Path to the file being commented on.
  """
  path: String!

  """
  The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.
  """
  side: DiffSide = RIGHT

  """
  The first line of the range to which the comment refers.
  """
  startLine: Int

  """
  The side of the diff on which the start line resides.
  """
  startSide: DiffSide = RIGHT
}

"""
Autogenerated input type of EnablePullRequestAutoMerge
"""
input EnablePullRequestAutoMergeInput {
  """
  The email address to associate with this merge.
  """
  authorEmail: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Commit body to use for the commit when the PR is mergable; if omitted, a
  default message will be used. NOTE: when merging with a merge queue any input
  value for commit message is ignored.
  """
  commitBody: String

  """
  Commit headline to use for the commit when the PR is mergable; if omitted, a
  default message will be used. NOTE: when merging with a merge queue any input
  value for commit headline is ignored.
  """
  commitHeadline: String

  """
  The expected head OID of the pull request.
  """
  expectedHeadOid: GitObjectID

  """
  The merge method to use. If omitted, defaults to `MERGE`. NOTE: when merging
  with a merge queue any input value for merge method is ignored.
  """
  mergeMethod: PullRequestMergeMethod = MERGE

  """
  ID of the pull request to enable auto-merge on.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""
Autogenerated return type of EnablePullRequestAutoMerge
"""
type EnablePullRequestAutoMergePayload {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request auto-merge was enabled on.
  """
  pullRequest: PullRequest
}

"""
Autogenerated input type of EnqueuePullRequest
"""
input EnqueuePullRequestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The expected head OID of the pull request.
  """
  expectedHeadOid: GitObjectID

  """
  Add the pull request to the front of the queue.
  """
  jump: Boolean

  """
  The ID of the pull request to enqueue.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""
Autogenerated return type of EnqueuePullRequest
"""
type EnqueuePullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The merge queue entry for the enqueued pull request.
  """
  mergeQueueEntry: MergeQueueEntry
}

"""
An account to manage multiple organizations with consolidated policy and billing.
"""
type Enterprise implements AnnouncementBanner & Node {
  """
  The text of the announcement
  """
  announcement: String

  """
  The expiration date of the announcement, if any
  """
  announcementExpiresAt: DateTime

  """
  Whether the announcement can be dismissed by the user
  """
  announcementUserDismissible: Boolean

  """
  A URL pointing to the enterprise's public avatar.
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The enterprise's billing email.
  """
  billingEmail: String

  """
  Enterprise billing information visible to enterprise billing managers.
  """
  billingInfo: EnterpriseBillingInfo

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The description of the enterprise.
  """
  description: String

  """
  The description of the enterprise as HTML.
  """
  descriptionHTML: HTML!

  """
  The Node ID of the Enterprise object
  """
  id: ID!

  """
  The location of the enterprise.
  """
  location: String

  """
  A list of users who are members of this enterprise.
  """
  members(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Only return members within the selected GitHub Enterprise deployment
    """
    deployment: EnterpriseUserDeployment

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return members with this two-factor authentication status. Does not
    include members who only have an account on a GitHub Enterprise Server instance.
    """
    hasTwoFactorEnabled: Boolean = null

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for members returned from the connection.
    """
    orderBy: EnterpriseMemberOrder = {field: LOGIN, direction: ASC}

    """
    Only return members within the organizations with these logins
    """
    organizationLogins: [String!]

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the enterprise organization or server.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseMemberConnection!

  """
  The name of the enterprise.
  """
  name: String!

  """
  A list of organizations that belong to this enterprise.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for organizations returned from the connection.
    """
    orderBy: OrganizationOrder = {field: LOGIN, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The viewer's role in an organization.
    """
    viewerOrganizationRole: RoleInOrganization
  ): OrganizationConnection!

  """
  Enterprise information visible to enterprise owners or enterprise owners'
  personal access tokens (classic) with read:enterprise or admin:enterprise scope.
  """
  ownerInfo: EnterpriseOwnerInfo

  """
  The HTTP path for this enterprise.
  """
  resourcePath: URI!

  """
  The URL-friendly identifier for the enterprise.
  """
  slug: String!

  """
  The HTTP URL for this enterprise.
  """
  url: URI!

  """
  Is the current viewer an admin of this enterprise?
  """
  viewerIsAdmin: Boolean!

  """
  The URL of the enterprise website.
  """
  websiteUrl: URI
}

"""
The connection type for User.
"""
type EnterpriseAdministratorConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseAdministratorEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
A User who is an administrator of an enterprise.
"""
type EnterpriseAdministratorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User

  """
  The role of the administrator.
  """
  role: EnterpriseAdministratorRole!
}

"""
An invitation for a user to become an owner or billing manager of an enterprise.
"""
type EnterpriseAdministratorInvitation implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The email of the person who was invited to the enterprise.
  """
  email: String

  """
  The enterprise the invitation is for.
  """
  enterprise: Enterprise!

  """
  The Node ID of the EnterpriseAdministratorInvitation object
  """
  id: ID!

  """
  The user who was invited to the enterprise.
  """
  invitee: User

  """
  The user who created the invitation.
  """
  inviter: User

  """
  The invitee's pending role in the enterprise (owner or billing_manager).
  """
  role: EnterpriseAdministratorRole!
}

"""
The connection type for EnterpriseAdministratorInvitation.
"""
type EnterpriseAdministratorInvitationConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseAdministratorInvitationEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseAdministratorInvitation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type EnterpriseAdministratorInvitationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseAdministratorInvitation
}

"""
Ordering options for enterprise administrator invitation connections
"""
input EnterpriseAdministratorInvitationOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprise administrator invitations by.
  """
  field: EnterpriseAdministratorInvitationOrderField!
}

"""
Properties by which enterprise administrator invitation connections can be ordered.
"""
enum EnterpriseAdministratorInvitationOrderField {
  """
  Order enterprise administrator member invitations by creation time
  """
  CREATED_AT
}

"""
The possible administrator roles in an enterprise account.
"""
enum EnterpriseAdministratorRole {
  """
  Represents a billing manager of the enterprise account.
  """
  BILLING_MANAGER

  """
  Represents an owner of the enterprise account.
  """
  OWNER
}

"""
The possible values for the enterprise allow private repository forking policy value.
"""
enum EnterpriseAllowPrivateRepositoryForkingPolicyValue {
  """
  Members can fork a repository to an organization within this enterprise.
  """
  ENTERPRISE_ORGANIZATIONS

  """
  Members can fork a repository to their enterprise-managed user account or an organization inside this enterprise.
  """
  ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS

  """
  Members can fork a repository to their user account or an organization, either inside or outside of this enterprise.
  """
  EVERYWHERE

  """
  Members can fork a repository only within the same organization (intra-org).
  """
  SAME_ORGANIZATION

  """
  Members can fork a repository to their user account or within the same organization.
  """
  SAME_ORGANIZATION_USER_ACCOUNTS

  """
  Members can fork a repository to their user account.
  """
  USER_ACCOUNTS
}

"""
Metadata for an audit entry containing enterprise account information.
"""
interface EnterpriseAuditEntryData {
  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI
}

"""
Enterprise billing information visible to enterprise billing managers and owners.
"""
type EnterpriseBillingInfo {
  """
  The number of licenseable users/emails across the enterprise.
  """
  allLicensableUsersCount: Int!

  """
  The number of data packs used by all organizations owned by the enterprise.
  """
  assetPacks: Int!

  """
  The bandwidth quota in GB for all organizations owned by the enterprise.
  """
  bandwidthQuota: Float!

  """
  The bandwidth usage in GB for all organizations owned by the enterprise.
  """
  bandwidthUsage: Float!

  """
  The bandwidth usage as a percentage of the bandwidth quota.
  """
  bandwidthUsagePercentage: Int!

  """
  The storage quota in GB for all organizations owned by the enterprise.
  """
  storageQuota: Float!

  """
  The storage usage in GB for all organizations owned by the enterprise.
  """
  storageUsage: Float!

  """
  The storage usage as a percentage of the storage quota.
  """
  storageUsagePercentage: Int!

  """
  The number of available licenses across all owned organizations based on the unique number of billable users.
  """
  totalAvailableLicenses: Int!

  """
  The total number of licenses allocated.
  """
  totalLicenses: Int!
}

"""
The connection type for Enterprise.
"""
type EnterpriseConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseEdge]

  """
  A list of nodes.
  """
  nodes: [Enterprise]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible values for the enterprise base repository permission setting.
"""
enum EnterpriseDefaultRepositoryPermissionSettingValue {
  """
  Organization members will be able to clone, pull, push, and add new collaborators to all organization repositories.
  """
  ADMIN

  """
  Organization members will only be able to clone and pull public repositories.
  """
  NONE

  """
  Organizations in the enterprise choose base repository permissions for their members.
  """
  NO_POLICY

  """
  Organization members will be able to clone and pull all organization repositories.
  """
  READ

  """
  Organization members will be able to clone, pull, and push all organization repositories.
  """
  WRITE
}

"""
An edge in a connection.
"""
type EnterpriseEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Enterprise
}

"""
The possible values for an enabled/disabled enterprise setting.
"""
enum EnterpriseEnabledDisabledSettingValue {
  """
  The setting is disabled for organizations in the enterprise.
  """
  DISABLED

  """
  The setting is enabled for organizations in the enterprise.
  """
  ENABLED

  """
  There is no policy set for organizations in the enterprise.
  """
  NO_POLICY
}

"""
The possible values for an enabled/no policy enterprise setting.
"""
enum EnterpriseEnabledSettingValue {
  """
  The setting is enabled for organizations in the enterprise.
  """
  ENABLED

  """
  There is no policy set for organizations in the enterprise.
  """
  NO_POLICY
}

"""
The connection type for OrganizationInvitation.
"""
type EnterpriseFailedInvitationConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseFailedInvitationEdge]

  """
  A list of nodes.
  """
  nodes: [OrganizationInvitation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!

  """
  Identifies the total count of unique users in the connection.
  """
  totalUniqueUserCount: Int!
}

"""
A failed invitation to be a member in an enterprise organization.
"""
type EnterpriseFailedInvitationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: OrganizationInvitation
}

"""
An identity provider configured to provision identities for an enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with read:enterprise or admin:enterprise scope.
"""
type EnterpriseIdentityProvider implements Node {
  """
  The digest algorithm used to sign SAML requests for the identity provider.
  """
  digestMethod: SamlDigestAlgorithm

  """
  The enterprise this identity provider belongs to.
  """
  enterprise: Enterprise

  """
  ExternalIdentities provisioned by this identity provider.
  """
  externalIdentities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter to external identities with the users login
    """
    login: String

    """
    Filter to external identities with valid org membership only
    """
    membersOnly: Boolean

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the EnterpriseIdentityProvider object
  """
  id: ID!

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: X509Certificate

  """
  The Issuer Entity ID for the SAML identity provider.
  """
  issuer: String

  """
  Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable.
  """
  recoveryCodes: [String!]

  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: SamlSignatureAlgorithm

  """
  The URL endpoint for the identity provider's SAML SSO.
  """
  ssoUrl: URI
}

"""
An object that is a member of an enterprise.
"""
union EnterpriseMember = EnterpriseUserAccount | User

"""
The connection type for EnterpriseMember.
"""
type EnterpriseMemberConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseMemberEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseMember]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
A User who is a member of an enterprise through one or more organizations.
"""
type EnterpriseMemberEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseMember
}

"""
Ordering options for enterprise member connections.
"""
input EnterpriseMemberOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprise members by.
  """
  field: EnterpriseMemberOrderField!
}

"""
Properties by which enterprise member connections can be ordered.
"""
enum EnterpriseMemberOrderField {
  """
  Order enterprise members by creation time
  """
  CREATED_AT

  """
  Order enterprise members by login
  """
  LOGIN
}

"""
The possible values for the enterprise members can create repositories setting.
"""
enum EnterpriseMembersCanCreateRepositoriesSettingValue {
  """
  Members will be able to create public and private repositories.
  """
  ALL

  """
  Members will not be able to create public or private repositories.
  """
  DISABLED

  """
  Organization owners choose whether to allow members to create repositories.
  """
  NO_POLICY

  """
  Members will be able to create only private repositories.
  """
  PRIVATE

  """
  Members will be able to create only public repositories.
  """
  PUBLIC
}

"""
The possible values for the members can make purchases setting.
"""
enum EnterpriseMembersCanMakePurchasesSettingValue {
  """
  The setting is disabled for organizations in the enterprise.
  """
  DISABLED

  """
  The setting is enabled for organizations in the enterprise.
  """
  ENABLED
}

"""
The possible values we have for filtering Platform::Objects::User#enterprises.
"""
enum EnterpriseMembershipType {
  """
  Returns all enterprises in which the user is an admin.
  """
  ADMIN

  """
  Returns all enterprises in which the user is a member, admin, or billing manager.
  """
  ALL

  """
  Returns all enterprises in which the user is a billing manager.
  """
  BILLING_MANAGER

  """
  Returns all enterprises in which the user is a member of an org that is owned by the enterprise.
  """
  ORG_MEMBERSHIP
}

"""
Ordering options for enterprises.
"""
input EnterpriseOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprises by.
  """
  field: EnterpriseOrderField!
}

"""
Properties by which enterprise connections can be ordered.
"""
enum EnterpriseOrderField {
  """
  Order enterprises by name
  """
  NAME
}

"""
The connection type for Organization.
"""
type EnterpriseOrganizationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseOrganizationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [Organization]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An enterprise organization that a user is a member of.
"""
type EnterpriseOrganizationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Organization

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for User.
"""
type EnterpriseOutsideCollaboratorConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseOutsideCollaboratorEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
A User who is an outside collaborator of an enterprise through one or more organizations.
"""
type EnterpriseOutsideCollaboratorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User

  """
  The enterprise organization repositories this user is a member of.
  """
  repositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories.
    """
    orderBy: RepositoryOrder = {field: NAME, direction: ASC}
  ): EnterpriseRepositoryInfoConnection!
}

"""
Enterprise information visible to enterprise owners or enterprise owners'
personal access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type EnterpriseOwnerInfo {
  """
  A list of all of the administrators for this enterprise.
  """
  admins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return administrators with this two-factor authentication status.
    """
    hasTwoFactorEnabled: Boolean = null

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for administrators returned from the connection.
    """
    orderBy: EnterpriseMemberOrder = {field: LOGIN, direction: ASC}

    """
    Only return members within the organizations with these logins
    """
    organizationLogins: [String!]

    """
    The search string to look for.
    """
    query: String

    """
    The role to filter by.
    """
    role: EnterpriseAdministratorRole
  ): EnterpriseAdministratorConnection!

  """
  A list of users in the enterprise who currently have two-factor authentication disabled.
  """
  affiliatedUsersWithTwoFactorDisabled(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Whether or not affiliated users with two-factor authentication disabled exist in the enterprise.
  """
  affiliatedUsersWithTwoFactorDisabledExist: Boolean!

  """
  The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise.
  """
  allowPrivateRepositoryForkingSetting: EnterpriseEnabledDisabledSettingValue!

  """
  A list of enterprise organizations configured with the provided private repository forking setting value.
  """
  allowPrivateRepositoryForkingSettingOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for organizations with this setting.
    """
    orderBy: OrganizationOrder = {field: LOGIN, direction: ASC}

    """
    The setting value to find organizations for.
    """
    value: Boolean!
  ): OrganizationConnection!

  """
  The value for the allow private repository forking policy on the enterprise.
  """
  allowPrivateRepositoryForkingSettingPolicyValue: EnterpriseAllowPrivateRepositoryForkingPolicyValue

  """
  The setting value for base repository permissions for organizations in this enterprise.
  """
  defaultRepositoryPermissionSetting: EnterpriseDefaultRepositoryPermissionSettingValue!

  """
  A list of enterprise organizations configured with the provided base repository permission.
  """
  defaultRepositoryPermissionSettingOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for organizations with this setting.
    """
    orderBy: OrganizationOrder = {field: LOGIN, direction: ASC}

    """
    The permission to find organizations for.
    """
    value: DefaultRepositoryPermissionField!
  ): OrganizationConnection!

  """
  A list of domains owned by the enterprise. Visible to enterprise owners or
  enterprise owners' personal access tokens (classic) with admin:enterprise scope.
  """
  domains(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter whether or not the domain is approved.
    """
    isApproved: Boolean = null

    """
    Filter whether or not the domain is verified.
    """
    isVerified: Boolean = null

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for verifiable domains returned.
    """
    orderBy: VerifiableDomainOrder = {field: DOMAIN, direction: ASC}
  ): VerifiableDomainConnection!

  """
  Enterprise Server installations owned by the enterprise.
  """
  enterpriseServerInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Whether or not to only return installations discovered via GitHub Connect.
    """
    connectedOnly: Boolean = false

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Enterprise Server installations returned.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}
  ): EnterpriseServerInstallationConnection!

  """
  A list of failed invitations in the enterprise.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  node: OrganizationInvitation
}

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The host name of the Enterprise Server installation.
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  id: ID!

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The host name of the Enterprise Server installation.
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  id: ID!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  node: OrganizationInvitation
}

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
input EnterpriseServerInstallationOrder {
  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The host name of the Enterprise Server installation.
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  id: ID!

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The host name of the Enterprise Server installation.
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  id: ID!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccount object
  """
  id: ID!

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerUserAccount
}

"""
An email belonging to a user account on an Enterprise Server installation.
"""
type EnterpriseServerUserAccountEmail implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The email address.
  """
  email: String!

  """
  The Node ID of the EnterpriseServerUserAccountEmail object
  """
  id: ID!

  """
  Indicates whether this is the primary email of the associated user account.
  """
  isPrimary: Boolean!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerUserAccountsUpload implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The enterprise to which this upload belongs.
  """
  enterprise: Enterprise!

  """
  The Enterprise Server installation for which this upload was generated.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  id: ID!

  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
input EnterpriseServerInstallationOrder {
  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The host name of the Enterprise Server installation.
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  enterprise: Enterprise!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  id: ID!

  """
  An identifier for the enterprise user account, a login or email address
  """
  login: String!

  """
  The name of the enterprise user account
  """
  name: String

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  id: ID!

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
The possible roles for enterprise membership.
"""
enum EnterpriseUserAccountMembershipRole {
  """
  The user is a member of an organization in the enterprise.
  """
  MEMBER

  """
  The user is an owner of an organization in the enterprise.
  """
  OWNER

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  UNAFFILIATED
}

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  id: ID!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccount object
  """
  id: ID!

"""
The possible roles for enterprise membership.
"""
type EnterpriseServerUserAccountEmail implements Node {
  """
  Identifies the date and time when the object was created.
  """
  OWNER

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  OWNER

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type ExternalIdentity implements Node {
  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  id: ID!

  """
  The email address.
  """
  email: String!

  """
  The Node ID of the EnterpriseServerUserAccountEmail object
  """
  id: ID!

  """
  Indicates whether this is the primary email of the associated user account.
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  id: ID!

  """
  The Node ID of the Environment object
  """
  id: ID!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type ExternalIdentity implements Node {
  """
  The role of the user in the enterprise membership.
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  id: ID!

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  enterprise: Enterprise!

  """
  The Enterprise Server installation for which this upload was generated.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  id: ID!

  """
  The name of the file uploaded.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
input EnterpriseServerInstallationOrder {
  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The host name of the Enterprise Server installation.
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  enterprise: Enterprise!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  Polar funding platform.
  """
  POLAR

  """
  Tidelift funding platform.
  """
  id: ID!

  """
  An identifier for the enterprise user account, a login or email address
  """
  login: String!

  """
  The name of the enterprise user account
  """
  name: String

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  id: ID!

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  enterprise: Enterprise!

    """
    Ordering options for gists returned from the connection
    """
    orderBy: GistOrder
  ): GistConnection!

  """
  The Node ID of the Gist object
  """
  id: ID!

  """
  The Node ID of the EnterpriseServerUserAccount object
  """
  OWNER

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  UNAFFILIATED
}

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  id: ID!

  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  gist: Gist!

  """
  The Node ID of the GistComment object
  """
  id: ID!

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  id: ID!

  """
  Organization invitation for this SCIM-provisioned external identity
  """
  organizationInvitation: OrganizationInvitation

  """
  SAML Identity attributes
  """
  samlIdentity: ExternalIdentitySamlAttributes

  """
  SCIM Identity attributes
  """
  scimIdentity: ExternalIdentityScimAttributes

  """
  User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member.
  """
  user: User
}

  """
  The Node ID of the ExternalIdentity object
  """
  id: ID!

  """
  The Node ID of the ExternalIdentity object
  """
  id: ID!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerUserAccount
}

"""
An email belonging to a user account on an Enterprise Server installation.
"""
type EnterpriseServerUserAccountEmail implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The email address.
  """
  email: String!

  """
  The Node ID of the EnterpriseServerUserAccountEmail object
  """
  id: ID!

  """
  Indicates whether this is the primary email of the associated user account.
  """
  isPrimary: Boolean!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  Polar funding platform.
  """
  POLAR

  """
  Polar funding platform.
  """
  POLAR

  """
  Tidelift funding platform.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerUserAccountsUpload implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The enterprise to which this upload belongs.
  """
  enterprise: Enterprise!

  """
  The Enterprise Server installation for which this upload was generated.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  id: ID!

  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
input EnterpriseServerInstallationOrder {
  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  POLAR

  """
  Tidelift funding platform.
  """
  TIDELIFT
}

  """
  The host name of the Enterprise Server installation.
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  enterprise: Enterprise!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

  """
  Polar funding platform.
  """
  POLAR

  """
  Polar funding platform.
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  id: ID!

  """
  Polar funding platform.
  """
  POLAR

  """
  Tidelift funding platform.
  """
  TIDELIFT
}

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  enterprise: Enterprise!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: GistOrder
  ): GistConnection!

  """
  The Node ID of the Gist object
  """
  id: ID!

  """
  The Node ID of the Gist object
  """
  id: ID!

  """
  The Node ID of the Gist object
  """
  id: ID!

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  id: ID!

  """
  An identifier for the enterprise user account, a login or email address
  """
  login: String!

  """
  The name of the enterprise user account
  """
  name: String

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: GistOrder
  ): GistConnection!

  """
  The Node ID of the Gist object
  """
  id: ID!

  """
  Identifies if the gist is a fork.
  """
  isFork: Boolean!

  """
  Whether the gist is public or not.
  """
  isPublic: Boolean!

  """
  The gist name.
  """
  name: String!

  """
  The gist owner.
  """
  owner: RepositoryOwner

  """
  The Node ID of the Gist object
  """
  id: ID!

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
The possible roles for enterprise membership.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  OWNER

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  UNAFFILIATED
}

  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  gist: Gist!

  """
  The Node ID of the GistComment object
  """
  gist: Gist!

  """
  The Node ID of the GistComment object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  id: ID!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

"""
The possible roles for enterprise membership.
"""
type EnterpriseServerUserAccountEmail implements Node {
  """
  Identifies the date and time when the object was created.
  """
  OWNER

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  UNAFFILIATED
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the Ref associated with the `head_ref_deleted` event.
  """
  headRef: Ref

  """
  Identifies the name of the Ref associated with the `head_ref_deleted` event.
  """
  headRefName: String!

  """
  The Node ID of the HeadRefDeletedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type ExternalIdentity implements Node {
  """
  The GUID for this identity
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefForcePushedEvent object
  """
  id: ID!

  """
  Organization invitation for this SCIM-provisioned external identity
  """
  organizationInvitation: OrganizationInvitation

  """
  The direction in which to order environments by the specified field.
  """
  gist: Gist!

  """
  The Node ID of the GistComment object
  """
  id: ID!

  """
  The Node ID of the GistComment object
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefRestoredEvent object
  """
  id: ID!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  direction: OrderDirection!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type ExternalIdentity implements Node {
  """
  The GUID for this identity
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  id: ID!

  """
  Organization invitation for this SCIM-provisioned external identity
  """
  organizationInvitation: OrganizationInvitation

  """
  The email address.
  """
  email: String!

  """
  The Node ID of the EnterpriseServerUserAccountEmail object
  """
  id: ID!

  """
  Indicates whether this is the primary email of the associated user account.
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  id: ID!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  createdAt: DateTime!

  """
  The Node ID of the IpAllowListEntry object
  """
  id: ID!

  """
  IP addresses that service hooks are sent from
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type ExternalIdentity implements Node {
  """
  The role of the user in the enterprise membership.
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  id: ID!

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerUserAccountsUpload implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The enterprise to which this upload belongs.
  """
  enterprise: Enterprise!

  """
  The Enterprise Server installation for which this upload was generated.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  id: ID!

  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

"""
An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
"""
type Issue implements Assignable & Closable & Comment & Deletable & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & SubscribableThread & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  Patreon funding platform.
  """
  PATREON

  """
  Polar funding platform.
  """
  POLAR

  """
  Polar funding platform.
  """
  POLAR

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  POLAR

  """
  Tidelift funding platform.
  """
  cursor: String!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
input EnterpriseServerInstallationOrder {
  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The host name of the Enterprise Server installation.
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  id: ID!

  """
  The Node ID of the GitObject object
  """
  id: ID!

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The hovercard information for this issue
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the Issue object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The enterprise in which this user account exists.
  """
  enterprise: Enterprise!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: GistOrder
  ): GistConnection!

  """
  Branches linked to this issue.
  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

  """
  `true` if the object is locked
  """
  id: ID!

  """
  The Node ID of the Gist object
  """
  id: ID!

  """
  The Node ID of the Gist object
  """
  id: ID!

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  enterprise: Enterprise!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  login: String!

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  The Node ID of the HeadRefDeletedEvent object
  """
  id: ID!

  """
  The Node ID of the EnterpriseServerUserAccount object
  """
  OWNER

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  UNAFFILIATED
}

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  gist: Gist!

  """
  The Node ID of the GistComment object
  """
  gist: Gist!

  """
  The Node ID of the GistComment object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The Node ID of the GistComment object
  """
  headRefName: String!

  """
  The Node ID of the HeadRefDeletedEvent object
  """
  id: ID!

  """
  The Node ID of the HeadRefForcePushedEvent object
  """
  id: ID!

  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  databaseId: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  id: ID!

  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefForcePushedEvent object
  """
  id: ID!

  """
  The Node ID of the HeadRefRestoredEvent object
  """
  id: ID!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  createdAt: DateTime!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  id: ID!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  field: EnvironmentOrderField!
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  viewerSubscription: SubscriptionState

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  headRefName: String!

  """
  The Node ID of the HeadRefDeletedEvent object
  """
  id: ID!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  id: ID!

  """
  Organization invitation for this SCIM-provisioned external identity
  """
  organizationInvitation: OrganizationInvitation

  """
  SAML Identity attributes
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefForcePushedEvent object
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the IssueComment object
  """
  id: ID!

  """
  SCIM Identity attributes
  """
  scimIdentity: ExternalIdentityScimAttributes

  """
  User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member.
  """
  user: User
}

"""
An attribute for the External Identity attributes collection
"""
type ExternalIdentityAttribute {
  """
  The attribute metadata as JSON
  """
  metadata: String

  """
  The Node ID of the ExternalIdentity object
  """
  createdAt: DateTime!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  id: ID!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerUserAccount
}

"""
An email belonging to a user account on an Enterprise Server installation.
"""
type EnterpriseServerUserAccountEmail implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the IpAllowListEntry object
  """
  createdAt: DateTime!

  """
  The Node ID of the IpAllowListEntry object
  """
  id: ID!

  """
  The email address.
  """
  email: String!

  """
  The Node ID of the EnterpriseServerUserAccountEmail object
  """
  id: ID!

  """
  Indicates whether this is the primary email of the associated user account.
  """
  isPrimary: Boolean!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type Issue implements Assignable & Closable & Comment & Deletable & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & SubscribableThread & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  The Enterprise Server installation for which this upload was generated.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

"""
An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
"""
type Issue implements Assignable & Closable & Comment & Deletable & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & SubscribableThread & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  createdAt: DateTime!

  """
  The Node ID of the IpAllowListEntry object
  """
  id: ID!

  """
  The Node ID of the GitObject object
  """
  id: ID!

  """
  The Node ID of the GitObject object
  """
  id: ID!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  id: ID!

  """
  The name of the file uploaded.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  POLAR

  """
  Tidelift funding platform.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
input EnterpriseServerInstallationOrder {
  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The hovercard information for this issue
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the Issue object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Indicates whether or not this issue is currently pinned to the repository issues list
  """
  isPinned: Boolean

  """
  Is this issue read by the viewer
  """
  isReadByViewer: Boolean

  """
  The Node ID of the Issue object
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The suggested assignees.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The suggested issue body.
  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

  """
  The template filename.
  """
  filename: String!

  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The template name.
  """
  locked: Boolean!

  """
  Identifies the milestone associated with the issue.
  """
  hostName: String!

"""
An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
"""
type Issue implements Assignable & Closable & Comment & Deletable & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & SubscribableThread & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  The Node ID of the EnterpriseServerInstallation object
  """
  enterprise: Enterprise!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

  """
  Polar funding platform.
  """
  POLAR

  """
  Branches linked to this issue.
  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

  """
  `true` if the object is locked
  """
  POLAR

  """
  Polar funding platform.
  """
  POLAR

  """
  Polar funding platform.
  """
  POLAR

  """
  Tidelift funding platform.
  """
  TIDELIFT
}

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  closed: Boolean!

  """
  Find a project by number.
  """
  id: ID!

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

  """
  `true` if the object is locked
  """
  locked: Boolean!

  """
  Identifies the milestone associated with the issue.
  """
  milestone: Milestone

  """
  Identifies the issue number.
  """
  number: Int!

  """
  A list of Users that are participating in the Issue conversation.
  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

  """
  `true` if the object is locked
  """
  locked: Boolean!

  """
  Identifies the milestone associated with the issue.
  """
  milestone: Milestone

  """
  Identifies the issue number.
  """
  number: Int!

  """
  A list of Users that are participating in the Issue conversation.
  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

  """
  Find a project by number.
  """
  isPublic: Boolean!

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  The Node ID of the GistComment object
  """
  gist: Gist!

  """
  The Node ID of the GistComment object
  """
  gist: Gist!

  """
  The Node ID of the GistComment object
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefForcePushedEvent object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  Identifies the date and time when the object was last updated.
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefRestoredEvent object
  """
  id: ID!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanDelete: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerSubscription: SubscriptionState

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  viewerSubscription: SubscriptionState

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  description: String

  """
  The Node ID of the Label object
  """
  id: ID!

  """
  Indicates if the object can be reopened by the viewer.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the IssueComment object
  """
  id: ID!

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the IssueComment object
  """
  id: ID!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  viewerSubscription: SubscriptionState

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  viewerSubscription: SubscriptionState

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the IssueComment object
  """
  id: ID!

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  viewerSubscription: SubscriptionState

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the IssueComment object
  """
  id: ID!

  """
  The Node ID of the ExternalIdentity object
  """
  id: ID!

  """
  Organization invitation for this SCIM-provisioned external identity
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the IssueComment object
  """
  editor: Actor

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the IssueComment object
  """
  createdAt: DateTime!

  """
  The Node ID of the LabeledEvent object
  """
  id: ID!

  """
  SAML Identity attributes
  """
  samlIdentity: ExternalIdentitySamlAttributes

  """
  SCIM Identity attributes
  """
  scimIdentity: ExternalIdentityScimAttributes

  """
  User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member.
  """
  user: User
}

"""
An attribute for the External Identity attributes collection
"""
type ExternalIdentityAttribute {
  """
  The attribute metadata as JSON
  """
  metadata: String

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  color: String

  """
  The Node ID of the Language object
  """
  id: ID!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerUserAccount
}

"""
An email belonging to a user account on an Enterprise Server installation.
"""
type IssueTemplate {
  """
  The template purpose.
  """
  about: String

  """
  The suggested assignees.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The suggested issue body.
  """
  body: String

  """
  The template filename.
  """
  filename: String!

  """
  The suggested issue labels
  """
  hidden: Boolean!

  """
  The Node ID of the License object
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The template name.
  """
  createdAt: DateTime!

  """
  The email address.
  """
  createdAt: DateTime!

  """
  The Node ID of the IpAllowListEntry object
  """
  id: ID!

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  id: ID!

  """
  Indicates whether this is the primary email of the associated user account.
  """
  isPrimary: Boolean!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  commitUrl: URI!

"""
Autogenerated input type of LinkProjectV2ToRepository
"""
input LinkProjectV2ToRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to link to the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of LinkProjectV2ToTeam
"""
input LinkProjectV2ToTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to link to the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is linked to
  """
  team: Team
}

"""
Autogenerated input type of LinkRepositoryToProject
"""
input LinkRepositoryToProjectInput {
  """
  The Node ID of the GitObject object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  The Node ID of the LinkedBranch object
  """
  id: ID!

  """
  The branch's ref.
  """
  ref: Ref
}

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  A list of edges.
  """
  edges: [LinkedBranchEdge]

  """
  A list of nodes.
  """
  nodes: [LinkedBranch]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: LinkedBranch
}

"""
Autogenerated input type of LockLockable
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  The suggested assignees.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The suggested issue body.
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  The template filename.
  """
  filename: String!

  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The template name.
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  nodes: [EnterpriseServerInstallation]

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type Issue implements Assignable & Closable & Comment & Deletable & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & SubscribableThread & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The enterprise to which this upload belongs.
  """
  createdAt: DateTime!

  """
  The Node ID of the LockedEvent object
  """
  id: ID!

  """
  The Enterprise Server installation for which this upload was generated.
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  id: ID!

  """
  The Node ID of the GitObject object
  """
  id: ID!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  id: ID!

  """
  A cursor for use in pagination.
  """
  commitUrl: URI!

  """
  The suggested assignees.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The suggested issue body.
  """
  email: String

  """
  The Node ID of the Mannequin object
  """
  id: ID!

  """
  The template filename.
  """
  filename: String!

  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The template name.
  """
  node: EnterpriseServerInstallation

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  A list of edges.
  """
  edges: [MannequinEdge]

  """
  A list of nodes.
  """
  nodes: [Mannequin]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Mannequin
}

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order mannequins by.
  """
  field: MannequinOrderField!
}

"""
Properties by which mannequins can be ordered.
"""
enum MannequinOrderField {
  """
  Order mannequins why when they were created.
  """
  CREATED_AT

  """
  Order mannequins alphabetically by their source login.
  """
  LOGIN
}

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  description: String

  """
  The Node ID of the Label object
  """
  id: ID!

"""
Ordering options for Enterprise Server installation connections.
"""
input EnterpriseServerInstallationOrder {
  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The suggested assignees.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
input MarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to mark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of MarkPullRequestReadyForReview
"""
input MarkPullRequestReadyForReviewInput {
  """
  The suggested issue body.
  """
  fullDatabaseId: BigInt

  """
  The template filename.
  """
  filename: String!

  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The template name.
  """
  fullDatabaseId: BigInt

  """
  The hovercard information for this issue
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the Issue object
  """
  id: ID!

  """
  The suggested assignees.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The suggested issue body.
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the MarkedAsDuplicateEvent object
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The template filename.
  """
  filename: String!

  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The template name.
  """
  howItWorks: String

  """
  The Node ID of the MarketplaceCategory object
  """
  id: ID!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  enterprise: Enterprise!

  """
  The suggested assignees.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  A brief description of this label.
  """
  description: String

  """
  The Node ID of the Label object
  """
  id: ID!

  """
  The Node ID of the Label object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The suggested issue body.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The template filename.
  """
  filename: String!

  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The template name.
  """
  lastEditedAt: DateTime

  """
  Branches linked to this issue.
  """
  createdAt: DateTime!

  """
  The Node ID of the LabeledEvent object
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

"""
Represents a given language found in repositories.
"""
type Language implements Node {
  """
  The color defined for the current language.
  """
  color: String

  """
  The Node ID of the Language object
  """
  id: ID!

  """
  `true` if the object is locked
  """
  locked: Boolean!

  """
  Identifies the milestone associated with the issue.
  """
  milestone: Milestone

  """
  Identifies the issue number.
  """
  number: Int!

  """
  A list of Users that are participating in the Issue conversation.
  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

  """
  `true` if the object is locked
  """
  locked: Boolean!

  """
  Identifies the milestone associated with the issue.
  """
  milestone: Milestone

  """
  Polar funding platform.
  """
  howItWorksHTML: HTML!

  """
  The Node ID of the MarketplaceListing object
  """
  id: ID!

  """
  Branches linked to this issue.
  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

  """
  `true` if the object is locked
  """
  POLAR

  """
  Polar funding platform.
  """
  createdAt: DateTime!

  """
  The Node ID of the LabeledEvent object
  """
  id: ID!

  """
  The Node ID of the LabeledEvent object
  """
  hidden: Boolean!

  """
  The Node ID of the License object
  """
  id: ID!

  """
  Polar funding platform.
  """
  color: String

  """
  The Node ID of the Language object
  """
  id: ID!

  """
  Tidelift funding platform.
  """
  TIDELIFT
}

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  The Node ID of the HeadRefDeletedEvent object
  """
  color: String

  """
  The Node ID of the Language object
  """
  id: ID!

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  UNAFFILIATED
}

"""
Autogenerated input type of LinkProjectV2ToRepository
"""
input LinkProjectV2ToRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to link to the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of LinkProjectV2ToTeam
"""
input LinkProjectV2ToTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to link to the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  hidden: Boolean!

  """
  The Node ID of the License object
  """
  id: ID!

  """
  The team the project is linked to
  """
  team: Team
}

"""
Autogenerated input type of LinkRepositoryToProject
"""
input LinkRepositoryToProjectInput {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  description: String

  """
  The Node ID of the Label object
  """
  id: ID!

  """
  The Node ID of the Environment object
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefForcePushedEvent object
  """
  headRefName: String!

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  The Node ID of the LinkedBranch object
  """
  id: ID!

  """
  The branch's ref.
  """
  ref: Ref
}

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  A list of edges.
  """
  edges: [LinkedBranchEdge]

  """
  A list of nodes.
  """
  nodes: [LinkedBranch]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

"""
Autogenerated input type of LinkProjectV2ToRepository
"""
input LinkProjectV2ToRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to link to the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of LinkProjectV2ToTeam
"""
input LinkProjectV2ToTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to link to the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is linked to
  """
  team: Team
}

"""
Autogenerated input type of LinkRepositoryToProject
"""
input LinkRepositoryToProjectInput {
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: LinkedBranch
}

"""
Represents a member feature request notification
"""
type MemberFeatureRequestNotification implements Node {
  """
  Represents member feature request body containing organization name and the number of feature requests
  """
  body: String!

  """
  The Node ID of the MemberFeatureRequestNotification object
  """
  id: ID!

  """
  Represents member feature request notification title
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Entities that have members who can set status messages.
"""
input LockLockableInput {
  """
  The Node ID of the HeadRefDeletedEvent object
  """
  id: ID!

  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  The Node ID of the LinkedBranch object
  """
  id: ID!

  """
  The branch's ref.
  """
  ref: Ref
}

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  A list of edges.
  """
  edges: [LinkedBranchEdge]

  """
  A list of nodes.
  """
  nodes: [LinkedBranch]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: LinkedBranch
}

"""
Autogenerated input type of LockLockable
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

"""
The possible roles for enterprise membership.
"""
type EnterpriseServerUserAccountEmail implements Node {
  """
  Identifies the date and time when the object was created.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposClearAuditEntry object
  """
  id: ID!

  """
  The Node ID of the HeadRefForcePushedEvent object
  """
  id: ID!

  """
  The Node ID of the HeadRefRestoredEvent object
  """
  hidden: Boolean!

  """
  The Node ID of the License object
  """
  createdAt: DateTime!

  """
  The Node ID of the LockedEvent object
  """
  id: ID!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  UNAFFILIATED
}

"""
Properties by which environments connections can be ordered
"""
type HeadRefRestoredEvent implements Node {
  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  createdAt: DateTime!

  """
  The Node ID of the LockedEvent object
  """
  id: ID!

  """
  Can user react to this subject
  """
  email: String

  """
  The Node ID of the Mannequin object
  """
  id: ID!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  A list of edges.
  """
  edges: [MannequinEdge]

  """
  A list of nodes.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposDisableAuditEntry object
  """
  id: ID!

  """
  The Node ID of the Mannequin object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Mannequin
}

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  A list of edges.
  """
  edges: [MannequinEdge]

  """
  A list of nodes.
  """
  nodes: [Mannequin]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Mannequin
}

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order mannequins by.
  """
  field: MannequinOrderField!
}

"""
Properties by which mannequins can be ordered.
"""
enum MannequinOrderField {
  """
  Order mannequins why when they were created.
  """
  CREATED_AT

  """
  Order mannequins alphabetically by their source login.
  """
  LOGIN
}

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
input MannequinOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order mannequins by.
  """
  field: MannequinOrderField!
}

"""
Properties by which mannequins can be ordered.
"""
enum MannequinOrderField {
  """
  Order mannequins why when they were created.
  """
  CREATED_AT

  """
  Order mannequins alphabetically by their source login.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposEnableAuditEntry object
  """
  id: ID!

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
input LinkProjectV2ToRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to link to the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
input MarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to mark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of MarkPullRequestReadyForReview
"""
input LinkProjectV2ToTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to link to the project.
  """
  databaseId: Int

  """
  The Node ID of the MentionedEvent object
  """
  id: ID!
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is linked to
  """
  team: Team
}

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
input MarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to mark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the MarkedAsDuplicateEvent object
  """
  id: ID!

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of MarkPullRequestReadyForReview
"""
input LinkRepositoryToProjectInput {
  """
  The Node ID of the LabeledEvent object
  """
  howItWorks: String

  """
  The Node ID of the MarketplaceCategory object
  """
  id: ID!

"""
The possible default commit messages for merges.
"""
enum MergeCommitMessage {
  """
  Default to a blank commit message.
  """
  BLANK

  """
  Default to the pull request's body.
  """
  PR_BODY

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
The possible default commit titles for merges.
"""
enum MergeCommitTitle {
  """
  Default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
  """
  MERGE_MESSAGE

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
Autogenerated input type of MergePullRequest
"""
input MergePullRequestInput {
  """
  The Node ID of the HeadRefRestoredEvent object
  """
  id: ID!

  """
  Order environments by name.
  """
  viewerSubscription: SubscriptionState

  """
  Identifies the viewer's thread subscription form action.
  """
  color: String

  """
  The Node ID of the Language object
  """
  id: ID!

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  The Node ID of the LinkedBranch object
  """
  id: ID!

  """
  The branch's ref.
  """
  ref: Ref
}

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  A list of edges.
  """
  edges: [LinkedBranchEdge]

  """
  A list of nodes.
  """
  nodes: [LinkedBranch]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the MarkedAsDuplicateEvent object
  """
  id: ID!

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: LinkedBranch
}

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  """
  The configuration for this merge queue
  """
  configuration: MergeQueueConfiguration

  """
  The entries in the queue
  """
  entries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeQueueEntryConnection

  """
  The Node ID of the MergeQueue object
  """
  id: ID!

  """
  The estimated time in seconds until a newly added entry would be merged
  """
  nextEntryEstimatedTimeToMerge: Int

  """
  The repository this merge queue belongs to
  """
  repository: Repository

  """
  The HTTP path for this merge queue
  """
  resourcePath: URI!

  """
  The HTTP URL for this merge queue
  """
  url: URI!
}

"""
Configuration for a MergeQueue
"""
type MergeQueueConfiguration {
  """
  The amount of time in minutes to wait for a check response before considering it a failure.
  """
  checkResponseTimeout: Int

  """
  The maximum number of entries to build at once.
  """
  maximumEntriesToBuild: Int

  """
  The maximum number of entries to merge at once.
  """
  maximumEntriesToMerge: Int

  """
  The merge method to use for this queue.
  """
  mergeMethod: PullRequestMergeMethod

  """
  The strategy to use when merging entries.
  """
  mergingStrategy: MergeQueueMergingStrategy

  """
  The minimum number of entries required to merge at once.
  """
  minimumEntriesToMerge: Int

  """
  The amount of time in minutes to wait before ignoring the minumum number of
  entries in the queue requirement and merging a collection of entries
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Entries in a MergeQueue
"""
type MergeQueueEntry implements Node {
  """
  The base commit for this entry
  """
  baseCommit: Commit

  """
  The date and time this entry was added to the merge queue
  """
  enqueuedAt: DateTime!

  """
  The actor that enqueued this entry
  """
  enqueuer: Actor!

  """
  The estimated time in seconds until this entry will be merged
  """
  estimatedTimeToMerge: Int

  """
  The head commit for this entry
  """
  headCommit: Commit

  """
  The Node ID of the MergeQueueEntry object
  """
  id: ID!

  """
  Whether this pull request should jump the queue
  """
  jump: Boolean!

  """
  The merge queue that this entry belongs to
  """
  mergeQueue: MergeQueue

  """
  The position of this entry in the queue
  """
  position: Int!

  """
  The pull request that will be added to a merge group
  """
  pullRequest: PullRequest

  """
  Does this pull request need to be deployed on its own
  """
  solo: Boolean!

  """
  The state of this entry in the queue
  """
  state: MergeQueueEntryState!
}

"""
The connection type for MergeQueueEntry.
"""
type MergeQueueEntryConnection {
  """
  A list of edges.
  """
  edges: [MergeQueueEntryEdge]

  """
  A list of nodes.
  """
  nodes: [MergeQueueEntry]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MergeQueueEntryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MergeQueueEntry
}

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  The entry is currently waiting for checks to pass.
  """
  AWAITING_CHECKS

  """
  The entry is currently locked.
  """
  LOCKED

  """
  The entry is currently mergeable.
  """
  MERGEABLE

  """
  The entry is currently queued.
  """
  QUEUED

  """
  The entry is currently unmergeable.
  """
  UNMERGEABLE
}

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  Entries only allowed to merge if they are passing.
  """
  ALLGREEN

  """
  Failing Entires are allowed to merge if they are with a passing entry.
  """
  HEADGREEN
}

"""
Detailed status information about a pull request merge.
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  viewerSubscription: SubscriptionState

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  description: String

  """
  The Node ID of the Label object
  """
  howItWorks: String

  """
  The Node ID of the MarketplaceCategory object
  """
  howItWorksHTML: HTML!

  """
  The Node ID of the MarketplaceListing object
  """
  id: ID!

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type ExternalIdentity implements Node {
  """
  The GUID for this identity
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  headRefName: String!

  """
  The Node ID of the HeadRefDeletedEvent object
  """
  description: String

  """
  The Node ID of the Label object
  """
  id: ID!

  """
  Organization invitation for this SCIM-provisioned external identity
  """
  organizationInvitation: OrganizationInvitation

  """
  SAML Identity attributes
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  gist: Gist!

  """
  The Node ID of the GistComment object
  """
  createdAt: DateTime!

  """
  The Node ID of the MergedEvent object
  """
  id: ID!

  """
  Identifies the primary key from the database as a BigInt.
  """
  hidden: Boolean!

  """
  The Node ID of the License object
  """
  id: ID!

  """
  The Node ID of the IssueComment object
  """
  id: ID!

  """
  The Node ID of the GistComment object
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

"""
Represents a GitHub Enterprise Importer (GEI) migration.
"""
interface Migration {
  """
  The migration flag to continue on error.
  """
  id: ID!

  """
  Identifies the primary key from the database as a BigInt.
  """
  email: String

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the Migration object
  """
  id: ID!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  howItWorksHTML: HTML!

  """
  The migration source.
  """
  id: ID!

  """
  The Node ID of the HeadRefForcePushedEvent object
  """
  id: ID!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  id: ID!

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
A GitHub Enterprise Importer (GEI) migration source.
"""
type MigrationSource implements Node {
  """
  The Node ID of the MigrationSource object
  """
  id: ID!

  """
  The migration source name.
  """
  nodes: [Mannequin]

  """
  The migration source type.
  """
  pageInfo: PageInfo!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  totalCount: Int!
}

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
type MannequinEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Mannequin
}

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  """
  A GitHub Migration API source.
  """
  GITHUB_ARCHIVE
}

"""
The GitHub Enterprise Importer (GEI) migration state.
"""
enum EnvironmentOrderField {
  """
  The migration has failed.
  """
  actor: Actor

  """
  The migration has invalid credentials.
  """
  createdAt: DateTime!

  """
  The migration is in progress.
  """
  id: ID!

  """
  The migration has not started.
  """
  pullRequest: PullRequest!
}

"""
Autogenerated input type of LinkProjectV2ToRepository
"""
input LinkProjectV2ToRepositoryInput {
  """
  The migration needs to have its credentials validated.
  """
  clientMutationId: String

  """
  The migration has been queued.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The migration has succeeded.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  clientMutationId: String

  """
  The repository the project is linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
input MarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to mark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  dueOn: DateTime

  """
  The Node ID of the Milestone object
  """
  id: ID!

"""
Represents a member feature request notification
"""
type MemberFeatureRequestNotification implements Node {
  """
  Represents member feature request body containing organization name and the number of feature requests
  """
  body: String!

  """
  The Node ID of the MemberFeatureRequestNotification object
  """
  id: ID!

  """
  Represents member feature request notification title
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Entities that have members who can set status messages.
"""
input LinkProjectV2ToTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to link to the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is linked to
  """
  team: Team
}

"""
Autogenerated input type of LinkRepositoryToProject
"""
type Hovercard {
  """
  Each of the contexts for this hovercard
  """
  contexts: [HovercardContext!]!
}

"""
Ordering options for environments
"""
input Environments {
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  direction: OrderDirection!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  createdAt: DateTime!

  """
  The Node ID of the LabeledEvent object
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the MarkedAsDuplicateEvent object
  """
  id: ID!

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type ExternalIdentity implements Node {
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  howItWorks: String

  """
  The Node ID of the MarketplaceCategory object
  """
  id: ID!

  """
  Organization invitation for this SCIM-provisioned external identity
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposClearAuditEntry object
  """
  id: ID!

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  The Node ID of the LinkedBranch object
  """
  color: String

  """
  The Node ID of the Language object
  """
  id: ID!

  """
  The branch's ref.
  """
  url: URI!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!
}

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  A list of edges.
  """
  edges: [LinkedBranchEdge]

  """
  A list of nodes.
  """
  nodes: [LinkedBranch]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: LinkedBranch
}

"""
Represents a member feature request notification
"""
type MemberFeatureRequestNotification implements Node {
  """
  Represents member feature request body containing organization name and the number of feature requests
  """
  body: String!

  """
  The Node ID of the MemberFeatureRequestNotification object
  """
  id: ID!

  """
  Represents member feature request notification title
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Entities that have members who can set status messages.
"""
input LockLockableInput {
  """
  The email address.
  """
  createdAt: DateTime!

  """
  The Node ID of the IpAllowListEntry object
  """
  createdAt: DateTime!

  """
  The Node ID of the LabeledEvent object
  """
  id: ID!

  """
  The Node ID of the EnterpriseServerUserAccountEmail object
  """
  id: ID!

  """
  Indicates whether this is the primary email of the associated user account.
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  color: String

  """
  The Node ID of the Language object
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposDisableAuditEntry object
  """
  createdAt: DateTime!

  """
  The Node ID of the MilestonedEvent object
  """
  id: ID!

  """
  The Node ID of the License object
  """
  howItWorksHTML: HTML!

  """
  The Node ID of the MarketplaceListing object
  """
  id: ID!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  updatedAt: DateTime!

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposClearAuditEntry object
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  createdAt: DateTime!

  """
  The Node ID of the IpAllowListEntry object
  """
  createdAt: DateTime!

"""
Autogenerated input type of LinkProjectV2ToRepository
"""
input LinkProjectV2ToRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to link to the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is linked to.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposEnableAuditEntry object
  """
  id: ID!

"""
Autogenerated input type of LinkProjectV2ToTeam
"""
input LinkProjectV2ToTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to link to the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is linked to
  """
  team: Team
}

"""
Autogenerated input type of LinkRepositoryToProject
"""
input LinkRepositoryToProjectInput {
  """
  The Node ID of the LockedEvent object
  """
  id: ID!

  """
  Whether the entry is currently active.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposDisableAuditEntry object
  """
  databaseId: Int

  """
  The Node ID of the MovedColumnsInProjectEvent object
  """
  id: ID!

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type ExternalIdentity implements Node {
  """
  The role of the user in the enterprise membership.
  """
  hidden: Boolean!

  """
  The Node ID of the License object
  """
  id: ID!

  """
  The Node ID of the ExternalIdentity object
  """
  databaseId: Int

  """
  The Node ID of the MentionedEvent object
  """
  id: ID!

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  The Node ID of the LinkedBranch object
  """
  id: ID!

  """
  Abort a repository migration queued or in progress.
  """
  abortRepositoryMigration(
    """
    Parameters for AbortRepositoryMigration
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

  """
  Accepts a pending invitation for a user to become an administrator of an enterprise.
  """
  ref: Ref
}

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  A list of edges.
  """
  edges: [LinkedBranchEdge]

  """
  A list of nodes.
  """
  nodes: [LinkedBranch]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  Adds enterprise members to an organization within the enterprise.
  """
  addEnterpriseOrganizationMember(
    """
    Parameters for AddEnterpriseOrganizationMember
    """
    input: AddEnterpriseOrganizationMemberInput!
  ): AddEnterpriseOrganizationMemberPayload

  """
  Adds a support entitlement to an enterprise member.
  """
  node: LinkedBranch
}

"""
The possible default commit messages for merges.
"""
enum MergeCommitMessage {
  """
  Default to a blank commit message.
  """
  BLANK

  """
  Default to the pull request's body.
  """
  PR_BODY

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
The possible default commit titles for merges.
"""
enum MergeCommitTitle {
  """
  Default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
  """
  addProjectV2DraftIssue(
    """
    Parameters for AddProjectV2DraftIssue
    """
    input: AddProjectV2DraftIssueInput!
  ): AddProjectV2DraftIssuePayload

  """
  A list of nodes.
  """
  email: String

  """
  The Node ID of the Mannequin object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type Issue implements Assignable & Closable & Comment & Deletable & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & SubscribableThread & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Adds a reply to an existing Pull Request Review Thread.
  """
  addPullRequestReviewThreadReply(
    """
    Parameters for AddPullRequestReviewThreadReply
    """
    input: AddPullRequestReviewThreadReplyInput!
  ): AddPullRequestReviewThreadReplyPayload

  """
  Adds a reaction to a subject.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  A list of edges.
  """
  edges: [MannequinEdge]

  """
  A list of nodes.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposEnableAuditEntry object
  """
  id: ID!

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  """
  The configuration for this merge queue
  """
  configuration: MergeQueueConfiguration

  """
  Archives a ProjectV2Item
  """
  archiveProjectV2Item(
    """
    Parameters for ArchiveProjectV2Item
    """
    input: ArchiveProjectV2ItemInput!
  ): ArchiveProjectV2ItemPayload

  """
  Marks a repository as archived.
  """
  entries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeQueueEntryConnection

  """
  The Node ID of the MergeQueue object
  """
  id: ID!

  """
  This mutation clears the value of a field for an item in a Project. Currently
  only text, number, date, assignees, labels, single-select, iteration and
  milestone fields are supported.
  """
  clearProjectV2ItemFieldValue(
    """
    Parameters for ClearProjectV2ItemFieldValue
    """
    input: ClearProjectV2ItemFieldValueInput!
  ): ClearProjectV2ItemFieldValuePayload

  """
  Creates a new project by cloning configuration from an existing project.
  """
  nextEntryEstimatedTimeToMerge: Int

  """
  The repository this merge queue belongs to
  """
  repository: Repository

  """
  Close a discussion.
  """
  closeDiscussion(
    """
    Parameters for CloseDiscussion
    """
    input: CloseDiscussionInput!
  ): CloseDiscussionPayload

  """
  Close an issue.
  """
  resourcePath: URI!

  """
  The HTTP URL for this merge queue
  """
  url: URI!
}

"""
Configuration for a MergeQueue
"""
type MergeQueueConfiguration {
  """
  The amount of time in minutes to wait for a check response before considering it a failure.
  """
  checkResponseTimeout: Int

  """
  The maximum number of entries to build at once.
  """
  maximumEntriesToBuild: Int

  """
  Copy a project.
  """
  copyProjectV2(
    """
    Parameters for CopyProjectV2
    """
    input: CopyProjectV2Input!
  ): CopyProjectV2Payload

  """
  Invites a user to claim reattributable data
  """
  createAttributionInvitation(
    """
    Parameters for CreateAttributionInvitation
    """
    input: CreateAttributionInvitationInput!
  ): CreateAttributionInvitationPayload

  """
  Create a new branch protection rule
  """
  maximumEntriesToMerge: Int

  """
  The merge method to use for this queue.
  """
  mergeMethod: PullRequestMergeMethod

  """
  The strategy to use when merging entries.
  """
  mergingStrategy: MergeQueueMergingStrategy

  """
  The minimum number of entries required to merge at once.
  """
  minimumEntriesToMerge: Int

  """
  The amount of time in minutes to wait before ignoring the minumum number of
  entries in the queue requirement and merging a collection of entries
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Entries in a MergeQueue
"""
type MergeQueueEntry implements Node {
  """
  The base commit for this entry
  """
  baseCommit: Commit

  """
  The date and time this entry was added to the merge queue
  """
  enqueuedAt: DateTime!

  """
  The actor that enqueued this entry
  """
  enqueuer: Actor!

  """
  Creates an organization as part of an enterprise account. A personal access
  token used to create an organization is implicitly permitted to update the
  organization it created, if the organization is part of an enterprise that has
  SAML enabled or uses Enterprise Managed Users. If the organization is not part
  of such an enterprise, and instead has SAML enabled for it individually, the
  token will then require SAML authorization to continue working against that organization.
  """
  estimatedTimeToMerge: Int

  """
  The head commit for this entry
  """
  headCommit: Commit

  """
  The Node ID of the MergeQueueEntry object
  """
  id: ID!

  """
  Whether this pull request should jump the queue
  """
  jump: Boolean!

  """
  The merge queue that this entry belongs to
  """
  mergeQueue: MergeQueue

  """
  Create a branch linked to an issue.
  """
  createLinkedBranch(
    """
    Parameters for CreateLinkedBranch
    """
    input: CreateLinkedBranchInput!
  ): CreateLinkedBranchPayload

  """
  Creates a GitHub Enterprise Importer (GEI) migration source.
  """
  position: Int!

  """
  The pull request that will be added to a merge group
  """
  pullRequest: PullRequest

  """
  Does this pull request need to be deployed on its own
  """
  solo: Boolean!

  """
  Create a new project field.
  """
  createProjectV2Field(
    """
    Parameters for CreateProjectV2Field
    """
    input: CreateProjectV2FieldInput!
  ): CreateProjectV2FieldPayload

  """
  Create a new pull request
  """
  state: MergeQueueEntryState!
}

"""
The connection type for MergeQueueEntry.
"""
type MergeQueueEntryConnection {
  """
  A list of edges.
  """
  edges: [MergeQueueEntryEdge]

  """
  A list of nodes.
  """
  nodes: [MergeQueueEntry]

  """
  Create a repository ruleset
  """
  createRepositoryRuleset(
    """
    Parameters for CreateRepositoryRuleset
    """
    input: CreateRepositoryRulesetInput!
  ): CreateRepositoryRulesetPayload

  """
  Create a GitHub Sponsors profile to allow others to sponsor you or your organization.
  """
  createSponsorsListing(
    """
    Parameters for CreateSponsorsListing
    """
    input: CreateSponsorsListingInput!
  ): CreateSponsorsListingPayload

  """
  Create a new payment tier for your GitHub Sponsors profile.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MergeQueueEntryEdge {
  """
  Make many one-time sponsorships for different sponsorable users or
  organizations at once. Can only sponsor those who have a public GitHub
  Sponsors profile.
  """
  createSponsorships(
    """
    Parameters for CreateSponsorships
    """
    input: CreateSponsorshipsInput!
  ): CreateSponsorshipsPayload

  """
  Creates a new team discussion.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MergeQueueEntry
}

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  Creates a new user list.
  """
  createUserList(
    """
    Parameters for CreateUserList
    """
    input: CreateUserListInput!
  ): CreateUserListPayload

  """
  Rejects a suggested topic for the repository.
  """
  AWAITING_CHECKS

  """
  The entry is currently locked.
  """
  LOCKED

  """
  The entry is currently mergeable.
  """
  MERGEABLE

  """
  The entry is currently queued.
  """
  QUEUED

  """
  The entry is currently unmergeable.
  """
  UNMERGEABLE
}

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  Entries only allowed to merge if they are passing.
  """
  ALLGREEN

  """
  Failing Entires are allowed to merge if they are with a passing entry.
  """
  HEADGREEN
}

"""
Detailed status information about a pull request merge.
"""
enum MergeStateStatus {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  Unlink a branch from an issue.
  """
  deleteLinkedBranch(
    """
    Parameters for DeleteLinkedBranch
    """
    input: DeleteLinkedBranchInput!
  ): DeleteLinkedBranchPayload

  """
  Delete a package version.
  """
  createdAt: DateTime!

"""
Represents a member feature request notification
"""
type MemberFeatureRequestNotification implements Node {
  """
  Represents member feature request body containing organization name and the number of feature requests
  """
  body: String!

  """
  The Node ID of the MemberFeatureRequestNotification object
  """
  id: ID!

  """
  Represents member feature request notification title
  """
  title: String!

  """
  Delete a project.
  """
  deleteProjectV2(
    """
    Parameters for DeleteProjectV2
    """
    input: DeleteProjectV2Input!
  ): DeleteProjectV2Payload

  """
  Delete a project field.
  """
  deleteProjectV2Field(
    """
    Parameters for DeleteProjectV2Field
    """
    input: DeleteProjectV2FieldInput!
  ): DeleteProjectV2FieldPayload

"""
Entities that have members who can set status messages.
"""
interface MemberStatusable {
  """
  The Node ID of the LockedEvent object
  """
  databaseId: Int

  """
  Deletes a project workflow.
  """
  deleteProjectV2Workflow(
    """
    Parameters for DeleteProjectV2Workflow
    """
    input: DeleteProjectV2WorkflowInput!
  ): DeleteProjectV2WorkflowPayload

  """
  Deletes a pull request review.
  """
  id: ID!

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order mannequins by.
  """
  field: MannequinOrderField!
}

"""
Properties by which mannequins can be ordered.
"""
enum MannequinOrderField {
  """
  Delete a repository ruleset
  """
  deleteRepositoryRuleset(
    """
    Parameters for DeleteRepositoryRuleset
    """
    input: DeleteRepositoryRulesetInput!
  ): DeleteRepositoryRulesetPayload

  """
  Deletes a team discussion.
  """
  CREATED_AT

  """
  Order mannequins alphabetically by their source login.
  """
  createdAt: DateTime!

  """
  Deletes a user list.
  """
  deleteUserList(
    """
    Parameters for DeleteUserList
    """
    input: DeleteUserListInput!
  ): DeleteUserListPayload

  """
  Deletes a verifiable domain.
  """
  id: ID!

"""
The possible default commit messages for merges.
"""
enum MergeCommitMessage {
  """
  Remove a pull request from the merge queue.
  """
  dequeuePullRequest(
    """
    Parameters for DequeuePullRequest
    """
    input: DequeuePullRequestInput!
  ): DequeuePullRequestPayload

  """
  Disable auto merge on the given pull request
  """
  BLANK

  """
  Default to the pull request's body.
  """
  PR_BODY

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
The possible default commit titles for merges.
"""
enum MergeCommitTitle {
  """
  Default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
  """
  MERGE_MESSAGE

  """
  Add a pull request to the merge queue.
  """
  enqueuePullRequest(
    """
    Parameters for EnqueuePullRequest
    """
    input: EnqueuePullRequestInput!
  ): EnqueuePullRequestPayload

  """
  Follow an organization.
  """
  PR_TITLE
}

"""
Represents a GitHub Enterprise Importer (GEI) migration.
"""
input MarkDiscussionCommentAsAnswerInput {
  """
  The migration flag to continue on error.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  email: String

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the Migration object
  """
  id: ID!

  """
  Links a project to a repository.
  """
  linkProjectV2ToRepository(
    """
    Parameters for LinkProjectV2ToRepository
    """
    input: LinkProjectV2ToRepositoryInput!
  ): LinkProjectV2ToRepositoryPayload

  """
  Links a project to a team.
  """
  linkProjectV2ToTeam(
    """
    Parameters for LinkProjectV2ToTeam
    """
    input: LinkProjectV2ToTeamInput!
  ): LinkProjectV2ToTeamPayload

  """
  Creates a repository link for a project.
  """
  migrationLogUrl: URI

  """
  The migration source.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  enterpriseUrl: URI

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  id: ID!

  """
  Mark a project as a template. Note that only projects which are owned by an Organization can be marked as a template.
  """
  markProjectV2AsTemplate(
    """
    Parameters for MarkProjectV2AsTemplate
    """
    input: MarkProjectV2AsTemplateInput!
  ): MarkProjectV2AsTemplatePayload

  """
  Marks a pull request ready for review.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
A GitHub Enterprise Importer (GEI) migration source.
"""
type MigrationSource implements Node {
  """
  The Node ID of the MigrationSource object
  """
  id: ID!

  """
  The migration source name.
  """
  configuration: MergeQueueConfiguration

  """
  The migration source type.
  """
  entries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  url: URI!
}

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
enum MigrationSourceType {
  """
  The Node ID of the MergeQueue object
  """
  id: ID!

  """
  Publish an existing sponsorship tier that is currently still a draft to a GitHub Sponsors profile.
  """
  publishSponsorsTier(
    """
    Parameters for PublishSponsorsTier
    """
    input: PublishSponsorsTierInput!
  ): PublishSponsorsTierPayload

  """
  Regenerates the identity provider recovery codes for an enterprise
  """
  nextEntryEstimatedTimeToMerge: Int

  """
  A GitHub Migration API source.
  """
  GITHUB_ARCHIVE
}

"""
The GitHub Enterprise Importer (GEI) migration state.
"""
type MergeQueueConfiguration {
  """
  The migration has failed.
  """
  checkResponseTimeout: Int

  """
  The migration has invalid credentials.
  """
  maximumEntriesToBuild: Int

  """
  The migration is in progress.
  """
  maximumEntriesToMerge: Int

  """
  The migration has not started.
  """
  mergeMethod: PullRequestMergeMethod

  """
  Removes a user from all organizations within the enterprise
  """
  removeEnterpriseMember(
    """
    Parameters for RemoveEnterpriseMember
    """
    input: RemoveEnterpriseMemberInput!
  ): RemoveEnterpriseMemberPayload

  """
  Removes an organization from the enterprise
  """
  mergingStrategy: MergeQueueMergingStrategy

  """
  The migration has been queued.
  """
  minimumEntriesToMerge: Int

  """
  The migration has succeeded.
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Entries in a MergeQueue
"""
type MergeQueueEntry implements Node {
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  baseCommit: Commit

  """
  The date and time this entry was added to the merge queue
  """
  enqueuedAt: DateTime!

  """
  The actor that enqueued this entry
  """
  enqueuer: Actor!

  """
  The estimated time in seconds until this entry will be merged
  """
  estimatedTimeToMerge: Int

  """
  Reopen a discussion.
  """
  reopenDiscussion(
    """
    Parameters for ReopenDiscussion
    """
    input: ReopenDiscussionInput!
  ): ReopenDiscussionPayload

  """
  Reopen a issue.
  """
  headCommit: Commit

  """
  The Node ID of the MergeQueueEntry object
  """
  dueOn: DateTime

  """
  The Node ID of the Milestone object
  """
  id: ID!

  """
  Whether this pull request should jump the queue
  """
  jump: Boolean!

  """
  The merge queue that this entry belongs to
  """
  mergeQueue: MergeQueue

  """
  Retire a published payment tier from your GitHub Sponsors profile so it cannot be used to start new sponsorships.
  """
  retireSponsorsTier(
    """
    Parameters for RetireSponsorsTier
    """
    input: RetireSponsorsTierInput!
  ): RetireSponsorsTierPayload

  """
  Create a pull request that reverts the changes from a merged pull request.
  """
  revertPullRequest(
    """
    Parameters for RevertPullRequest
    """
    input: RevertPullRequestInput!
  ): RevertPullRequestPayload

  """
  Revoke the migrator role to a user for all organizations under an enterprise account.
  """
  position: Int!

  """
  The pull request that will be added to a merge group
  """
  pullRequest: PullRequest

  """
  Does this pull request need to be deployed on its own
  """
  solo: Boolean!

  """
  The state of this entry in the queue
  """
  url: URI!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!
}

"""
The connection type for MergeQueueEntry.
"""
type MergeQueueEntryConnection {
  """
  Starts a GitHub Enterprise Importer organization migration.
  """
  startOrganizationMigration(
    """
    Parameters for StartOrganizationMigration
    """
    input: StartOrganizationMigrationInput!
  ): StartOrganizationMigrationPayload

  """
  Starts a GitHub Enterprise Importer (GEI) repository migration.
  """
  edges: [MergeQueueEntryEdge]

  """
  A list of nodes.
  """
  nodes: [MergeQueueEntry]

  """
  Transfer an organization from one enterprise to another enterprise.
  """
  transferEnterpriseOrganization(
    """
    Parameters for TransferEnterpriseOrganization
    """
    input: TransferEnterpriseOrganizationInput!
  ): TransferEnterpriseOrganizationPayload

  """
  Transfer an issue to a different repository
  """
  pageInfo: PageInfo!

  """
  Unarchives a ProjectV2Item
  """
  unarchiveProjectV2Item(
    """
    Parameters for UnarchiveProjectV2Item
    """
    input: UnarchiveProjectV2ItemInput!
  ): UnarchiveProjectV2ItemPayload

  """
  Unarchives a repository.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MergeQueueEntryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MergeQueueEntry
}

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  Unlinks a project from a repository.
  """
  unlinkProjectV2FromRepository(
    """
    Parameters for UnlinkProjectV2FromRepository
    """
    input: UnlinkProjectV2FromRepositoryInput!
  ): UnlinkProjectV2FromRepositoryPayload

  """
  Unlinks a project to a team.
  """
  unlinkProjectV2FromTeam(
    """
    Parameters for UnlinkProjectV2FromTeam
    """
    input: UnlinkProjectV2FromTeamInput!
  ): UnlinkProjectV2FromTeamPayload

  """
  Deletes a repository link from a project.
  """
  AWAITING_CHECKS

  """
  The entry is currently locked.
  """
  LOCKED

  """
  The entry is currently mergeable.
  """
  MERGEABLE

  """
  The entry is currently queued.
  """
  QUEUED

  """
  The entry is currently unmergeable.
  """
  UNMERGEABLE
}

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  Unmark a project as a template.
  """
  unmarkProjectV2AsTemplate(
    """
    Parameters for UnmarkProjectV2AsTemplate
    """
    input: UnmarkProjectV2AsTemplateInput!
  ): UnmarkProjectV2AsTemplatePayload

  """
  Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
  """
  ALLGREEN

  """
  Failing Entires are allowed to merge if they are with a passing entry.
  """
  HEADGREEN
}

"""
Detailed status information about a pull request merge.
"""
type MannequinConnection {
  """
  A list of edges.
  """
  edges: [MannequinEdge]

  """
  Unsubscribes from notifications
  """
  unsubscribeFromNotifications(
    """
    Parameters for UnsubscribeFromNotifications
    """
    input: UnsubscribeFromNotificationsInput!
  ): UnsubscribeFromNotificationsPayload

  """
  Update a branch protection rule
  """
  nodes: [Mannequin]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Mannequin
}

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order mannequins by.
  """
  createdAt: DateTime!

  """
  The Node ID of the MilestonedEvent object
  """
  id: ID!

"""
Properties by which mannequins can be ordered.
"""
enum MannequinOrderField {
  """
  Order mannequins why when they were created.
  """
  CREATED_AT

  """
  Order mannequins alphabetically by their source login.
  """
  LOGIN
}

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
input LinkProjectV2ToRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  createdAt: DateTime!

  """
  The Node ID of the MergedEvent object
  """
  id: ID!

  """
  Sets whether or not an organization owner can make purchases.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is linked to.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
input MarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to mark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Represents a GitHub Enterprise Importer (GEI) migration.
"""
type MarkProjectV2AsTemplatePayload {
  """
  The migration flag to continue on error.
  """
  clientMutationId: String

  """
  The project.
  """
  enterpriseUrl: URI

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the Migration object
  """
  id: ID!

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
input MarkProjectV2AsTemplateInput {
  """
  The URL for the migration log (expires 1 day after migration completes).
  """
  migrationLogUrl: URI

  """
  The migration source.
  """
  migrationSource: MigrationSource!

  """
  The target repository name.
  """
  repositoryName: String!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  clientMutationId: String

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
A GitHub Enterprise Importer (GEI) migration source.
"""
type MigrationSource implements Node {
  """
  The Node ID of the MigrationSource object
  """
  id: ID!

  """
  The migration source name.
  """
  name: String!

  """
  Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
  """
  updateOrganizationWebCommitSignoffSetting(
    """
    Parameters for UpdateOrganizationWebCommitSignoffSetting
    """
    input: UpdateOrganizationWebCommitSignoffSettingInput!
  ): UpdateOrganizationWebCommitSignoffSettingPayload

  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  updatePatreonSponsorability(
    """
    Parameters for UpdatePatreonSponsorability
    """
    input: UpdatePatreonSponsorabilityInput!
  ): UpdatePatreonSponsorabilityPayload

  """
  Updates an existing project.
  """
  databaseId: Int

  """
  The Node ID of the MovedColumnsInProjectEvent object
  """
  id: ID!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  projectV2: ProjectV2
}

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
input LinkProjectV2ToTeamInput {
  """
  Updates an existing project.
  """
  updateProjectV2(
    """
    Parameters for UpdateProjectV2
    """
    input: UpdateProjectV2Input!
  ): UpdateProjectV2Payload

"""
The GitHub Enterprise Importer (GEI) migration state.
"""
enum MigrationState {
  """
  Update the collaborators on a team or a project
  """
  updateProjectV2Collaborators(
    """
    Parameters for UpdateProjectV2Collaborators
    """
    input: UpdateProjectV2CollaboratorsInput!
  ): UpdateProjectV2CollaboratorsPayload

  """
  Abort a repository migration queued or in progress.
  """
  abortRepositoryMigration(
    """
    Parameters for AbortRepositoryMigration
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

  """
  Accepts a pending invitation for a user to become an administrator of an enterprise.
  """
  activeLockReason: LockReason

  """
  The migration is in progress.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The migration has not started.
  """
  NOT_STARTED

  """
  The migration needs to have its credentials validated.
  """
  duplicate: IssueOrPullRequest

  """
  The migration has been queued.
  """
  id: ID!

  """
  The migration has succeeded.
  """
  id: ID!

  """
  Adds enterprise members to an organization within the enterprise.
  """
  addEnterpriseOrganizationMember(
    """
    Parameters for AddEnterpriseOrganizationMember
    """
    input: AddEnterpriseOrganizationMemberInput!
  ): AddEnterpriseOrganizationMemberPayload

  """
  Adds a support entitlement to an enterprise member.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Update a repository ruleset
  """
  updateRepositoryRuleset(
    """
    Parameters for UpdateRepositoryRuleset
    """
    input: UpdateRepositoryRulesetInput!
  ): UpdateRepositoryRulesetPayload

  """
  Sets whether contributors are required to sign off on web-based commits for a repository.
  """
  updateRepositoryWebCommitSignoffSetting(
    """
    Parameters for UpdateRepositoryWebCommitSignoffSetting
    """
    input: UpdateRepositoryWebCommitSignoffSettingInput!
  ): UpdateRepositoryWebCommitSignoffSettingPayload

  """
  Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
  """
  howItWorks: String

  """
  The Node ID of the MarketplaceCategory object
  """
  id: ID!

  """
  The Node ID of the MarketplaceCategory object
  """
  addProjectV2DraftIssue(
    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The suggested assignees.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Updates an existing user list.
  """
  updateUserList(
    """
    Parameters for UpdateUserList
    """
    input: UpdateUserListInput!
  ): UpdateUserListPayload

  """
  Updates which of the viewer's lists an item belongs to
  """
  updateUserListsForItem(
    """
    Parameters for UpdateUserListsForItem
    """
    input: UpdateUserListsForItemInput!
  ): UpdateUserListsForItemPayload

  """
  Verify that a verifiable domain has the expected DNS record.
  """
  addPullRequestReviewThreadReply(
    """
    Parameters for AddPullRequestReviewThreadReply
    """
    input: AddPullRequestReviewThreadReplyInput!
  ): AddPullRequestReviewThreadReplyPayload

  """
  The setting is enabled for the owner.
  """
  ENABLED
}

"""
An OIDC identity provider configured to provision identities for an enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with read:enterprise or admin:enterprise scope.
"""
type OIDCProvider implements Node {
  """
  The enterprise this identity provider belongs to.
  """
  enterprise: Enterprise

  """
  ExternalIdentities provisioned by this identity provider.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter to external identities with the users login
    """
    login: String

    """
    Filter to external identities with valid org membership only
    """
    membersOnly: Boolean

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OIDCProvider object
  """
  id: ID!

  """
  The suggested issue body.
  """
  body: String

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  The Node ID of the LinkedBranch object
  """
  id: ID!

  """
  Archives a ProjectV2Item
  """
  archiveProjectV2Item(
    """
    Parameters for ArchiveProjectV2Item
    """
    input: ArchiveProjectV2ItemInput!
  ): ArchiveProjectV2ItemPayload

  """
  The name of the OAuth application.
  """
  url: URI!

  """
  The HTTP path for the OAuth application
  """
  viewerCanClose: Boolean!

  """
  The HTTP URL for the OAuth application
  """
  viewerCanReopen: Boolean!
}

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  A list of edges.
  """
  edges: [LinkedBranchEdge]

  """
  A list of nodes.
  """
  nodes: [LinkedBranch]

  """
  This mutation clears the value of a field for an item in a Project. Currently
  only text, number, date, assignees, labels, single-select, iteration and
  milestone fields are supported.
  """
  clearProjectV2ItemFieldValue(
    """
    Parameters for ClearProjectV2ItemFieldValue
    """
    input: ClearProjectV2ItemFieldValueInput!
  ): ClearProjectV2ItemFieldValuePayload

  """
  Creates a new project by cloning configuration from an existing project.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  Close a discussion.
  """
  closeDiscussion(
    """
    Parameters for CloseDiscussion
    """
    input: CloseDiscussionInput!
  ): CloseDiscussionPayload

  """
  Close an issue.
  """
  cursor: String!

  """
  The application URL of the OAuth application.
  """
  databaseId: Int

  """
  The callback URL of the OAuth application.
  """
  id: ID!
}

"""
Autogenerated input type of LockLockable
"""
input LockLockableInput {
  """
  The template filename.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OauthApplicationCreateAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  copyProjectV2(
    """
    Parameters for CopyProjectV2
    """
    input: CopyProjectV2Input!
  ): CopyProjectV2Payload

  """
  The HTTP path for the OAuth application
  """
  createAttributionInvitation(
    """
    Parameters for CreateAttributionInvitation
    """
    input: CreateAttributionInvitationInput!
  ): CreateAttributionInvitationPayload

  """
  The HTTP URL for the OAuth application
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The template name.
  """
  filename: String!

  """
  The suggested issue labels
  """
  howItWorksHTML: HTML!

  """
  Creates an organization as part of an enterprise account. A personal access
  token used to create an organization is implicitly permitted to update the
  organization it created, if the organization is part of an enterprise that has
  SAML enabled or uses Enterprise Managed Users. If the organization is not part
  of such an enterprise, and instead has SAML enabled for it individually, the
  token will then require SAML authorization to continue working against that organization.
  """
  id: ID!

  """
  The template name.
  """
  createdAt: DateTime!

  """
  The Node ID of the MilestonedEvent object
  """
  id: ID!

  """
  The rate limit of the OAuth application.
  """
  filename: String!

  """
  The state of the OAuth application.
  """
  howItWorksHTML: HTML!

"""
The possible default commit messages for merges.
"""
enum MergeCommitMessage {
  """
  Create a branch linked to an issue.
  """
  createLinkedBranch(
    """
    Parameters for CreateLinkedBranch
    """
    input: CreateLinkedBranchInput!
  ): CreateLinkedBranchPayload

  """
  Creates a GitHub Enterprise Importer (GEI) migration source.
  """
  BLANK

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  PR_BODY

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
The state of an OAuth application when it was created.
"""
enum MergeCommitTitle {
  """
  The OAuth application was active and allowed to have OAuth Accesses.
  """
  createProjectV2Field(
    """
    Parameters for CreateProjectV2Field
    """
    input: CreateProjectV2FieldInput!
  ): CreateProjectV2FieldPayload

  """
  The OAuth application was in the process of being deleted.
  """
  MERGE_MESSAGE

  """
  The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
Autogenerated input type of MergePullRequest
"""
input MergePullRequestInput {
  """
  The Node ID of the MarketplaceListing object
  """
  id: ID!

  """
  Create a repository ruleset
  """
  createRepositoryRuleset(
    """
    Parameters for CreateRepositoryRuleset
    """
    input: CreateRepositoryRulesetInput!
  ): CreateRepositoryRulesetPayload

  """
  Create a GitHub Sponsors profile to allow others to sponsor you or your organization.
  """
  createSponsorsListing(
    """
    Parameters for CreateSponsorsListing
    """
    input: CreateSponsorsListingInput!
  ): CreateSponsorsListingPayload

  """
  Create a new payment tier for your GitHub Sponsors profile.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Make many one-time sponsorships for different sponsorable users or
  organizations at once. Can only sponsor those who have a public GitHub
  Sponsors profile.
  """
  createSponsorships(
    """
    Parameters for CreateSponsorships
    """
    input: CreateSponsorshipsInput!
  ): CreateSponsorshipsPayload

  """
  Creates a new team discussion.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Creates a new user list.
  """
  createUserList(
    """
    Parameters for CreateUserList
    """
    input: CreateUserListInput!
  ): CreateUserListPayload

  """
  Rejects a suggested topic for the repository.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  createdAt: DateTime!

  """
  The Node ID of the LockedEvent object
  """
  id: ID!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  """
  The configuration for this merge queue
  """
  configuration: MergeQueueConfiguration

  """
  The entries in the queue
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgAddBillingManagerAuditEntry object
  """
  id: ID!

  """
  The Node ID of the MovedColumnsInProjectEvent object
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Unlink a branch from an issue.
  """
  deleteLinkedBranch(
    """
    Parameters for DeleteLinkedBranch
    """
    input: DeleteLinkedBranchInput!
  ): DeleteLinkedBranchPayload

  """
  Delete a package version.
  """
  deletePackageVersion(
    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeQueueEntryConnection

  """
  The Node ID of the MergeQueue object
  """
  id: ID!

  """
  The estimated time in seconds until a newly added entry would be merged
  """
  nextEntryEstimatedTimeToMerge: Int

  """
  The repository this merge queue belongs to
  """
  repository: Repository

  """
  Delete a project.
  """
  deleteProjectV2(
    """
    Parameters for DeleteProjectV2
    """
    input: DeleteProjectV2Input!
  ): DeleteProjectV2Payload

  """
  Delete a project field.
  """
  deleteProjectV2Field(
    """
    Parameters for DeleteProjectV2Field
    """
    input: DeleteProjectV2FieldInput!
  ): DeleteProjectV2FieldPayload

  """
  The HTTP URL for this merge queue
  """
  url: URI!
}

"""
Configuration for a MergeQueue
"""
type MergeQueueConfiguration {
  """
  Deletes a project workflow.
  """
  deleteProjectV2Workflow(
    """
    Parameters for DeleteProjectV2Workflow
    """
    input: DeleteProjectV2WorkflowInput!
  ): DeleteProjectV2WorkflowPayload

  """
  Deletes a pull request review.
  """
  checkResponseTimeout: Int

  """
  Abort a repository migration queued or in progress.
  """
  abortRepositoryMigration(
    """
    Parameters for AbortRepositoryMigration
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

  """
  Accepts a pending invitation for a user to become an administrator of an enterprise.
  """
  maximumEntriesToBuild: Int

  """
  Delete a repository ruleset
  """
  deleteRepositoryRuleset(
    """
    Parameters for DeleteRepositoryRuleset
    """
    input: DeleteRepositoryRulesetInput!
  ): DeleteRepositoryRulesetPayload

  """
  Deletes a team discussion.
  """
  maximumEntriesToMerge: Int

  """
  The merge method to use for this queue.
  """
  mergeMethod: PullRequestMergeMethod

  """
  Deletes a user list.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgAddMemberAuditEntry object
  """
  id: ID!

  """
  Deletes a verifiable domain.
  """
  mergingStrategy: MergeQueueMergingStrategy

  """
  Remove a pull request from the merge queue.
  """
  dequeuePullRequest(
    """
    Parameters for DequeuePullRequest
    """
    input: DequeuePullRequestInput!
  ): DequeuePullRequestPayload

  """
  Disable auto merge on the given pull request
  """
  minimumEntriesToMerge: Int

  """
  The amount of time in minutes to wait before ignoring the minumum number of
  entries in the queue requirement and merging a collection of entries
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Entries in a MergeQueue
"""
type MergeQueueEntry implements Node {
  """
  Adds enterprise members to an organization within the enterprise.
  """
  addEnterpriseOrganizationMember(
    """
    Parameters for AddEnterpriseOrganizationMember
    """
    input: AddEnterpriseOrganizationMemberInput!
  ): AddEnterpriseOrganizationMemberPayload

  """
  Adds a support entitlement to an enterprise member.
  """
  baseCommit: Commit

  """
  Add a pull request to the merge queue.
  """
  enqueuePullRequest(
    """
    Parameters for EnqueuePullRequest
    """
    input: EnqueuePullRequestInput!
  ): EnqueuePullRequestPayload

  """
  Follow an organization.
  """
  enqueuedAt: DateTime!

  """
  The actor that enqueued this entry
  """
  enqueuer: Actor!

  """
  The estimated time in seconds until this entry will be merged
  """
  estimatedTimeToMerge: Int

  """
  The head commit for this entry
  """
  addProjectV2DraftIssue(
    """
    Parameters for AddProjectV2DraftIssue
    """
    input: AddProjectV2DraftIssueInput!
  ): AddProjectV2DraftIssuePayload

  """
  The merge queue that this entry belongs to
  """
  mergeQueue: MergeQueue

  """
  The position of this entry in the queue
  """
  position: Int!

  """
  Links a project to a repository.
  """
  linkProjectV2ToRepository(
    """
    Parameters for LinkProjectV2ToRepository
    """
    input: LinkProjectV2ToRepositoryInput!
  ): LinkProjectV2ToRepositoryPayload

  """
  Links a project to a team.
  """
  linkProjectV2ToTeam(
    """
    Parameters for LinkProjectV2ToTeam
    """
    input: LinkProjectV2ToTeamInput!
  ): LinkProjectV2ToTeamPayload

  """
  Creates a repository link for a project.
  """
  pullRequest: PullRequest

  """
  Does this pull request need to be deployed on its own
  """
  solo: Boolean!

  """
  Adds a reply to an existing Pull Request Review Thread.
  """
  addPullRequestReviewThreadReply(
    """
    Parameters for AddPullRequestReviewThreadReply
    """
    input: AddPullRequestReviewThreadReplyInput!
  ): AddPullRequestReviewThreadReplyPayload

  """
  Adds a reaction to a subject.
  """
  state: MergeQueueEntryState!
}

"""
The connection type for MergeQueueEntry.
"""
type MergeQueueEntryConnection {
  """
  Mark a project as a template. Note that only projects which are owned by an Organization can be marked as a template.
  """
  markProjectV2AsTemplate(
    """
    Parameters for MarkProjectV2AsTemplate
    """
    input: MarkProjectV2AsTemplateInput!
  ): MarkProjectV2AsTemplatePayload

  """
  Marks a pull request ready for review.
  """
  edges: [MergeQueueEntryEdge]

  """
  A list of nodes.
  """
  nodes: [MergeQueueEntry]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgBlockUserAuditEntry object
  """
  id: ID!

"""
An edge in a connection.
"""
type MergeQueueEntryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  Archives a ProjectV2Item
  """
  archiveProjectV2Item(
    """
    Parameters for ArchiveProjectV2Item
    """
    input: ArchiveProjectV2ItemInput!
  ): ArchiveProjectV2ItemPayload

  """
  Marks a repository as archived.
  """
  node: MergeQueueEntry
}

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  Publish an existing sponsorship tier that is currently still a draft to a GitHub Sponsors profile.
  """
  publishSponsorsTier(
    """
    Parameters for PublishSponsorsTier
    """
    input: PublishSponsorsTierInput!
  ): PublishSponsorsTierPayload

  """
  Regenerates the identity provider recovery codes for an enterprise
  """
  AWAITING_CHECKS

  """
  The entry is currently locked.
  """
  LOCKED

  """
  The entry is currently mergeable.
  """
  MERGEABLE

  """
  The entry is currently queued.
  """
  QUEUED

  """
  This mutation clears the value of a field for an item in a Project. Currently
  only text, number, date, assignees, labels, single-select, iteration and
  milestone fields are supported.
  """
  clearProjectV2ItemFieldValue(
    """
    Parameters for ClearProjectV2ItemFieldValue
    """
    input: ClearProjectV2ItemFieldValueInput!
  ): ClearProjectV2ItemFieldValuePayload

  """
  Creates a new project by cloning configuration from an existing project.
  """
  UNMERGEABLE
}

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  Removes a user from all organizations within the enterprise
  """
  removeEnterpriseMember(
    """
    Parameters for RemoveEnterpriseMember
    """
    input: RemoveEnterpriseMemberInput!
  ): RemoveEnterpriseMemberPayload

  """
  Removes an organization from the enterprise
  """
  ALLGREEN

  """
  Close a discussion.
  """
  closeDiscussion(
    """
    Parameters for CloseDiscussion
    """
    input: CloseDiscussionInput!
  ): CloseDiscussionPayload

  """
  Close an issue.
  """
  HEADGREEN
}

"""
Detailed status information about a pull request merge.
"""
input EnterpriseServerInstallationOrder {
  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  Copy a project.
  """
  copyProjectV2(
    """
    Parameters for CopyProjectV2
    """
    input: CopyProjectV2Input!
  ): CopyProjectV2Payload

  """
  Reopen a discussion.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Reopen a issue.
  """
  createAttributionInvitation(
    """
    Parameters for CreateAttributionInvitation
    """
    input: CreateAttributionInvitationInput!
  ): CreateAttributionInvitationPayload

  """
  Create a new branch protection rule
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  POLAR

  """
  Polar funding platform.
  """
  email: String

  """
  The Node ID of the Mannequin object
  """
  id: ID!

  """
  Retire a published payment tier from your GitHub Sponsors profile so it cannot be used to start new sponsorships.
  """
  retireSponsorsTier(
    """
    Parameters for RetireSponsorsTier
    """
    input: RetireSponsorsTierInput!
  ): RetireSponsorsTierPayload

  """
  Create a pull request that reverts the changes from a merged pull request.
  """
  revertPullRequest(
    """
    Parameters for RevertPullRequest
    """
    input: RevertPullRequestInput!
  ): RevertPullRequestPayload

  """
  Revoke the migrator role to a user for all organizations under an enterprise account.
  """
  POLAR

  """
  Tidelift funding platform.
  """
  TIDELIFT
}

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Creates an organization as part of an enterprise account. A personal access
  token used to create an organization is implicitly permitted to update the
  organization it created, if the organization is part of an enterprise that has
  SAML enabled or uses Enterprise Managed Users. If the organization is not part
  of such an enterprise, and instead has SAML enabled for it individually, the
  token will then require SAML authorization to continue working against that organization.
  """
  fullDatabaseId: BigInt

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  A list of edges.
  """
  edges: [MannequinEdge]

  """
  A list of nodes.
  """
  nodes: [Mannequin]

  """
  Starts a GitHub Enterprise Importer organization migration.
  """
  startOrganizationMigration(
    """
    Parameters for StartOrganizationMigration
    """
    input: StartOrganizationMigrationInput!
  ): StartOrganizationMigrationPayload

  """
  Starts a GitHub Enterprise Importer (GEI) repository migration.
  """
  createdAt: DateTime!

  """
  The Node ID of the MergedEvent object
  """
  id: ID!

  """
  Transfer an organization from one enterprise to another enterprise.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Transfer an issue to a different repository
  """
  createLinkedBranch(
    """
    Parameters for CreateLinkedBranch
    """
    input: CreateLinkedBranchInput!
  ): CreateLinkedBranchPayload

  """
  Unarchives a ProjectV2Item
  """
  unarchiveProjectV2Item(
    """
    Parameters for UnarchiveProjectV2Item
    """
    input: UnarchiveProjectV2ItemInput!
  ): UnarchiveProjectV2ItemPayload

  """
  Unarchives a repository.
  """
  totalCount: Int!
}

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Mannequin
}

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  """
  Unlinks a project from a repository.
  """
  unlinkProjectV2FromRepository(
    """
    Parameters for UnlinkProjectV2FromRepository
    """
    input: UnlinkProjectV2FromRepositoryInput!
  ): UnlinkProjectV2FromRepositoryPayload

  """
  Unlinks a project to a team.
  """
  unlinkProjectV2FromTeam(
    """
    Parameters for UnlinkProjectV2FromTeam
    """
    input: UnlinkProjectV2FromTeamInput!
  ): UnlinkProjectV2FromTeamPayload

  """
  Deletes a repository link from a project.
  """
  createProjectV2Field(
    """
    Parameters for CreateProjectV2Field
    """
    input: CreateProjectV2FieldInput!
  ): CreateProjectV2FieldPayload

  """
  Create a new pull request
  """
  direction: OrderDirection!

  """
  The field to order mannequins by.
  """
  field: MannequinOrderField!
}

"""
Represents a GitHub Enterprise Importer (GEI) migration.
"""
interface Migration {
  """
  The migration flag to continue on error.
  """
  continueOnError: Boolean!

  """
  Create a repository ruleset
  """
  createRepositoryRuleset(
    """
    Parameters for CreateRepositoryRuleset
    """
    input: CreateRepositoryRulesetInput!
  ): CreateRepositoryRulesetPayload

  """
  Unmark a project as a template.
  """
  unmarkProjectV2AsTemplate(
    """
    Parameters for UnmarkProjectV2AsTemplate
    """
    input: UnmarkProjectV2AsTemplateInput!
  ): UnmarkProjectV2AsTemplatePayload

  """
  Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
  """
  createSponsorsListing(
    """
    Parameters for CreateSponsorsListing
    """
    input: CreateSponsorsListingInput!
  ): CreateSponsorsListingPayload

  """
  Create a new payment tier for your GitHub Sponsors profile.
  """
  CREATED_AT

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  Unsubscribes from notifications
  """
  unsubscribeFromNotifications(
    """
    Parameters for UnsubscribeFromNotifications
    """
    input: UnsubscribeFromNotificationsInput!
  ): UnsubscribeFromNotificationsPayload

  """
  Update a branch protection rule
  """
  createSponsorships(
    """
    Parameters for CreateSponsorships
    """
    input: CreateSponsorshipsInput!
  ): CreateSponsorshipsPayload

  """
  Creates a new team discussion.
  """
  failureReason: String

  """
  The Node ID of the Migration object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgCreateAuditEntry object
  """
  id: ID!

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
input MarkDiscussionCommentAsAnswerInput {
  """
  Creates a new user list.
  """
  createUserList(
    """
    Parameters for CreateUserList
    """
    input: CreateUserListInput!
  ): CreateUserListPayload

  """
  Rejects a suggested topic for the repository.
  """
  fullDatabaseId: BigInt

  """
  The migration source.
  """
  fullDatabaseId: BigInt

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
A GitHub Enterprise Importer (GEI) migration source.
"""
type MigrationSource implements Node {
  """
  The Node ID of the MigrationSource object
  """
  id: ID!

  """
  The migration source name.
  """
  enterprise: Enterprise!

  """
  The migration source type.
  """
  commitUrl: URI!

  """
  Sets whether or not an organization owner can make purchases.
  """
  id: ID!

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
enum MigrationSourceType {
  """
  Unlink a branch from an issue.
  """
  deleteLinkedBranch(
    """
    Parameters for DeleteLinkedBranch
    """
    input: DeleteLinkedBranchInput!
  ): DeleteLinkedBranchPayload

  """
  Delete a package version.
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  A GitHub Migration API source.
  """
  GITHUB_ARCHIVE
}

"""
The GitHub Enterprise Importer (GEI) migration state.
"""
enum MigrationState {
  """
  The migration has failed.
  """
  FAILED

  """
  The migration has invalid credentials.
  """
  clientMutationId: String

  """
  Delete a project.
  """
  deleteProjectV2(
    """
    Parameters for DeleteProjectV2
    """
    input: DeleteProjectV2Input!
  ): DeleteProjectV2Payload

  """
  Delete a project field.
  """
  deleteProjectV2Field(
    """
    Parameters for DeleteProjectV2Field
    """
    input: DeleteProjectV2FieldInput!
  ): DeleteProjectV2FieldPayload

"""
Represents a member feature request notification
"""
type MemberFeatureRequestNotification implements Node {
  """
  The migration has not started.
  """
  body: String!

  """
  Deletes a project workflow.
  """
  deleteProjectV2Workflow(
    """
    Parameters for DeleteProjectV2Workflow
    """
    input: DeleteProjectV2WorkflowInput!
  ): DeleteProjectV2WorkflowPayload

  """
  Deletes a pull request review.
  """
  id: ID!

  """
  The migration has been queued.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgDisableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

  """
  The migration has succeeded.
  """
  updatedAt: DateTime!
}

"""
Represents a member feature request notification
"""
type Milestone implements Closable & Node & UniformResourceLocatable {
  """
  Delete a repository ruleset
  """
  deleteRepositoryRuleset(
    """
    Parameters for DeleteRepositoryRuleset
    """
    input: DeleteRepositoryRulesetInput!
  ): DeleteRepositoryRulesetPayload

  """
  Deletes a team discussion.
  """
  Represents member feature request body containing organization name and the number of feature requests
  """
  body: String!

  """
  The Node ID of the MemberFeatureRequestNotification object
  """
  id: ID!

  """
  Deletes a user list.
  """
  deleteUserList(
    """
    Parameters for DeleteUserList
    """
    input: DeleteUserListInput!
  ): DeleteUserListPayload

  """
  Deletes a verifiable domain.
  """
  title: String!

  """
  Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
  """
  updateOrganizationWebCommitSignoffSetting(
    """
    Parameters for UpdateOrganizationWebCommitSignoffSetting
    """
    input: UpdateOrganizationWebCommitSignoffSettingInput!
  ): UpdateOrganizationWebCommitSignoffSettingPayload

  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  updatePatreonSponsorability(
    """
    Parameters for UpdatePatreonSponsorability
    """
    input: UpdatePatreonSponsorabilityInput!
  ): UpdatePatreonSponsorabilityPayload

  """
  Updates an existing project.
  """
  dequeuePullRequest(
    """
    Parameters for DequeuePullRequest
    """
    input: DequeuePullRequestInput!
  ): DequeuePullRequestPayload

  """
  Disable auto merge on the given pull request
  """
  updatedAt: DateTime!
}

"""
Entities that have members who can set status messages.
"""
input MarkPullRequestReadyForReviewInput {
  """
  The moment the editor made the last edit
  """
  dueOn: DateTime

  """
  Updates an existing project.
  """
  updateProjectV2(
    """
    Parameters for UpdateProjectV2
    """
    input: UpdateProjectV2Input!
  ): UpdateProjectV2Payload

  """
  Update the collaborators on a team or a project
  """
  updateProjectV2Collaborators(
    """
    Parameters for UpdateProjectV2Collaborators
    """
    input: UpdateProjectV2CollaboratorsInput!
  ): UpdateProjectV2CollaboratorsPayload

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

  """
  `true` if the object is locked
  """
  locked: Boolean!

  """
  Identifies the milestone associated with the issue.
  """
  milestone: Milestone

  """
  Identifies the issue number.
  """
  number: Int!

  """
  Links a project to a repository.
  """
  digestMethodUrl: URI

  """
  The Node ID of the OrgDisableSamlAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  The HTTP URL for the OAuth application
  """
  NAME
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Transfer an organization from one enterprise to another enterprise.
  """
  transferEnterpriseOrganization(
    """
    Parameters for TransferEnterpriseOrganization
    """
    input: TransferEnterpriseOrganizationInput!
  ): TransferEnterpriseOrganizationPayload

  """
  Transfer an issue to a different repository
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  Unarchives a ProjectV2Item
  """
  unarchiveProjectV2Item(
    """
    Parameters for UnarchiveProjectV2Item
    """
    input: UnarchiveProjectV2ItemInput!
  ): UnarchiveProjectV2ItemPayload

  """
  Unarchives a repository.
  """
  direction: OrderDirection!

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type ExternalIdentity implements Node {
  """
  The GUID for this identity
  """
  guid: String!

  """
  Unlinks a project from a repository.
  """
  unlinkProjectV2FromRepository(
    """
    Parameters for UnlinkProjectV2FromRepository
    """
    input: UnlinkProjectV2FromRepositoryInput!
  ): UnlinkProjectV2FromRepositoryPayload

  """
  The application URL of the OAuth application.
  """
  unlinkProjectV2FromTeam(
    """
    Parameters for UnlinkProjectV2FromTeam
    """
    input: UnlinkProjectV2FromTeamInput!
  ): UnlinkProjectV2FromTeamPayload

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type OrgDisableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The callback URL of the OAuth application.
  """
  createdAt: DateTime!

  """
  The Node ID of the MilestonedEvent object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OauthApplicationCreateAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  The direction in which to order environments by the specified field.
  """
  createdAt: DateTime!

  """
  The HTTP path for the OAuth application
  """
  enterpriseUrl: URI

  """
  The HTTP URL for the OAuth application
  """
  unmarkProjectV2AsTemplate(
    """
    Parameters for UnmarkProjectV2AsTemplate
    """
    input: UnmarkProjectV2AsTemplateInput!
  ): UnmarkProjectV2AsTemplatePayload

  """
  Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
  """
  id: ID!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  howItWorksHTML: HTML!

  """
  The Node ID of the OrgDisableTwoFactorRequirementAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  id: ID!

  """
  The rate limit of the OAuth application.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

  """
  The state of the OAuth application.
  """
  color: String

  """
  The Node ID of the Language object
  """
  id: ID!

  """
  The user affected by the action
  """
  viewerCanClose: Boolean!

"""
The state of an OAuth application when it was created.
"""
enum OauthApplicationCreateAuditEntryState {
  """
  The OAuth application was active and allowed to have OAuth Accesses.
  """
  viewerCanReopen: Boolean!

  """
  The OAuth application was in the process of being deleted.
  """
  viewerCanDelete: Boolean!

  """
  The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  field: EnvironmentOrderField!
}

"""
Audit log entry for a org.enable_oauth_app_restrictions event.
"""
type OrgEnableOauthAppRestrictionsAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Sets whether or not an organization owner can make purchases.
  """
  viewerSubscription: SubscriptionState

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

  """
  Can user react to this subject
  """
  viewerCanReopen: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposEnableAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgEnableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

  """
  The Node ID of the MovedColumnsInProjectEvent object
  """
  id: ID!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanClose: Boolean!

  """
  Whether the license should be featured
  """
  featured: Boolean!

  """
  Whether the license should be displayed in license pickers
  """
  hidden: Boolean!

  """
  The Node ID of the License object
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposEnableAuditEntry object
  """
  id: ID!

  """
  Abort a repository migration queued or in progress.
  """
  abortRepositoryMigration(
    """
    Parameters for AbortRepositoryMigration
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

  """
  Accepts a pending invitation for a user to become an administrator of an enterprise.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  createdAt: PreciseDateTime!

"""
Audit log entry for a org.enable_saml event.
"""
type OrgEnableSamlAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The SAML provider's digest algorithm URL.
  """
  digestMethodUrl: URI

  """
  The Node ID of the OrgEnableSamlAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.enable_two_factor_requirement event.
"""
type OrgEnableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
  """
  updateOrganizationWebCommitSignoffSetting(
    """
    Parameters for UpdateOrganizationWebCommitSignoffSetting
    """
    input: UpdateOrganizationWebCommitSignoffSettingInput!
  ): UpdateOrganizationWebCommitSignoffSettingPayload

  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  updatePatreonSponsorability(
    """
    Parameters for UpdatePatreonSponsorability
    """
    input: UpdatePatreonSponsorabilityInput!
  ): UpdatePatreonSponsorabilityPayload

  """
  Updates an existing project.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

  """
  Adds enterprise members to an organization within the enterprise.
  """
  addEnterpriseOrganizationMember(
    """
    Parameters for AddEnterpriseOrganizationMember
    """
    input: AddEnterpriseOrganizationMemberInput!
  ): AddEnterpriseOrganizationMemberPayload

  """
  Adds a support entitlement to an enterprise member.
  """
  databaseId: Int

  """
  Updates an existing project.
  """
  updateProjectV2(
    """
    Parameters for UpdateProjectV2
    """
    input: UpdateProjectV2Input!
  ): UpdateProjectV2Payload

  """
  Update the collaborators on a team or a project
  """
  updateProjectV2Collaborators(
    """
    Parameters for UpdateProjectV2Collaborators
    """
    input: UpdateProjectV2CollaboratorsInput!
  ): UpdateProjectV2CollaboratorsPayload

  """
  The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object
  """
  id: ID!
}

"""
Autogenerated input type of LinkProjectV2ToRepository
"""
input LinkProjectV2ToRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

"""
The possible default commit messages for merges.
"""
enum MergeCommitMessage {
  """
  The name of the Organization.
  """
  addPullRequestReviewThreadReply(
    """
    Parameters for AddPullRequestReviewThreadReply
    """
    input: AddPullRequestReviewThreadReplyInput!
  ): AddPullRequestReviewThreadReplyPayload

  """
  Adds a reaction to a subject.
  """
  PR_BODY

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
The possible default commit titles for merges.
"""
enum MergeCommitTitle {
  """
  Default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgAddMemberAuditEntry object
  """
  id: ID!

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
Autogenerated input type of MergePullRequest
"""
input MergePullRequestInput {
  """
  The ID of the repository to link to the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Ordering options for an organization's enterprise owner connections.
"""
input OrgEnterpriseOwnerOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprise owners by.
  """
  field: OrgEnterpriseOwnerOrderField!
}

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  Order enterprise owners by login.
  """
  LOGIN
}

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Update a repository ruleset
  """
  updateRepositoryRuleset(
    """
    Parameters for UpdateRepositoryRuleset
    """
    input: UpdateRepositoryRulesetInput!
  ): UpdateRepositoryRulesetPayload

  """
  Sets whether contributors are required to sign off on web-based commits for a repository.
  """
  updateRepositoryWebCommitSignoffSetting(
    """
    Parameters for UpdateRepositoryWebCommitSignoffSetting
    """
    input: UpdateRepositoryWebCommitSignoffSettingInput!
  ): UpdateRepositoryWebCommitSignoffSettingPayload

  """
  Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
  """
  clientMutationId: String

  """
  Archives a ProjectV2Item
  """
  archiveProjectV2Item(
    """
    Parameters for ArchiveProjectV2Item
    """
    input: ArchiveProjectV2ItemInput!
  ): ArchiveProjectV2ItemPayload

  """
  Marks a repository as archived.
  """
  repository: Repository
}

"""
Autogenerated input type of LinkProjectV2ToTeam
"""
input LinkProjectV2ToTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to link to the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  The email address of the organization invitation.
  """
  email: String

  """
  The Node ID of the OrgInviteMemberAuditEntry object
  """
  id: ID!

  """
  Verify that a verifiable domain has the expected DNS record.
  """
  clearProjectV2ItemFieldValue(
    """
    Parameters for ClearProjectV2ItemFieldValue
    """
    input: ClearProjectV2ItemFieldValueInput!
  ): ClearProjectV2ItemFieldValuePayload

  """
  Creates a new project by cloning configuration from an existing project.
  """
  team: Team
}

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  """
  The organization invitation.
  """
  organizationInvitation: OrganizationInvitation

  """
  The name of the Organization.
  """
  configuration: MergeQueueConfiguration

"""
An OIDC identity provider configured to provision identities for an enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with read:enterprise or admin:enterprise scope.
"""
type OIDCProvider implements Node {
  """
  Close a discussion.
  """
  closeDiscussion(
    """
    Parameters for CloseDiscussion
    """
    input: CloseDiscussionInput!
  ): CloseDiscussionPayload

  """
  Close an issue.
  """
  entries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeQueueEntryConnection

  """
  Copy a project.
  """
  copyProjectV2(
    """
    Parameters for CopyProjectV2
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OIDCProvider object
  """
  id: ID!

  """
  Invites a user to claim reattributable data
  """
  createAttributionInvitation(
    """
    Parameters for CreateAttributionInvitation
    """
    input: CreateAttributionInvitationInput!
  ): CreateAttributionInvitationPayload

  """
  Create a new branch protection rule
  """
  createdAt: PreciseDateTime!

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The Node ID of the OrgInviteToBusinessAuditEntry object
  """
  id: ID!

  """
  The HTTP path for the OAuth application
  """
  resourcePath: URI!

  """
  The HTTP URL for the OAuth application
  """
  url: URI!
}

"""
Configuration for a MergeQueue
"""
type MergeQueueConfiguration {
  """
  The amount of time in minutes to wait for a check response before considering it a failure.
  """
  checkResponseTimeout: Int

  """
  The maximum number of entries to build at once.
  """
  maximumEntriesToBuild: Int

  """
  Creates an organization as part of an enterprise account. A personal access
  token used to create an organization is implicitly permitted to update the
  organization it created, if the organization is part of an enterprise that has
  SAML enabled or uses Enterprise Managed Users. If the organization is not part
  of such an enterprise, and instead has SAML enabled for it individually, the
  token will then require SAML authorization to continue working against that organization.
  """
  maximumEntriesToMerge: Int

  """
  The merge method to use for this queue.
  """
  mergeMethod: PullRequestMergeMethod

  """
  The strategy to use when merging entries.
  """
  mergingStrategy: MergeQueueMergingStrategy

  """
  The minimum number of entries required to merge at once.
  """
  minimumEntriesToMerge: Int

  """
  The amount of time in minutes to wait before ignoring the minumum number of
  entries in the queue requirement and merging a collection of entries
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
type OrgOauthAppAccessApprovedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The application URL of the OAuth application.
  """
  createLinkedBranch(
    """
    Parameters for CreateLinkedBranch
    """
    input: CreateLinkedBranchInput!
  ): CreateLinkedBranchPayload

  """
  The callback URL of the OAuth application.
  """
  baseCommit: Commit

  """
  The date and time this entry was added to the merge queue
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OauthApplicationCreateAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  enqueuer: Actor!

  """
  The HTTP path for the OAuth application
  """
  createProjectV2Field(
    """
    Parameters for CreateProjectV2Field
    """
    input: CreateProjectV2FieldInput!
  ): CreateProjectV2FieldPayload

  """
  The HTTP URL for the OAuth application
  """
  estimatedTimeToMerge: Int

  """
  The head commit for this entry
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessApprovedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  id: ID!

  """
  The HTTP path for the OAuth application
  """
  id: ID!

  """
  The HTTP URL for the OAuth application
  """
  createRepositoryRuleset(
    """
    Parameters for CreateRepositoryRuleset
    """
    input: CreateRepositoryRulesetInput!
  ): CreateRepositoryRulesetPayload

  """
  Create a GitHub Sponsors profile to allow others to sponsor you or your organization.
  """
  createSponsorsListing(
    """
    Parameters for CreateSponsorsListing
    """
    input: CreateSponsorsListingInput!
  ): CreateSponsorsListingPayload

  """
  Create a new payment tier for your GitHub Sponsors profile.
  """
  jump: Boolean!

  """
  The rate limit of the OAuth application.
  """
  mergeQueue: MergeQueue

  """
  The state of the OAuth application.
  """
  createSponsorships(
    """
    Parameters for CreateSponsorships
    """
    input: CreateSponsorshipsInput!
  ): CreateSponsorshipsPayload

  """
  Creates a new team discussion.
  """
  position: Int!

  """
  The pull request that will be added to a merge group
  """
  pullRequest: PullRequest

  """
  Creates a new user list.
  """
  createUserList(
    """
    Parameters for CreateUserList
    """
    input: CreateUserListInput!
  ): CreateUserListPayload

  """
  Rejects a suggested topic for the repository.
  """
  solo: Boolean!

  """
  The state of this entry in the queue
  """
  state: MergeQueueEntryState!
}

"""
Audit log entry for a org.oauth_app_access_blocked event.
"""
type OrgOauthAppAccessBlockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The OAuth application was active and allowed to have OAuth Accesses.
  """
  edges: [MergeQueueEntryEdge]

  """
  The OAuth application was in the process of being deleted.
  """
  nodes: [MergeQueueEntry]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MergeQueueEntryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessBlockedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  The entry is currently waiting for checks to pass.
  """
  AWAITING_CHECKS

  """
  The entry is currently locked.
  """
  LOCKED

  """
  Unlink a branch from an issue.
  """
  deleteLinkedBranch(
    """
    Parameters for DeleteLinkedBranch
    """
    input: DeleteLinkedBranchInput!
  ): DeleteLinkedBranchPayload

  """
  Delete a package version.
  """
  MERGEABLE

  """
  The entry is currently queued.
  """
  QUEUED

  """
  The entry is currently unmergeable.
  """
  UNMERGEABLE
}

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  Entries only allowed to merge if they are passing.
  """
  ALLGREEN

  """
  Delete a project.
  """
  deleteProjectV2(
    """
    Parameters for DeleteProjectV2
    """
    input: DeleteProjectV2Input!
  ): DeleteProjectV2Payload

  """
  Delete a project field.
  """
  deleteProjectV2Field(
    """
    Parameters for DeleteProjectV2Field
    """
    input: DeleteProjectV2FieldInput!
  ): DeleteProjectV2FieldPayload

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Default to a blank commit message.
  """
  BLANK

  """
  Deletes a project workflow.
  """
  deleteProjectV2Workflow(
    """
    Parameters for DeleteProjectV2Workflow
    """
    input: DeleteProjectV2WorkflowInput!
  ): DeleteProjectV2WorkflowPayload

  """
  Deletes a pull request review.
  """
  PR_BODY

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
The possible default commit titles for merges.
"""
enum MergeCommitTitle {
  """
  Default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
  """
  MERGE_MESSAGE

  """
  Delete a repository ruleset
  """
  deleteRepositoryRuleset(
    """
    Parameters for DeleteRepositoryRuleset
    """
    input: DeleteRepositoryRulesetInput!
  ): DeleteRepositoryRulesetPayload

  """
  Deletes a team discussion.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessDeniedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
type OrgOauthAppAccessRequestedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessRequestedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_unblocked event.
"""
type OrgOauthAppAccessUnblockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessUnblockedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.remove_billing_manager event.
"""
type OrgRemoveBillingManagerAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveBillingManagerAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgCreateAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Node ID of the OrgAddBillingManagerAuditEntry object
  """
  id: ID!

"""
Autogenerated input type of MergePullRequest
"""
input LinkProjectV2ToRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Deletes a user list.
  """
  deleteUserList(
    """
    Parameters for DeleteUserList
    """
    input: DeleteUserListInput!
  ): DeleteUserListPayload

  """
  Deletes a verifiable domain.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  Remove a pull request from the merge queue.
  """
  dequeuePullRequest(
    """
    Parameters for DequeuePullRequest
    """
    input: DequeuePullRequestInput!
  ): DequeuePullRequestPayload

  """
  Disable auto merge on the given pull request
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is linked to.
  """
  repository: Repository
}

"""
Represents a member feature request notification
"""
type MemberFeatureRequestNotification implements Node {
  """
  Represents member feature request body containing organization name and the number of feature requests
  """
  body: String!

  """
  Add a pull request to the merge queue.
  """
  enqueuePullRequest(
    """
    Parameters for EnqueuePullRequest
    """
    input: EnqueuePullRequestInput!
  ): EnqueuePullRequestPayload

  """
  Follow an organization.
  """
  createdAt: DateTime!

  """
  The Node ID of the MergedEvent object
  """
  id: ID!

  """
  Represents member feature request notification title
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  """
  The configuration for this merge queue
  """
  configuration: MergeQueueConfiguration

  """
  The entries in the queue
  """
  entries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Links a project to a repository.
  """
  linkProjectV2ToRepository(
    """
    Parameters for LinkProjectV2ToRepository
    """
    input: LinkProjectV2ToRepositoryInput!
  ): LinkProjectV2ToRepositoryPayload

  """
  Links a project to a team.
  """
  linkProjectV2ToTeam(
    """
    Parameters for LinkProjectV2ToTeam
    """
    input: LinkProjectV2ToTeamInput!
  ): LinkProjectV2ToTeamPayload

  """
  Creates a repository link for a project.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveMemberAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgAddMemberAuditEntry object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeQueueEntryConnection

  """
  The Node ID of the MergeQueue object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgDisableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

"""
Represents a GitHub Enterprise Importer (GEI) migration.
"""
interface Migration {
  """
  Mark a project as a template. Note that only projects which are owned by an Organization can be marked as a template.
  """
  markProjectV2AsTemplate(
    """
    Parameters for MarkProjectV2AsTemplate
    """
    input: MarkProjectV2AsTemplateInput!
  ): MarkProjectV2AsTemplatePayload

  """
  Marks a pull request ready for review.
  """
  nextEntryEstimatedTimeToMerge: Int

  """
  The repository this merge queue belongs to
  """
  repository: Repository

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the Migration object
  """
  id: ID!

  """
  The HTTP URL for this merge queue
  """
  url: URI!
}

"""
Configuration for a MergeQueue
"""
type MergeQueueConfiguration {
  """
  Organization owners have full access and can change several settings,
  including the names of repositories that belong to the Organization and Owners
  team membership. In addition, organization owners can delete the organization
  and all of its repositories.
  """
  checkResponseTimeout: Int

  """
  Publish an existing sponsorship tier that is currently still a draft to a GitHub Sponsors profile.
  """
  publishSponsorsTier(
    """
    Parameters for PublishSponsorsTier
    """
    input: PublishSponsorsTierInput!
  ): PublishSponsorsTierPayload

  """
  Regenerates the identity provider recovery codes for an enterprise
  """
  maximumEntriesToBuild: Int

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  maximumEntriesToMerge: Int

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
A GitHub Enterprise Importer (GEI) migration source.
"""
type MigrationSource implements Node {
  """
  The Node ID of the MigrationSource object
  """
  id: ID!

  """
  The migration source name.
  """
  mergingStrategy: MergeQueueMergingStrategy

  """
  Removes a user from all organizations within the enterprise
  """
  removeEnterpriseMember(
    """
    Parameters for RemoveEnterpriseMember
    """
    input: RemoveEnterpriseMemberInput!
  ): RemoveEnterpriseMemberPayload

  """
  Removes an organization from the enterprise
  """
  minimumEntriesToMerge: Int

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  digestMethodUrl: URI

  """
  The Node ID of the OrgDisableSamlAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  Unmark a project as a template.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!
}

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  A list of edges.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveOutsideCollaboratorAuditEntry object
  """
  id: ID!

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  unsubscribeFromNotifications(
    """
    Parameters for UnsubscribeFromNotifications
    """
    input: UnsubscribeFromNotificationsInput!
  ): UnsubscribeFromNotificationsPayload

  """
  Update a branch protection rule
  """
  nodes: [LinkedBranch]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type OrgDisableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: LinkedBranch
}

"""
Autogenerated input type of LockLockable
"""
input LinkProjectV2ToTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to link to the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is linked to
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposClearAuditEntry object
  """
  createdAt: DateTime!

  """
  The Node ID of the OrgDisableTwoFactorRequirementAuditEntry object
  """
  id: ID!

"""
Autogenerated input type of LinkRepositoryToProject
"""
input LinkProjectV2ToRepositoryInput {
  """
  The corresponding operation type for the action
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgCreateAuditEntry object
  """
  id: ID!

  """
  The ID of the repository to link to the project.
  """
  createdAt: DateTime!

  """
  The Node ID of the MilestonedEvent object
  """
  id: ID!

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user affected by the action
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the Migration object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRestoreMemberAuditEntry object
  """
  id: ID!

  """
  The branch's ref.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
Audit log entry for a org.enable_oauth_app_restrictions event.
"""
type OrgEnableOauthAppRestrictionsAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The migration source.
  """
  edges: [LinkedBranchEdge]

  """
  A list of nodes.
  """
  nodes: [LinkedBranch]

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  pageInfo: PageInfo!

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
A GitHub Enterprise Importer (GEI) migration source.
"""
type MigrationSource implements Node {
  """
  The Node ID of the MigrationSource object
  """
  id: ID!

  """
  The migration source name.
  """
  email: String

  """
  Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgEnableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  updatePatreonSponsorability(
    """
    Parameters for UpdatePatreonSponsorability
    """
    input: UpdatePatreonSponsorabilityInput!
  ): UpdatePatreonSponsorabilityPayload

  """
  Updates an existing project.
  """
  id: ID!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  node: LinkedBranch
}

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
input LinkProjectV2ToTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Updates an existing project.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgDisableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

  """
  Update the collaborators on a team or a project
  """
  updateProjectV2Collaborators(
    """
    Parameters for UpdateProjectV2Collaborators
    """
    input: UpdateProjectV2CollaboratorsInput!
  ): UpdateProjectV2CollaboratorsPayload

  """
  The migration is in progress.
  """
  totalCount: Int!
}

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  The migration has not started.
  """
  cursor: String!

  """
  The migration needs to have its credentials validated.
  """
  node: Mannequin
}

"""
Audit log entry for a org.enable_saml event.
"""
type OrgEnableSamlAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The SAML provider's digest algorithm URL.
  """
  digestMethodUrl: URI

  """
  The Node ID of the OrgEnableSamlAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUnblockUserAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.enable_two_factor_requirement event.
"""
type OrgEnableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is linked to
  """
  team: Team
}

"""
Autogenerated input type of LinkRepositoryToProject
"""
input LinkRepositoryToProjectInput {
  """
  Update a repository ruleset
  """
  updateRepositoryRuleset(
    """
    Parameters for UpdateRepositoryRuleset
    """
    input: UpdateRepositoryRulesetInput!
  ): UpdateRepositoryRulesetPayload

  """
  Sets whether contributors are required to sign off on web-based commits for a repository.
  """
  updateRepositoryWebCommitSignoffSetting(
    """
    Parameters for UpdateRepositoryWebCommitSignoffSetting
    """
    input: UpdateRepositoryWebCommitSignoffSettingInput!
  ): UpdateRepositoryWebCommitSignoffSettingPayload

  """
  Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
  """
  clientMutationId: String

  """
  Abort a repository migration queued or in progress.
  """
  abortRepositoryMigration(
    """
    Parameters for AbortRepositoryMigration
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

  """
  Accepts a pending invitation for a user to become an administrator of an enterprise.
  """
  dueOn: DateTime

  """
  The Node ID of the Milestone object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateDefaultRepositoryPermissionAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgDisableSamlAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  The name of the Organization.
  """
  copyProjectV2(
    """
    Parameters for CopyProjectV2
    """
    input: CopyProjectV2Input!
  ): CopyProjectV2Payload

  """
  Invites a user to claim reattributable data
  """
  createAttributionInvitation(
    """
    Parameters for CreateAttributionInvitation
    """
    input: CreateAttributionInvitationInput!
  ): CreateAttributionInvitationPayload

  """
  Create a new branch protection rule
  """
  id: ID!

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  node: Mannequin
}

"""
Ordering options for an organization's enterprise owner connections.
"""
input OrgEnterpriseOwnerOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprise owners by.
  """
  field: OrgEnterpriseOwnerOrderField!
}

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  Order enterprise owners by login.
  """
  LOGIN
}

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The OAuth application was active and allowed to have OAuth Accesses.
  """
  ACTIVE

  """
  The OAuth application was in the process of being deleted.
  """
  direction: OrderDirection!

  """
  The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  field: MannequinOrderField!
}

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type OrgDisableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Default to a blank commit message.
  """
  BLANK

  """
  Default to the pull request's body.
  """
  PR_BODY

  """
  Creates an organization as part of an enterprise account. A personal access
  token used to create an organization is implicitly permitted to update the
  organization it created, if the organization is part of an enterprise that has
  SAML enabled or uses Enterprise Managed Users. If the organization is not part
  of such an enterprise, and instead has SAML enabled for it individually, the
  token will then require SAML authorization to continue working against that organization.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
The possible default commit titles for merges.
"""
enum MergeCommitTitle {
  """
  Default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
  """
  MERGE_MESSAGE

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
Autogenerated input type of MergePullRequest
"""
enum MannequinOrderField {
  """
  The email address of the organization invitation.
  """
  email: String

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
input MarkDiscussionCommentAsAnswerInput {
  """
  The Node ID of the OrgInviteMemberAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  fullDatabaseId: BigInt

  """
  Create a new project field.
  """
  createProjectV2Field(
    """
    Parameters for CreateProjectV2Field
    """
    input: CreateProjectV2FieldInput!
  ): CreateProjectV2FieldPayload

  """
  The organization invitation.
  """
  organizationInvitation: OrganizationInvitation

  """
  The name of the Organization.
  """
  id: ID!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgAddBillingManagerAuditEntry object
  """
  id: ID!

  """
  The user affected by the action
  """
  createSponsorsListing(
    """
    Parameters for CreateSponsorsListing
    """
    input: CreateSponsorsListingInput!
  ): CreateSponsorsListingPayload

  """
  Create a new payment tier for your GitHub Sponsors profile.
  """
  createdAt: DateTime!

  """
  The Node ID of the LockedEvent object
  """
  id: ID!

  """
  Make many one-time sponsorships for different sponsorable users or
  organizations at once. Can only sponsor those who have a public GitHub
  Sponsors profile.
  """
  createSponsorships(
    """
    Parameters for CreateSponsorships
    """
    input: CreateSponsorshipsInput!
  ): CreateSponsorshipsPayload

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  """
  Creates a new team discussion.
  """
  email: String!

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
input MarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Creates a new user list.
  """
  createUserList(
    """
    Parameters for CreateUserList
    """
    input: CreateUserListInput!
  ): CreateUserListPayload

  """
  Rejects a suggested topic for the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  """
  The configuration for this merge queue
  """
  configuration: MergeQueueConfiguration

  """
  The entries in the queue
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryCreationPermissionAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The Node ID of the OrgInviteToBusinessAuditEntry object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeQueueEntryConnection

  """
  The Node ID of the MergeQueue object
  """
  databaseId: Int

  """
  The Node ID of the MovedColumnsInProjectEvent object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgAddMemberAuditEntry object
  """
  id: ID!

  """
  Unlink a branch from an issue.
  """
  deleteLinkedBranch(
    """
    Parameters for DeleteLinkedBranch
    """
    input: DeleteLinkedBranchInput!
  ): DeleteLinkedBranchPayload

  """
  Delete a package version.
  """
  nextEntryEstimatedTimeToMerge: Int

  """
  The repository this merge queue belongs to
  """
  repository: Repository

  """
  The HTTP path for this merge queue
  """
  resourcePath: URI!

  """
  The HTTP URL for this merge queue
  """
  url: URI!
}

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
type OrgOauthAppAccessApprovedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessApprovedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  digestMethodUrl: URI

  """
  The HTTP path for the OAuth application
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object
  """
  id: ID!

  """
  The HTTP URL for the OAuth application
  """
  issuerUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_blocked event.
"""
type Organization implements Actor & AnnouncementBanner & MemberStatusable & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  The text of the announcement
  """
  announcement: String

  """
  The expiration date of the announcement, if any
  """
  announcementExpiresAt: DateTime

  """
  Whether the announcement can be dismissed by the user
  """
  announcementUserDismissible: Boolean

  """
  Deletes a project workflow.
  """
  deleteProjectV2Workflow(
    """
    Parameters for DeleteProjectV2Workflow
    """
    input: DeleteProjectV2WorkflowInput!
  ): DeleteProjectV2WorkflowPayload

  """
  Identifies the date and time when the organization was archived.
  """
  archivedAt: DateTime

  """
  Audit log entries of the organization
  """
  maximumEntriesToBuild: Int

  """
  The maximum number of entries to merge at once.
  """
  maximumEntriesToMerge: Int

  """
  The merge method to use for this queue.
  """
  mergeMethod: PullRequestMergeMethod

  """
  Delete a repository ruleset
  """
  deleteRepositoryRuleset(
    """
    Parameters for DeleteRepositoryRuleset
    """
    input: DeleteRepositoryRulesetInput!
  ): DeleteRepositoryRulesetPayload

  """
  Deletes a team discussion.
  """
  mergingStrategy: MergeQueueMergingStrategy

  """
  The minimum number of entries required to merge at once.
  """
  minimumEntriesToMerge: Int

  """
  Deletes a user list.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessBlockedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  id: ID!

"""
Entries in a MergeQueue
"""
type MergeQueueEntry implements Node {
  """
  The HTTP path for the OAuth application
  """
  dequeuePullRequest(
    """
    Parameters for DequeuePullRequest
    """
    input: DequeuePullRequestInput!
  ): DequeuePullRequestPayload

  """
  The HTTP URL for the OAuth application
  """
  addEnterpriseOrganizationMember(
    """
    Parameters for AddEnterpriseOrganizationMember
    """
    input: AddEnterpriseOrganizationMemberInput!
  ): AddEnterpriseOrganizationMemberPayload

  """
  The name of the Organization.
  """
  enqueuedAt: DateTime!

  """
  The actor that enqueued this entry
  """
  enqueuer: Actor!

  """
  Add a pull request to the merge queue.
  """
  enqueuePullRequest(
    """
    Parameters for EnqueuePullRequest
    """
    input: EnqueuePullRequestInput!
  ): EnqueuePullRequestPayload

  """
  Follow an organization.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgBlockUserAuditEntry object
  """
  id: ID!

  """
  The head commit for this entry
  """
  addProjectV2DraftIssue(
    """
    Parameters for AddProjectV2DraftIssue
    """
    input: AddProjectV2DraftIssueInput!
  ): AddProjectV2DraftIssuePayload

  """
  The merge queue that this entry belongs to
  """
  mergeQueue: MergeQueue

  """
  The position of this entry in the queue
  """
  position: Int!

  """
  The pull request that will be added to a merge group
  """
  pullRequest: PullRequest

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Does this pull request need to be deployed on its own
  """
  solo: Boolean!

  """
  Links a project to a repository.
  """
  linkProjectV2ToRepository(
    """
    Parameters for LinkProjectV2ToRepository
    """
    input: LinkProjectV2ToRepositoryInput!
  ): LinkProjectV2ToRepositoryPayload

  """
  Links a project to a team.
  """
  linkProjectV2ToTeam(
    """
    Parameters for LinkProjectV2ToTeam
    """
    input: LinkProjectV2ToTeamInput!
  ): LinkProjectV2ToTeamPayload

  """
  Creates a repository link for a project.
  """
  addPullRequestReviewThreadReply(
    """
    Parameters for AddPullRequestReviewThreadReply
    """
    input: AddPullRequestReviewThreadReplyInput!
  ): AddPullRequestReviewThreadReplyPayload

  """
  Adds a reaction to a subject.
  """
  state: MergeQueueEntryState!
}

"""
Ordering options for an organization's enterprise owner connections.
"""
input OrgEnterpriseOwnerOrder {
  """
  The ordering direction.
  """
  hasSponsorsListing: Boolean!

  """
  The Node ID of the Organization object
  """
  id: ID!

  """
  The field to order enterprise owners by.
  """
  field: OrgEnterpriseOwnerOrderField!
}

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  Order enterprise owners by login.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessDeniedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  Whether the given account is sponsoring this user/organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The organization's public profile location.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  A list of all mannequins for this organization.
  """
  mannequins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter mannequins by login.
    """
    login: String

    """
    Ordering options for mannequins returned from the connection.
    """
    orderBy: MannequinOrder = {field: CREATED_AT, direction: ASC}
  ): MannequinConnection!

  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
type OrgOauthAppAccessRequestedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessRequestedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_unblocked event.
"""
type OrgOauthAppAccessUnblockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessUnblockedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  Find a project by number.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.remove_billing_manager event.
"""
type OrgRemoveBillingManagerAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP path listing organization's projects
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MergeQueueEntryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  Archives a ProjectV2Item
  """
  archiveProjectV2Item(
    """
    Parameters for ArchiveProjectV2Item
    """
    input: ArchiveProjectV2ItemInput!
  ): ArchiveProjectV2ItemPayload

  """
  Marks a repository as archived.
  """
  createdAt: PreciseDateTime!

  """
  The email address of the organization invitation.
  """
  email: String

  """
  The Node ID of the OrgInviteMemberAuditEntry object
  """
  id: ID!

  """
  Publish an existing sponsorship tier that is currently still a draft to a GitHub Sponsors profile.
  """
  publishSponsorsTier(
    """
    Parameters for PublishSponsorsTier
    """
    input: PublishSponsorsTierInput!
  ): PublishSponsorsTierPayload

  """
  Regenerates the identity provider recovery codes for an enterprise
  """
  MERGEABLE

  """
  The organization invitation.
  """
  organizationInvitation: OrganizationInvitation

  """
  The name of the Organization.
  """
  QUEUED

  """
  This mutation clears the value of a field for an item in a Project. Currently
  only text, number, date, assignees, labels, single-select, iteration and
  milestone fields are supported.
  """
  clearProjectV2ItemFieldValue(
    """
    Parameters for ClearProjectV2ItemFieldValue
    """
    input: ClearProjectV2ItemFieldValueInput!
  ): ClearProjectV2ItemFieldValuePayload

  """
  Creates a new project by cloning configuration from an existing project.
  """
  UNMERGEABLE
}

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  Entries only allowed to merge if they are passing.
  """
  ALLGREEN

  """
  Close a discussion.
  """
  closeDiscussion(
    """
    Parameters for CloseDiscussion
    """
    input: CloseDiscussionInput!
  ): CloseDiscussionPayload

  """
  Removes a user from all organizations within the enterprise
  """
  removeEnterpriseMember(
    """
    Parameters for RemoveEnterpriseMember
    """
    input: RemoveEnterpriseMemberInput!
  ): RemoveEnterpriseMemberPayload

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveMemberAuditEntry object
  """
  id: ID!

  """
  The Node ID of the MarketplaceListing object
  """
  id: ID!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  databaseId: Int

  """
  Copy a project.
  """
  copyProjectV2(
    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Invites a user to claim reattributable data
  """
  createAttributionInvitation(
    """
    Parameters for CreateAttributionInvitation
    """
    input: CreateAttributionInvitationInput!
  ): CreateAttributionInvitationPayload

  """
  Create a new branch protection rule
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Reopen a discussion.
  """
  createdAt: PreciseDateTime!

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The Node ID of the OrgInviteToBusinessAuditEntry object
  """
  id: ID!

  """
  Organization owners have full access and can change several settings,
  including the names of repositories that belong to the Organization and Owners
  team membership. In addition, organization owners can delete the organization
  and all of its repositories.
  """
  id: ID!

  """
  The Node ID of the IssueComment object
  """
  duplicate: IssueOrPullRequest

  """
  Retire a published payment tier from your GitHub Sponsors profile so it cannot be used to start new sponsorships.
  """
  retireSponsorsTier(
    """
    Parameters for RetireSponsorsTier
    """
    input: RetireSponsorsTierInput!
  ): RetireSponsorsTierPayload

  """
  Create a pull request that reverts the changes from a merged pull request.
  """
  revertPullRequest(
    """
    Parameters for RevertPullRequest
    """
    input: RevertPullRequestInput!
  ): RevertPullRequestPayload

  """
  Revoke the migrator role to a user for all organizations under an enterprise account.
  """
  id: ID!

  """
  Polar funding platform.
  """
  headRefName: String!

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  Tidelift funding platform.
  """
  howItWorks: String

  """
  The Node ID of the MarketplaceCategory object
  """
  id: ID!

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
type OrgOauthAppAccessApprovedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  A list of edges.
  """
  edges: [MannequinEdge]

  """
  Starts a GitHub Enterprise Importer organization migration.
  """
  startOrganizationMigration(
    """
    Parameters for StartOrganizationMigration
    """
    input: StartOrganizationMigrationInput!
  ): StartOrganizationMigrationPayload

  """
  Starts a GitHub Enterprise Importer (GEI) repository migration.
  """
  nodes: [Mannequin]

  """
  Create a branch linked to an issue.
  """
  createLinkedBranch(
    """
    Parameters for CreateLinkedBranch
    """
    input: CreateLinkedBranchInput!
  ): CreateLinkedBranchPayload

  """
  Transfer an organization from one enterprise to another enterprise.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgCreateAuditEntry object
  """
  id: ID!

  """
  Transfer an issue to a different repository
  """
  createdAt: DateTime!

  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The name of the OAuth application.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveOutsideCollaboratorAuditEntry object
  """
  id: ID!

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  The HTTP URL for the OAuth application
  """
  createProjectV2Field(
    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Parameters for UnlinkProjectV2FromRepository
    """
    input: UnlinkProjectV2FromRepositoryInput!
  ): UnlinkProjectV2FromRepositoryPayload

  """
  Unlinks a project to a team.
  """
  unlinkProjectV2FromTeam(
    """
    Parameters for UnlinkProjectV2FromTeam
    """
    input: UnlinkProjectV2FromTeamInput!
  ): UnlinkProjectV2FromTeamPayload

  """
  Deletes a repository link from a project.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Mannequin
}

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Parameters for CreateSponsorsListing
    """
    input: CreateSponsorsListingInput!
  ): CreateSponsorsListingPayload

  """
  Unmark a project as a template.
  """
  unmarkProjectV2AsTemplate(
    """
    Parameters for UnmarkProjectV2AsTemplate
    """
    input: UnmarkProjectV2AsTemplateInput!
  ): UnmarkProjectV2AsTemplatePayload

  """
  Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
  """
  field: MannequinOrderField!
}

"""
Audit log entry for a org.oauth_app_access_blocked event.
"""
type OrgOauthAppAccessBlockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The migration flag to continue on error.
  """
  CREATED_AT

  """
  Make many one-time sponsorships for different sponsorable users or
  organizations at once. Can only sponsor those who have a public GitHub
  Sponsors profile.
  """
  createSponsorships(
    """
    Parameters for CreateSponsorships
    """
    input: CreateSponsorshipsInput!
  ): CreateSponsorshipsPayload

  """
  Unsubscribes from notifications
  """
  unsubscribeFromNotifications(
    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

  """
  Creates a new user list.
  """
  createUserList(
    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The HTTP path for the OAuth application
  """
  failureReason: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    If true, filters teams that are mapped to an LDAP Group (Enterprise only)
    """
    ldapMapped: Boolean

    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    orderBy: TeamOrder

    """
    If non-null, filters teams according to privacy
    """
    privacy: TeamPrivacy

    """
    If non-null, filters teams with query on team name and team slug
    """
    query: String

    """
    If non-null, filters teams according to whether the viewer is an admin or member on team
    """
    role: TeamRole

    """
    If true, restrict to only root teams
    """
    rootTeamsOnly: Boolean = false

    """
    User logins to filter by
    """
    userLogins: [String!]
  ): TeamConnection!

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  cursor: String!

  """
  The migration state.
  """
  state: MigrationState!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  warningsCount: Int!
}

"""
A GitHub Enterprise Importer (GEI) migration source.
"""
type MigrationSource implements Node {
  """
  Sets whether or not an organization owner can make purchases.
  """
  deleteLinkedBranch(
    """
    Parameters for DeleteLinkedBranch
    """
    input: DeleteLinkedBranchInput!
  ): DeleteLinkedBranchPayload

  """
  Delete a package version.
  """
  id: ID!

  """
  The migration source name.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The migration source type.
  """
  clientMutationId: String

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  projectV2: ProjectV2
}

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
input MarkPullRequestReadyForReviewInput {
  """
  Delete a project.
  """
  deleteProjectV2(
    """
    Parameters for DeleteProjectV2
    """
    input: DeleteProjectV2Input!
  ): DeleteProjectV2Payload

  """
  Delete a project field.
  """
  deleteProjectV2Field(
    """
    Parameters for DeleteProjectV2Field
    """
    input: DeleteProjectV2FieldInput!
  ): DeleteProjectV2FieldPayload

  """
  The Node ID of the HeadRefRestoredEvent object
  """
  digestMethodUrl: URI

  """
  The Node ID of the OrgDisableSamlAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  Updates which of the viewer's lists an item belongs to
  """
  createdAt: PreciseDateTime!

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  websiteUrl: URI
}

"""
An audit entry in an organization audit log.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
type OrgOauthAppAccessRequestedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessRequestedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUnblockUserAuditEntry object
  """
  id: ID!

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
type OrganizationIdentityProvider implements Node {
  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_unblocked event.
"""
type OrgOauthAppAccessUnblockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateDefaultRepositoryPermissionAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
enum OrganizationInvitationType {
  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.remove_billing_manager event.
"""
type OrgRemoveBillingManagerAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgRemoveBillingManagerAuditEntry object
  """
  id: ID!

  """
  Verify that a verifiable domain has the expected DNS record.
  """
  regenerateEnterpriseIdentityProviderRecoveryCodes(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The listing's technical description rendered to HTML.
  """
  howItWorksHTML: HTML!

  """
  The Node ID of the MarketplaceListing object
  """
  id: ID!

  """
  The template name.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
type OIDCProvider implements Node {
  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  url: URI!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Removes a user from all organizations within the enterprise
  """
  removeEnterpriseMember(
    """
    Parameters for RemoveEnterpriseMember
    """
    input: RemoveEnterpriseMemberInput!
  ): RemoveEnterpriseMemberPayload

  """
  Removes an organization from the enterprise
  """
  viewerCanReopen: Boolean!
}

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type OrgDisableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  enterpriseUrl: URI

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OIDCProvider object
  """
  id: ID!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefRestoredEvent object
  """
  id: ID!

  """
  The name of the file uploaded.
  """
  cursor: String!

  """
  The name of the OAuth application.
  """
  node: EnterpriseServerInstallation

  """
  The HTTP path for the OAuth application
  """
  reopenDiscussion(
    """
    Parameters for ReopenDiscussion
    """
    input: ReopenDiscussionInput!
  ): ReopenDiscussionPayload

  """
  The HTTP URL for the OAuth application
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  The Node ID of the OrgDisableTwoFactorRequirementAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveMemberAuditEntry object
  """
  id: ID!

"""
An Enterprise Server installation that a user is a member of.
"""
type IpAllowListEntry implements Node {
  """
  Retire a published payment tier from your GitHub Sponsors profile so it cannot be used to start new sponsorships.
  """
  retireSponsorsTier(
    """
    Parameters for RetireSponsorsTier
    """
    input: RetireSponsorsTierInput!
  ): RetireSponsorsTierPayload

  """
  Create a pull request that reverts the changes from a merged pull request.
  """
  revertPullRequest(
    """
    Parameters for RevertPullRequest
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  Revoke the migrator role to a user for all organizations under an enterprise account.
  """
  allowListValue: String!

"""
Represents a member feature request notification
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

  """
  The user affected by the action
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OauthApplicationCreateAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryCreationPermissionAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  title: String!

  """
  The HTTP path for the OAuth application
  """
  updatedAt: DateTime!
}

"""
Audit log entry for a org.enable_oauth_app_restrictions event.
"""
type OrgEnableOauthAppRestrictionsAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The HTTP URL for the OAuth application
  """
  startOrganizationMigration(
    """
    Parameters for StartOrganizationMigration
    """
    input: StartOrganizationMigrationInput!
  ): StartOrganizationMigrationPayload

  """
  Starts a GitHub Enterprise Importer (GEI) repository migration.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Transfer an organization from one enterprise to another enterprise.
  """
  transferEnterpriseOrganization(
    """
    Parameters for TransferEnterpriseOrganization
    """
    input: TransferEnterpriseOrganizationInput!
  ): TransferEnterpriseOrganizationPayload

  """
  Organization owners have full access and can change several settings,
  including the names of repositories that belong to the Organization and Owners
  team membership. In addition, organization owners can delete the organization
  and all of its repositories.
  """
  transferIssue(
    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The rate limit of the OAuth application.
  """
  unarchiveProjectV2Item(
    """
    Parameters for UnarchiveProjectV2Item
    """
    input: UnarchiveProjectV2ItemInput!
  ): UnarchiveProjectV2ItemPayload

  """
  The state of the OAuth application.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgEnableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

  """
  The template filename.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

  """
  The Node ID of the MembersCanDeleteReposDisableAuditEntry object
  """
  id: ID!

  """
  Unlinks a project from a repository.
  """
  unlinkProjectV2FromRepository(
    """
    Parameters for UnlinkProjectV2FromRepository
    """
    input: UnlinkProjectV2FromRepositoryInput!
  ): UnlinkProjectV2FromRepositoryPayload

  """
  Unlinks a project to a team.
  """
  unlinkProjectV2FromTeam(
    """
    Parameters for UnlinkProjectV2FromTeam
    """
    input: UnlinkProjectV2FromTeamInput!
  ): UnlinkProjectV2FromTeamPayload

"""
The state of an OAuth application when it was created.
"""
enum OauthApplicationCreateAuditEntryState {
  """
  The OAuth application was active and allowed to have OAuth Accesses.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The OAuth application was in the process of being deleted.
  """
  PENDING_DELETION

  """
  The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  unmarkProjectV2AsTemplate(
    """
    Parameters for UnmarkProjectV2AsTemplate
    """
    input: UnmarkProjectV2AsTemplateInput!
  ): UnmarkProjectV2AsTemplatePayload

  """
  Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
  """
  id: ID!

  """
  Whether the entry is currently active.
  """
  isActive: Boolean!

"""
Audit log entry for a org.enable_saml event.
"""
type OrgEnableSamlAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

"""
A file in a package version.
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveOutsideCollaboratorAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.enable_two_factor_requirement event.
"""
type Organization implements Actor & AnnouncementBanner & MemberStatusable & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  The text of the announcement
  """
  announcement: String

"""
Represents an owner of a package.
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  Whether the announcement can be dismissed by the user
  """
  announcementUserDismissible: Boolean

  """
  The suggested assignees.
  """
  enterpriseUrl: URI

  """
  Identifies the date and time when the organization was archived.
  """
  archivedAt: DateTime

  """
  Audit log entries of the organization
  """
  POLAR

  """
  The template filename.
  """
  filename: String!

  """
  The suggested assignees.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  Sets whether or not an organization owner can make purchases.
  """
  updateEnterpriseMembersCanMakePurchasesSetting(
    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The name of the Organization.
  """
  downloadsTotalCount: Int!
}

"""
A version tag contains the mapping between a tag name and a version.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

  """
  The Node ID of the MemberFeatureRequestNotification object
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposEnableAuditEntry object
  """
  databaseId: Int

  """
  The Node ID of the MovedColumnsInProjectEvent object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgAddBillingManagerAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRestoreMemberAuditEntry object
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

  """
  Represents member feature request notification title
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  Identifies the date and time when the object was last updated.
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

"""
Ordering options for an organization's enterprise owner connections.
"""
input OrgEnterpriseOwnerOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprise owners by.
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  Order enterprise owners by login.
  """
  LOGIN
}

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Abort a repository migration queued or in progress.
  """
  abortRepositoryMigration(
    """
    Parameters for AbortRepositoryMigration
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

  """
  Accepts a pending invitation for a user to become an administrator of an enterprise.
  """
  acceptEnterpriseAdministratorInvitation(
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

  """
  The template name.
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  hasSponsorsListing: Boolean!

  """
  The Node ID of the Organization object
  """
  id: ID!

  """
  Adds enterprise members to an organization within the enterprise.
  """
  addEnterpriseOrganizationMember(
    """
    Parameters for AddEnterpriseOrganizationMember
    """
    input: AddEnterpriseOrganizationMemberInput!
  ): AddEnterpriseOrganizationMemberPayload

  """
  Adds a support entitlement to an enterprise member.
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  The email address of the organization invitation.
  """
  email: String

  """
  The Node ID of the OrgInviteMemberAuditEntry object
  """
  id: ID!

  """
  Whether the given account is sponsoring this user/organization.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The organization invitation.
  """
  organizationInvitation: OrganizationInvitation

  """
  The name of the Organization.
  """
  updateProjectV2(
    """
    Parameters for UpdateProjectV2
    """
    input: UpdateProjectV2Input!
  ): UpdateProjectV2Payload

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The organization's public profile location.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgAddMemberAuditEntry object
  """
  id: ID!

  """
  A list of all mannequins for this organization.
  """
  mannequins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter mannequins by login.
    """
    login: String

    """
    Ordering options for mannequins returned from the connection.
    """
    orderBy: MannequinOrder = {field: CREATED_AT, direction: ASC}
  ): MannequinConnection!

  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  addPullRequestReviewThreadReply(
    """
    Parameters for AddPullRequestReviewThreadReply
    """
    input: AddPullRequestReviewThreadReplyInput!
  ): AddPullRequestReviewThreadReplyPayload

  """
  Adds a reaction to a subject.
  """
  addReaction(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The template name.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  Default to a blank commit message.
  """
  BLANK

  """
  Archives a ProjectV2Item
  """
  archiveProjectV2Item(
    """
    Parameters for ArchiveProjectV2Item
    """
    input: ArchiveProjectV2ItemInput!
  ): ArchiveProjectV2ItemPayload

  """
  Marks a repository as archived.
  """
  PR_BODY

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
The possible default commit titles for merges.
"""
enum MergeCommitTitle {
  """
  Default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
  """
  MERGE_MESSAGE

  """
  Update a repository ruleset
  """
  createdAt: PreciseDateTime!

  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The source of this permission.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

"""
Autogenerated input type of MergePullRequest
"""
input EnterpriseServerInstallationOrder {
  """
  The Node ID of the OrgInviteToBusinessAuditEntry object
  """
  id: ID!

  """
  This mutation clears the value of a field for an item in a Project. Currently
  only text, number, date, assignees, labels, single-select, iteration and
  milestone fields are supported.
  """
  clearProjectV2ItemFieldValue(
    """
    Parameters for ClearProjectV2ItemFieldValue
    """
    input: ClearProjectV2ItemFieldValueInput!
  ): ClearProjectV2ItemFieldValuePayload

  """
  Creates a new project by cloning configuration from an existing project.
  """
  id: ID!

  """
  The host name of the Enterprise Server installation.
  """
  commitUrl: URI!

  """
  Close a discussion.
  """
  closeDiscussion(
    """
    Parameters for CloseDiscussion
    """
    input: CloseDiscussionInput!
  ): CloseDiscussionPayload

  """
  Close an issue.
  """
  commitUrl: URI!

  """
  Updates an existing user list.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUnblockUserAuditEntry object
  """
  id: ID!

  """
  Updates which of the viewer's lists an item belongs to
  """
  updateUserListsForItem(
    """
    Parameters for UpdateUserListsForItem
    """
    input: UpdateUserListsForItemInput!
  ): UpdateUserListsForItemPayload

  """
  Verify that a verifiable domain has the expected DNS record.
  """
  description: String

  """
  The Node ID of the Label object
  """
  id: ID!

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
type OrgOauthAppAccessApprovedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The Node ID of the EnterpriseServerInstallation object
  """
  enterprise: Enterprise!

  """
  Copy a project.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgBlockUserAuditEntry object
  """
  id: ID!

  """
  Invites a user to claim reattributable data
  """
  createAttributionInvitation(
    """
    Parameters for CreateAttributionInvitation
    """
    input: CreateAttributionInvitationInput!
  ): CreateAttributionInvitationPayload

  """
  Create a new branch protection rule
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

"""
An OIDC identity provider configured to provision identities for an enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with read:enterprise or admin:enterprise scope.
"""
type MergeQueue implements Node {
  """
  The configuration for this merge queue
  """
  configuration: MergeQueueConfiguration

  """
  The entries in the queue
  """
  entries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeQueueEntryConnection

  """
  Creates an organization as part of an enterprise account. A personal access
  token used to create an organization is implicitly permitted to update the
  organization it created, if the organization is part of an enterprise that has
  SAML enabled or uses Enterprise Managed Users. If the organization is not part
  of such an enterprise, and instead has SAML enabled for it individually, the
  token will then require SAML authorization to continue working against that organization.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessApprovedAuditEntry object
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  nextEntryEstimatedTimeToMerge: Int

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  Find a project by number.
  """
  resourcePath: URI!

  """
  The HTTP URL for this merge queue
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateDefaultRepositoryPermissionAuditEntry object
  """
  id: ID!

"""
Configuration for a MergeQueue
"""
type MergeQueueConfiguration {
  """
  Create a branch linked to an issue.
  """
  createLinkedBranch(
    """
    Parameters for CreateLinkedBranch
    """
    input: CreateLinkedBranchInput!
  ): CreateLinkedBranchPayload

  """
  The name of the OAuth application.
  """
  checkResponseTimeout: Int

  """
  The HTTP path for the OAuth application
  """
  maximumEntriesToBuild: Int

  """
  The HTTP URL for the OAuth application
  """
  maximumEntriesToMerge: Int

  """
  Create a new project field.
  """
  createProjectV2Field(
    """
    Parameters for CreateProjectV2Field
    """
    input: CreateProjectV2FieldInput!
  ): CreateProjectV2FieldPayload

  """
  The HTTP path listing organization's projects
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Entries in a MergeQueue
"""
type MergeQueueEntry implements Node {
  """
  The application URL of the OAuth application.
  """
  baseCommit: Commit

  """
  The callback URL of the OAuth application.
  """
  createSponsorships(
    """
    Parameters for CreateSponsorships
    """
    input: CreateSponsorshipsInput!
  ): CreateSponsorshipsPayload

  """
  Creates a new team discussion.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OauthApplicationCreateAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessBlockedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  enqueuer: Actor!

  """
  The HTTP path for the OAuth application
  """
  createUserList(
    """
    Parameters for CreateUserList
    """
    input: CreateUserListInput!
  ): CreateUserListPayload

  """
  The HTTP URL for the OAuth application
  """
  estimatedTimeToMerge: Int

  """
  The head commit for this entry
  """
  headCommit: Commit

  """
  The Node ID of the MergeQueueEntry object
  """
  id: ID!

  """
  Whether this pull request should jump the queue
  """
  jump: Boolean!

  """
  The merge queue that this entry belongs to
  """
  mergeQueue: MergeQueue

  """
  The position of this entry in the queue
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

  """
  The rate limit of the OAuth application.
  """
  pullRequest: PullRequest

"""
A Pinned Issue is a issue pinned to a repository's index page.
"""
type PinnedIssue implements Node {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

  """
  The Node ID of the OrgConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The state of this entry in the queue
  """
  state: MergeQueueEntryState!
}

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  A list of edges.
  """
  edges: [MergeQueueEntryEdge]

  """
  Unlink a branch from an issue.
  """
  deleteLinkedBranch(
    """
    Parameters for DeleteLinkedBranch
    """
    input: DeleteLinkedBranchInput!
  ): DeleteLinkedBranchPayload

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The state of an OAuth application when it was created.
"""
type MergeQueueEntryEdge {
  """
  The OAuth application was active and allowed to have OAuth Accesses.
  """
  cursor: String!

  """
  The OAuth application was in the process of being deleted.
  """
  deleteProjectV2(
    """
    Parameters for DeleteProjectV2
    """
    input: DeleteProjectV2Input!
  ): DeleteProjectV2Payload

  """
  The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
type OrgOauthAppAccessRequestedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessRequestedAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryCreationPermissionAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_unblocked event.
"""
type OrgOauthAppAccessUnblockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessUnblockedAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.remove_billing_manager event.
"""
type Organization implements Actor & AnnouncementBanner & MemberStatusable & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  The text of the announcement
  """
  announcement: String

  """
  The expiration date of the announcement, if any
  """
  announcementExpiresAt: DateTime

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  announcementUserDismissible: Boolean

  """
  The action name
  """
  action: String!

  """
  Identifies the date and time when the organization was archived.
  """
  archivedAt: DateTime

  """
  Audit log entries of the organization
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveBillingManagerAuditEntry object
  """
  id: ID!

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  The entry is currently waiting for checks to pass.
  """
  AWAITING_CHECKS

  """
  Deletes a project workflow.
  """
  deleteProjectV2Workflow(
    """
    Parameters for DeleteProjectV2Workflow
    """
    input: DeleteProjectV2WorkflowInput!
  ): DeleteProjectV2WorkflowPayload

  """
  Deletes a pull request review.
  """
  LOCKED

  """
  The entry is currently mergeable.
  """
  MERGEABLE

  """
  The entry is currently queued.
  """
  QUEUED

  """
  Delete a repository ruleset
  """
  deleteRepositoryRuleset(
    """
    Parameters for DeleteRepositoryRuleset
    """
    input: DeleteRepositoryRulesetInput!
  ): DeleteRepositoryRulesetPayload

  """
  Deletes a team discussion.
  """
  UNMERGEABLE
}

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  Entries only allowed to merge if they are passing.
  """
  ALLGREEN

  """
  Deletes a user list.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgCreateAuditEntry object
  """
  id: ID!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  HEADGREEN
}

"""
Detailed status information about a pull request merge.
"""
enum MergeStateStatus {
  """
  Remove a pull request from the merge queue.
  """
  dequeuePullRequest(
    """
    Parameters for DequeuePullRequest
    """
    input: DequeuePullRequestInput!
  ): DequeuePullRequestPayload

  """
  Disable auto merge on the given pull request
  """
  BEHIND

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: GistOrder
  ): GistConnection!

  """
  The Node ID of the Gist object
  """
  enterpriseUrl: URI

  """
  Add a pull request to the merge queue.
  """
  enqueuePullRequest(
    """
    Parameters for EnqueuePullRequest
    """
    input: EnqueuePullRequestInput!
  ): EnqueuePullRequestPayload

  """
  Follow an organization.
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

  """
  Identifies if the gist is a fork.
  """
  isFork: Boolean!

  """
  Whether the gist is public or not.
  """
  isPublic: Boolean!

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgAddBillingManagerAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveMemberAuditEntry object
  """
  id: ID!

  """
  Links a project to a repository.
  """
  linkProjectV2ToRepository(
    """
    Parameters for LinkProjectV2ToRepository
    """
    input: LinkProjectV2ToRepositoryInput!
  ): LinkProjectV2ToRepositoryPayload

  """
  Links a project to a team.
  """
  linkProjectV2ToTeam(
    """
    Parameters for LinkProjectV2ToTeam
    """
    input: LinkProjectV2ToTeamInput!
  ): LinkProjectV2ToTeamPayload

  """
  Creates a repository link for a project.
  """
  login: String!

  """
  The name of the enterprise user account
  """
  hasSponsorsListing: Boolean!

  """
  The Node ID of the Organization object
  """
  id: ID!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  actor: Actor

  """
  Identifies the commit associated with the `merge` event.
  """
  commit: Commit

  """
  Mark a project as a template. Note that only projects which are owned by an Organization can be marked as a template.
  """
  markProjectV2AsTemplate(
    """
    Parameters for MarkProjectV2AsTemplate
    """
    input: MarkProjectV2AsTemplateInput!
  ): MarkProjectV2AsTemplatePayload

  """
  Marks a pull request ready for review.
  """
  createdAt: DateTime!

  """
  The Node ID of the MergedEvent object
  """
  id: ID!

  """
  Identifies the Ref associated with the `merge` event.
  """
  mergeRef: Ref

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

"""
Represents a GitHub Enterprise Importer (GEI) migration.
"""
interface Migration {
  """
  Organization owners have full access and can change several settings,
  including the names of repositories that belong to the Organization and Owners
  team membership. In addition, organization owners can delete the organization
  and all of its repositories.
  """
  continueOnError: Boolean!

  """
  Whether the given account is sponsoring this user/organization.
  """
  isSponsoredBy(
    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  Publish an existing sponsorship tier that is currently still a draft to a GitHub Sponsors profile.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgDisableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

  """
  Regenerates the identity provider recovery codes for an enterprise
  """
  databaseId: String

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The organization's public profile location.
  """
  failureReason: String

  """
  The Node ID of the Migration object
  """
  id: ID!

  """
  A list of all mannequins for this organization.
  """
  mannequins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter mannequins by login.
    """
    login: String

    """
    Ordering options for mannequins returned from the connection.
    """
    orderBy: MannequinOrder = {field: CREATED_AT, direction: ASC}
  ): MannequinConnection!

  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  migrationLogUrl: URI

  """
  The migration source.
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

  """
  The target repository name.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgAddMemberAuditEntry object
  """
  id: ID!

  """
  Removes a user from all organizations within the enterprise
  """
  removeEnterpriseMember(
    """
    Parameters for RemoveEnterpriseMember
    """
    input: RemoveEnterpriseMemberInput!
  ): RemoveEnterpriseMemberPayload

  """
  Removes an organization from the enterprise
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
A GitHub Enterprise Importer (GEI) migration source.
"""
type MigrationSource implements Node {
  """
  The Node ID of the MigrationSource object
  """
  id: ID!

  """
  The migration source name.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The migration source type.
  """
  fullDatabaseId: BigInt

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  databaseId: Int

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
enum MigrationSourceType {
  """
  Reopen a discussion.
  """
  reopenDiscussion(
    """
    Parameters for ReopenDiscussion
    """
    input: ReopenDiscussionInput!
  ): ReopenDiscussionPayload

  """
  Reopen a issue.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveOutsideCollaboratorAuditEntry object
  """
  id: ID!
}

  """
  Identifies the primary key from the database as a BigInt.
  """
  enterpriseUrl: URI

  """
  A GitHub Migration API source.
  """
  GITHUB_ARCHIVE
}

"""
The GitHub Enterprise Importer (GEI) migration state.
"""
enum MigrationState {
  """
  The migration has failed.
  """
  digestMethodUrl: URI

  """
  The Node ID of the OrgDisableSamlAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!
}

"""
Configuration for a MergeQueue
"""
type MergeQueueConfiguration {
  """
  Sets whether or not an organization owner can make purchases.
  """
  checkResponseTimeout: Int

  """
  The maximum number of entries to build at once.
  """
  maximumEntriesToBuild: Int

  """
  The maximum number of entries to merge at once.
  """
  maximumEntriesToMerge: Int

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  mergeMethod: PullRequestMergeMethod

  """
  The strategy to use when merging entries.
  """
  mergingStrategy: MergeQueueMergingStrategy

  """
  The minimum number of entries required to merge at once.
  """
  minimumEntriesToMerge: Int

  """
  The amount of time in minutes to wait before ignoring the minumum number of
  entries in the queue requirement and merging a collection of entries
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
New projects that manage issues, pull requests and drafts using tables and boards.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  The estimated time in seconds until this entry will be merged
  """
  closed: Boolean!

  """
  Find a project by number.
  """
  id: ID!

  """
  Whether this pull request should jump the queue
  """
  createdAt: DateTime!

  """
  The Node ID of the OrgRestoreMemberAuditEntry object
  """
  creator: Actor

  """
  The Node ID of the OrgDisableTwoFactorRequirementAuditEntry object
  """
  databaseId: Int

  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  pullRequest: PullRequest

  """
  Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
  """
  updateOrganizationWebCommitSignoffSetting(
    """
    Parameters for UpdateOrganizationWebCommitSignoffSetting
    """
    input: UpdateOrganizationWebCommitSignoffSettingInput!
  ): UpdateOrganizationWebCommitSignoffSettingPayload

  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  updatePatreonSponsorability(
    """
    Parameters for UpdatePatreonSponsorability
    """
    input: UpdatePatreonSponsorabilityInput!
  ): UpdatePatreonSponsorabilityPayload

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

  """
  The entry is currently queued.
  """
  QUEUED

  """
  The entry is currently unmergeable.
  """
  UNMERGEABLE
}

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  Entries only allowed to merge if they are passing.
  """
  ALLGREEN

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

"""
Detailed status information about a pull request merge.
"""
type Language implements Node {
  """
  The color defined for the current language.
  """
  number: Int!

  """
  The Node ID of the Language object
  """
  owner: ProjectV2Owner!

  """
  The Node ID of the OrgEnableOauthAppRestrictionsAuditEntry object
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

  """
  The name of the current language.
  """
  name: String!
}

  """
  Update a repository ruleset
  """
  updateRepositoryRuleset(
    """
    Parameters for UpdateRepositoryRuleset
    """
    input: UpdateRepositoryRulesetInput!
  ): UpdateRepositoryRulesetPayload

  """
  Sets whether contributors are required to sign off on web-based commits for a repository.
  """
  updateRepositoryWebCommitSignoffSetting(
    """
    Parameters for UpdateRepositoryWebCommitSignoffSetting
    """
    input: UpdateRepositoryWebCommitSignoffSettingInput!
  ): UpdateRepositoryWebCommitSignoffSettingPayload

  """
  Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

  """
  The HTTP path for this project
  """
  resourcePath: URI!

  """
  The project's short description.
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  The project's name.
  """
  title: String!

  """
  `true` if the object is locked
  """
  updatedAt: DateTime!

  """
  The Node ID of the MembersCanDeleteReposEnableAuditEntry object
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  The Node ID of the MovedColumnsInProjectEvent object
  """
  id: ID!

"""
Audit log entry for a org.enable_saml event.
"""
type OrgEnableSamlAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  The IP address of the actor
  """
  edges: [ProjectV2Edge]

  """
  A readable representation of the actor's location
  """
  nodes: [ProjectV2]

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The SAML provider's digest algorithm URL.
  """
  node: ProjectV2
}

"""
A field inside a project.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  The Node ID of the OrgEnableSamlAuditEntry object
  """
  createdAt: DateTime!

  """
  The SAML provider's issuer URL.
  """
  dataType: ProjectV2FieldType!

  """
  The Node ID of the OrgUnblockUserAuditEntry object
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  name: String!

  """
  The Organization associated with the Audit Entry.
  """
  project: ProjectV2!

  """
  The HTTP path for the organization
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  The HTTP URL for the organization
  """
  createdAt: DateTime!

  """
  The SAML provider's signature algorithm URL.
  """
  dataType: ProjectV2FieldType!

  """
  The SAML provider's single sign-on URL.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  The user affected by the action
  """
  name: String!

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  Verify that a verifiable domain has the expected DNS record.
  """
  edges: [ProjectV2FieldEdge]

  """
  The Node ID of the Label object
  """
  nodes: [ProjectV2Field]

  """
  The Node ID of the OrgDisableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

  """
  The Node ID of the Label object
  """
  id: ID!

"""
An OIDC identity provider configured to provision identities for an enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with read:enterprise or admin:enterprise scope.
"""
type ProjectV2FieldEdge {
  """
  Branches linked to this issue.
  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Abort a repository migration queued or in progress.
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  Accepts a pending invitation for a user to become an administrator of an enterprise.
  """
  ASSIGNEES

  """
  The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object
  """
  DATE

  """
  The Node ID of the OrgUpdateDefaultRepositoryPermissionAuditEntry object
  """
  ITERATION

  """
  Find a project by number.
  """
  LABELS

  """
  The Node ID of the License object
  """
  LINKED_PULL_REQUESTS

  """
  The name of the Organization.
  """
  MILESTONE

  """
  Adds a support entitlement to an enterprise member.
  """
  NUMBER

  """
  A list of projects under the owner.
  """
  REPOSITORY

  """
  The Node ID of the OIDCProvider object
  """
  REVIEWERS

  """
  Creates a new draft issue and add it to a Project.
  """
  SINGLE_SELECT

"""
Ordering options for an organization's enterprise owner connections.
"""
input OrgEnterpriseOwnerOrder {
  """
  The ordering direction.
  """
  TEXT

  """
  The field to order enterprise owners by.
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  Order enterprise owners by login.
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  The action name
  """
  content: ProjectV2ItemContent

  """
  The name of the OAuth application.
  """
  createdAt: DateTime!

  """
  The HTTP path for the OAuth application
  """
  creator: Actor

  """
  The HTTP URL for the OAuth application
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  addPullRequestReviewThreadReply(
    """
    Parameters for AddPullRequestReviewThreadReply
    """
    input: AddPullRequestReviewThreadReplyInput!
  ): AddPullRequestReviewThreadReplyPayload

  """
  Adds a reaction to a subject.
  """
  digestMethodUrl: URI

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

  """
  The email address of the organization invitation.
  """
  isArchived: Boolean!

  """
  The Node ID of the OrgUpdateMemberAuditEntry object
  """
  project: ProjectV2!

  """
  Create a new payment tier for your GitHub Sponsors profile.
  """
  type: ProjectV2ItemType!

  """
  The HTTP URL for this merge queue
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  The organization invitation.
  """
  edges: [ProjectV2ItemEdge]

  """
  The name of the Organization.
  """
  nodes: [ProjectV2Item]

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  The maximum number of entries to build at once.
  """
  maximumEntriesToBuild: Int

  """
  Creates a new user list.
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The action name
  """
  createdAt: DateTime!

  """
  The merge method to use for this queue.
  """
  creator: Actor

  """
  The strategy to use when merging entries.
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  The minimum number of entries required to merge at once.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Remove a pull request from the merge queue.
  """
  dequeuePullRequest(
    """
    Parameters for DequeuePullRequest
    """
    input: DequeuePullRequestInput!
  ): DequeuePullRequestPayload

  """
  Disable auto merge on the given pull request
  """
  totalCount: Int!
}

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The actor who created the item.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessBlockedAuditEntry object
  """
  id: ID!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  user: User

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type Organization implements Actor & AnnouncementBanner & MemberStatusable & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

"""
Detailed status information about a pull request merge.
"""
type LinkProjectV2ToRepositoryPayload {
  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ItemFieldValueEdge {
  """
  The repository the project is linked to.
  """
  The item at the end of the edge.
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    Parameters for RemoveEnterpriseMember
    """
    input: RemoveEnterpriseMemberInput!
  ): RemoveEnterpriseMemberPayload

  """
  Removes an organization from the enterprise
  """
  id: ID!

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  SAML Identity attributes
  """
  The email address of the organization invitation.
  """
  email: String

  """
  The Node ID of the OrgInviteMemberAuditEntry object
  """
  id: ID!

"""
Represents a GitHub Enterprise Importer (GEI) migration.
"""
interface Migration {
  """
  Reopen a discussion.
  """
  reopenDiscussion(
    """
    Parameters for ReopenDiscussion
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  The project view's name.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  Starts a GitHub Enterprise Importer (GEI) repository migration.
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  Unlinks a project from a repository.
  """
  edges: [ProjectV2ViewEdge]

  """
  Unlinks a project to a team.
  """
  nodes: [ProjectV2View]

  """
  Deletes a repository link from a project.
  """
  cursor: String!

  """
  Adds a reply to an existing Pull Request Review Thread.
  """
  addPullRequestReviewThreadReply(
    """
    Parameters for AddPullRequestReviewThreadReply
    """
    input: AddPullRequestReviewThreadReplyInput!
  ): AddPullRequestReviewThreadReplyPayload

  """
  Adds a reaction to a subject.
  """
  node: Mannequin
}

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
type ProjectV2ViewEdge {
  """
  The migration is in progress.
  """
  direction: OrderDirection!

  """
  The migration has not started.
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  closeDiscussion(
    """
    Parameters for CloseDiscussion
    """
    input: CloseDiscussionInput!
  ): CloseDiscussionPayload

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  id: ID!

  """
  The Node ID of the LockedEvent object
  """
  id: ID!

"""
Audit log entry for a org.oauth_app_access_blocked event.
"""
type OrgOauthAppAccessBlockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Sets whether or not an organization owner can make purchases.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  oauthApplicationUrl: URI

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  organization: Organization

  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  digestMethodUrl: URI

  """
  The Node ID of the OrgDisableSamlAuditEntry object
  """
  id: ID!

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type OrgDisableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Parameters for DeleteRepositoryRuleset
    """
    input: DeleteRepositoryRulesetInput!
  ): DeleteRepositoryRulesetPayload

  """
  The user affected by the action
  """
  deleteUserList(
    """
    Parameters for DeleteUserList
    """
    input: DeleteUserListInput!
  ): DeleteUserListPayload

  """
  The permalink to the pull request.
  """
  permalink: URI!

"""
An edge in a connection.
"""
enum OrgRemoveMemberAuditEntryMembershipType {
  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Parameters for AbortRepositoryMigration
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

  """
  The state of the OAuth application.
  """
  node: LinkedBranch
}

"""
Autogenerated input type of LockLockable
"""
input LockLockableInput {
  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Identifies the date and time when the organization was archived.
  """
  archivedAt: DateTime

  """
  Audit log entries of the organization
  """
  addEnterpriseOrganizationMember(
    """
    Parameters for AddEnterpriseOrganizationMember
    """
    input: AddEnterpriseOrganizationMemberInput!
  ): AddEnterpriseOrganizationMemberPayload

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Publish an existing sponsorship tier that is currently still a draft to a GitHub Sponsors profile.
  """
  publishSponsorsTier(
    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    input: PublishSponsorsTierInput!
  ): PublishSponsorsTierPayload

  """
  Regenerates the identity provider recovery codes for an enterprise
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the IssueComment object
  """
  addProjectV2DraftIssue(
    """
    Parameters for AddProjectV2DraftIssue
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The mannequin's email on the source instance.
  """
  email: String

  """
  Reopen a discussion.
  """
  reopenDiscussion(
    """
    Parameters for ReopenDiscussion
    """
    input: ReopenDiscussionInput!
  ): ReopenDiscussionPayload

  """
  Reopen a issue.
  """
  archiveProjectV2Item(
    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  Create a branch linked to an issue.
  """
  createLinkedBranch(
    """
    Parameters for CreateLinkedBranch
    """
    input: CreateLinkedBranchInput!
  ): CreateLinkedBranchPayload

  """
  Creates a GitHub Enterprise Importer (GEI) migration source.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgBlockUserAuditEntry object
  """
  id: ID!

"""
Autogenerated input type of LinkRepositoryToProject
"""
input LinkProjectV2ToRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the repository.
  """
  enterpriseUrl: URI

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  createProjectV2Field(
    """
    Parameters for CreateProjectV2Field
    """
    input: CreateProjectV2FieldInput!
  ): CreateProjectV2FieldPayload

  """
  Create a new pull request
  """
  createdAt: PreciseDateTime!

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Node ID of the OrgOauthAppAccessApprovedAuditEntry object
  """
  id: ID!

  """
  Find a project by number.
  """
  clientMutationId: String

  """
  The HTTP URL for the OAuth application
  """
  createRepositoryRuleset(
    """
    Parameters for CreateRepositoryRuleset
    """
    input: CreateRepositoryRulesetInput!
  ): CreateRepositoryRulesetPayload

  """
  Create a GitHub Sponsors profile to allow others to sponsor you or your organization.
  """
  createSponsorsListing(
    """
    Parameters for CreateSponsorsListing
    """
    input: CreateSponsorsListingInput!
  ): CreateSponsorsListingPayload

  """
  Create a new payment tier for your GitHub Sponsors profile.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
type MarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Make many one-time sponsorships for different sponsorable users or
  organizations at once. Can only sponsor those who have a public GitHub
  Sponsors profile.
  """
  createSponsorships(
    """
    Parameters for CreateSponsorships
    """
    input: CreateSponsorshipsInput!
  ): CreateSponsorshipsPayload

  """
  Creates a new team discussion.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of MarkPullRequestReadyForReview
"""
type LinkProjectV2ToRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The HTTP path listing organization's projects
  """
  edges: [LinkedBranchEdge]

  """
  A list of nodes.
  """
  nodes: [LinkedBranch]

  """
  Information to aid in pagination.
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the MarkedAsDuplicateEvent object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgOauthAppAccessBlockedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  The HTTP URL for the OAuth application
  """
  howItWorks: String

  """
  The Node ID of the MarketplaceCategory object
  """
  id: ID!

  """
  Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  updatePatreonSponsorability(
    """
    Parameters for UpdatePatreonSponsorability
    """
    input: UpdatePatreonSponsorabilityInput!
  ): UpdatePatreonSponsorabilityPayload

  """
  Updates an existing project.
  """
  deleteLinkedBranch(
    """
    Parameters for DeleteLinkedBranch
    """
    input: DeleteLinkedBranchInput!
  ): DeleteLinkedBranchPayload

  """
  Delete a package version.
  """
  node: LinkedBranch
}

"""
Represents a member feature request notification
"""
type MemberFeatureRequestNotification implements Node {
  """
  Represents member feature request body containing organization name and the number of feature requests
  """
  body: String!

  """
  Updates an existing project.
  """
  updateProjectV2(
    """
    Parameters for UpdateProjectV2
    """
    input: UpdateProjectV2Input!
  ): UpdateProjectV2Payload

  """
  Update the collaborators on a team or a project
  """
  updateProjectV2Collaborators(
    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    input: UpdateProjectV2CollaboratorsInput!
  ): UpdateProjectV2CollaboratorsPayload

  """
  Identifies the date and time when the object was last updated.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Deletes a project workflow.
  """
  deleteProjectV2Workflow(
    """
    Parameters for DeleteProjectV2Workflow
    """
    input: DeleteProjectV2WorkflowInput!
  ): DeleteProjectV2WorkflowPayload

  """
  Deletes a pull request review.
  """
  clientMutationId: String

  """
  The ID of the project to link to the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The Node ID of the OrgConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  Delete a repository ruleset
  """
  deleteRepositoryRuleset(
    """
    Parameters for DeleteRepositoryRuleset
    """
    input: DeleteRepositoryRulesetInput!
  ): DeleteRepositoryRulesetPayload

  """
  Deletes a team discussion.
  """
  clientMutationId: String

  """
  The team the project is linked to
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessDeniedAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryCreationPermissionAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
type OrgOauthAppAccessRequestedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessRequestedAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The name of the Organization.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  organizationUrl: URI

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_unblocked event.
"""
type Organization implements Actor & AnnouncementBanner & MemberStatusable & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  The text of the announcement
  """
  announcement: String

  """
  The expiration date of the announcement, if any
  """
  announcementExpiresAt: DateTime

  """
  Whether the announcement can be dismissed by the user
  """
  announcementUserDismissible: Boolean

  """
  The action name
  """
  action: String!

  """
  Identifies the date and time when the organization was archived.
  """
  archivedAt: DateTime

  """
  Audit log entries of the organization
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessUnblockedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

"""
Audit log entry for a org.remove_billing_manager event.
"""
type OrgRemoveBillingManagerAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  hasSponsorsListing: Boolean!

  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  The Node ID of the OrgRemoveBillingManagerAuditEntry object
  """
  id: ID!

"""
Autogenerated input type of LinkRepositoryToProject
"""
input LinkRepositoryToProjectInput {
  """
  Deletes a user list.
  """
  deleteUserList(
    """
    Parameters for DeleteUserList
    """
    input: DeleteUserListInput!
  ): DeleteUserListPayload

  """
  Deletes a verifiable domain.
  """
  clientMutationId: String

  """
  Update a repository ruleset
  """
  updateRepositoryRuleset(
    """
    Parameters for UpdateRepositoryRuleset
    """
    input: UpdateRepositoryRulesetInput!
  ): UpdateRepositoryRulesetPayload

  """
  Sets whether contributors are required to sign off on web-based commits for a repository.
  """
  updateRepositoryWebCommitSignoffSetting(
    """
    Parameters for UpdateRepositoryWebCommitSignoffSetting
    """
    input: UpdateRepositoryWebCommitSignoffSettingInput!
  ): UpdateRepositoryWebCommitSignoffSettingPayload

  """
  Whether the given account is sponsoring this user/organization.
  """
  dequeuePullRequest(
    """
    Parameters for DequeuePullRequest
    """
    input: DequeuePullRequestInput!
  ): DequeuePullRequestPayload

  """
  Disable auto merge on the given pull request
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  state: PullRequestReviewCommentState!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  node: EnterpriseServerInstallation

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  Add a pull request to the merge queue.
  """
  enqueuePullRequest(
    """
    Parameters for EnqueuePullRequest
    """
    input: EnqueuePullRequestInput!
  ): EnqueuePullRequestPayload

  """
  A list of all mannequins for this organization.
  """
  mannequins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter mannequins by login.
    """
    login: String

    """
    Ordering options for mannequins returned from the connection.
    """
    orderBy: MannequinOrder = {field: CREATED_AT, direction: ASC}
  ): MannequinConnection!

  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  createdAt: DateTime!

  """
  Updates an existing user list.
  """
  updateUserList(
    """
    Parameters for UpdateUserList
    """
    input: UpdateUserListInput!
  ): UpdateUserListPayload

  """
  Updates which of the viewer's lists an item belongs to
  """
  updateUserListsForItem(
    """
    Parameters for UpdateUserListsForItem
    """
    input: UpdateUserListsForItemInput!
  ): UpdateUserListsForItemPayload

  """
  Verify that a verifiable domain has the expected DNS record.
  """
  id: ID!

  """
  The branch's ref.
  """
  ref: Ref
}

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  The HTTP URL for this enterprise.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgCreateAuditEntry object
  """
  id: ID!

  """
  The Node ID of the MembersCanDeleteReposClearAuditEntry object
  """
  enterpriseUrl: URI

"""
An OIDC identity provider configured to provision identities for an enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with read:enterprise or admin:enterprise scope.
"""
type OIDCProvider implements Node {
  """
  The Node ID of the MembersCanDeleteReposEnableAuditEntry object
  """
  id: ID!

  """
  Links a project to a repository.
  """
  linkProjectV2ToRepository(
    """
    Parameters for LinkProjectV2ToRepository
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OIDCProvider object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveMemberAuditEntry object
  """
  id: ID!

  """
  Links a project to a team.
  """
  linkProjectV2ToTeam(
    """
    Parameters for LinkProjectV2ToTeam
    """
    input: LinkProjectV2ToTeamInput!
  ): LinkProjectV2ToTeamPayload

  """
  Creates a repository link for a project.
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the OAuth application.
  """
  organizationName: String

  """
  The HTTP path for the OAuth application
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  markProjectV2AsTemplate(
    """
    Parameters for MarkProjectV2AsTemplate
    """
    input: MarkProjectV2AsTemplateInput!
  ): MarkProjectV2AsTemplatePayload

  """
  Marks a pull request ready for review.
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  edges: [LinkedBranchEdge]

  """
  A list of nodes.
  """
  nodes: [LinkedBranch]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  Organization owners have full access and can change several settings,
  including the names of repositories that belong to the Organization and Owners
  team membership. In addition, organization owners can delete the organization
  and all of its repositories.
  """
  email: String

  """
  The Node ID of the Mannequin object
  """
  howItWorksHTML: HTML!

  """
  The application URL of the OAuth application.
  """
  publishSponsorsTier(
    """
    Parameters for PublishSponsorsTier
    """
    input: PublishSponsorsTierInput!
  ): PublishSponsorsTierPayload

  """
  The callback URL of the OAuth application.
  """
  databaseId: Int

  """
  The Node ID of the MentionedEvent object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OauthApplicationCreateAuditEntry object
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgDisableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

"""
Autogenerated input type of LockLockable
"""
enum EnvironmentOrderField {
  """
  The HTTP path for the OAuth application
  """
  viewerSubscription: SubscriptionState

  """
  The HTTP URL for the OAuth application
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposDisableAuditEntry object
  """
  id: ID!

  """
  Removes a user from all organizations within the enterprise
  """
  removeEnterpriseMember(
    """
    Parameters for RemoveEnterpriseMember
    """
    input: RemoveEnterpriseMemberInput!
  ): RemoveEnterpriseMemberPayload

  """
  Removes an organization from the enterprise
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  A list of edges.
  """
  edges: [MannequinEdge]

  """
  A list of nodes.
  """
  nodes: [Mannequin]

  """
  The rate limit of the OAuth application.
  """
  pageInfo: PageInfo!

  """
  The state of the OAuth application.
  """
  totalCount: Int!
}

"""
The possible default commit messages for merges.
"""
enum MergeCommitMessage {
  """
  Find a project by number.
  """
  PR_BODY

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  reopenDiscussion(
    """
    Parameters for ReopenDiscussion
    """
    input: ReopenDiscussionInput!
  ): ReopenDiscussionPayload

  """
  Reopen a issue.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveOutsideCollaboratorAuditEntry object
  """
  id: ID!

"""
The state of an OAuth application when it was created.
"""
enum OauthApplicationCreateAuditEntryState {
  """
  The OAuth application was active and allowed to have OAuth Accesses.
  """
  ACTIVE

  """
  The OAuth application was in the process of being deleted.
  """
  MERGE_MESSAGE

  """
  The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  PR_TITLE
}

"""
Autogenerated input type of MergePullRequest
"""
type MannequinEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  digestMethodUrl: URI

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type PullRequestRevisionMarker {
  """
  The Node ID of the OrgDisableSamlAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The Node ID of the OrgAddMemberAuditEntry object
  """
  id: ID!

  """
  The amount of time in minutes to wait before ignoring the minumum number of
  entries in the queue requirement and merging a collection of entries
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Entries in a MergeQueue
"""
type MergeQueueEntry implements Node {
  """
  The base commit for this entry
  """
  baseCommit: Commit

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
type PullRequestTimelineConnection {
  """
  The user affected by the action
  """
  enqueuedAt: DateTime!

  """
  The actor that enqueued this entry
  """
  enqueuer: Actor!

  """
  The estimated time in seconds until this entry will be merged
  """
  estimatedTimeToMerge: Int

  """
  The head commit for this entry
  """
  headCommit: Commit

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type OrgDisableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The Node ID of the MergeQueueEntry object
  """
  id: ID!

  """
  Whether this pull request should jump the queue
  """
  jump: Boolean!

  """
  The merge queue that this entry belongs to
  """
  mergeQueue: MergeQueue

"""
An item in a pull request timeline
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

  """
  The pull request that will be added to a merge group
  """
  pullRequest: PullRequest

  """
  Sets whether or not an organization owner can make purchases.
  """
  solo: Boolean!

  """
  The state of this entry in the queue
  """
  state: MergeQueueEntryState!
}

"""
The connection type for MergeQueueEntry.
"""
type MergeQueueEntryConnection {
  """
  A list of edges.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRestoreMemberAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgDisableTwoFactorRequirementAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MergeQueueEntryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MergeQueueEntry
}

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  The entry is currently waiting for checks to pass.
  """
  AWAITING_CHECKS

  """
  The entry is currently locked.
  """
  LOCKED

  """
  The user affected by the action
  """
  UNMERGEABLE
}

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  Entries only allowed to merge if they are passing.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgBlockUserAuditEntry object
  """
  id: ID!

  """
  Failing Entires are allowed to merge if they are with a passing entry.
  """
  HEADGREEN
}

"""
Audit log entry for a org.enable_oauth_app_restrictions event.
"""
type OrgEnableOauthAppRestrictionsAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The role of the user in the enterprise membership.
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
  """
  updateOrganizationWebCommitSignoffSetting(
    """
    Parameters for UpdateOrganizationWebCommitSignoffSetting
    """
    input: UpdateOrganizationWebCommitSignoffSettingInput!
  ): UpdateOrganizationWebCommitSignoffSettingPayload

  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  updatePatreonSponsorability(
    """
    Parameters for UpdatePatreonSponsorability
    """
    input: UpdatePatreonSponsorabilityInput!
  ): UpdatePatreonSponsorabilityPayload

  """
  Updates an existing project.
  """
  id: ID!

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgEnableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

  """
  Updates an existing project.
  """
  updateProjectV2(
    """
    Parameters for UpdateProjectV2
    """
    input: UpdateProjectV2Input!
  ): UpdateProjectV2Payload

  """
  Update the collaborators on a team or a project
  """
  updateProjectV2Collaborators(
    """
    Parameters for UpdateProjectV2Collaborators
    """
    input: UpdateProjectV2CollaboratorsInput!
  ): UpdateProjectV2CollaboratorsPayload

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of MarkPullRequestReadyForReview
"""
input MarkPullRequestReadyForReviewInput {
  """
  A list of nodes.
  """
  createdAt: DateTime!

  """
  The Node ID of the MergedEvent object
  """
  id: ID!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

"""
Audit log entry for a org.enable_saml event.
"""
type OrgEnableSamlAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The SAML provider's digest algorithm URL.
  """
  digestMethodUrl: URI

  """
  The Node ID of the OrgEnableSamlAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUnblockUserAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.enable_two_factor_requirement event.
"""
type OrgEnableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The migration flag to continue on error.
  """
  email: String

  """
  The Node ID of the Mannequin object
  """
  id: ID!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the Migration object
  """
  id: ID!

  """
  Update a repository ruleset
  """
  updateRepositoryRuleset(
    """
    Parameters for UpdateRepositoryRuleset
    """
    input: UpdateRepositoryRulesetInput!
  ): UpdateRepositoryRulesetPayload

  """
  Sets whether contributors are required to sign off on web-based commits for a repository.
  """
  updateRepositoryWebCommitSignoffSetting(
    """
    Parameters for UpdateRepositoryWebCommitSignoffSetting
    """
    input: UpdateRepositoryWebCommitSignoffSettingInput!
  ): UpdateRepositoryWebCommitSignoffSettingPayload

  """
  Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateDefaultRepositoryPermissionAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object
  """
  id: ID!

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  howItWorks: String

  """
  The name of the Organization.
  """
  warningsCount: Int!
}

"""
A GitHub Enterprise Importer (GEI) migration source.
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  The Node ID of the OrgConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Updates an existing user list.
  """
  updateUserList(
    """
    Parameters for UpdateUserList
    """
    input: UpdateUserListInput!
  ): UpdateUserListPayload

  """
  Updates which of the viewer's lists an item belongs to
  """
  updateUserListsForItem(
    """
    Parameters for UpdateUserListsForItem
    """
    input: UpdateUserListsForItemInput!
  ): UpdateUserListsForItemPayload

  """
  Verify that a verifiable domain has the expected DNS record.
  """
  PR_BODY

  """
  The migration source type.
  """
  PR_TITLE
}

"""
Ordering options for an organization's enterprise owner connections.
"""
input OrgEnterpriseOwnerOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprise owners by.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the PushAllowance object
  """
  id: ID!
}

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  Order enterprise owners by login.
  """
  LOGIN
}

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
  """
  MERGE_MESSAGE

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  PR_TITLE
}

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
type MannequinConnection {
  """
  A list of edges.
  """
  edges: [MannequinEdge]

  """
  A list of nodes.
  """
  nodes: [Mannequin]

  """
  A GitHub Migration API source.
  """
  GITHUB_ARCHIVE
}

"""
An OIDC identity provider configured to provision identities for an enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with read:enterprise or admin:enterprise scope.
"""
type MergeQueue implements Node {
  """
  The migration has failed.
  """
  configuration: MergeQueueConfiguration

  """
  The migration has invalid credentials.
  """
  entries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeQueueEntryConnection

  """
  The migration is in progress.
  """
  id: ID!

  """
  The email address of the organization invitation.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgInviteMemberAuditEntry object
  """
  id: ID!

  """
  The migration has succeeded.
  """
  url: URI!
}

"""
Configuration for a MergeQueue
"""
type MergeQueueConfiguration {
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  checkResponseTimeout: Int

  """
  The organization invitation.
  """
  organizationInvitation: OrganizationInvitation

  """
  The name of the Organization.
  """
  maximumEntriesToBuild: Int

  """
  The HTTP path for the OAuth application
  """
  maximumEntriesToMerge: Int

  """
  The HTTP URL for the OAuth application
  """
  mergeMethod: PullRequestMergeMethod

  """
  The strategy to use when merging entries.
  """
  mergingStrategy: MergeQueueMergingStrategy

  """
  The minimum number of entries required to merge at once.
  """
  dueOn: DateTime

  """
  The Node ID of the Milestone object
  """
  id: ID!

  """
  The amount of time in minutes to wait before ignoring the minumum number of
  entries in the queue requirement and merging a collection of entries
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  """
  The base commit for this entry
  """
  baseCommit: Commit

  """
  The date and time this entry was added to the merge queue
  """
  enqueuedAt: DateTime!

  """
  The actor that enqueued this entry
  """
  enqueuer: Actor!

  """
  The application URL of the OAuth application.
  """
  estimatedTimeToMerge: Int

  """
  The callback URL of the OAuth application.
  """
  headCommit: Commit

  """
  The Node ID of the MergeQueueEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OauthApplicationCreateAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  createdAt: PreciseDateTime!

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryCreationPermissionAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgInviteToBusinessAuditEntry object
  """
  id: ID!

  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgDisableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

  """
  The state of this entry in the queue
  """
  url: URI!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!
}

"""
The connection type for MergeQueueEntry.
"""
type MergeQueueEntryConnection {
  """
  The rate limit of the OAuth application.
  """
  edges: [MergeQueueEntryEdge]

  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  nodes: [MergeQueueEntry]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
type OrgOauthAppAccessApprovedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  A cursor for use in pagination.
  """
  cursor: String!

    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    query: String!

"""
The state of an OAuth application when it was created.
"""
enum MergeQueueEntryState {
  """
  The OAuth application was active and allowed to have OAuth Accesses.
  """
  AWAITING_CHECKS

  """
  The entry is currently locked.
  """
  LOCKED

  """
  The OAuth application was in the process of being deleted.
  """
  MERGEABLE

  """
  The entry is currently queued.
  """
  QUEUED

  """
  The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  UNMERGEABLE
}

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  Entries only allowed to merge if they are passing.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessApprovedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  HEADGREEN
}

"""
Detailed status information about a pull request merge.
"""
type MemberFeatureRequestNotification implements Node {
  """
  The HTTP path for the OAuth application
  """
  body: String!

  """
  The HTTP URL for the OAuth application
  """
  digestMethodUrl: URI

  """
  The Node ID of the OrgDisableSamlAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  A GitHub Migration API source.
  """
  GITHUB_ARCHIVE
}

"""
The GitHub Enterprise Importer (GEI) migration state.
"""
enum MigrationState {
  """
  The migration has failed.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object
  """
  id: ID!

  """
  The migration has invalid credentials.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  The migration is in progress.
  """
  cursor: String!

  """
  The migration has not started.
  """
  howItWorks: String

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

"""
Audit log entry for a org.oauth_app_access_blocked event.
"""
type OrgOauthAppAccessBlockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The user affected by the action
  """
  addEnterpriseOrganizationMember(
    """
    Parameters for AddEnterpriseOrganizationMember
    """
    input: AddEnterpriseOrganizationMemberInput!
  ): AddEnterpriseOrganizationMemberPayload

  """
  Adds a support entitlement to an enterprise member.
  """
  enterpriseUrl: URI

  """
  The migration has been queued.
  """
  id: ID!

"""
An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
"""
type Issue implements Assignable & Closable & Comment & Deletable & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & SubscribableThread & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  The migration has succeeded.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type Organization implements Actor & AnnouncementBanner & MemberStatusable & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  The text of the announcement
  """
  announcement: String

  """
  The expiration date of the announcement, if any
  """
  announcementExpiresAt: DateTime

  """
  Whether the announcement can be dismissed by the user
  """
  announcementUserDismissible: Boolean

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  closed: Boolean!

  """
  Identifies the date and time when the organization was archived.
  """
  archivedAt: DateTime

  """
  Audit log entries of the organization
  """
  addProjectV2DraftIssue(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The host name of the Enterprise Server installation.
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  dueOn: DateTime

  """
  The Node ID of the Milestone object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessBlockedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The HTTP path for the OAuth application
  """
  addPullRequestReviewThreadReply(
    """
    Parameters for AddPullRequestReviewThreadReply
    """
    input: AddPullRequestReviewThreadReplyInput!
  ): AddPullRequestReviewThreadReplyPayload

  """
  The HTTP URL for the OAuth application
  """
  addReaction(
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The Node ID of the OrgDisableTwoFactorRequirementAuditEntry object
  """
  databaseId: Int

  """
  The Node ID of the Reactable object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  filename: String!

  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Archives a ProjectV2Item
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgBlockUserAuditEntry object
  """
  id: ID!

  """
  Marks a repository as archived.
  """
  archiveRepository(
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The user affected by the action
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposEnableAuditEntry object
  """
  id: ID!

  """
  Close a discussion.
  """
  closeDiscussion(
    """
    Parameters for CloseDiscussion
    """
    input: CloseDiscussionInput!
  ): CloseDiscussionPayload

  """
  Close an issue.
  """
  howItWorksHTML: HTML!

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The Node ID of the MarketplaceListing object
  """
  hasSponsorsListing: Boolean!

  """
  The Node ID of the Organization object
  """
  id: ID!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  url: URI!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Copy a project.
  """
  databaseId: Int

  """
  The Node ID of the Reaction object
  """
  id: ID!

  """
  Invites a user to claim reattributable data
  """
  createAttributionInvitation(
    """
    Parameters for CreateAttributionInvitation
    """
    input: CreateAttributionInvitationInput!
  ): CreateAttributionInvitationPayload

  """
  Create a new branch protection rule
  """
  viewerCanReopen: Boolean!
}

  """
  The enterprise in which this user account exists.
  """
  enterprise: Enterprise!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessDeniedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
type OrgOauthAppAccessRequestedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessRequestedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  createdAt: DateTime!

  """
  The Node ID of the ReadyForReviewEvent object
  """
  id: ID!

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_unblocked event.
"""
type OrgOauthAppAccessUnblockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  branchProtectionRule: BranchProtectionRule

  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    The head ref to compare against.
    """
    headRef: String!
  ): Comparison

  """
  The Node ID of the Ref object
  """
  id: ID!

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  A list of rules from active Repository and Organization rulesets that apply to this ref.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repository rules.
    """
    orderBy: RepositoryRuleOrder = {field: UPDATED_AT, direction: DESC}
  ): RepositoryRuleConnection

  """
  The object the ref points to. Returns null when object does not exist.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessUnblockedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Ways in which lists of git refs can be ordered upon return.
"""
input RefOrder {
  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Branch protection rules that are enforced on the viewer.
"""
type OrgRemoveBillingManagerAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveBillingManagerAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgEnableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  databaseId: Int

  """
  The Node ID of the MentionedEvent object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

  """
  Creates an organization as part of an enterprise account. A personal access
  token used to create an organization is implicitly permitted to update the
  organization it created, if the organization is part of an enterprise that has
  SAML enabled or uses Enterprise Managed Users. If the organization is not part
  of such an enterprise, and instead has SAML enabled for it individually, the
  token will then require SAML authorization to continue working against that organization.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReferencedEvent object
  """
  id: ID!

  """
  The Node ID of the Gist object
  """
  id: ID!

  """
  Identifies if the gist is a fork.
  """
  isFork: Boolean!

  """
  Whether the gist is public or not.
  """
  isPublic: Boolean!

  """
  Create a branch linked to an issue.
  """
  createLinkedBranch(
    """
    Parameters for CreateLinkedBranch
    """
    input: CreateLinkedBranchInput!
  ): CreateLinkedBranchPayload

  """
  Creates a GitHub Enterprise Importer (GEI) migration source.
  """
  fullDatabaseId: BigInt

"""
Audit log entry for a org.enable_saml event.
"""
type OrgEnableSamlAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveMemberAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The SAML provider's signature algorithm URL.
  """
  descriptionHTML: HTML

  """
  The Node ID of the Release object
  """
  id: ID!

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.enable_two_factor_requirement event.
"""
type OrgEnableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Organization owners have full access and can change several settings,
  including the names of repositories that belong to the Organization and Owners
  team membership. In addition, organization owners can delete the organization
  and all of its repositories.
  """
  MERGE_MESSAGE

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
Autogenerated input type of MergePullRequest
"""
input MergePullRequestInput {
  """
  Create a repository ruleset
  """
  createRepositoryRuleset(
    """
    Parameters for CreateRepositoryRuleset
    """
    input: CreateRepositoryRulesetInput!
  ): CreateRepositoryRulesetPayload

  """
  Create a GitHub Sponsors profile to allow others to sponsor you or your organization.
  """
  createSponsorsListing(
    """
    Parameters for CreateSponsorsListing
    """
    input: CreateSponsorsListingInput!
  ): CreateSponsorsListingPayload

  """
  Create a new payment tier for your GitHub Sponsors profile.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Make many one-time sponsorships for different sponsorable users or
  organizations at once. Can only sponsor those who have a public GitHub
  Sponsors profile.
  """
  createSponsorships(
    """
    Parameters for CreateSponsorships
    """
    input: CreateSponsorshipsInput!
  ): CreateSponsorshipsPayload

  """
  Creates a new team discussion.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A name to filter the assets by.
    """
    name: String
  ): ReleaseAssetConnection!

  """
  Creates a new user list.
  """
  createUserList(
    """
    Parameters for CreateUserList
    """
    input: CreateUserListInput!
  ): CreateUserListPayload

  """
  Rejects a suggested topic for the repository.
  """
  fullDatabaseId: BigInt

  """
  The name of the Organization.
  """
  body: String!

  """
  The Node ID of the MemberFeatureRequestNotification object
  """
  createdAt: DateTime!

  """
  The Node ID of the MilestonedEvent object
  """
  id: ID!

  """
  Represents member feature request notification title
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  """
  The configuration for this merge queue
  """
  configuration: MergeQueueConfiguration

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  userUrl: URI
}

"""
Ordering options for an organization's enterprise owner connections.
"""
input OrgEnterpriseOwnerOrder {
  """
  The ordering direction.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveOutsideCollaboratorAuditEntry object
  """
  id: ID!

  """
  The field to order enterprise owners by.
  """
  field: OrgEnterpriseOwnerOrderField!
}

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  Order enterprise owners by login.
  """
  downloadUrl: URI!

  """
  The Node ID of the ReleaseAsset object
  """
  id: ID!

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Unlink a branch from an issue.
  """
  deleteLinkedBranch(
    """
    Parameters for DeleteLinkedBranch
    """
    input: DeleteLinkedBranchInput!
  ): DeleteLinkedBranchPayload

  """
  Delete a package version.
  """
  deletePackageVersion(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeQueueEntryConnection

  """
  The Node ID of the MergeQueue object
  """
  id: ID!

  """
  The estimated time in seconds until a newly added entry would be merged
  """
  nextEntryEstimatedTimeToMerge: Int

  """
  Delete a project.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgCreateAuditEntry object
  """
  id: ID!

  """
  Delete a project field.
  """
  deleteProjectV2Field(
    """
    Parameters for DeleteProjectV2Field
    """
    input: DeleteProjectV2FieldInput!
  ): DeleteProjectV2FieldPayload

  """
  The HTTP path for this merge queue
  """
  resourcePath: URI!

  """
  The email address of the organization invitation.
  """
  email: String

"""
Configuration for a MergeQueue
"""
type MergeQueueConfiguration {
  """
  The Node ID of the OrgInviteMemberAuditEntry object
  """
  id: ID!

  """
  The maximum number of entries to build at once.
  """
  maximumEntriesToBuild: Int

  """
  Delete a repository ruleset
  """
  deleteRepositoryRuleset(
    """
    Parameters for DeleteRepositoryRuleset
    """
    input: DeleteRepositoryRulesetInput!
  ): DeleteRepositoryRulesetPayload

  """
  The organization invitation.
  """
  organizationInvitation: OrganizationInvitation

  """
  The name of the Organization.
  """
  maximumEntriesToMerge: Int

  """
  The merge method to use for this queue.
  """
  mergeMethod: PullRequestMergeMethod

  """
  Deletes a user list.
  """
  deleteUserList(
    """
    Parameters for DeleteUserList
    """
    input: DeleteUserListInput!
  ): DeleteUserListPayload

  """
  Deletes a verifiable domain.
  """
  mergingStrategy: MergeQueueMergingStrategy

  """
  Remove a pull request from the merge queue.
  """
  dequeuePullRequest(
    """
    Parameters for DequeuePullRequest
    """
    input: DequeuePullRequestInput!
  ): DequeuePullRequestPayload

  """
  Disable auto merge on the given pull request
  """
  minimumEntriesToMerge: Int

  """
  The amount of time in minutes to wait before ignoring the minumum number of
  entries in the queue requirement and merging a collection of entries
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  """
  The base commit for this entry
  """
  baseCommit: Commit

  """
  The date and time this entry was added to the merge queue
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRestoreMemberAuditEntry object
  """
  id: ID!

  """
  Add a pull request to the merge queue.
  """
  enqueuePullRequest(
    """
    Parameters for EnqueuePullRequest
    """
    input: EnqueuePullRequestInput!
  ): EnqueuePullRequestPayload

  """
  Follow an organization.
  """
  enqueuer: Actor!

  """
  The estimated time in seconds until this entry will be merged
  """
  estimatedTimeToMerge: Int

  """
  The head commit for this entry
  """
  headCommit: Commit

  """
  The Node ID of the MergeQueueEntry object
  """
  id: ID!

  """
  Whether this pull request should jump the queue
  """
  createdAt: PreciseDateTime!

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The Node ID of the OrgInviteToBusinessAuditEntry object
  """
  id: ID!

  """
  Links a project to a team.
  """
  linkProjectV2ToTeam(
    """
    Parameters for LinkProjectV2ToTeam
    """
    input: LinkProjectV2ToTeamInput!
  ): LinkProjectV2ToTeamPayload

  """
  Creates a repository link for a project.
  """
  id: ID!

  """
  The position of this entry in the queue
  """
  position: Int!

  """
  The pull request that will be added to a merge group
  """
  pullRequest: PullRequest

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise from which the user should be removed.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the user to remove from the enterprise.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  The user that was removed from the enterprise.
  """
  user: User

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
input RemoveEnterpriseOrganizationInput {
  """
  Does this pull request need to be deployed on its own
  """
  solo: Boolean!

  """
  Mark a project as a template. Note that only projects which are owned by an Organization can be marked as a template.
  """
  markProjectV2AsTemplate(
    """
    Parameters for MarkProjectV2AsTemplate
    """
    input: MarkProjectV2AsTemplateInput!
  ): MarkProjectV2AsTemplatePayload

  """
  Marks a pull request ready for review.
  """
  state: MergeQueueEntryState!
}

"""
The connection type for MergeQueueEntry.
"""
type MergeQueueEntryConnection {
  """
  A list of edges.
  """
  edges: [MergeQueueEntryEdge]

  """
  Abort a repository migration queued or in progress.
  """
  abortRepositoryMigration(
    """
    Parameters for AbortRepositoryMigration
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
type OrgOauthAppAccessApprovedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Accepts a pending invitation for a user to become an administrator of an enterprise.
  """
  nodes: [MergeQueueEntry]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MergeQueueEntryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  Publish an existing sponsorship tier that is currently still a draft to a GitHub Sponsors profile.
  """
  publishSponsorsTier(
    """
    Parameters for PublishSponsorsTier
    """
    input: PublishSponsorsTierInput!
  ): PublishSponsorsTierPayload

  """
  Regenerates the identity provider recovery codes for an enterprise
  """
  node: MergeQueueEntry
}

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  The entry is currently waiting for checks to pass.
  """
  digestMethodUrl: URI

  """
  The Node ID of the OrgDisableSamlAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessApprovedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  issuerUrl: URI

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The HTTP path for the OAuth application
  """
  databaseId: String

  """
  The HTTP URL for the OAuth application
  """
  failureReason: String

  """
  Copy a project.
  """
  copyProjectV2(
    """
    Parameters for CopyProjectV2
    """
    input: CopyProjectV2Input!
  ): CopyProjectV2Payload

  """
  Invites a user to claim reattributable data
  """
  createAttributionInvitation(
    """
    Parameters for CreateAttributionInvitation
    """
    input: CreateAttributionInvitationInput!
  ): CreateAttributionInvitationPayload

  """
  Unmark a project as a template.
  """
  unmarkProjectV2AsTemplate(
    """
    Parameters for UnmarkProjectV2AsTemplate
    """
    input: UnmarkProjectV2AsTemplateInput!
  ): UnmarkProjectV2AsTemplatePayload

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

  """
  The migration source.
  """
  locked: Boolean!

  """
  Identifies the milestone associated with the issue.
  """
  milestone: Milestone

  """
  Unsubscribes from notifications
  """
  unsubscribeFromNotifications(
    """
    Parameters for UnsubscribeFromNotifications
    """
    input: UnsubscribeFromNotificationsInput!
  ): UnsubscribeFromNotificationsPayload

"""
Audit log entry for a org.oauth_app_access_blocked event.
"""
type OrgOauthAppAccessBlockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  Update a branch protection rule
  """
  number: Int!

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

  """
  The Node ID of the RemovedFromMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The reason this pull request was removed from the queue.
  """
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
type MigrationSource implements Node {
  """
  The Node ID of the MigrationSource object
  """
  id: ID!

  """
  Creates an organization as part of an enterprise account. A personal access
  token used to create an organization is implicitly permitted to update the
  organization it created, if the organization is part of an enterprise that has
  SAML enabled or uses Enterprise Managed Users. If the organization is not part
  of such an enterprise, and instead has SAML enabled for it individually, the
  token will then require SAML authorization to continue working against that organization.
  """
  locked: Boolean!

  """
  The migration source type.
  """
  databaseId: Int

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  id: ID!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessBlockedAuditEntry object
  """
  id: ID!

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
enum MigrationSourceType {
  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  number: Int!

"""
Represents a member feature request notification
"""
type MemberFeatureRequestNotification implements Node {
  """
  The HTTP URL for the OAuth application
  """
  currentTitle: String!

  """
  The Node ID of the RenamedTitleEvent object
  """
  id: ID!

  """
  The Node ID of the OrgUnblockUserAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  GITHUB_ARCHIVE
}

"""
An object which has a renamable title
"""
union RenamedTitleSubject = Issue | PullRequest

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
interface MemberStatusable {
  """
  The migration has failed.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  Sets whether or not an organization owner can make purchases.
  """
  createProjectV2Field(
    """
    Parameters for CreateProjectV2Field
    """
    input: CreateProjectV2FieldInput!
  ): CreateProjectV2FieldPayload

  """
  Create a new pull request
  """
  IN_PROGRESS

  """
  The user affected by the action
  """
  createRepositoryRuleset(
    """
    Parameters for CreateRepositoryRuleset
    """
    input: CreateRepositoryRulesetInput!
  ): CreateRepositoryRulesetPayload

  """
  Create a GitHub Sponsors profile to allow others to sponsor you or your organization.
  """
  createSponsorsListing(
    """
    Parameters for CreateSponsorsListing
    """
    input: CreateSponsorsListingInput!
  ): CreateSponsorsListingPayload

  """
  Create a new payment tier for your GitHub Sponsors profile.
  """
  QUEUED

  """
  The migration has succeeded.
  """
  SUCCEEDED
}

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Make many one-time sponsorships for different sponsorable users or
  organizations at once. Can only sponsor those who have a public GitHub
  Sponsors profile.
  """
  createSponsorships(
    """
    Parameters for CreateSponsorships
    """
    input: CreateSponsorshipsInput!
  ): CreateSponsorshipsPayload

  """
  Creates a new team discussion.
  """
  closed: Boolean!

  """
  The suggested issue body.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

  """
  Creates a new user list.
  """
  createUserList(
    """
    Parameters for CreateUserList
    """
    input: CreateUserListInput!
  ): CreateUserListPayload

  """
  Rejects a suggested topic for the repository.
  """
  declineTopicSuggestion(
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

  """
  The template filename.
  """
  dueOn: DateTime

  """
  The Node ID of the Milestone object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessDeniedAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateDefaultRepositoryPermissionAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
type OrgOauthAppAccessRequestedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddMemberAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgUpdateMemberAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_unblocked event.
"""
type OrgOauthAppAccessUnblockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Node ID of the OrgOauthAppAccessUnblockedAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryCreationPermissionAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.remove_billing_manager event.
"""
type OrgRemoveBillingManagerAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoArchivedAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The Node ID of the OrgRemoveBillingManagerAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgEnableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
  """
  updateOrganizationWebCommitSignoffSetting(
    """
    Parameters for UpdateOrganizationWebCommitSignoffSetting
    """
    input: UpdateOrganizationWebCommitSignoffSettingInput!
  ): UpdateOrganizationWebCommitSignoffSettingPayload

  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  updatePatreonSponsorability(
    """
    Parameters for UpdatePatreonSponsorability
    """
    input: UpdatePatreonSponsorabilityInput!
  ): UpdatePatreonSponsorabilityPayload

  """
  Updates an existing project.
  """
  updateProject(
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  Updates an existing project.
  """
  updateProjectV2(
    """
    Parameters for UpdateProjectV2
    """
    input: UpdateProjectV2Input!
  ): UpdateProjectV2Payload

  """
  Update the collaborators on a team or a project
  """
  updateProjectV2Collaborators(
    """
    Parameters for UpdateProjectV2Collaborators
    """
    input: UpdateProjectV2CollaboratorsInput!
  ): UpdateProjectV2CollaboratorsPayload

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Delete a project.
  """
  deleteProjectV2(
    """
    Parameters for DeleteProjectV2
    """
    input: DeleteProjectV2Input!
  ): DeleteProjectV2Payload

  """
  Delete a project field.
  """
  deleteProjectV2Field(
    """
    Parameters for DeleteProjectV2Field
    """
    input: DeleteProjectV2FieldInput!
  ): DeleteProjectV2FieldPayload

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

"""
Audit log entry for a org.enable_saml event.
"""
type OrgEnableSamlAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgRemoveMemberAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.enable_two_factor_requirement event.
"""
type Organization implements Actor & AnnouncementBanner & MemberStatusable & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  The text of the announcement
  """
  announcement: String

  """
  The expiration date of the announcement, if any
  """
  announcementExpiresAt: DateTime

  """
  Whether the announcement can be dismissed by the user
  """
  announcementUserDismissible: Boolean

  """
  Organization owners have full access and can change several settings,
  including the names of repositories that belong to the Organization and Owners
  team membership. In addition, organization owners can delete the organization
  and all of its repositories.
  """
  ADMIN

  """
  Identifies the date and time when the organization was archived.
  """
  archivedAt: DateTime

  """
  Audit log entries of the organization
  """
  deleteRepositoryRuleset(
    """
    Parameters for DeleteRepositoryRuleset
    """
    input: DeleteRepositoryRulesetInput!
  ): DeleteRepositoryRulesetPayload

  """
  Deletes a team discussion.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposClearAuditEntry object
  """
  id: ID!

  """
  Deletes a user list.
  """
  deleteUserList(
    """
    Parameters for DeleteUserList
    """
    input: DeleteUserListInput!
  ): DeleteUserListPayload

  """
  Deletes a verifiable domain.
  """
  field: EnvironmentOrderField!
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Update a repository ruleset
  """
  updateRepositoryRuleset(
    """
    Parameters for UpdateRepositoryRuleset
    """
    input: UpdateRepositoryRulesetInput!
  ): UpdateRepositoryRulesetPayload

  """
  Sets whether contributors are required to sign off on web-based commits for a repository.
  """
  updateRepositoryWebCommitSignoffSetting(
    """
    Parameters for UpdateRepositoryWebCommitSignoffSetting
    """
    input: UpdateRepositoryWebCommitSignoffSettingInput!
  ): UpdateRepositoryWebCommitSignoffSettingPayload

  """
  Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
  """
  dequeuePullRequest(
    """
    Parameters for DequeuePullRequest
    """
    input: DequeuePullRequestInput!
  ): DequeuePullRequestPayload

  """
  The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The name of the Organization.
  """
  gist: Gist!

  """
  The Node ID of the GistComment object
  """
  headRefName: String!

  """
  Updates an existing user list.
  """
  updateUserList(
    """
    Parameters for UpdateUserList
    """
    input: UpdateUserListInput!
  ): UpdateUserListPayload

  """
  Updates which of the viewer's lists an item belongs to
  """
  updateUserListsForItem(
    """
    Parameters for UpdateUserListsForItem
    """
    input: UpdateUserListsForItemInput!
  ): UpdateUserListsForItemPayload

  """
  Verify that a verifiable domain has the expected DNS record.
  """
  headRefName: String!

  """
  The Node ID of the HeadRefDeletedEvent object
  """
  description: String

  """
  The Node ID of the Label object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveOutsideCollaboratorAuditEntry object
  """
  id: ID!

"""
Ordering options for an organization's enterprise owner connections.
"""
input OrgEnterpriseOwnerOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprise owners by.
  """
  field: OrgEnterpriseOwnerOrderField!
}

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  Order enterprise owners by login.
  """
  LOGIN
}

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Order environments by name.
  """
  NAME
}

"""
An OIDC identity provider configured to provision identities for an enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with read:enterprise or admin:enterprise scope.
"""
type HeadRefForcePushedEvent implements Node {
  """
  Links a project to a repository.
  """
  linkProjectV2ToRepository(
    """
    Parameters for LinkProjectV2ToRepository
    """
    input: LinkProjectV2ToRepositoryInput!
  ): LinkProjectV2ToRepositoryPayload

  """
  Links a project to a team.
  """
  linkProjectV2ToTeam(
    """
    Parameters for LinkProjectV2ToTeam
    """
    input: LinkProjectV2ToTeamInput!
  ): LinkProjectV2ToTeamPayload

  """
  Creates a repository link for a project.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter to external identities with the users login
    """
    login: String

    """
    Filter to external identities with valid org membership only
    """
    membersOnly: Boolean

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OIDCProvider object
  """
  id: ID!

  """
  The OIDC identity provider type
  """
  hasSponsorsListing: Boolean!

  """
  The Node ID of the Organization object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Mark a project as a template. Note that only projects which are owned by an Organization can be marked as a template.
  """
  markProjectV2AsTemplate(
    """
    Parameters for MarkProjectV2AsTemplate
    """
    input: MarkProjectV2AsTemplateInput!
  ): MarkProjectV2AsTemplatePayload

  """
  Marks a pull request ready for review.
  """
  actor: Actor

  """
  The email address of the organization invitation.
  """
  email: String

  """
  The Node ID of the OrgInviteMemberAuditEntry object
  """
  id: ID!

  """
  The template name.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  createdAt: DateTime!

  """
  The organization invitation.
  """
  organizationInvitation: OrganizationInvitation

  """
  The name of the Organization.
  """
  id: ID!

  """
  Whether the given account is sponsoring this user/organization.
  """
  publishSponsorsTier(
    """
    Parameters for PublishSponsorsTier
    """
    input: PublishSponsorsTierInput!
  ): PublishSponsorsTierPayload

  """
  Regenerates the identity provider recovery codes for an enterprise
  """
  afterCommit: Commit

  """
  Indicates if the object can be reopened by the viewer.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposDisableAuditEntry object
  """
  createdAt: DateTime!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The organization's public profile location.
  """
  id: ID!

  """
  The callback URL of the OAuth application.
  """
  color: String

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  """
  A list of all mannequins for this organization.
  """
  mannequins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter mannequins by login.
    """
    login: String

    """
    Ordering options for mannequins returned from the connection.
    """
    orderBy: MannequinOrder = {field: CREATED_AT, direction: ASC}
  ): MannequinConnection!

  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRestoreMemberAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OauthApplicationCreateAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  removeEnterpriseMember(
    """
    Parameters for RemoveEnterpriseMember
    """
    input: RemoveEnterpriseMemberInput!
  ): RemoveEnterpriseMemberPayload

  """
  The HTTP path for the OAuth application
  """
  viewerCanClose: Boolean!

  """
  The HTTP URL for the OAuth application
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  createdAt: DateTime!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The Node ID of the OrgInviteToBusinessAuditEntry object
  """
  id: ID!

  """
  The state of the OAuth application.
  """
  viewerSubscription: SubscriptionState

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerSubscription: SubscriptionState

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

"""
The state of an OAuth application when it was created.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The OAuth application was active and allowed to have OAuth Accesses.
  """
  retireSponsorsTier(
    """
    Parameters for RetireSponsorsTier
    """
    input: RetireSponsorsTierInput!
  ): RetireSponsorsTierPayload

  """
  The OAuth application was in the process of being deleted.
  """
  revertPullRequest(
    """
    Parameters for RevertPullRequest
    """
    input: RevertPullRequestInput!
  ): RevertPullRequestPayload

  """
  The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  guid: String!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
type OrgOauthAppAccessApprovedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Default to a blank commit message.
  """
  BLANK

  """
  Default to the pull request's body.
  """
  PR_BODY

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
The possible default commit titles for merges.
"""
enum MergeCommitTitle {
  """
  Default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
  """
  MERGE_MESSAGE

  """
  Starts a GitHub Enterprise Importer organization migration.
  """
  startOrganizationMigration(
    """
    Parameters for StartOrganizationMigration
    """
    input: StartOrganizationMigrationInput!
  ): StartOrganizationMigrationPayload

  """
  Starts a GitHub Enterprise Importer (GEI) repository migration.
  """
  PR_TITLE
}

"""
Autogenerated input type of MergePullRequest
"""
input MergePullRequestInput {
  """
  Check if the current viewer can delete this object.
  """
  hidden: Boolean!

  """
  Transfer an organization from one enterprise to another enterprise.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  id: ID!

  """
  The HTTP path for the OAuth application
  """
  unarchiveProjectV2Item(
    """
    Parameters for UnarchiveProjectV2Item
    """
    input: UnarchiveProjectV2ItemInput!
  ): UnarchiveProjectV2ItemPayload

  """
  The HTTP URL for the OAuth application
  """
  databaseId: Int

  """
  The Node ID of the MovedColumnsInProjectEvent object
  """
  id: ID!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Unlinks a project from a repository.
  """
  unlinkProjectV2FromRepository(
    """
    Parameters for UnlinkProjectV2FromRepository
    """
    input: UnlinkProjectV2FromRepositoryInput!
  ): UnlinkProjectV2FromRepositoryPayload

  """
  Unlinks a project to a team.
  """
  unlinkProjectV2FromTeam(
    """
    Parameters for UnlinkProjectV2FromTeam
    """
    input: UnlinkProjectV2FromTeamInput!
  ): UnlinkProjectV2FromTeamPayload

  """
  Deletes a repository link from a project.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUnblockUserAuditEntry object
  """
  id: ID!

  """
  Find a project by number.
  """
  id: ID!

  """
  The Node ID of the MembersCanDeleteReposEnableAuditEntry object
  """
  id: ID!

  """
  The Node ID of the LabeledEvent object
  """
  id: ID!

  """
  Organization invitation for this SCIM-provisioned external identity
  """
  organizationInvitation: OrganizationInvitation

"""
Audit log entry for a org.oauth_app_access_blocked event.
"""
type OrgOauthAppAccessBlockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Abort a repository migration queued or in progress.
  """
  abortRepositoryMigration(
    """
    Parameters for AbortRepositoryMigration
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

  """
  Unmark a project as a template.
  """
  unmarkProjectV2AsTemplate(
    """
    Parameters for UnmarkProjectV2AsTemplate
    """
    input: UnmarkProjectV2AsTemplateInput!
  ): UnmarkProjectV2AsTemplatePayload

  """
  Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
  """
  samlIdentity: ExternalIdentitySamlAttributes

  """
  SCIM Identity attributes
  """
  color: String

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  """
  The configuration for this merge queue
  """
  configuration: MergeQueueConfiguration

  """
  Unsubscribes from notifications
  """
  unsubscribeFromNotifications(
    """
    Parameters for UnsubscribeFromNotifications
    """
    input: UnsubscribeFromNotificationsInput!
  ): UnsubscribeFromNotificationsPayload

  """
  Update a branch protection rule
  """
  entries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateDefaultRepositoryPermissionAuditEntry object
  """
  id: ID!

  """
  The HTTP path for the OAuth application
  """
  addEnterpriseOrganizationMember(
    """
    Parameters for AddEnterpriseOrganizationMember
    """
    input: AddEnterpriseOrganizationMemberInput!
  ): AddEnterpriseOrganizationMemberPayload

  """
  The HTTP URL for the OAuth application
  """
  addEnterpriseSupportEntitlement(
    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeQueueEntryConnection

  """
  The Node ID of the MergeQueue object
  """
  id: ID!

  """
  The estimated time in seconds until a newly added entry would be merged
  """
  nextEntryEstimatedTimeToMerge: Int

  """
  The repository this merge queue belongs to
  """
  repository: Repository

  """
  The HTTP path for this merge queue
  """
  addProjectV2DraftIssue(
    """
    Parameters for AddProjectV2DraftIssue
    """
    input: AddProjectV2DraftIssueInput!
  ): AddProjectV2DraftIssuePayload

  """
  The maximum number of entries to build at once.
  """
  maximumEntriesToBuild: Int

  """
  The maximum number of entries to merge at once.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgAddMemberAuditEntry object
  """
  id: ID!

  """
  The merge method to use for this queue.
  """
  mergeMethod: PullRequestMergeMethod

  """
  The strategy to use when merging entries.
  """
  mergingStrategy: MergeQueueMergingStrategy

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Sets whether or not an organization owner can make purchases.
  """
  addPullRequestReviewThreadReply(
    """
    Parameters for AddPullRequestReviewThreadReply
    """
    input: AddPullRequestReviewThreadReplyInput!
  ): AddPullRequestReviewThreadReplyPayload

  """
  Adds a reaction to a subject.
  """
  minimumEntriesToMerge: Int

  """
  The amount of time in minutes to wait before ignoring the minumum number of
  entries in the queue requirement and merging a collection of entries
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Entries in a MergeQueue
"""
type MergeQueueEntry implements Node {
  """
  The base commit for this entry
  """
  baseCommit: Commit

  """
  The date and time this entry was added to the merge queue
  """
  enqueuedAt: DateTime!

  """
  The actor that enqueued this entry
  """
  enqueuer: Actor!

  """
  The estimated time in seconds until this entry will be merged
  """
  estimatedTimeToMerge: Int

  """
  Archives a ProjectV2Item
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgOauthAppAccessDeniedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
type OrgOauthAppAccessRequestedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgOauthAppAccessRequestedAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryCreationPermissionAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_unblocked event.
"""
type OrgOauthAppAccessUnblockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgOauthAppAccessUnblockedAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.remove_billing_manager event.
"""
type Organization implements Actor & AnnouncementBanner & MemberStatusable & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  The text of the announcement
  """
  announcement: String

  """
  The expiration date of the announcement, if any
  """
  announcementExpiresAt: DateTime

  """
  Whether the announcement can be dismissed by the user
  """
  announcementUserDismissible: Boolean

  """
  The action name
  """
  action: String!

  """
  Identifies the date and time when the organization was archived.
  """
  archivedAt: DateTime

  """
  Audit log entries of the organization
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The Node ID of the OrgRemoveBillingManagerAuditEntry object
  """
  id: ID!

  """
  Marks a repository as archived.
  """
  headCommit: Commit

  """
  The Node ID of the MergeQueueEntry object
  """
  id: ID!

  """
  Whether this pull request should jump the queue
  """
  jump: Boolean!

  """
  The merge queue that this entry belongs to
  """
  mergeQueue: MergeQueue

  """
  The position of this entry in the queue
  """
  position: Int!

  """
  This mutation clears the value of a field for an item in a Project. Currently
  only text, number, date, assignees, labels, single-select, iteration and
  milestone fields are supported.
  """
  clearProjectV2ItemFieldValue(
    """
    Parameters for ClearProjectV2ItemFieldValue
    """
    input: ClearProjectV2ItemFieldValueInput!
  ): ClearProjectV2ItemFieldValuePayload

  """
  Creates a new project by cloning configuration from an existing project.
  """
  pullRequest: PullRequest

  """
  Does this pull request need to be deployed on its own
  """
  solo: Boolean!

  """
  Close a discussion.
  """
  closeDiscussion(
    """
    Parameters for CloseDiscussion
    """
    input: CloseDiscussionInput!
  ): CloseDiscussionPayload

  """
  Close an issue.
  """
  state: MergeQueueEntryState!
}

"""
The connection type for MergeQueueEntry.
"""
type MergeQueueEntryConnection {
  """
  Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
  """
  updateOrganizationWebCommitSignoffSetting(
    """
    Parameters for UpdateOrganizationWebCommitSignoffSetting
    """
    input: UpdateOrganizationWebCommitSignoffSettingInput!
  ): UpdateOrganizationWebCommitSignoffSettingPayload

  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  updatePatreonSponsorability(
    """
    Parameters for UpdatePatreonSponsorability
    """
    input: UpdatePatreonSponsorabilityInput!
  ): UpdatePatreonSponsorabilityPayload

  """
  Updates an existing project.
  """
  edges: [MergeQueueEntryEdge]

  """
  A list of nodes.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgBlockUserAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Updates an existing project.
  """
  updateProjectV2(
    """
    Parameters for UpdateProjectV2
    """
    input: UpdateProjectV2Input!
  ): UpdateProjectV2Payload

"""
An edge in a connection.
"""
type MergeQueueEntryEdge {
  """
  Update the collaborators on a team or a project
  """
  updateProjectV2Collaborators(
    """
    Parameters for UpdateProjectV2Collaborators
    """
    input: UpdateProjectV2CollaboratorsInput!
  ): UpdateProjectV2CollaboratorsPayload

  """
  The item at the end of the edge.
  """
  node: MergeQueueEntry
}

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  The entry is currently waiting for checks to pass.
  """
  AWAITING_CHECKS

  """
  The entry is currently locked.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveMemberAuditEntry object
  """
  hasSponsorsListing: Boolean!

  """
  The Node ID of the Organization object
  """
  id: ID!

  """
  The entry is currently mergeable.
  """
  MERGEABLE

  """
  The entry is currently queued.
  """
  QUEUED

  """
  Creates an organization as part of an enterprise account. A personal access
  token used to create an organization is implicitly permitted to update the
  organization it created, if the organization is part of an enterprise that has
  SAML enabled or uses Enterprise Managed Users. If the organization is not part
  of such an enterprise, and instead has SAML enabled for it individually, the
  token will then require SAML authorization to continue working against that organization.
  """
  UNMERGEABLE
}

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  Entries only allowed to merge if they are passing.
  """
  ALLGREEN

  """
  Failing Entires are allowed to merge if they are with a passing entry.
  """
  HEADGREEN
}

"""
Detailed status information about a pull request merge.
"""
enum MergeStateStatus {
  """
  The Node ID of the Language object
  """
  id: ID!

  """
  User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member.
  """
  editor: Actor

  """
  Update a repository ruleset
  """
  updateRepositoryRuleset(
    """
    Parameters for UpdateRepositoryRuleset
    """
    input: UpdateRepositoryRulesetInput!
  ): UpdateRepositoryRulesetPayload

  """
  Sets whether contributors are required to sign off on web-based commits for a repository.
  """
  updateRepositoryWebCommitSignoffSetting(
    """
    Parameters for UpdateRepositoryWebCommitSignoffSetting
    """
    input: UpdateRepositoryWebCommitSignoffSettingInput!
  ): UpdateRepositoryWebCommitSignoffSettingPayload

  """
  Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
  """
  createLinkedBranch(
    """
    Parameters for CreateLinkedBranch
    """
    input: CreateLinkedBranchInput!
  ): CreateLinkedBranchPayload

  """
  Creates a GitHub Enterprise Importer (GEI) migration source.
  """
  editor: Actor

  """
  Whether the given account is sponsoring this user/organization.
  """
  fullDatabaseId: BigInt

  """
  Organization owners have full access and can change several settings,
  including the names of repositories that belong to the Organization and Owners
  team membership. In addition, organization owners can delete the organization
  and all of its repositories.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgConfigDisableCollaboratorsOnlyAuditEntry object
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

"""
Autogenerated input type of LinkProjectV2ToRepository
"""
input LinkProjectV2ToRepositoryInput {
  """
  Create a new project field.
  """
  createProjectV2Field(
    """
    Parameters for CreateProjectV2Field
    """
    input: CreateProjectV2FieldInput!
  ): CreateProjectV2FieldPayload

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The organization's public profile location.
  """
  clientMutationId: String

  """
  The ID of the project to link to the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  A list of all mannequins for this organization.
  """
  mannequins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter mannequins by login.
    """
    login: String

    """
    Ordering options for mannequins returned from the connection.
    """
    orderBy: MannequinOrder = {field: CREATED_AT, direction: ASC}
  ): MannequinConnection!

  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  databaseId: Int

  """
  Create a repository ruleset
  """
  createRepositoryRuleset(
    """
    Parameters for CreateRepositoryRuleset
    """
    input: CreateRepositoryRulesetInput!
  ): CreateRepositoryRulesetPayload

  """
  Updates an existing user list.
  """
  updateUserList(
    """
    Parameters for UpdateUserList
    """
    input: UpdateUserListInput!
  ): UpdateUserListPayload

  """
  Updates which of the viewer's lists an item belongs to
  """
  updateUserListsForItem(
    """
    Parameters for UpdateUserListsForItem
    """
    input: UpdateUserListsForItemInput!
  ): UpdateUserListsForItemPayload

  """
  Verify that a verifiable domain has the expected DNS record.
  """
  createSponsorsListing(
    """
    Parameters for CreateSponsorsListing
    """
    input: CreateSponsorsListingInput!
  ): CreateSponsorsListingPayload

  """
  Create a new payment tier for your GitHub Sponsors profile.
  """
  id: ID!
}

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Make many one-time sponsorships for different sponsorable users or
  organizations at once. Can only sponsor those who have a public GitHub
  Sponsors profile.
  """
  createSponsorships(
    """
    Parameters for CreateSponsorships
    """
    input: CreateSponsorshipsInput!
  ): CreateSponsorshipsPayload

  """
  Creates a new team discussion.
  """
  repository: Repository
}

"""
An OIDC identity provider configured to provision identities for an enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with read:enterprise or admin:enterprise scope.
"""
input LinkProjectV2ToTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Creates a new user list.
  """
  createUserList(
    """
    Parameters for CreateUserList
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OIDCProvider object
  """
  id: ID!

  """
  Rejects a suggested topic for the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to link to the project.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveOutsideCollaboratorAuditEntry object
  """
  id: ID!

  """
  The types of membership the outside collaborator has with the organization.
  """
  membershipTypes: [OrgRemoveOutsideCollaboratorAuditEntryMembershipType!]

  """
  The Node ID of the OrgConfigEnableCollaboratorsOnlyAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

  """
  The Node ID of the MergedEvent object
  """
  id: ID!

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
interface OauthApplicationAuditEntryData {
  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  clientMutationId: String

  """
  The HTTP URL for the OAuth application
  """
  team: Team
}

"""
The possible default commit messages for merges.
"""
enum MergeCommitMessage {
  """
  Default to a blank commit message.
  """
  BLANK

  """
  Default to the pull request's body.
  """
  PR_BODY

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
Represents a GitHub Enterprise Importer (GEI) migration.
"""
enum MergeCommitTitle {
  """
  The migration flag to continue on error.
  """
  MERGE_MESSAGE

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
Autogenerated input type of MergePullRequest
"""
input LinkRepositoryToProjectInput {
  """
  Unlink a branch from an issue.
  """
  deleteLinkedBranch(
    """
    Parameters for DeleteLinkedBranch
    """
    input: DeleteLinkedBranchInput!
  ): DeleteLinkedBranchPayload

  """
  Delete a package version.
  """
  databaseId: String

  """
  The application URL of the OAuth application.
  """
  failureReason: String

  """
  The callback URL of the OAuth application.
  """
  id: ID!

  """
  Identifies the viewer's thread subscription form action.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OauthApplicationCreateAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  deleteProjectV2(
    """
    Parameters for DeleteProjectV2
    """
    input: DeleteProjectV2Input!
  ): DeleteProjectV2Payload

  """
  The HTTP path for the OAuth application
  """
  deleteProjectV2Field(
    """
    Parameters for DeleteProjectV2Field
    """
    input: DeleteProjectV2FieldInput!
  ): DeleteProjectV2FieldPayload

"""
An attribute for the External Identity attributes collection
"""
type ExternalIdentityAttribute {
  """
  The HTTP URL for the OAuth application
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgCreateAuditEntry object
  """
  id: ID!

  """
  Deletes a project workflow.
  """
  deleteProjectV2Workflow(
    """
    Parameters for DeleteProjectV2Workflow
    """
    input: DeleteProjectV2WorkflowInput!
  ): DeleteProjectV2WorkflowPayload

  """
  Deletes a pull request review.
  """
  id: ID!

  """
  The migration state.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRestoreMemberAuditEntry object
  """
  id: ID!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
A GitHub Enterprise Importer (GEI) migration source.
"""
type MigrationSource implements Node {
  """
  Delete a repository ruleset
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  id: ID!

  """
  The rate limit of the OAuth application.
  """
  id: ID!

  """
  The state of the OAuth application.
  """
  The Node ID of the LinkedBranch object
  """
  Deletes a user list.
  """
  deleteUserList(
    """
    Parameters for DeleteUserList
    """
    input: DeleteUserListInput!
  ): DeleteUserListPayload

  """
  Deletes a verifiable domain.
  """
  type: MigrationSourceType!

  """
  Remove a pull request from the merge queue.
  """
  dequeuePullRequest(
    """
    Parameters for DequeuePullRequest
    """
    input: DequeuePullRequestInput!
  ): DequeuePullRequestPayload

  """
  Disable auto merge on the given pull request
  """
  ref: Ref
}

"""
The state of an OAuth application when it was created.
"""
enum OauthApplicationCreateAuditEntryState {
  """
  The OAuth application was active and allowed to have OAuth Accesses.
  """
  ACTIVE

  """
  The OAuth application was in the process of being deleted.
  """
  edges: [LinkedBranchEdge]

  """
  The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  GITHUB_ARCHIVE
}

"""
The GitHub Enterprise Importer (GEI) migration state.
"""
type MergeQueue implements Node {
  """
  The migration has failed.
  """
  configuration: MergeQueueConfiguration

  """
  Add a pull request to the merge queue.
  """
  enqueuePullRequest(
    """
    Parameters for EnqueuePullRequest
    """
    input: EnqueuePullRequestInput!
  ): EnqueuePullRequestPayload

  """
  Follow an organization.
  """
  entries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeQueueEntryConnection

  """
  The migration is in progress.
  """
  id: ID!

  """
  The migration has not started.
  """
  nextEntryEstimatedTimeToMerge: Int

  """
  Links a project to a repository.
  """
  linkProjectV2ToRepository(
    """
    Parameters for LinkProjectV2ToRepository
    """
    input: LinkProjectV2ToRepositoryInput!
  ): LinkProjectV2ToRepositoryPayload

  """
  Links a project to a team.
  """
  linkProjectV2ToTeam(
    """
    Parameters for LinkProjectV2ToTeam
    """
    input: LinkProjectV2ToTeamInput!
  ): LinkProjectV2ToTeamPayload

  """
  Creates a repository link for a project.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgDisableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

  """
  The migration has been queued.
  """
  resourcePath: URI!

  """
  The migration has succeeded.
  """
  url: URI!
}

"""
Configuration for a MergeQueue
"""
type MergeQueueConfiguration {
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  checkResponseTimeout: Int

  """
  Mark a project as a template. Note that only projects which are owned by an Organization can be marked as a template.
  """
  markProjectV2AsTemplate(
    """
    Parameters for MarkProjectV2AsTemplate
    """
    input: MarkProjectV2AsTemplateInput!
  ): MarkProjectV2AsTemplatePayload

  """
  Marks a pull request ready for review.
  """
  maximumEntriesToBuild: Int

  """
  The maximum number of entries to merge at once.
  """
  maximumEntriesToMerge: Int

  """
  The merge method to use for this queue.
  """
  mergeMethod: PullRequestMergeMethod

  """
  The strategy to use when merging entries.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgAddBillingManagerAuditEntry object
  """
  id: ID!

  """
  The minimum number of entries required to merge at once.
  """
  dueOn: DateTime

  """
  The Node ID of the Milestone object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveTopicAuditEntry object
  """
  id: ID!

  """
  The amount of time in minutes to wait before ignoring the minumum number of
  entries in the queue requirement and merging a collection of entries
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Entries in a MergeQueue
"""
type MergeQueueEntry implements Node {
  """
  Publish an existing sponsorship tier that is currently still a draft to a GitHub Sponsors profile.
  """
  publishSponsorsTier(
    """
    Parameters for PublishSponsorsTier
    """
    input: PublishSponsorsTierInput!
  ): PublishSponsorsTierPayload

  """
  Regenerates the identity provider recovery codes for an enterprise
  """
  baseCommit: Commit

  """
  The date and time this entry was added to the merge queue
  """
  enqueuedAt: DateTime!

  """
  The actor that enqueued this entry
  """
  enqueuer: Actor!

  """
  The estimated time in seconds until this entry will be merged
  """
  estimatedTimeToMerge: Int

  """
  The head commit for this entry
  """
  digestMethodUrl: URI

  """
  The Node ID of the OrgDisableSamlAuditEntry object
  """
  id: ID!

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  Unlinks a project to a team.
  """
  unlinkProjectV2FromTeam(
    """
    Parameters for UnlinkProjectV2FromTeam
    """
    input: UnlinkProjectV2FromTeamInput!
  ): UnlinkProjectV2FromTeamPayload

  """
  Deletes a repository link from a project.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUnblockUserAuditEntry object
  """
  id: ID!

  """
  The Node ID of the MilestonedEvent object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  cursor: String!

  """
  Unmark a project as a template.
  """
  unmarkProjectV2AsTemplate(
    """
    Parameters for UnmarkProjectV2AsTemplate
    """
    input: UnmarkProjectV2AsTemplateInput!
  ): UnmarkProjectV2AsTemplatePayload

  """
  Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
  """
  node: EnterpriseServerUserAccount
}

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type OrgDisableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  A list of users that can be assigned to issues in this repository.
  """
  editor: Actor

  """
  Unsubscribes from notifications
  """
  unsubscribeFromNotifications(
    """
    Filters users with query on user name and login.
    """
    input: UnsubscribeFromNotificationsInput!
  ): UnsubscribeFromNotificationsPayload

  """
  Update a branch protection rule
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

  """
  The Node ID of the IssueComment object
  """
  description: String

  """
  The Node ID of the Label object
  """
  hidden: Boolean!

  """
  The Node ID of the License object
  """
  id: ID!

  """
  The email address.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateDefaultRepositoryPermissionAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  createdAt: DateTime!

  """
  The Node ID of the LockedEvent object
  """
  id: ID!

  """
  Indicates whether this is the primary email of the associated user account.
  """
  isPrimary: Boolean!

    """
    The login of one specific collaborator.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    query: String
  ): RepositoryCollaboratorConnection

  """
  The user affected by the action
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  email: String

  """
  Sets whether or not an organization owner can make purchases.
  """
  id: ID!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Audit log entry for a org.enable_oauth_app_restrictions event.
"""
type OrgEnableOauthAppRestrictionsAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the MergedEvent object
  """
  databaseId: Int

  """
  The Node ID of the MovedColumnsInProjectEvent object
  """
  id: ID!

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  A list of edges.
  """
  edges: [MannequinEdge]

  """
  A list of nodes.
  """
  nodes: [Mannequin]

  """
  Information to aid in pagination.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The Node ID of the OrgConfigEnableCollaboratorsOnlyAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  A discussion category by slug.
  """
  discussionCategory(
    """
    The slug of the discussion category to be returned.
    """
    slug: String!
  ): DiscussionCategory

  """
  A list of discussions that have been opened in the repository.
  """
  discussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Only show answered or unanswered discussions
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Only include discussions that belong to the category with this ID.
    """
    categoryId: ID = null

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  Abort a repository migration queued or in progress.
  """
  abortRepositoryMigration(
    """
    Parameters for AbortRepositoryMigration
    """
    orderBy: DiscussionOrder = {field: UPDATED_AT, direction: DESC}

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  Accepts a pending invitation for a user to become an administrator of an enterprise.
  """
  node: Mannequin
}

"""
Represents a GitHub Enterprise Importer (GEI) migration.
"""
input MannequinOrder {
  """
  The migration flag to continue on error.
  """
  direction: OrderDirection!

  """
  The field to order mannequins by.
  """
  field: MannequinOrderField!
}

"""
Properties by which mannequins can be ordered.
"""
enum MannequinOrderField {
  """
  Identifies the primary key from the database.
  """
  databaseId: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the environments
    """
    orderBy: Environments = {field: NAME, direction: ASC}
  ): EnvironmentConnection!

  """
  The Node ID of the Migration object
  """
  id: ID!

"""
Audit log entry for a org.enable_saml event.
"""
type OrgEnableSamlAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  forks(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  createdAt: PreciseDateTime!

  """
  The SAML provider's digest algorithm URL.
  """
  digestMethodUrl: URI

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Whether vulnerability alerts are enabled for the repository.
  """
  hasVulnerabilityAlertsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryCreationPermissionAuditEntry object
  """
  homepageUrl: URI

  """
  The Node ID of the Repository object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.enable_two_factor_requirement event.
"""
type OrgEnableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Adds a support entitlement to an enterprise member.
  """
  clientMutationId: String

  """
  The migration source.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  Updates an existing project.
  """
  updateProjectV2(
    """
    Parameters for UpdateProjectV2
    """
    input: UpdateProjectV2Input!
  ): UpdateProjectV2Payload

  """
  Update the collaborators on a team or a project
  """
  updateProjectV2Collaborators(
    """
    Parameters for UpdateProjectV2Collaborators
    """
    input: UpdateProjectV2CollaboratorsInput!
  ): UpdateProjectV2CollaboratorsPayload

  """
  The migration source type.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgCreateAuditEntry object
  """
  id: ID!

  """
  The team the project is linked to
  """
  team: Team
}

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
input MarkProjectV2AsTemplateInput {
  """
  The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object
  """
  id: ID!

  """
  Adds a reaction to a subject.
  """
  clientMutationId: String

  """
  The ID of the Project to mark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  The name of the Organization.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  The migration has invalid credentials.
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  The migration is in progress.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object
  """
  id: ID!

  """
  Archives a ProjectV2Item
  """
  archiveProjectV2Item(
    """
    Parameters for ArchiveProjectV2Item
    """
    input: ArchiveProjectV2ItemInput!
  ): ArchiveProjectV2ItemPayload

  """
  Marks a repository as archived.
  """
  nodes: [EnterpriseServerInstallation]

  """
  The migration needs to have its credentials validated.
  """
  createdAt: DateTime!

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  The migration has been queued.
  """
  duplicate: IssueOrPullRequest

"""
Ordering options for an organization's enterprise owner connections.
"""
input OrgEnterpriseOwnerOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprise owners by.
  """
  field: OrgEnterpriseOwnerOrderField!
}

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  Order enterprise owners by login.
  """
  LOGIN
}

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The migration has succeeded.
  """
  id: ID!

  """
  The branch's ref.
  """
  ref: Ref
}

"""
The connection type for LinkedBranch.
"""
type Organization implements Actor & AnnouncementBanner & MemberStatusable & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  The text of the announcement
  """
  announcement: String

  """
  The expiration date of the announcement, if any
  """
  announcementExpiresAt: DateTime

  """
  Whether the announcement can be dismissed by the user
  """
  announcementUserDismissible: Boolean

  """
  This mutation clears the value of a field for an item in a Project. Currently
  only text, number, date, assignees, labels, single-select, iteration and
  milestone fields are supported.
  """
  clearProjectV2ItemFieldValue(
    """
    Parameters for ClearProjectV2ItemFieldValue
    """
    input: ClearProjectV2ItemFieldValueInput!
  ): ClearProjectV2ItemFieldValuePayload

  """
  Identifies the date and time when the organization was archived.
  """
  archivedAt: DateTime

  """
  Audit log entries of the organization
  """
  updateRepositoryRuleset(
    """
    Parameters for UpdateRepositoryRuleset
    """
    input: UpdateRepositoryRulesetInput!
  ): UpdateRepositoryRulesetPayload

  """
  Sets whether contributors are required to sign off on web-based commits for a repository.
  """
  updateRepositoryWebCommitSignoffSetting(
    """
    Parameters for UpdateRepositoryWebCommitSignoffSetting
    """
    input: UpdateRepositoryWebCommitSignoffSettingInput!
  ): UpdateRepositoryWebCommitSignoffSettingPayload

  """
  Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  A list of nodes.
  """
  howItWorks: String

  """
  Close a discussion.
  """
  closeDiscussion(
    """
    Parameters for CloseDiscussion
    """
    input: CloseDiscussionInput!
  ): CloseDiscussionPayload

  """
  Close an issue.
  """
  id: ID!

  """
  How the default commit message will be generated when merging a pull request.
  """
  mergeCommitMessage: MergeCommitMessage!

  """
  How the default commit title will be generated when merging a pull request.
  """
  mergeCommitTitle: MergeCommitTitle!

  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    branch: String
  ): MergeQueue

  """
  Returns a single milestone from the current repository by number.
  """
  email: String

  """
  The Node ID of the OrgInviteMemberAuditEntry object
  """
  id: ID!

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  Copy a project.
  """
  copyProjectV2(
    """
    Parameters for CopyProjectV2
    """
    input: CopyProjectV2Input!
  ): CopyProjectV2Payload

  """
  The organization invitation.
  """
  organizationInvitation: OrganizationInvitation

  """
  The name of the Organization.
  """
  createAttributionInvitation(
    """
    Parameters for CreateAttributionInvitation
    """
    input: CreateAttributionInvitationInput!
  ): CreateAttributionInvitationPayload

  """
  Updates an existing user list.
  """
  updateUserList(
    """
    Parameters for UpdateUserList
    """
    input: UpdateUserListInput!
  ): UpdateUserListPayload

  """
  Updates which of the viewer's lists an item belongs to
  """
  updateUserListsForItem(
    """
    Parameters for UpdateUserListsForItem
    """
    input: UpdateUserListsForItemInput!
  ): UpdateUserListsForItemPayload

  """
  Verify that a verifiable domain has the expected DNS record.
  """
  node: LinkedBranch
}

"""
Autogenerated input type of LockLockable
"""
input LockLockableInput {
  """
  The Node ID of the LabeledEvent object
  """
  hasSponsorsListing: Boolean!

  """
  The Node ID of the Organization object
  """
  id: ID!

  """
  IP addresses that service hooks are sent from
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  """
  Identifies the date and time when the object was created.
  """
  color: String

  """
  The Node ID of the Language object
  """
  id: ID!

  """
  Whether the given account is sponsoring this user/organization.
  """
  enterprise: Enterprise!

  """
  Creates an organization as part of an enterprise account. A personal access
  token used to create an organization is implicitly permitted to update the
  organization it created, if the organization is part of an enterprise that has
  SAML enabled or uses Enterprise Managed Users. If the organization is not part
  of such an enterprise, and instead has SAML enabled for it individually, the
  token will then require SAML authorization to continue working against that organization.
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  description: String

  """
  The Node ID of the Label object
  """
  dueOn: DateTime

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The organization's public profile location.
  """
  id: ID!

  """
  The Git object ID
  """
  createdAt: PreciseDateTime!

  """
  A list of all mannequins for this organization.
  """
  mannequins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter mannequins by login.
    """
    login: String

    """
    Ordering options for mannequins returned from the connection.
    """
    orderBy: MannequinOrder = {field: CREATED_AT, direction: ASC}
  ): MannequinConnection!

  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The Node ID of the OrgInviteToBusinessAuditEntry object
  """
  id: ID!

  """
  Finds and returns the Project according to the provided Project number.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The state of an OAuth application when it was created.
"""
type MannequinEdge {
  """
  The OAuth application was active and allowed to have OAuth Accesses.
  """
  enqueuePullRequest(
    """
    Parameters for EnqueuePullRequest
    """
    input: EnqueuePullRequestInput!
  ): EnqueuePullRequestPayload

  """
  The OAuth application was in the process of being deleted.
  """
  cursor: String!

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  node: Mannequin
}

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order mannequins by.
  """
  field: MannequinOrderField!
}

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
type OrgOauthAppAccessApprovedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Order mannequins why when they were created.
  """
  CREATED_AT

  """
  Order mannequins alphabetically by their source login.
  """
  LOGIN
}

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type OrgDisableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Links a project to a repository.
  """
  linkProjectV2ToRepository(
    """
    Parameters for LinkProjectV2ToRepository
    """
    input: LinkProjectV2ToRepositoryInput!
  ): LinkProjectV2ToRepositoryPayload

  """
  Links a project to a team.
  """
  linkProjectV2ToTeam(
    """
    Parameters for LinkProjectV2ToTeam
    """
    input: LinkProjectV2ToTeamInput!
  ): LinkProjectV2ToTeamPayload

  """
  Creates a repository link for a project.
  """
  clientMutationId: String

  """
  The ID of the project to link to the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to link to the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessApprovedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  markProjectV2AsTemplate(
    """
    Parameters for MarkProjectV2AsTemplate
    """
    input: MarkProjectV2AsTemplateInput!
  ): MarkProjectV2AsTemplatePayload

  """
  The HTTP path for the OAuth application
  """
  OPEN
}

"""
Represents a 'milestoned' event on a given issue or pull request.
"""
type MilestonedEvent implements Node {
  """
  The HTTP URL for the OAuth application
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgAddBillingManagerAuditEntry object
  """
  id: ID!

  """
  Identifies the milestone title associated with the 'milestoned' event.
  """
  milestoneTitle: String!

  """
  The repository the project is linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of LinkProjectV2ToTeam
"""
input LinkProjectV2ToTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user affected by the action
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is linked to
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
Audit log entry for a org.oauth_app_access_blocked event.
"""
type OrgOauthAppAccessBlockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to mark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Audit log entry for a org.enable_oauth_app_restrictions event.
"""
type OrgEnableOauthAppRestrictionsAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Removes a user from all organizations within the enterprise
  """
  removeEnterpriseMember(
    """
    Parameters for RemoveEnterpriseMember
    """
    input: RemoveEnterpriseMemberInput!
  ): RemoveEnterpriseMemberPayload

  """
  Removes an organization from the enterprise
  """
  body: String!

  """
  The Node ID of the MemberFeatureRequestNotification object
  """
  id: ID!

  """
  Represents member feature request notification title
  """
  title: String!

  """
  Find a project by number.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessBlockedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of MarkPullRequestReadyForReview
"""
input LinkRepositoryToProjectInput {
  """
  The HTTP path for the OAuth application
  """
  createdAt: PreciseDateTime!

  """
  The HTTP path listing the repository's projects
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  repositoryDiscussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter discussions to only those that have been answered or not. Defaults to
    including both answered and unanswered discussions.
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: CREATED_AT, direction: DESC}

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  Identifies the date and time when the repository was last pushed to.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_unblocked event.
"""
type OrgOauthAppAccessUnblockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessUnblockedAuditEntry object
  """
  id: ID!

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    orderBy: TeamOrder

  """
  The Node ID of the OrgRemoveBillingManagerAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.enable_two_factor_requirement event.
"""
type OrgEnableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The Node ID of the MovedColumnsInProjectEvent object
  """
  id: ID!

  """
  A list of nodes.
  """
  nodes: [LinkedBranch]

  """
  Information to aid in pagination.
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the MarkedAsDuplicateEvent object
  """
  enterpriseUrl: URI

  """
  Starts a GitHub Enterprise Importer organization migration.
  """
  startOrganizationMigration(
    """
    Parameters for StartOrganizationMigration
    """
    input: StartOrganizationMigrationInput!
  ): StartOrganizationMigrationPayload

  """
  Starts a GitHub Enterprise Importer (GEI) repository migration.
  """
  id: ID!

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

"""
The connection type for OrganizationAuditEntry.
"""
type OrganizationAuditEntryConnection {
  """
  Transfer an organization from one enterprise to another enterprise.
  """
  transferEnterpriseOrganization(
    """
    Parameters for TransferEnterpriseOrganization
    """
    input: TransferEnterpriseOrganizationInput!
  ): TransferEnterpriseOrganizationPayload

  """
  The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveMemberAuditEntry object
  """
  id: ID!

  """
  Unarchives a ProjectV2Item
  """
  unarchiveProjectV2Item(
    """
    Parameters for UnarchiveProjectV2Item
    """
    input: UnarchiveProjectV2ItemInput!
  ): UnarchiveProjectV2ItemPayload

  """
  Unarchives a repository.
  """
  abortRepositoryMigration(
    """
    Parameters for AbortRepositoryMigration
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

  """
  The name of the Organization.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgBlockUserAuditEntry object
  """
  id: ID!

"""
Autogenerated input type of LockLockable
"""
input LockLockableInput {
  """
  Unlinks a project from a repository.
  """
  unlinkProjectV2FromRepository(
    """
    Parameters for UnlinkProjectV2FromRepository
    """
    input: UnlinkProjectV2FromRepositoryInput!
  ): UnlinkProjectV2FromRepositoryPayload

  """
  Unlinks a project to a team.
  """
  unlinkProjectV2FromTeam(
    """
    Parameters for UnlinkProjectV2FromTeam
    """
    input: UnlinkProjectV2FromTeamInput!
  ): UnlinkProjectV2FromTeamPayload

  """
  Deletes a repository link from a project.
  """
  POLAR

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Ordering options for an organization's enterprise owner connections.
"""
input OrgEnterpriseOwnerOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprise owners by.
  """
  field: OrgEnterpriseOwnerOrderField!
}

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  Organization owners have full access and can change several settings,
  including the names of repositories that belong to the Organization and Owners
  team membership. In addition, organization owners can delete the organization
  and all of its repositories.
  """
  LOGIN
}

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  cursor: String!

  """
  Adds enterprise members to an organization within the enterprise.
  """
  addEnterpriseOrganizationMember(
    """
    Parameters for AddEnterpriseOrganizationMember
    """
    input: AddEnterpriseOrganizationMemberInput!
  ): AddEnterpriseOrganizationMemberPayload

  """
  Unmark a project as a template.
  """
  unmarkProjectV2AsTemplate(
    """
    Parameters for UnmarkProjectV2AsTemplate
    """
    input: UnmarkProjectV2AsTemplateInput!
  ): UnmarkProjectV2AsTemplatePayload

  """
  Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
input EnterpriseServerInstallationOrder {
  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Unsubscribes from notifications
  """
  unsubscribeFromNotifications(
    """
    Parameters for UnsubscribeFromNotifications
    """
    input: UnsubscribeFromNotificationsInput!
  ): UnsubscribeFromNotificationsPayload

  """
  Update a branch protection rule
  """
  updateBranchProtectionRule(
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The email address of the organization invitation.
  """
  email: String

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Node ID of the MembersCanDeleteReposDisableAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The organization invitation.
  """
  organizationInvitation: OrganizationInvitation

  """
  The name of the Organization.
  """
  id: ID!

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Adds a reply to an existing Pull Request Review Thread.
  """
  addPullRequestReviewThreadReply(
    """
    Parameters for AddPullRequestReviewThreadReply
    """
    input: AddPullRequestReviewThreadReplyInput!
  ): AddPullRequestReviewThreadReplyPayload

  """
  Adds a reaction to a subject.
  """
  createdAt: DateTime!

  """
  The Node ID of the LockedEvent object
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  id: ID!

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the primary key from the database as a BigInt.
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the Issue object
  """
  howItWorksHTML: HTML!

  """
  Sets whether or not an organization owner can make purchases.
  """
  archiveProjectV2Item(
    """
    Parameters for ArchiveProjectV2Item
    """
    input: ArchiveProjectV2ItemInput!
  ): ArchiveProjectV2ItemPayload

  """
  Marks a repository as archived.
  """
  id: ID!

  """
  The host name of the Enterprise Server installation.
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  email: String

  """
  The Node ID of the Mannequin object
  """
  createdAt: PreciseDateTime!

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The Node ID of the OrgInviteToBusinessAuditEntry object
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
enum OrganizationInvitationType {
  """
  Close a discussion.
  """
  closeDiscussion(
    """
    Parameters for CloseDiscussion
    """
    input: CloseDiscussionInput!
  ): CloseDiscussionPayload

  """
  Close an issue.
  """
  closeIssue(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  A list of edges.
  """
  edges: [MannequinEdge]

  """
  A list of nodes.
  """
  nodes: [Mannequin]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Copy a project.
  """
  copyProjectV2(
    """
    Parameters for CopyProjectV2
    """
    input: CopyProjectV2Input!
  ): CopyProjectV2Payload

  """
  Invites a user to claim reattributable data
  """
  createAttributionInvitation(
    """
    Parameters for CreateAttributionInvitation
    """
    input: CreateAttributionInvitationInput!
  ): CreateAttributionInvitationPayload

  """
  Create a new branch protection rule
  """
  totalCount: Int!
}

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
type OrgOauthAppAccessApprovedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRestoreMemberAuditEntry object
  """
  id: ID!

  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  updatePatreonSponsorability(
    """
    Parameters for UpdatePatreonSponsorability
    """
    input: UpdatePatreonSponsorabilityInput!
  ): UpdatePatreonSponsorabilityPayload

  """
  Updates an existing project.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposEnableAuditEntry object
  """
  id: ID!

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  Updates an existing project.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessApprovedAuditEntry object
  """
  id: ID!

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
input LinkProjectV2ToRepositoryInput {
  """
  The name of the OAuth application.
  """
  updateProjectV2Collaborators(
    """
    Parameters for UpdateProjectV2Collaborators
    """
    input: UpdateProjectV2CollaboratorsInput!
  ): UpdateProjectV2CollaboratorsPayload

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
union OrganizationOrUser = Organization | User

  """
  The HTTP URL for the OAuth application
  """
  id: ID!

  """
  The ID of the repository to link to the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Create a branch linked to an issue.
  """
  createLinkedBranch(
    """
    Parameters for CreateLinkedBranch
    """
    input: CreateLinkedBranchInput!
  ): CreateLinkedBranchPayload

  """
  Creates a GitHub Enterprise Importer (GEI) migration source.
  """
  repository: Repository
}

"""
Autogenerated input type of LinkProjectV2ToTeam
"""
input LinkProjectV2ToTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  Create a new project field.
  """
  createProjectV2Field(
    """
    Parameters for CreateProjectV2Field
    """
    input: CreateProjectV2FieldInput!
  ): CreateProjectV2FieldPayload

  """
  Create a new pull request
  """
  databaseId: Int

  """
  The Node ID of the MentionedEvent object
  """
  id: ID!
}

"""
Audit log entry for a org.oauth_app_access_blocked event.
"""
type OrgOauthAppAccessBlockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Create a repository ruleset
  """
  createRepositoryRuleset(
    """
    Parameters for CreateRepositoryRuleset
    """
    input: CreateRepositoryRulesetInput!
  ): CreateRepositoryRulesetPayload

  """
  Update a repository ruleset
  """
  updateRepositoryRuleset(
    """
    Parameters for UpdateRepositoryRuleset
    """
    input: UpdateRepositoryRulesetInput!
  ): UpdateRepositoryRulesetPayload

  """
  Sets whether contributors are required to sign off on web-based commits for a repository.
  """
  updateRepositoryWebCommitSignoffSetting(
    """
    Parameters for UpdateRepositoryWebCommitSignoffSetting
    """
    input: UpdateRepositoryWebCommitSignoffSettingInput!
  ): UpdateRepositoryWebCommitSignoffSettingPayload

  """
  Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
  """
  createSponsorsListing(
    """
    Parameters for CreateSponsorsListing
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  Create a new payment tier for your GitHub Sponsors profile.
  """
  team: Team
}

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Make many one-time sponsorships for different sponsorable users or
  organizations at once. Can only sponsor those who have a public GitHub
  Sponsors profile.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessBlockedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  The HTTP path for the OAuth application
  """
  clientMutationId: String

  """
  The HTTP URL for the OAuth application
  """
  createUserList(
    """
    Parameters for CreateUserList
    """
    input: CreateUserListInput!
  ): CreateUserListPayload

  """
  Updates an existing user list.
  """
  updateUserList(
    """
    Parameters for UpdateUserList
    """
    input: UpdateUserListInput!
  ): UpdateUserListPayload

  """
  Updates which of the viewer's lists an item belongs to
  """
  updateUserListsForItem(
    """
    Parameters for UpdateUserListsForItem
    """
    input: UpdateUserListsForItemInput!
  ): UpdateUserListsForItemPayload

  """
  Verify that a verifiable domain has the expected DNS record.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgDisableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

"""
The possible default commit messages for merges.
"""
enum MergeCommitMessage {
  """
  Default to a blank commit message.
  """
  BLANK

  """
  Default to the pull request's body.
  """
  PR_BODY

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
The possible default commit titles for merges.
"""
enum MergeCommitTitle {
  """
  Default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
  """
  MERGE_MESSAGE

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  Branches linked to this issue.
  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Unlink a branch from an issue.
  """
  deleteLinkedBranch(
    """
    Parameters for DeleteLinkedBranch
    """
    input: DeleteLinkedBranchInput!
  ): DeleteLinkedBranchPayload

  """
  Delete a package version.
  """
  deletePackageVersion(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  The Node ID of the LinkedBranch object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessDeniedAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUnblockUserAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  downloadsTotalCount: Int!
}

"""
A version tag contains the mapping between a tag name and a version.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

  """
  The time the action was initiated
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  The Node ID of the OrgUpdateDefaultRepositoryPermissionAuditEntry object
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

    """
    Ordering of the returned package files.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_unblocked event.
"""
type OrgOauthAppAccessUnblockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.remove_billing_manager event.
"""
type OrgRemoveBillingManagerAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The source of this permission.
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveBillingManagerAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryCreationPermissionAuditEntry object
  """
  id: ID!

  """
  The branch's ref.
  """
  ref: Ref
}

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  """
  The configuration for this merge queue
  """
  configuration: MergeQueueConfiguration

  """
  Delete a project.
  """
  deleteProjectV2(
    """
    Parameters for DeleteProjectV2
    """
    input: DeleteProjectV2Input!
  ): DeleteProjectV2Payload

  """
  Delete a project field.
  """
  deleteProjectV2Field(
    """
    Parameters for DeleteProjectV2Field
    """
    input: DeleteProjectV2FieldInput!
  ): DeleteProjectV2FieldPayload

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Deletes a project workflow.
  """
  deleteProjectV2Workflow(
    """
    Parameters for DeleteProjectV2Workflow
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OIDCProvider object
  """
  id: ID!

  """
  Delete a repository ruleset
  """
  deleteRepositoryRuleset(
    """
    Parameters for DeleteRepositoryRuleset
    """
    input: DeleteRepositoryRulesetInput!
  ): DeleteRepositoryRulesetPayload

  """
  Deletes a team discussion.
  """
  digestMethodUrl: URI

  """
  The Node ID of the OrgDisableSamlAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  The item at the end of the edge.
  """
  node: MergeQueueEntry
}

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  The entry is currently waiting for checks to pass.
  """
  AWAITING_CHECKS

  """
  Removes a user from all organizations within the enterprise
  """
  removeEnterpriseMember(
    """
    Parameters for RemoveEnterpriseMember
    """
    input: RemoveEnterpriseMemberInput!
  ): RemoveEnterpriseMemberPayload

  """
  Removes an organization from the enterprise
  """
  LOCKED

  """
  The entry is currently mergeable.
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveMemberAuditEntry object
  """
  id: ID!

  """
  The user affected by the action
  """
  QUEUED

  """
  The entry is currently unmergeable.
  """
  UNMERGEABLE
}

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  Entries only allowed to merge if they are passing.
  """
  ALLGREEN

  """
  Failing Entires are allowed to merge if they are with a passing entry.
  """
  HEADGREEN
}

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type OrgDisableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  A list of edges.
  """
  edges: [LinkedBranchEdge]

  """
  Reopen a discussion.
  """
  reopenDiscussion(
    """
    Parameters for ReopenDiscussion
    """
    input: ReopenDiscussionInput!
  ): ReopenDiscussionPayload

  """
  Reopen a issue.
  """
  nodes: [LinkedBranch]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the MarkedAsDuplicateEvent object
  """
  id: ID!

  """
  Canonical and duplicate belong to different repositories.
  """
  isCrossRepository: Boolean!
}

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  Organization owners have full access and can change several settings,
  including the names of repositories that belong to the Organization and Owners
  team membership. In addition, organization owners can delete the organization
  and all of its repositories.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  revertPullRequest(
    """
    Parameters for RevertPullRequest
    """
    input: RevertPullRequestInput!
  ): RevertPullRequestPayload

  """
  Revoke the migrator role to a user for all organizations under an enterprise account.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  howItWorks: String

  """
  The Node ID of the MarketplaceCategory object
  """
  id: ID!

"""
Represents a member feature request notification
"""
type MemberFeatureRequestNotification implements Node {
  """
  The user affected by the action
  """
  id: ID!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

  """
  Identifies the issue associated with the event.
  """
  issue: Issue!
}

"""
A Pinned Issue is a issue pinned to a repository's index page.
"""
type PinnedIssue implements Node {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

  """
  The issue that was pinned.
  """
  issue: Issue!

  """
  Starts a GitHub Enterprise Importer (GEI) repository migration.
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Audit log entry for a org.enable_oauth_app_restrictions event.
"""
type Organization implements Actor & AnnouncementBanner & MemberStatusable & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  The text of the announcement
  """
  announcement: String

  """
  The expiration date of the announcement, if any
  """
  announcementExpiresAt: DateTime

  """
  Whether the announcement can be dismissed by the user
  """
  announcementUserDismissible: Boolean

  """
  Transfer an organization from one enterprise to another enterprise.
  """
  transferEnterpriseOrganization(
    """
    Parameters for TransferEnterpriseOrganization
    """
    input: TransferEnterpriseOrganizationInput!
  ): TransferEnterpriseOrganizationPayload

  """
  Identifies the date and time when the organization was archived.
  """
  archivedAt: DateTime

  """
  Audit log entries of the organization
  """
  clientMutationId: String

  """
  Unarchives a ProjectV2Item
  """
  unarchiveProjectV2Item(
    """
    Parameters for UnarchiveProjectV2Item
    """
    input: UnarchiveProjectV2ItemInput!
  ): UnarchiveProjectV2ItemPayload

  """
  Unarchives a repository.
  """
  locked: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  Unlinks a project from a repository.
  """
  unlinkProjectV2FromRepository(
    """
    Parameters for UnlinkProjectV2FromRepository
    """
    input: UnlinkProjectV2FromRepositoryInput!
  ): UnlinkProjectV2FromRepositoryPayload

  """
  Unlinks a project to a team.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveOutsideCollaboratorAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgEnableOauthAppRestrictionsAuditEntry object
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The Node ID of the OrgAddMemberAuditEntry object
  """
  id: ID!

  """
  Deletes a repository link from a project.
  """
  id: ID!

  """
  Identifies the issue number.
  """
  number: Int!

  """
  The migration source.
  """
  migrationSource: MigrationSource!

  """
  `true` if the object is locked
  """
  locked: Boolean!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  milestone: Milestone

  """
  Unmark a project as a template.
  """
  unmarkProjectV2AsTemplate(
    """
    Parameters for UnmarkProjectV2AsTemplate
    """
    input: UnmarkProjectV2AsTemplateInput!
  ): UnmarkProjectV2AsTemplatePayload

"""
Audit log entry for a org.enable_saml event.
"""
type OrgEnableSamlAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  hasSponsorsListing: Boolean!

  """
  The Node ID of the Organization object
  """
  id: ID!

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRestoreMemberAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  Whether the given account is sponsoring this user/organization.
  """
  organizationUrl: URI

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    type: PinnableItemType
  ): Boolean!

  """
  The public profile email.
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

  """
  Showcases a selection of repositories and gists that the profile owner has
  either curated or that have been selected automatically based on popularity.
  """
  itemShowcase: ProfileItemShowcase!

  """
  The organization's public profile location.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  A list of all mannequins for this organization.
  """
  mannequins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter mannequins by login.
    """
    login: String

    """
    Ordering options for mannequins returned from the connection.
    """
    orderBy: MannequinOrder = {field: CREATED_AT, direction: ASC}
  ): MannequinConnection!

  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  userUrl: URI
}

"""
Audit log entry for a org.enable_two_factor_requirement event.
"""
type OrgEnableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Unsubscribes from notifications
  """
  unsubscribeFromNotifications(
    """
    Parameters for UnsubscribeFromNotifications
    """
    input: UnsubscribeFromNotificationsInput!
  ): UnsubscribeFromNotificationsPayload

  """
  Update a branch protection rule
  """
  description: String

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  createdAt: DateTime!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  id: ID!

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
enum MigrationSourceType {
  """
  Find a project by number.
  """
  POLAR

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  A GitHub Migration API source.
  """
  GITHUB_ARCHIVE
}

"""
The GitHub Enterprise Importer (GEI) migration state.
"""
enum MigrationState {
  """
  The migration has failed.
  """
  email: String

  """
  The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  The migration is in progress.
  """
  UNAFFILIATED
}

  """
  The migration has not started.
  """
  createdAt: PreciseDateTime!

  """
  The name of the Organization.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  The migration has been queued.
  """
  edges: [MannequinEdge]

  """
  The migration has succeeded.
  """
  nodes: [Mannequin]

  """
  Sets whether or not an organization owner can make purchases.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Mannequin
}

"""
Ordering options for an organization's enterprise owner connections.
"""
input OrgEnterpriseOwnerOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprise owners by.
  """
  field: OrgEnterpriseOwnerOrderField!
}

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  LOGIN
}

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The ordering direction.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUnblockUserAuditEntry object
  """
  id: ID!

  """
  The field to order mannequins by.
  """
  field: MannequinOrderField!
}

"""
Properties by which mannequins can be ordered.
"""
enum MannequinOrderField {
  """
  Order mannequins why when they were created.
  """
  CREATED_AT

  """
  Order mannequins alphabetically by their source login.
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

  """
  The Node ID of the Milestone object
  """
  id: ID!

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
input MarkDiscussionCommentAsAnswerInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The email address of the organization invitation.
  """
  email: String

  """
  The Node ID of the OrgInviteMemberAuditEntry object
  """
  id: ID!

  """
  The template filename.
  """
  filename: String!

  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The organization invitation.
  """
  organizationInvitation: OrganizationInvitation

  """
  The name of the Organization.
  """
  organizationName: String

  """
  Find a project by number.
  """
  updatePatreonSponsorability(
    """
    Parameters for UpdatePatreonSponsorability
    """
    input: UpdatePatreonSponsorabilityInput!
  ): UpdatePatreonSponsorabilityPayload

  """
  Updates an existing project.
  """
  updateProject(
    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The template name.
  """
  url: URI!

  """
  The HTTP path listing organization's projects
  """
  id: ID!

  """
  The Node ID of the GistComment object
  """
  gist: Gist!

  """
  The Node ID of the GistComment object
  """
  gist: Gist!

  """
  The Node ID of the GistComment object
  """
  gist: Gist!

  """
  The Node ID of the GistComment object
  """
  createdAt: PreciseDateTime!

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The Node ID of the OrgInviteToBusinessAuditEntry object
  """
  id: ID!

  """
  The Node ID of the MarkedAsDuplicateEvent object
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposEnableAuditEntry object
  """
  createdAt: DateTime!

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Update a repository ruleset
  """
  updateRepositoryRuleset(
    """
    Parameters for UpdateRepositoryRuleset
    """
    input: UpdateRepositoryRulesetInput!
  ): UpdateRepositoryRulesetPayload

  """
  Sets whether contributors are required to sign off on web-based commits for a repository.
  """
  updateRepositoryWebCommitSignoffSetting(
    """
    Parameters for UpdateRepositoryWebCommitSignoffSetting
    """
    input: UpdateRepositoryWebCommitSignoffSettingInput!
  ): UpdateRepositoryWebCommitSignoffSettingPayload

  """
  Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
  """
  isMinimized: Boolean!

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The Node ID of the MarketplaceCategory object
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
type OrgOauthAppAccessApprovedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  Identifies when the comment was published at.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberAuditEntry object
  """
  id: ID!

  """
  Identifies the date and time when the object was last updated.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

  """
  The Node ID of the HeadRefRestoredEvent object
  """
  databaseId: Int

  """
  Updates an existing user list.
  """
  updateUserList(
    """
    Parameters for UpdateUserList
    """
    input: UpdateUserListInput!
  ): UpdateUserListPayload

  """
  Updates which of the viewer's lists an item belongs to
  """
  updateUserListsForItem(
    """
    Parameters for UpdateUserListsForItem
    """
    input: UpdateUserListsForItemInput!
  ): UpdateUserListsForItemPayload

  """
  Verify that a verifiable domain has the expected DNS record.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgCreateAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessApprovedAuditEntry object
  """
  id: ID!

"""
Represents a member feature request notification
"""
type MemberFeatureRequestNotification implements Node {
  """
  The name of the OAuth application.
  """
  body: String!

  """
  The HTTP path for the OAuth application
  """
  id: ID!

  """
  The HTTP URL for the OAuth application
  """
  title: String!

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

"""
An OIDC identity provider configured to provision identities for an enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with read:enterprise or admin:enterprise scope.
"""
interface MemberStatusable {
  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OIDCProvider object
  """
  id: ID!

"""
The possible default commit messages for merges.
"""
enum MergeCommitMessage {
  """
  Default to a blank commit message.
  """
  BLANK

  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
The possible default commit titles for merges.
"""
interface OauthApplicationAuditEntryData {
  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  MERGE_MESSAGE

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The Node ID of the LabeledEvent object
  """
  databaseId: Int

  """
  The Node ID of the MovedColumnsInProjectEvent object
  """
  createdAt: PreciseDateTime!

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
New projects that manage issues, pull requests and drafts using tables and boards.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  The name of the OAuth application.
  """
  closed: Boolean!

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The rate limit of the OAuth application.
  """
  createdAt: DateTime!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  creator: Actor

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  databaseId: Int

"""
The state of an OAuth application when it was created.
"""
type MergeQueueEntry implements Node {
  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  The project's number.
  """
  number: Int!

  """
  The project's owner. Currently limited to organizations and users.
  """
  owner: ProjectV2Owner!

  """
  The sponsorships where this user or organization is the funder.
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

  """
  The HTTP path for this project
  """
  resourcePath: URI!

  """
  Find an organization's team by its slug.
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  A list of teams in this organization.
  """
  title: String!

  """
  The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object
  """
  updatedAt: DateTime!

  """
  The name of the OAuth application.
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  The Organization associated with the Audit Entry.
  """
  edges: [ProjectV2Edge]

  """
  The name of the Organization.
  """
  nodes: [ProjectV2]

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  node: ProjectV2
}

"""
A field inside a project.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  The HTTP path for the user.
  """
  createdAt: DateTime!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  dataType: ProjectV2FieldType!

  """
  The organization's Twitter username.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
type Organization implements Actor & AnnouncementBanner & MemberStatusable & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  The text of the announcement
  """
  name: String!

  """
  The expiration date of the announcement, if any
  """
  project: ProjectV2!

  """
  The action name
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  Identifies the date and time when the organization was archived.
  """
  createdAt: DateTime!

  """
  Audit log entries of the organization
  """
  dataType: ProjectV2FieldType!

  """
  The IP address of the actor
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  A readable representation of the actor's location
  """
  name: String!

  """
  The username of the user who initiated the action
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  The name of the OAuth application.
  """
  edges: [ProjectV2FieldEdge]

  """
  The HTTP path for the OAuth application
  """
  nodes: [ProjectV2Field]

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

"""
An edge in a connection.
"""
type ProjectV2FieldEdge {
  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  The action name
  """
  ASSIGNEES

  """
  The user who initiated the action
  """
  DATE

  """
  The IP address of the actor
  """
  ITERATION

  """
  A readable representation of the actor's location
  """
  LABELS

  """
  The username of the user who initiated the action
  """
  LINKED_PULL_REQUESTS

  """
  The HTTP path for the actor.
  """
  MILESTONE

  """
  The HTTP URL for the actor.
  """
  NUMBER

  """
  The Node ID of the Organization object
  """
  REPOSITORY

  """
  The time the action was initiated
  """
  REVIEWERS

  """
  The Node ID of the OrgOauthAppAccessUnblockedAuditEntry object
  """
  SINGLE_SELECT

  """
  The name of the OAuth application.
  """
  TEXT

  """
  The HTTP path for the OAuth application
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  The HTTP URL for the OAuth application
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  The Organization associated with the Audit Entry.
  """
  content: ProjectV2ItemContent

  """
  The name of the Organization.
  """
  createdAt: DateTime!

  """
  Whether the given account is sponsoring this user/organization.
  """
  creator: Actor

  """
  The HTTP URL for the organization
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

  """
  The organization's public profile location.
  """
  isArchived: Boolean!

  """
  The HTTP URL for the user.
  """
  project: ProjectV2!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  type: ProjectV2ItemType!

  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  The user who initiated the action
  """
  edges: [ProjectV2ItemEdge]

  """
  The IP address of the actor
  """
  nodes: [ProjectV2Item]

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  The HTTP URL for the actor.
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The source of the invitation.
  """
  createdAt: DateTime!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  creator: Actor

  """
  The Node ID of the OrgRemoveBillingManagerAuditEntry object
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  The OAuth application was in the process of being deleted.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
enum OrganizationInvitationType {
  """
  Creates a GitHub Enterprise Importer (GEI) migration source.
  """
  viewerSubscription: SubscriptionState

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The actor who created the item.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
input LinkProjectV2ToRepositoryInput {
  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

"""
The GitHub Enterprise Importer (GEI) migration state.
"""
input LinkProjectV2ToTeamInput {
  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  Deletes a pull request review.
  """
  edges: [ProjectV2ItemFieldValueEdge]

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  The migration has not started.
  """
  clientMutationId: String

  """
  The migration needs to have its credentials validated.
  """
  team: Team
}

"""
Audit log entry for a org.enable_saml event.
"""
type ProjectV2ItemFieldValueEdge {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  The Node ID of the OrgInviteMemberAuditEntry object
  """
  id: ID!

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  The team the project is linked to
  """
  team: Team
}

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  GREEN
  """
  GREEN

"""
Ordering options for environments
"""
input Environments {
  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Node ID of the OrgOauthAppAccessApprovedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  unlinkProjectV2FromRepository(
    """
    Parameters for UnlinkProjectV2FromRepository
    """
    input: UnlinkProjectV2FromRepositoryInput!
  ): UnlinkProjectV2FromRepositoryPayload

  """
  The HTTP path for the OAuth application
  """
  unlinkProjectV2FromTeam(
    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  updatePatreonSponsorability(
    """
    Parameters for UpdatePatreonSponsorability
    """
    input: UpdatePatreonSponsorabilityInput!
  ): UpdatePatreonSponsorabilityPayload

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

"""
Audit log entry for a org.oauth_app_access_blocked event.
"""
type OrgOauthAppAccessBlockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  The project view's name.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

"""
Represents a GitHub Enterprise Importer (GEI) migration.
"""
interface Migration {
  """
  The HTTP URL for the OAuth application
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The corresponding operation type for the action
  """
  updateRepositoryRuleset(
    """
    Parameters for UpdateRepositoryRuleset
    """
    input: UpdateRepositoryRulesetInput!
  ): UpdateRepositoryRulesetPayload

  """
  Sets whether contributors are required to sign off on web-based commits for a repository.
  """
  updateRepositoryWebCommitSignoffSetting(
    """
    Parameters for UpdateRepositoryWebCommitSignoffSetting
    """
    input: UpdateRepositoryWebCommitSignoffSettingInput!
  ): UpdateRepositoryWebCommitSignoffSettingPayload

  """
  Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
  """
  createAttributionInvitation(
    """
    Parameters for CreateAttributionInvitation
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  The HTTP path for the OAuth application
  """
  edges: [ProjectV2ViewEdge]

  """
  The HTTP URL for the OAuth application
  """
  nodes: [ProjectV2View]

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

"""
An edge in a connection.
"""
type ProjectV2ViewEdge {
  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  oauthApplicationName: String

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  action: String!

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  actorIp: String

  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  UPDATED_AT
}

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

"""
The GitHub Enterprise Importer (GEI) migration state.
"""
input MarkProjectV2AsTemplateInput {
  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Parameters for CreateProjectV2Field
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Create a new pull request
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The name of the OAuth application.
  """
  createRepositoryRuleset(
    """
    Parameters for CreateRepositoryRuleset
    """
    input: CreateRepositoryRulesetInput!
  ): CreateRepositoryRulesetPayload

  """
  The HTTP path for the OAuth application
  """
  createSponsorsListing(
    """
    Parameters for CreateSponsorsListing
    """
    input: CreateSponsorsListingInput!
  ): CreateSponsorsListingPayload

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

"""
An email belonging to a user account on an Enterprise Server installation.
"""
type EnterpriseServerUserAccountEmail implements Node {
  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Parameters for DeleteProjectV2Workflow
    """
    input: DeleteProjectV2WorkflowInput!
  ): DeleteProjectV2WorkflowPayload

  """
  Deletes a pull request review.
  """
  PR_BODY

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
The state of an OAuth application when it was created.
"""
enum MergeCommitTitle {
  """
  The OAuth application was active and allowed to have OAuth Accesses.
  """
  MERGE_MESSAGE

  """
  The OAuth application was in the process of being deleted.
  """
  deleteRepositoryRuleset(
    """
    Parameters for DeleteRepositoryRuleset
    """
    input: DeleteRepositoryRulesetInput!
  ): DeleteRepositoryRulesetPayload

  """
  The permalink to the pull request.
  """
  permalink: URI!

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

"""
Project progress stats.
"""
type ProjectProgress {
  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

"""
New projects that manage issues, pull requests and drafts using tables and boards.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The slug of the enterprise.
  """
  creator: Actor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

"""
Configuration for a MergeQueue
"""
type MergeQueueConfiguration {
  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
type OrgOauthAppAccessApprovedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Parameters for RemoveEnterpriseMember
    """
    input: RemoveEnterpriseMemberInput!
  ): RemoveEnterpriseMemberPayload

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  The estimated time in seconds until this entry will be merged
  """
  title: String!

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The HTTP path for the OAuth application
  """
  mergeQueue: MergeQueue

  """
  The HTTP URL for the OAuth application
  """
  reopenDiscussion(
    """
    Parameters for ReopenDiscussion
    """
    input: ReopenDiscussionInput!
  ): ReopenDiscussionPayload

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  The item at the end of the edge.
  """
  dataType: ProjectV2FieldType!

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  The entry is currently waiting for checks to pass.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  Starts a GitHub Enterprise Importer organization migration.
  """
  name: String!

  """
  Starts a GitHub Enterprise Importer (GEI) repository migration.
  """
  project: ProjectV2!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  Transfer an issue to a different repository
  """
  createdAt: DateTime!

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  dataType: ProjectV2FieldType!

  """
  The name of the OAuth application.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateDefaultRepositoryPermissionAuditEntry object
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  The HTTP path for the OAuth application
  """
  name: String!

  """
  The HTTP URL for the OAuth application
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  Entries only allowed to merge if they are passing.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  Unlinks a project from a repository.
  """
  nodes: [ProjectV2Field]

  """
  Unlinks a project to a team.
  """
  unlinkProjectV2FromTeam(
    """
    Parameters for UnlinkProjectV2FromTeam
    """
    input: UnlinkProjectV2FromTeamInput!
  ): UnlinkProjectV2FromTeamPayload

  """
  Deletes a repository link from a project.
  """
  HEADGREEN
}

"""
Detailed status information about a pull request merge.
"""
type ProjectV2FieldEdge {
  """
  Order mannequins why when they were created.
  """
  CREATED_AT

  """
  Abort a repository migration queued or in progress.
  """
  abortRepositoryMigration(
    """
    Parameters for AbortRepositoryMigration
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

  """
  Accepts a pending invitation for a user to become an administrator of an enterprise.
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  The action name
  """
  ASSIGNEES

  """
  Unmark a project as a template.
  """
  DATE

  """
  Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
  """
  ITERATION

  """
  The Node ID of the LabeledEvent object
  """
  LABELS

  """
  Information to aid in pagination.
  """
  LINKED_PULL_REQUESTS

  """
  The Node ID of the OrgConfigDisableCollaboratorsOnlyAuditEntry object
  """
  MILESTONE

  """
  Unsubscribes from notifications
  """
  NUMBER

  """
  The Node ID of the OrgOauthAppAccessDeniedAuditEntry object
  """
  REPOSITORY

  """
  The name of the OAuth application.
  """
  REVIEWERS

  """
  The HTTP path for the OAuth application
  """
  SINGLE_SELECT

  """
  The HTTP URL for the OAuth application
  """
  TEXT

  """
  The Node ID of the OrgUpdateMemberAuditEntry object
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  The corresponding operation type for the action
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  The actor who authored the comment.
  """
  author: Actor

  """
  The Organization associated with the Audit Entry.
  """
  content: ProjectV2ItemContent

  """
  The name of the Organization.
  """
  createdAt: DateTime!

  """
  The HTTP path for the organization
  """
  creator: Actor

  """
  The HTTP URL for the organization
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  fieldValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  isArchived: Boolean!

  """
  The HTTP path for the user.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
type OrgOauthAppAccessRequestedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

  """
  The user who initiated the action
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  edges: [ProjectV2ItemEdge]

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  nodes: [ProjectV2Item]

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessRequestedAuditEntry object
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The Node ID of the OrgUpdateMemberRepositoryCreationPermissionAuditEntry object
  """
  createdAt: DateTime!

  """
  The name of the OAuth application.
  """
  creator: Actor

  """
  The HTTP path for the OAuth application
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  The HTTP URL for the OAuth application
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The HTTP URL for the actor.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  field: ProjectV2FieldConfiguration!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The Node ID of the Language object
  """
  hasSponsorsListing: Boolean!

  """
  The actor who created the item.
  """
  id: ID!

  """
  The item at the end of the edge.
  """
  howItWorksHTML: HTML!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  The time the action was initiated
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  The Node ID of the OrgRemoveMemberAuditEntry object
  """
  id: ID!

  """
  The types of membership the member has with the organization.
  """
  membershipTypes: [OrgRemoveMemberAuditEntryMembershipType!]

"""
An edge in a connection.
"""
type ProjectV2ItemFieldValueEdge {
  """
  Marks a repository as archived.
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type PullRequestRevisionMarker {
  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

"""
An item in a pull request timeline
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  The Node ID of the MembersCanDeleteReposClearAuditEntry object
  """
  id: ID!

"""
Autogenerated input type of LockLockable
"""
input LockLockableInput {
  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

"""
Audit log entry for a org.enable_two_factor_requirement event.
"""
type OrgEnableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  READY_FOR_REVIEW_EVENT

  """
  Represents a 'referenced' event on a given `ReferencedSubject`.
  """
  REFERENCED_EVENT

  """
  Represents a 'removed_from_merge_queue' event on a given pull request.
  """
  REMOVED_FROM_MERGE_QUEUE_EVENT

  """
  Represents a 'removed_from_project' event on a given issue or pull request.
  """
  REMOVED_FROM_PROJECT_EVENT

  """
  Represents a 'renamed' event on a given issue or pull request
  """
  RENAMED_TITLE_EVENT

  """
  Represents a 'reopened' event on any `Closable`.
  """
  REOPENED_EVENT

  """
  Represents a 'review_dismissed' event on a given issue or pull request.
  """
  REVIEW_DISMISSED_EVENT

  """
  Represents an 'review_requested' event on a given pull request.
  """
  REVIEW_REQUESTED_EVENT

  """
  Represents an 'review_request_removed' event on a given pull request.
  """
  REVIEW_REQUEST_REMOVED_EVENT

  """
  Represents a 'subscribed' event on a given `Subscribable`.
  """
  SUBSCRIBED_EVENT

  """
  Represents a 'transferred' event on a given issue or pull request.
  """
  TRANSFERRED_EVENT

  """
  Represents an 'unassigned' event on any assignable object.
  """
  UNASSIGNED_EVENT

  """
  Represents an 'unlabeled' event on a given issue or pull request.
  """
  UNLABELED_EVENT

  """
  Represents an 'unlocked' event on a given issue or pull request.
  """
  UNLOCKED_EVENT

  """
  Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
  """
  UNMARKED_AS_DUPLICATE_EVENT

  """
  Represents an 'unpinned' event on a given issue or pull request.
  """
  UNPINNED_EVENT

  """
  Represents an 'unsubscribed' event on a given `Subscribable`.
  """
  UNSUBSCRIBED_EVENT

  """
  Represents a 'user_blocked' event on a given user.
  """
  USER_BLOCKED_EVENT
}

"""
The possible target states when updating a pull request.
"""
enum PullRequestUpdateState {
  """
  A pull request that has been closed without being merged.
  """
  CLOSED

  """
  A pull request that is still open.
  """
  OPEN
}

"""
A Git push.
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  The SHA after the push
  """
  nextSha: GitObjectID

  """
  The permalink for this push.
  """
  permalink: URI!

  """
  The SHA before the push
  """
  previousSha: GitObjectID

  """
  The actor who pushed
  """
  pusher: Actor!

  """
  The repository that was pushed to
  """
  repository: Repository!
}

"""
A team, user, or app who has the ability to push to a protected branch.
"""
type PushAllowance implements Node {
  """
  The actor that can push.
  """
  actor: PushAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the PushAllowance object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union PushAllowanceActor = App | Team | User

"""
The connection type for PushAllowance.
"""
type PushAllowanceConnection {
  """
  A list of edges.
  """
  edges: [PushAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [PushAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PushAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PushAllowance
}

  """
  Archives a ProjectV2Item
  """
  archiveProjectV2Item(
    """
    Parameters for ArchiveProjectV2Item
    """
    input: ArchiveProjectV2ItemInput!
  ): ArchiveProjectV2ItemPayload

  """
  Marks a repository as archived.
  """
  The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberAuditEntry object
  """
  id: ID!

  """
  Unmark a project as a template.
  """
  unmarkProjectV2AsTemplate(
    """
    Parameters for UnmarkProjectV2AsTemplate
    """
    input: UnmarkProjectV2AsTemplateInput!
  ): UnmarkProjectV2AsTemplatePayload

  """
  Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
  """
  unminimizeComment(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The name of the Organization.
  """
  unsubscribeFromNotifications(
    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Close a discussion.
  """
  closeDiscussion(
    """
    Parameters for CloseDiscussion
    """
    input: CloseDiscussionInput!
  ): CloseDiscussionPayload

  """
  Close an issue.
  """
  closeIssue(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  layout: ProjectV2ViewLayout!

  """
  The project view's name.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    query: String!

    """
    The types of search items to search within.
    """
    type: SearchType!
  ): SearchResultItemConnection!

  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  The email address of the organization invitation.
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    login: String!
  ): User

  """
  The currently authenticated user.
  """
  viewer: User!
}

"""
Represents the client's rate limit.
"""
type RateLimit {
  """
  The point cost for the current query counting against the rate limit.
  """
  cost: Int!

  """
  The maximum number of points the client is permitted to consume in a 60 minute window.
  """
  limit: Int!

  """
  The maximum number of nodes this query may return
  """
  nodeCount: Int!

  """
  The number of points remaining in the current rate limit window.
  """
  remaining: Int!

  """
  The time at which the current rate limit window resets in UTC epoch seconds.
  """
  resetAt: DateTime!

  """
  The number of points used in the current rate limit window.
  """
  used: Int!
}

"""
Represents a subject that can be reacted on.
"""
interface Reactable {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Reactable object
  """
  id: ID!

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ViewEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2View]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ViewEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  databaseId: Int

  """
  The Node ID of the Reaction object
  """
  id: ID!

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  name: String!

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  updateProjectV2Collaborators(
    """
    Parameters for UpdateProjectV2Collaborators
    """
    input: UpdateProjectV2CollaboratorsInput!
  ): UpdateProjectV2CollaboratorsPayload

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  announcement: String

  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  UPDATED_AT
}

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReadyForReviewEvent object
  """
  id: ID!

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  branchProtectionRule: BranchProtectionRule

  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    The head ref to compare against.
    """
    headRef: String!
  ): Comparison

  """
  The Node ID of the Ref object
  """
  id: ID!

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  A list of rules from active Repository and Organization rulesets that apply to this ref.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repository rules.
    """
    orderBy: RepositoryRuleOrder = {field: UPDATED_AT, direction: DESC}
  ): RepositoryRuleConnection

  """
  The object the ref points to. Returns null when object does not exist.
  """
  baseRefOid: GitObjectID!

  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Ways in which lists of git refs can be ordered upon return.
"""
input RefOrder {
  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

"""
Branch protection rules that are enforced on the viewer.
"""
type RefUpdateRule {
  """
  Can this branch be deleted.
  """
  allowsDeletions: Boolean!

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OIDCProvider object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessBlockedAuditEntry object
  """
  id: ID!

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  """
  The name of the OAuth application.
  """
  configuration: MergeQueueConfiguration

  """
  The HTTP path for the OAuth application
  """
  createdAt: PreciseDateTime!

  """
  The HTTP URL for the OAuth application
  """
  id: ID!

  """
  Links a project to a repository.
  """
  linkProjectV2ToRepository(
    """
    Parameters for LinkProjectV2ToRepository
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Parameters for LinkProjectV2ToTeam
    """
    input: LinkProjectV2ToTeamInput!
  ): LinkProjectV2ToTeamPayload

  """
  The HTTP path for the OAuth application
  """
  linkRepositoryToProject(
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReferencedEvent object
  """
  id: ID!

  """
  Reference originated in a different repository.
  """
  isCrossRepository: Boolean!

  """
  Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference.
  """
  isDirectReference: Boolean!

  """
  Object referenced by event.
  """
  subject: ReferencedSubject!
}

"""
Any referencable object
"""
union ReferencedSubject = Issue | PullRequest

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  descriptionHTML: HTML

  """
  The Node ID of the Release object
  """
  id: ID!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A name to filter the assets by.
    """
    name: String
  ): ReleaseAssetConnection!

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  downloadUrl: URI!

  """
  The Node ID of the ReleaseAsset object
  """
  id: ID!

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The permalink to the pull request.
  """
  permalink: URI!

"""
Audit log entry for a org.remove_billing_manager event.
"""
type OrgRemoveBillingManagerAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The Node ID of the OrgRemoveBillingManagerAuditEntry object
  """
  id: ID!

  """
  The HTTP URL for the OAuth application
  """
  digestMethodUrl: URI

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Find a project by number.
  """
  id: ID!

  """
  A list of projects under the owner.
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the MarkedAsDuplicateEvent object
  """
  id: ID!

  """
  The Node ID of the HeadRefForcePushedEvent object
  """
  id: ID!

"""
Ordering options for environments
"""
input Environments {
  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  unmarkProjectV2AsTemplate(
    """
    Parameters for UnmarkProjectV2AsTemplate
    """
    input: UnmarkProjectV2AsTemplateInput!
  ): UnmarkProjectV2AsTemplatePayload

  """
  Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  howItWorks: String

  """
  The Node ID of the MarketplaceCategory object
  """
  id: ID!

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type OrgDisableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Unsubscribes from notifications
  """
  unsubscribeFromNotifications(
    """
    Parameters for UnsubscribeFromNotifications
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The Node ID of the OrgRemoveMemberAuditEntry object
  """
  id: ID!

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

"""
Audit log entry for a org.enable_oauth_app_restrictions event.
"""
type OrgEnableOauthAppRestrictionsAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
A GitHub Enterprise Importer (GEI) migration source.
"""
type MigrationSource implements Node {
  """
  Organization owners have full access and can change several settings,
  including the names of repositories that belong to the Organization and Owners
  team membership. In addition, organization owners can delete the organization
  and all of its repositories.
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  color: String

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
enum MigrationSourceType {
  """
  The Node ID of the Language object
  """
  howItWorksHTML: HTML!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise from which the user should be removed.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the user to remove from the enterprise.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  The user that was removed from the enterprise.
  """
  user: User

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
enum MergeCommitMessage {
  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
  """
  updateOrganizationWebCommitSignoffSetting(
    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    input: UpdateOrganizationWebCommitSignoffSettingInput!
  ): UpdateOrganizationWebCommitSignoffSettingPayload

  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  updatePatreonSponsorability(
    """
    Parameters for UpdatePatreonSponsorability
    """
    input: UpdatePatreonSponsorabilityInput!
  ): UpdatePatreonSponsorabilityPayload

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

"""
Audit log entry for a org.enable_two_factor_requirement event.
"""
type OrgEnableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Updates an existing project.
  """
  updateProjectV2(
    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Parameters for UpdateProjectV2Collaborators
    """
    input: UpdateProjectV2CollaboratorsInput!
  ): UpdateProjectV2CollaboratorsPayload

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The Node ID of the OrgInviteToBusinessAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUnblockUserAuditEntry object
  """
  id: ID!

  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  QUEUED

  """
  The entry is currently unmergeable.
  """
  UNMERGEABLE
}

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  ALLGREEN

  """
  Failing Entires are allowed to merge if they are with a passing entry.
  """
  HEADGREEN
}

"""
Detailed status information about a pull request merge.
"""
input Environments {
  """
  The actor who edited the comment.
  """
  editor: Actor

  """
  The associated gist.
  """
  createdAt: DateTime!

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

  """
  The Node ID of the RemovedFromMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The reason this pull request was removed from the queue.
  """
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
type RemovedFromProjectEvent implements Node {
  """
  The Node ID of the MilestonedEvent object
  """
  id: ID!

  """
  The application URL of the OAuth application.
  """
  viewerCanClose: Boolean!

  """
  The callback URL of the OAuth application.
  """
  databaseId: Int

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  id: ID!

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
type OrgOauthAppAccessApprovedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Can user react to this subject
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OauthApplicationCreateAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  currentTitle: String!

  """
  The Node ID of the RenamedTitleEvent object
  """
  id: ID!

  """
  The HTTP path for the OAuth application
  """
  viewerCanReopen: Boolean!

  """
  The HTTP URL for the OAuth application
  """
  pullRequest: PullRequest!
}

"""
An object which has a renamable title
"""
union RenamedTitleSubject = Issue | PullRequest

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
type Hovercard {
  """
  Each of the contexts for this hovercard
  """
  contexts: [HovercardContext!]!
}

  """
  The Node ID of the HeadRefRestoredEvent object
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateDefaultRepositoryPermissionAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgOauthAppAccessApprovedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  The HTTP path for the OAuth application
  """
  includesCreatedEdit: Boolean!

  """
  The HTTP URL for the OAuth application
  """
  fullDatabaseId: BigInt

  """
  The state of the OAuth application.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

  """
  The reason the issue state was changed to open.
  """
  stateReason: IssueStateReason
}

"""
Audit log entry for a repo.access event.
"""
type RepoAccessAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The Node ID of the MergedEvent object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgDisableOauthAppRestrictionsAuditEntry object
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

  """
  The Node ID of the GistComment object
  """
  id: ID!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  viewerSubscription: SubscriptionState

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

"""
The state of an OAuth application when it was created.
"""
input LinkProjectV2ToRepositoryInput {
  """
  The OAuth application was active and allowed to have OAuth Accesses.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  id: ID!

  """
  The OAuth application was in the process of being deleted.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Audit log entry for a org.oauth_app_access_blocked event.
"""
type OrgOauthAppAccessBlockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The migration flag to continue on error.
  """
  clientMutationId: String

  """
  The repository the project is linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of LinkProjectV2ToTeam
"""
input LinkProjectV2ToTeamInput {
  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the Migration object
  """
  databaseId: Int

  """
  The Node ID of the MovedColumnsInProjectEvent object
  """
  id: ID!

  """
  The ID of the project to link to the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to link to the project.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessBlockedAuditEntry object
  """
  id: ID!

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  The name of the OAuth application.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberAuditEntry object
  """
  id: ID!

  """
  The HTTP path for the OAuth application
  """
  team: Team
}

"""
Autogenerated input type of LinkRepositoryToProject
"""
input LinkProjectV2ToRepositoryInput {
  """
  The HTTP URL for the OAuth application
  """
  digestMethodUrl: URI

"""
Entities that have members who can set status messages.
"""
input LinkProjectV2ToTeamInput {
  """
  The Node ID of the OrgDisableSamlAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddMemberAuditEntry object
  """
  id: ID!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  Close a discussion.
  """
  closeDiscussion(
    """
    Parameters for CloseDiscussion
    """
    input: CloseDiscussionInput!
  ): CloseDiscussionPayload

  """
  Close an issue.
  """
  id: ID!

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  login: String!

  """
  The HTML path to this resource.
  """
  resourcePath: URI!

  """
  Identifies the date and time when the object was last updated.
  """
  edges: [LinkedBranchEdge]

  """
  Copy a project.
  """
  copyProjectV2(
    """
    Parameters for CopyProjectV2
    """
    input: CopyProjectV2Input!
  ): CopyProjectV2Payload

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Invites a user to claim reattributable data
  """
  createAttributionInvitation(
    """
    Parameters for CreateAttributionInvitation
    """
    input: CreateAttributionInvitationInput!
  ): CreateAttributionInvitationPayload

  """
  Create a new branch protection rule
  """
  url: URI!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!
}

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  A list of edges.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  A list of nodes.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  createdAt: PreciseDateTime!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
type OrgOauthAppAccessRequestedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoArchivedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

"""
Audit log entry for a org.oauth_app_access_unblocked event.
"""
type OrgOauthAppAccessUnblockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgOauthAppAccessUnblockedAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  oauthApplicationResourcePath: URI

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.remove_billing_manager event.
"""
type Organization implements Actor & AnnouncementBanner & MemberStatusable & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  The text of the announcement
  """
  announcement: String

  """
  The expiration date of the announcement, if any
  """
  announcementExpiresAt: DateTime

  """
  Whether the announcement can be dismissed by the user
  """
  announcementUserDismissible: Boolean

  """
  The action name
  """
  action: String!

  """
  Identifies the date and time when the organization was archived.
  """
  archivedAt: DateTime

  """
  Audit log entries of the organization
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  id: ID!

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  hasSponsorsListing: Boolean!

  """
  The Node ID of the Organization object
  """
  id: ID!

  """
  The item at the end of the edge.
  """
  node: Mannequin
}

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  """
  Creates an organization as part of an enterprise account. A personal access
  token used to create an organization is implicitly permitted to update the
  organization it created, if the organization is part of an enterprise that has
  SAML enabled or uses Enterprise Managed Users. If the organization is not part
  of such an enterprise, and instead has SAML enabled for it individually, the
  token will then require SAML authorization to continue working against that organization.
  """
  direction: OrderDirection!

  """
  The user affected by the action
  """
  LOGIN
}

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
input MarkDiscussionCommentAsAnswerInput {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Create a branch linked to an issue.
  """
  createLinkedBranch(
    """
    Parameters for CreateLinkedBranch
    """
    input: CreateLinkedBranchInput!
  ): CreateLinkedBranchPayload

  """
  Creates a GitHub Enterprise Importer (GEI) migration source.
  """
  totalCount: Int!
}

"""
Audit log entry for a org.enable_oauth_app_restrictions event.
"""
type OrgEnableOauthAppRestrictionsAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  A cursor for use in pagination.
  """
  createdAt: DateTime!

  """
  The Node ID of the MilestonedEvent object
  """
  SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY

  """
  Whether the given account is sponsoring this user/organization.
  """
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
}

"""
Audit log entry for a org.remove_member event.
"""
type OrgRemoveMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The organization's public profile location.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  A list of all mannequins for this organization.
  """
  mannequins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter mannequins by login.
    """
    login: String

    """
    Ordering options for mannequins returned from the connection.
    """
    orderBy: MannequinOrder = {field: CREATED_AT, direction: ASC}
  ): MannequinConnection!

  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveMemberAuditEntry object
  """
  id: ID!

  """
  Create a new project field.
  """
  createProjectV2Field(
    """
    Parameters for CreateProjectV2Field
    """
    input: CreateProjectV2FieldInput!
  ): CreateProjectV2FieldPayload

  """
  Create a new pull request
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposDisableAuditEntry object
  """
  id: ID!

"""
Autogenerated input type of LockLockable
"""
input LinkProjectV2ToTeamInput {
  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  clientMutationId: String

  """
  Create a repository ruleset
  """
  createRepositoryRuleset(
    """
    Parameters for CreateRepositoryRuleset
    """
    input: CreateRepositoryRulesetInput!
  ): CreateRepositoryRulesetPayload

  """
  Create a GitHub Sponsors profile to allow others to sponsor you or your organization.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgEnableOauthAppRestrictionsAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Create a new payment tier for your GitHub Sponsors profile.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to link to the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
enum OrgRemoveMemberAuditEntryMembershipType {
  """
  Organization owners have full access and can change several settings,
  including the names of repositories that belong to the Organization and Owners
  team membership. In addition, organization owners can delete the organization
  and all of its repositories.
  """
  ADMIN

  """
  A billing manager is a user who manages the billing settings for the Organization, such as updating payment information.
  """
  BILLING_MANAGER

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type PullRequestRevisionMarker {
  """
  Make many one-time sponsorships for different sponsorable users or
  organizations at once. Can only sponsor those who have a public GitHub
  Sponsors profile.
  """
  createSponsorships(
    """
    Parameters for CreateSponsorships
    """
    input: CreateSponsorshipsInput!
  ): CreateSponsorshipsPayload

  """
  Creates a new team discussion.
  """
  clientMutationId: String

  """
  The team the project is linked to
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
input MarkProjectV2AsTemplateInput {
  """
  Creates a new user list.
  """
  createUserList(
    """
    Parameters for CreateUserList
    """
    input: CreateUserListInput!
  ): CreateUserListPayload

  """
  Rejects a suggested topic for the repository.
  """
  clientMutationId: String

  """
  The ID of the Project to mark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Audit log entry for a org.enable_saml event.
"""
type OrgEnableSamlAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
type PullRequestTimelineConnection {
  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

"""
An item in a pull request timeline
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  Find a project by number.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.enable_two_factor_requirement event.
"""
type OrgEnableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  createdAt: DateTime!

  """
  The Node ID of the LockedEvent object
  """
  duplicate: IssueOrPullRequest

  """
  Unlink a branch from an issue.
  """
  deleteLinkedBranch(
    """
    Parameters for DeleteLinkedBranch
    """
    input: DeleteLinkedBranchInput!
  ): DeleteLinkedBranchPayload

  """
  Delete a package version.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The HTTP path listing organization's projects
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRestoreMemberAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The username of the actor.
  """
  login: String!

  """
  The HTML path to this resource.
  """
  resourcePath: URI!

  """
  Delete a repository ruleset
  """
  deleteRepositoryRuleset(
    """
    Parameters for DeleteRepositoryRuleset
    """
    input: DeleteRepositoryRulesetInput!
  ): DeleteRepositoryRulesetPayload

  """
  Deletes a team discussion.
  """
  updatedAt: DateTime!

  """
  The URL to this resource.
  """
  url: URI!
}

"""
Ordering options for an organization's enterprise owner connections.
"""
input OrgEnterpriseOwnerOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprise owners by.
  """
  field: OrgEnterpriseOwnerOrderField!
}

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  Order enterprise owners by login.
  """
  LOGIN
}

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Deletes a user list.
  """
  deleteUserList(
    """
    Parameters for DeleteUserList
    """
    input: DeleteUserListInput!
  ): DeleteUserListPayload

  """
  Deletes a verifiable domain.
  """
  edges: [MannequinEdge]

  """
  Remove a pull request from the merge queue.
  """
  dequeuePullRequest(
    """
    Parameters for DequeuePullRequest
    """
    input: DequeuePullRequestInput!
  ): DequeuePullRequestPayload

  """
  Disable auto merge on the given pull request
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgCreateAuditEntry object
  """
  id: ID!

  """
  Accepts a pending invitation for a user to become an administrator of an enterprise.
  """
  nodes: [Mannequin]

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  The email address of the organization invitation.
  """
  email: String

  """
  The Node ID of the OrgInviteMemberAuditEntry object
  """
  id: ID!

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  """
  The ordering direction.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  Adds enterprise members to an organization within the enterprise.
  """
  addEnterpriseOrganizationMember(
    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The organization invitation.
  """
  organizationInvitation: OrganizationInvitation

  """
  The name of the Organization.
  """
  id: ID!
}

"""
Properties by which mannequins can be ordered.
"""
enum MannequinOrderField {
  """
  Order mannequins why when they were created.
  """
  CREATED_AT

  """
  Links a project to a repository.
  """
  linkProjectV2ToRepository(
    """
    Parameters for LinkProjectV2ToRepository
    """
    input: LinkProjectV2ToRepositoryInput!
  ): LinkProjectV2ToRepositoryPayload

  """
  Links a project to a team.
  """
  linkProjectV2ToTeam(
    """
    Parameters for LinkProjectV2ToTeam
    """
    input: LinkProjectV2ToTeamInput!
  ): LinkProjectV2ToTeamPayload

  """
  Creates a repository link for a project.
  """
  LOGIN
}

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
input MarkDiscussionCommentAsAnswerInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Creates a new draft issue and add it to a Project.
  """
  addProjectV2DraftIssue(
    """
    Parameters for AddProjectV2DraftIssue
    """
    input: AddProjectV2DraftIssueInput!
  ): AddProjectV2DraftIssuePayload

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  """
  The Node ID of the MarketplaceListing object
  """
  id: ID!

  """
  Mark a project as a template. Note that only projects which are owned by an Organization can be marked as a template.
  """
  markProjectV2AsTemplate(
    """
    Parameters for MarkProjectV2AsTemplate
    """
    input: MarkProjectV2AsTemplateInput!
  ): MarkProjectV2AsTemplatePayload

  """
  Marks a pull request ready for review.
  """
  pageInfo: PageInfo!

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

"""
The possible default commit messages for merges.
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  The SHA after the push
  """
  nextSha: GitObjectID

  """
  Default to a blank commit message.
  """
  BLANK

  """
  Adds a reply to an existing Pull Request Review Thread.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgDisableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

  """
  Adds a reaction to a subject.
  """
  createdAt: PreciseDateTime!

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  The Node ID of the PushAllowance object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union PushAllowanceActor = App | Team | User

"""
The possible default commit titles for merges.
"""
enum MergeCommitTitle {
  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The Node ID of the OrgInviteToBusinessAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUnblockUserAuditEntry object
  """
  id: ID!

  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

"""
Autogenerated input type of MergePullRequest
"""
type LinkedBranchEdge {
  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The item at the end of the edge.
  """
  node: LinkedBranch
}

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
input MarkProjectV2AsTemplateInput {
  """
  Archives a ProjectV2Item
  """
  archiveProjectV2Item(
    """
    Parameters for ArchiveProjectV2Item
    """
    input: ArchiveProjectV2ItemInput!
  ): ArchiveProjectV2ItemPayload

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Parameters for RemoveEnterpriseMember
    """
    input: RemoveEnterpriseMemberInput!
  ): RemoveEnterpriseMemberPayload

  """
  Removes an organization from the enterprise
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
type OrgOauthAppAccessApprovedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member.
  """
  user: User
}

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  """
  Close a discussion.
  """
  closeDiscussion(
    """
    Parameters for CloseDiscussion
    """
    input: CloseDiscussionInput!
  ): CloseDiscussionPayload

  """
  Reopen a discussion.
  """
  digestMethodUrl: URI

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The HTTP URL for the OAuth application
  """
  jump: Boolean!

  """
  Make many one-time sponsorships for different sponsorable users or
  organizations at once. Can only sponsor those who have a public GitHub
  Sponsors profile.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Does this pull request need to be deployed on its own
  """
  solo: Boolean!

    """
    Ordering options for activity returned from the connection.
    """
    dryRun: Boolean = false
  ): RateLimit

  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  relay: Query!

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

"""
An edge in a connection.
"""
type MergeQueueEntryEdge {
  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The item at the end of the edge.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgOauthAppAccessBlockedAuditEntry object
  """
  id: ID!

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  The name of the OAuth application.
  """
  AWAITING_CHECKS

  """
  The HTTP path for the OAuth application
  """
  deleteLinkedBranch(
    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    input: DeleteLinkedBranchInput!
  ): DeleteLinkedBranchPayload

  """
  The HTTP URL for the OAuth application
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  QUEUED

  """
  The entry is currently unmergeable.
  """
  UNMERGEABLE
}

"""
The possible merging strategies for a merge queue.
"""
interface Reactable {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Reactable object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  A list of reactions grouped by content left on the subject.
  """
  Delete a project.
  """
  deleteProjectV2(
    """
    Parameters for DeleteProjectV2
    """
    input: DeleteProjectV2Input!
  ): DeleteProjectV2Payload

  """
  Delete a project field.
  """
  deleteProjectV2Field(
    """
    Parameters for DeleteProjectV2Field
    """
    input: DeleteProjectV2FieldInput!
  ): DeleteProjectV2FieldPayload

  """
  Failing Entires are allowed to merge if they are with a passing entry.
  """
  HEADGREEN
}

"""
Detailed status information about a pull request merge.
"""
type ExternalIdentityAttribute {
  """
  The user affected by the action
  """
  createdAt: DateTime!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  databaseId: Int

  """
  The Node ID of the Reaction object
  """
  id: ID!

  """
  Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
  """
  updateOrganizationWebCommitSignoffSetting(
    """
    Parameters for UpdateOrganizationWebCommitSignoffSetting
    """
    input: UpdateOrganizationWebCommitSignoffSettingInput!
  ): UpdateOrganizationWebCommitSignoffSettingPayload

  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  updatePatreonSponsorability(
    """
    Parameters for UpdatePatreonSponsorability
    """
    input: UpdatePatreonSponsorabilityInput!
  ): UpdatePatreonSponsorabilityPayload

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  Updates an existing project.
  """
  deleteRepositoryRuleset(
    """
    Parameters for DeleteRepositoryRuleset
    """
    input: DeleteRepositoryRulesetInput!
  ): DeleteRepositoryRulesetPayload

  """
  Deletes a team discussion.
  """
  id: ID!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  editor: Actor

  """
  Updates an existing project.
  """
  updateProjectV2(
    """
    Parameters for UpdateProjectV2
    """
    input: UpdateProjectV2Input!
  ): UpdateProjectV2Payload

  """
  Update the collaborators on a team or a project
  """
  updateProjectV2Collaborators(
    """
    Parameters for UpdateProjectV2Collaborators
    """
    input: UpdateProjectV2CollaboratorsInput!
  ): UpdateProjectV2CollaboratorsPayload

  """
  The Node ID of the IssueComment object
  """
  color: String

  """
  The Node ID of the Language object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessDeniedAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  websiteUrl: URI
}

"""
An audit entry in an organization audit log.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
type OrgOauthAppAccessRequestedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgOauthAppAccessRequestedAuditEntry object
  """
  createdAt: DateTime!

  """
  The Node ID of the ReadyForReviewEvent object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
type OrganizationIdentityProvider implements Node {
  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  branchProtectionRule: BranchProtectionRule

  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    The head ref to compare against.
    """
    headRef: String!
  ): Comparison

  """
  The Node ID of the Ref object
  """
  id: ID!

"""
Audit log entry for a org.oauth_app_access_unblocked event.
"""
type OrgOauthAppAccessUnblockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  A list of rules from active Repository and Organization rulesets that apply to this ref.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repository rules.
    """
    orderBy: RepositoryRuleOrder = {field: UPDATED_AT, direction: DESC}
  ): RepositoryRuleConnection

  """
  The object the ref points to. Returns null when object does not exist.
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  id: ID!

  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessUnblockedAuditEntry object
  """
  createdAt: PreciseDateTime!

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Ways in which lists of git refs can be ordered upon return.
"""
input RefOrder {
  """
  The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

"""
Branch protection rules that are enforced on the viewer.
"""
type RefUpdateRule {
  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
type Organization implements Actor & AnnouncementBanner & MemberStatusable & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  The text of the announcement
  """
  announcement: String

  """
  The expiration date of the announcement, if any
  """
  announcementExpiresAt: DateTime

  """
  Whether the announcement can be dismissed by the user
  """
  announcementUserDismissible: Boolean

  """
  The action name
  """
  action: String!

  """
  Identifies the date and time when the organization was archived.
  """
  archivedAt: DateTime

  """
  Audit log entries of the organization
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  createdAt: DateTime!

  """
  The Node ID of the ReferencedEvent object
  """
  id: ID!

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveTopicAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgRemoveBillingManagerAuditEntry object
  """
  id: ID!

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgEnableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

  """
  Add a pull request to the merge queue.
  """
  enqueuePullRequest(
    """
    Parameters for EnqueuePullRequest
    """
    input: EnqueuePullRequestInput!
  ): EnqueuePullRequestPayload

  """
  Follow an organization.
  """
  PRIVATE
}

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  descriptionHTML: HTML

  """
  The Node ID of the Release object
  """
  id: ID!

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
union OrganizationOrUser = Organization | User

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  A list of users that can be assigned to issues in this repository.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  hasSponsorsListing: Boolean!

  """
  The Node ID of the Organization object
  """
  id: ID!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerUserAccount
}

"""
An email belonging to a user account on an Enterprise Server installation.
"""
type EnterpriseServerUserAccountEmail implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Links a project to a repository.
  """
  linkProjectV2ToRepository(
    """
    Parameters for LinkProjectV2ToRepository
    """
    input: LinkProjectV2ToRepositoryInput!
  ): LinkProjectV2ToRepositoryPayload

  """
  Update a repository ruleset
  """
  updateRepositoryRuleset(
    """
    Filters users with query on user name and login.
    """
    input: UpdateRepositoryRulesetInput!
  ): UpdateRepositoryRulesetPayload

"""
Audit log entry for a org.enable_saml event.
"""
type OrgEnableSamlAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  Whether the given account is sponsoring this user/organization.
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The login of one specific collaborator.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  The total number of organizations this user is in
  """
  totalOrganizationCount: Int!
}

"""
Information for an uploaded package.
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

  """
  Identifies the date and time when the object was created.
  """
  latestVersion: PackageVersion

  """
  Identifies the name of the package.
  """
  name: String!

  """
  Identifies the type of the package.
  """
  packageType: PackageType!

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The organization's public profile location.
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  A list of all mannequins for this organization.
  """
  mannequins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A name to filter the assets by.
    """
    login: String

    """
    Ordering options for mannequins returned from the connection.
    """
    orderBy: MannequinOrder = {field: CREATED_AT, direction: ASC}
  ): MannequinConnection!

  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PackageEdge {
  """
  A discussion category by slug.
  """
  discussionCategory(
    """
    The slug of the discussion category to be returned.
    """
    slug: String!
  ): DiscussionCategory

  """
  A list of discussions that have been opened in the repository.
  """
  discussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Only show answered or unanswered discussions
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The item at the end of the edge.
  """
  node: Package
}

"""
A file in a package version.
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: UPDATED_AT, direction: DESC}

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  The Node ID of the ReleaseAsset object
  """
  id: ID!

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the environments
    """
    orderBy: Environments = {field: NAME, direction: ASC}
  ): EnvironmentConnection!

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.enable_two_factor_requirement event.
"""
type OrgEnableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Organization owners have full access and can change several settings,
  including the names of repositories that belong to the Organization and Owners
  team membership. In addition, organization owners can delete the organization
  and all of its repositories.
  """
  createdAt: DateTime!

  """
  The Node ID of the IpAllowListEntry object
  """
  id: ID!

  """
  The email address.
  """
  email: String!

  """
  Mark a project as a template. Note that only projects which are owned by an Organization can be marked as a template.
  """
  markProjectV2AsTemplate(
    """
    Parameters for MarkProjectV2AsTemplate
    """
    input: MarkProjectV2AsTemplateInput!
  ): MarkProjectV2AsTemplatePayload

  """
  Marks a pull request ready for review.
  """
  createdAt: DateTime!

  """
  Updates an existing user list.
  """
  updateUserList(
    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    input: UpdateUserListInput!
  ): UpdateUserListPayload

  """
  Updates which of the viewer's lists an item belongs to
  """
  updateUserListsForItem(
    """
    Parameters for UpdateUserListsForItem
    """
    input: UpdateUserListsForItemInput!
  ): UpdateUserListsForItemPayload

  """
  Verify that a verifiable domain has the expected DNS record.
  """
  hidden: Boolean!

"""
Represents a GitHub Enterprise Importer (GEI) migration.
"""
interface Migration {
  """
  The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object
  """
  id: ID!

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

"""
An OIDC identity provider configured to provision identities for an enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with read:enterprise or admin:enterprise scope.
"""
type OIDCProvider implements Node {
  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  CREATED_AT
}

"""
Represents an owner of a package.
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Whether vulnerability alerts are enabled for the repository.
  """
  hasVulnerabilityAlertsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  publishSponsorsTier(
    """
    Parameters for PublishSponsorsTier
    """
    input: PublishSponsorsTierInput!
  ): PublishSponsorsTierPayload

  """
  Regenerates the identity provider recovery codes for an enterprise
  """
  homepageUrl: URI

  """
  The Node ID of the Repository object
  """
  id: ID!

  """
  The migration source.
  """
  howItWorksHTML: HTML!

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OIDCProvider object
  """
  id: ID!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  updatedAt: DateTime!

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveOutsideCollaboratorAuditEntry object
  """
  id: ID!

"""
Ordering options for an organization's enterprise owner connections.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

  """
  The field to order enterprise owners by.
  """
  field: OrgEnterpriseOwnerOrderField!
}

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  Order enterprise owners by login.
  """
  LOGIN
}

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The name of the OAuth application.
  """
  removeEnterpriseMember(
    """
    Parameters for RemoveEnterpriseMember
    """
    input: RemoveEnterpriseMemberInput!
  ): RemoveEnterpriseMemberPayload

  """
  The HTTP path for the OAuth application
  """
  id: ID!

  """
  The HTTP URL for the OAuth application
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

  """
  The migration source type.
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
type MannequinEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

"""
Represents a member feature request notification
"""
type MemberFeatureRequestNotification implements Node {
  """
  A GitHub Migration API source.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering of the returned package files.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise from which the user should be removed.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the user to remove from the enterprise.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  The user that was removed from the enterprise.
  """
  user: User

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
input MannequinOrder {
  """
  The email address of the organization invitation.
  """
  email: String

  """
  The Node ID of the OrgInviteMemberAuditEntry object
  """
  id: ID!

"""
Properties by which mannequins can be ordered.
"""
enum MannequinOrderField {
  """
  The migration is in progress.
  """
  CREATED_AT

  """
  The application URL of the OAuth application.
  """
  LOGIN
}

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  The organization invitation.
  """
  organizationInvitation: OrganizationInvitation

  """
  The name of the Organization.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  Retire a published payment tier from your GitHub Sponsors profile so it cannot be used to start new sponsorships.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OauthApplicationCreateAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  revertPullRequest(
    """
    Parameters for RevertPullRequest
    """
    input: RevertPullRequestInput!
  ): RevertPullRequestPayload

  """
  The HTTP path for the OAuth application
  """
  nodes: [EnterpriseServerInstallation]

  """
  The HTTP URL for the OAuth application
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  How the default commit message will be generated when merging a pull request.
  """
  mergeCommitMessage: MergeCommitMessage!

  """
  How the default commit title will be generated when merging a pull request.
  """
  mergeCommitTitle: MergeCommitTitle!

  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    branch: String
  ): MergeQueue

  """
  Returns a single milestone from the current repository by number.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Autogenerated input type of LinkProjectV2ToRepository
"""
input LinkProjectV2ToRepositoryInput {
  """
  Starts a GitHub Enterprise Importer organization migration.
  """
  startOrganizationMigration(
    """
    Parameters for StartOrganizationMigration
    """
    input: StartOrganizationMigrationInput!
  ): StartOrganizationMigrationPayload

  """
  The rate limit of the OAuth application.
  """
  clientMutationId: String

  """
  The state of the OAuth application.
  """
  enterpriseUrl: URI

  """
  Transfer an organization from one enterprise to another enterprise.
  """
  transferEnterpriseOrganization(
    """
    Parameters for TransferEnterpriseOrganization
    """
    input: TransferEnterpriseOrganizationInput!
  ): TransferEnterpriseOrganizationPayload

  """
  Transfer an issue to a different repository
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRestoreMemberAuditEntry object
  """
  id: ID!

  """
  Unarchives a ProjectV2Item
  """
  unarchiveProjectV2Item(
    """
    Parameters for UnarchiveProjectV2Item
    """
    input: UnarchiveProjectV2ItemInput!
  ): UnarchiveProjectV2ItemPayload

  """
  Unarchives a repository.
  """
  createdAt: PreciseDateTime!

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

"""
The state of an OAuth application when it was created.
"""
type LinkProjectV2ToRepositoryPayload {
  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The Node ID of the OrgInviteToBusinessAuditEntry object
  """
  id: ID!

  """
  The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  unlinkProjectV2FromTeam(
    """
    Parameters for UnlinkProjectV2FromTeam
    """
    input: UnlinkProjectV2FromTeamInput!
  ): UnlinkProjectV2FromTeamPayload

  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  repository: Repository
}

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
input MarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  unlockLockable(
    """
    Parameters for UnlockLockable
    """
    input: UnlockLockableInput!
  ): UnlockLockablePayload

  """
  Unmark a discussion comment as the chosen answer for discussions in an answerable category.
  """
  unmarkDiscussionCommentAsAnswer(
    """
    Parameters for UnmarkDiscussionCommentAsAnswer
    """
    input: UnmarkDiscussionCommentAsAnswerInput!
  ): UnmarkDiscussionCommentAsAnswerPayload

  """
  Unmark a pull request file as viewed
  """
  unmarkFileAsViewed(
    """
    Parameters for UnmarkFileAsViewed
    """
    input: UnmarkFileAsViewedInput!
  ): UnmarkFileAsViewedPayload

  """
  Unmark an issue as a duplicate of another issue.
  """
  unmarkIssueAsDuplicate(
    """
    Parameters for UnmarkIssueAsDuplicate
    """
    input: UnmarkIssueAsDuplicateInput!
  ): UnmarkIssueAsDuplicatePayload

  """
  Unmark a project as a template.
  """
  unmarkProjectV2AsTemplate(
    """
    Parameters for UnmarkProjectV2AsTemplate
    """
    input: UnmarkProjectV2AsTemplateInput!
  ): UnmarkProjectV2AsTemplatePayload

  """
  Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
  """
  unminimizeComment(
    """
    Parameters for UnminimizeComment
    """
    input: UnminimizeCommentInput!
  ): UnminimizeCommentPayload

  """
  Unpin a pinned issue from a repository
  """
  unpinIssue(
    """
    Parameters for UnpinIssue
    """
    input: UnpinIssueInput!
  ): UnpinIssuePayload

  """
  The ID of the Project to mark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

  """
  Finds and returns the Project according to the provided Project number.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The reason this pull request was removed from the queue.
  """
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
type OrgOauthAppAccessApprovedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Unsubscribes from notifications
  """
  unsubscribeFromNotifications(
    """
    Parameters for UnsubscribeFromNotifications
    """
    input: UnsubscribeFromNotificationsInput!
  ): UnsubscribeFromNotificationsPayload

  """
  Update a branch protection rule
  """
  clientMutationId: String

  """
  The project.
  """
  databaseId: Int

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  id: ID!

  """
  The HTTP path listing the repository's projects
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  id: ID!

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  The HTTP URL for the OAuth application
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the MarkedAsDuplicateEvent object
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  The Node ID of the LinkedBranch object
  """
  id: ID!

  """
  Sets whether or not an organization owner can make purchases.
  """
  howItWorks: String

  """
  The Node ID of the MarketplaceCategory object
  """
  url: URI!

  """
  Indicates if the object can be closed by the viewer.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!
}

"""
Audit log entry for a org.oauth_app_access_blocked event.
"""
type OrgOauthAppAccessBlockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  A list of edges.
  """
  enterpriseUrl: URI

  """
  Identifies the date and time when the repository was last pushed to.
  """
  id: ID!

  """
  A list of nodes.
  """
  nodes: [LinkedBranch]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: LinkedBranch
}

"""
Represents a member feature request notification
"""
type MemberFeatureRequestNotification implements Node {
  """
  Represents member feature request body containing organization name and the number of feature requests
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgUnblockUserAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  id: ID!

  """
  The HTTP path for the OAuth application
  """
  id: ID!

  """
  The HTTP URL for the OAuth application
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Entities that have members who can set status messages.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  The Enterprise Server installation for which this upload was generated.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

"""
An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
"""
type Issue implements Assignable & Closable & Comment & Deletable & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & SubscribableThread & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
  """
  updateOrganizationWebCommitSignoffSetting(
    """
    Parameters for UpdateOrganizationWebCommitSignoffSetting
    """
    input: UpdateOrganizationWebCommitSignoffSettingInput!
  ): UpdateOrganizationWebCommitSignoffSettingPayload

  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  updatePatreonSponsorability(
    """
    Parameters for UpdatePatreonSponsorability
    """
    input: UpdatePatreonSponsorabilityInput!
  ): UpdatePatreonSponsorabilityPayload

  """
  Updates an existing project.
  """
  id: ID!

  """
  The suggested assignees.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Updates an existing project.
  """
  updateProjectV2(
    """
    Parameters for UpdateProjectV2
    """
    input: UpdateProjectV2Input!
  ): UpdateProjectV2Payload

  """
  Update the collaborators on a team or a project
  """
  updateProjectV2Collaborators(
    """
    Parameters for UpdateProjectV2Collaborators
    """
    input: UpdateProjectV2CollaboratorsInput!
  ): UpdateProjectV2CollaboratorsPayload

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The suggested issue body.
  """
  createdAt: DateTime!

  """
  The Node ID of the LockedEvent object
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

  """
  The Node ID of the MembersCanDeleteReposEnableAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateDefaultRepositoryPermissionAuditEntry object
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddMemberAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
type OrgOauthAppAccessRequestedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The Node ID of the OrgUpdateMemberAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_unblocked event.
"""
type OrgOauthAppAccessUnblockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoArchivedAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgOauthAppAccessUnblockedAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryCreationPermissionAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.remove_billing_manager event.
"""
type OrgRemoveBillingManagerAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgRemoveBillingManagerAuditEntry object
  """
  id: ID!

  """
  The template filename.
  """
  filename: String!

  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Update a repository ruleset
  """
  updateRepositoryRuleset(
    """
    Parameters for UpdateRepositoryRuleset
    """
    input: UpdateRepositoryRulesetInput!
  ): UpdateRepositoryRulesetPayload

  """
  Sets whether contributors are required to sign off on web-based commits for a repository.
  """
  updateRepositoryWebCommitSignoffSetting(
    """
    Parameters for UpdateRepositoryWebCommitSignoffSetting
    """
    input: UpdateRepositoryWebCommitSignoffSettingInput!
  ): UpdateRepositoryWebCommitSignoffSettingPayload

  """
  Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
  """
  updateSponsorshipPreferences(
    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  filename: String!

  """
  The suggested issue labels
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgBlockUserAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object
  """
  id: ID!

  """
  The Node ID of the MarketplaceListing object
  """
  enterpriseUrl: URI

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  id: ID!

  """
  The suggested assignees.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

  """
  Updates an existing user list.
  """
  updateUserList(
    """
    Parameters for UpdateUserList
    """
    input: UpdateUserListInput!
  ): UpdateUserListPayload

  """
  Updates which of the viewer's lists an item belongs to
  """
  updateUserListsForItem(
    """
    Parameters for UpdateUserListsForItem
    """
    input: UpdateUserListsForItemInput!
  ): UpdateUserListsForItemPayload

  """
  Verify that a verifiable domain has the expected DNS record.
  """
  databaseId: Int

  """
  The Node ID of the MentionedEvent object
  """
  id: ID!
}

  """
  The suggested issue body.
  """
  email: String

  """
  The Node ID of the Mannequin object
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

"""
An OIDC identity provider configured to provision identities for an enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with read:enterprise or admin:enterprise scope.
"""
type Organization implements Actor & AnnouncementBanner & MemberStatusable & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  The text of the announcement
  """
  announcement: String

  """
  The expiration date of the announcement, if any
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Whether the announcement can be dismissed by the user
  """
  announcementUserDismissible: Boolean

  """
  The template filename.
  """
  filename: String!

  """
  Identifies the date and time when the organization was archived.
  """
  archivedAt: DateTime

  """
  Audit log entries of the organization
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveMemberAuditEntry object
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OIDCProvider object
  """
  id: ID!

  """
  The template name.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  A list of edges.
  """
  edges: [MannequinEdge]

"""
The possible default commit messages for merges.
"""
enum MergeCommitMessage {
  """
  The name of the OAuth application.
  """
  BLANK

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The HTTP URL for the OAuth application
  """
  PR_TITLE
}

"""
The possible default commit titles for merges.
"""
enum MergeCommitTitle {
  """
  Organization owners have full access and can change several settings,
  including the names of repositories that belong to the Organization and Owners
  team membership. In addition, organization owners can delete the organization
  and all of its repositories.
  """
  MERGE_MESSAGE

  """
  Default to the pull request's title.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

"""
Autogenerated input type of MergePullRequest
"""
input MergePullRequestInput {
  """
  A list of nodes.
  """
  nodes: [Mannequin]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

  """
  The Node ID of the MovedColumnsInProjectEvent object
  """
  id: ID!

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The application URL of the OAuth application.
  """
  node: Mannequin
}

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  """
  The callback URL of the OAuth application.
  """
  direction: OrderDirection!

  """
  The field to order mannequins by.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OauthApplicationCreateAuditEntry object
  """
  id: ID!

"""
Properties by which mannequins can be ordered.
"""
enum MannequinOrderField {
  """
  The name of the OAuth application.
  """
  CREATED_AT

  """
  The HTTP path for the OAuth application
  """
  abortRepositoryMigration(
    """
    Parameters for AbortRepositoryMigration
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

  """
  The HTTP URL for the OAuth application
  """
  LOGIN
}

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  """
  The configuration for this merge queue
  """
  hasSponsorsListing: Boolean!

  """
  The Node ID of the Organization object
  """
  id: ID!

  """
  The entries in the queue
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveOutsideCollaboratorAuditEntry object
  """
  id: ID!

  """
  The types of membership the outside collaborator has with the organization.
  """
  membershipTypes: [OrgRemoveOutsideCollaboratorAuditEntryMembershipType!]

  """
  The Node ID of the OrgConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Adds enterprise members to an organization within the enterprise.
  """
  addEnterpriseOrganizationMember(
    """
    Parameters for AddEnterpriseOrganizationMember
    """
    input: AddEnterpriseOrganizationMemberInput!
  ): AddEnterpriseOrganizationMemberPayload

  """
  Adds a support entitlement to an enterprise member.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  The estimated time in seconds until a newly added entry would be merged
  """
  nextEntryEstimatedTimeToMerge: Int

  """
  Whether the given account is sponsoring this user/organization.
  """
  repository: Repository

  """
  The state of the OAuth application.
  """
  resourcePath: URI!

  """
  The HTTP URL for this merge queue
  """
  addProjectV2DraftIssue(
    """
    Parameters for AddProjectV2DraftIssue
    """
    input: AddProjectV2DraftIssueInput!
  ): AddProjectV2DraftIssuePayload

  """
  The maximum number of entries to merge at once.
  """
  maximumEntriesToMerge: Int

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

  """
  The organization's public profile location.
  """
  mergeMethod: PullRequestMergeMethod

  """
  The strategy to use when merging entries.
  """
  mergingStrategy: MergeQueueMergingStrategy

"""
The state of an OAuth application when it was created.
"""
enum OauthApplicationCreateAuditEntryState {
  """
  A list of all mannequins for this organization.
  """
  mannequins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter mannequins by login.
    """
    login: String

    """
    Ordering options for mannequins returned from the connection.
    """
    orderBy: MannequinOrder = {field: CREATED_AT, direction: ASC}
  ): MannequinConnection!

  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  minimumEntriesToMerge: Int

  """
  The OAuth application was in the process of being deleted.
  """
  addPullRequestReviewThreadReply(
    """
    Parameters for AddPullRequestReviewThreadReply
    """
    input: AddPullRequestReviewThreadReplyInput!
  ): AddPullRequestReviewThreadReplyPayload

  """
  The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Entries in a MergeQueue
"""
type MergeQueueEntry implements Node {
  """
  The base commit for this entry
  """
  baseCommit: Commit

  """
  The date and time this entry was added to the merge queue
  """
  enqueuedAt: DateTime!

  """
  The actor that enqueued this entry
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  The estimated time in seconds until this entry will be merged
  """
  estimatedTimeToMerge: Int

  """
  The head commit for this entry
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgCreateAuditEntry object
  """
  id: ID!

  """
  Archives a ProjectV2Item
  """
  archiveProjectV2Item(
    """
    Parameters for ArchiveProjectV2Item
    """
    input: ArchiveProjectV2ItemInput!
  ): ArchiveProjectV2ItemPayload

  """
  Marks a repository as archived.
  """
  id: ID!

  """
  Whether this pull request should jump the queue
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRestoreMemberAuditEntry object
  """
  id: ID!

  """
  The merge queue that this entry belongs to
  """
  mergeQueue: MergeQueue

  """
  The position of this entry in the queue
  """
  position: Int!

  """
  The pull request that will be added to a merge group
  """
  pullRequest: PullRequest

  """
  This mutation clears the value of a field for an item in a Project. Currently
  only text, number, date, assignees, labels, single-select, iteration and
  milestone fields are supported.
  """
  clearProjectV2ItemFieldValue(
    """
    Parameters for ClearProjectV2ItemFieldValue
    """
    input: ClearProjectV2ItemFieldValueInput!
  ): ClearProjectV2ItemFieldValuePayload

  """
  Creates a new project by cloning configuration from an existing project.
  """
  solo: Boolean!

  """
  The state of this entry in the queue
  """
  state: MergeQueueEntryState!
}

"""
The connection type for MergeQueueEntry.
"""
type MergeQueueEntryConnection {
  """
  Close a discussion.
  """
  closeDiscussion(
    """
    Parameters for CloseDiscussion
    """
    input: CloseDiscussionInput!
  ): CloseDiscussionPayload

  """
  Close an issue.
  """
  edges: [MergeQueueEntryEdge]

  """
  A list of nodes.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgAddBillingManagerAuditEntry object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MergeQueueEntryEdge {
  """
  Copy a project.
  """
  copyProjectV2(
    """
    Parameters for CopyProjectV2
    """
    input: CopyProjectV2Input!
  ): CopyProjectV2Payload

  """
  Invites a user to claim reattributable data
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Create a new branch protection rule
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MergeQueueEntry
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
The possible merging strategies for a merge queue.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  Creates an organization as part of an enterprise account. A personal access
  token used to create an organization is implicitly permitted to update the
  organization it created, if the organization is part of an enterprise that has
  SAML enabled or uses Enterprise Managed Users. If the organization is not part
  of such an enterprise, and instead has SAML enabled for it individually, the
  token will then require SAML authorization to continue working against that organization.
  """
  closed: Boolean!

  """
  Failing Entires are allowed to merge if they are with a passing entry.
  """
  HEADGREEN
}

"""
Detailed status information about a pull request merge.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposDisableAuditEntry object
  """
  createdAt: DateTime!

  """
  Find a project by number.
  """
  creator: Actor

  """
  Creates a GitHub Enterprise Importer (GEI) migration source.
  """
  databaseId: Int

  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  cursor: String!

  """
  Create a new project field.
  """
  createProjectV2Field(
    """
    Parameters for CreateProjectV2Field
    """
    input: CreateProjectV2FieldInput!
  ): CreateProjectV2FieldPayload

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
input EnterpriseServerInstallationOrder {
  """
  The HTTP path listing organization's projects
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  A GitHub Migration API source.
  """
  GITHUB_ARCHIVE
}

"""
The GitHub Enterprise Importer (GEI) migration state.
"""
enum MigrationState {
  """
  The migration has failed.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  Add a pull request to the merge queue.
  """
  enqueuePullRequest(
    """
    Parameters for EnqueuePullRequest
    """
    input: EnqueuePullRequestInput!
  ): EnqueuePullRequestPayload

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

"""
Represents a member feature request notification
"""
type MemberFeatureRequestNotification implements Node {
  """
  The SAML provider's signature algorithm URL.
  """
  number: Int!

  """
  The SAML provider's single sign-on URL.
  """
  owner: ProjectV2Owner!

  """
  The user affected by the action
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

  """
  The migration needs to have its credentials validated.
  """
  id: ID!

  """
  The migration has been queued.
  """
  title: String!

  """
  The migration has succeeded.
  """
  updatedAt: DateTime!
}

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type OrgDisableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  BLANK

  """
  Links a project to a repository.
  """
  linkProjectV2ToRepository(
    """
    Parameters for LinkProjectV2ToRepository
    """
    input: LinkProjectV2ToRepositoryInput!
  ): LinkProjectV2ToRepositoryPayload

  """
  Links a project to a team.
  """
  linkProjectV2ToTeam(
    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

  """
  Creates a repository link for a project.
  """
  resourcePath: URI!

  """
  Default to the pull request's title.
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

"""
The possible default commit titles for merges.
"""
enum MergeCommitTitle {
  """
  Default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  Default to the pull request's title.
  """
  updatedAt: DateTime!

  """
  The Node ID of the OrgUpdateDefaultRepositoryPermissionAuditEntry object
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  The corresponding operation type for the action
  """
  id: ID!

  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  The listing's technical description rendered to HTML.
  """
  edges: [ProjectV2Edge]

  """
  The user affected by the action
  """
  nodes: [ProjectV2]

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  The configuration for this merge queue
  """
  configuration: MergeQueueConfiguration

  """
  The entries in the queue
  """
  node: ProjectV2
}

"""
A field inside a project.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  Removes a user from all organizations within the enterprise
  """
  createdAt: DateTime!

"""
Audit log entry for a org.enable_oauth_app_restrictions event.
"""
type OrgEnableOauthAppRestrictionsAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Removes an organization from the enterprise
  """
  dataType: ProjectV2FieldType!

  """
  The Node ID of the MergeQueue object
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  The estimated time in seconds until a newly added entry would be merged
  """
  name: String!

  """
  Returns a single ruleset from the current organization by ID.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Reopen a discussion.
  """
  dataType: ProjectV2FieldType!

  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  List of users and organizations this entity is sponsoring.
  """
  name: String!

  """
  Indicates if the object can be closed by the viewer.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  List of sponsors for this user or organization.
  """
  edges: [ProjectV2FieldEdge]

  """
  Retire a published payment tier from your GitHub Sponsors profile so it cannot be used to start new sponsorships.
  """
  nodes: [ProjectV2Field]

  """
  Create a pull request that reverts the changes from a merged pull request.
  """
  revertPullRequest(
    """
    Parameters for RevertPullRequest
    """
    input: RevertPullRequestInput!
  ): RevertPullRequestPayload

  """
  Revoke the migrator role to a user for all organizations under an enterprise account.
  """
  maximumEntriesToMerge: Int

"""
An edge in a connection.
"""
type ProjectV2FieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  Events involving this sponsorable, such as new sponsorships.
  """
  ASSIGNEES

  """
  Date
  """
  DATE

  """
  Iteration
  """
  ITERATION

  """
  Labels
  """
  LABELS

  """
  Linked Pull Requests
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

  """
  Milestone
  """
  MILESTONE

  """
  Number
  """
  NUMBER

  """
  Repository
  """
  REPOSITORY

  """
  Reviewers
  """
  REVIEWERS

  """
  Single Select
  """
  SINGLE_SELECT

  """
  The GitHub Sponsors listing for this user or organization.
  """
  TEXT

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  content: ProjectV2ItemContent

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  createdAt: DateTime!

  """
  The sponsorships where this user or organization is the funder.
  """
  creator: Actor

  """
  Find an organization's team by its slug.
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  project: ProjectV2!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  type: ProjectV2ItemType!

  """
  The organization's Twitter username.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  edges: [ProjectV2ItemEdge]

  """
  The SAML provider's signature algorithm URL.
  """
  nodes: [ProjectV2Item]

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  user: User

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Starts a GitHub Enterprise Importer organization migration.
  """
  createdAt: DateTime!

  """
  Starts a GitHub Enterprise Importer (GEI) repository migration.
  """
  creator: Actor

  """
  The actor that enqueued this entry
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  id: ID!

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveTopicAuditEntry object
  """
  id: ID!

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
enum MergeQueueEntryState {
  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type Organization implements Actor & AnnouncementBanner & MemberStatusable & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  A list of users that can be assigned to issues in this repository.
  """
  assignableUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filters users with query on user name and login.
    """
    query: String
  ): UserConnection!

  """
  The expiration date of the announcement, if any
  """
  announcementExpiresAt: DateTime

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

    """
    The login of one specific collaborator.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    query: String
  ): RepositoryCollaboratorConnection

"""
The possible organization invitation types.
"""
enum OrganizationInvitationType {
  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Parameters for ClearProjectV2ItemFieldValue
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
enum EnvironmentOrderField {
  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  The user affected by the action
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  The migration is in progress.
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  The migration has not started.
  """
  direction: OrderDirection!

  """
  The migration needs to have its credentials validated.
  """
  field: EnvironmentOrderField!
}

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
type ProjectV2ItemFieldValueEdge {
  """
  The migration has been queued.
  """
  color: String!

  """
  A discussion category by slug.
  """
  discussionCategory(
    """
    The slug of the discussion category to be returned.
    """
    slug: String!
  ): DiscussionCategory

  """
  A list of discussions that have been opened in the repository.
  """
  discussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Only show answered or unanswered discussions
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Only include discussions that belong to the category with this ID.
    """
    categoryId: ID = null

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: UPDATED_AT, direction: DESC}

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  environments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the environments
    """
    orderBy: Environments = {field: NAME, direction: ASC}
  ): EnvironmentConnection!

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  forks(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Whether vulnerability alerts are enabled for the repository.
  """
  hasVulnerabilityAlertsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  homepageUrl: URI

  """
  The Node ID of the Repository object
  """
  id: ID!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  Find the latest version for the package.
  """
  latestVersion: PackageVersion

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the type of the package.
  """
  packageType: PackageType!

  """
  The repository this package belongs to.
  """
  repository: Repository

    """
    Filter mannequins by login.
    """
    login: String

    """
    Ordering options for mannequins returned from the connection.
    """
    orderBy: MannequinOrder = {field: CREATED_AT, direction: ASC}
  ): MannequinConnection!

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  How the default commit message will be generated when merging a pull request.
  """
  mergeCommitMessage: MergeCommitMessage!

  """
  How the default commit title will be generated when merging a pull request.
  """
  mergeCommitTitle: MergeCommitTitle!

  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    branch: String
  ): MergeQueue

  """
  Returns a single milestone from the current repository by number.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

"""
Audit log entry for a org.oauth_app_access_blocked event.
"""
type OrgOauthAppAccessBlockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The Node ID of the OrgOauthAppAccessRequestedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  Finds and returns the Project according to the provided Project number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The HTTP path listing the repository's projects
  """
  projectsResourcePath: URI!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    states: [PullRequestState!]
  ): PullRequestConnection!

  """
  Identifies the date and time when the repository was last pushed to.
  """
  pushedAt: DateTime

  """
  Whether or not rebase-merging is enabled on this repository.
  """
  rebaseMergeAllowed: Boolean!

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  The HTTP URL for the OAuth application
  """
  edges: [ProjectV2ViewEdge]

  """
  The corresponding operation type for the action
  """
  nodes: [ProjectV2View]

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the role this source has granted to the user.
  """
  roleName: String

"""
An edge in a connection.
"""
type ProjectV2ViewEdge {
  """
  The source of this permission.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  hidden: Boolean!

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  hidden: Boolean!

  """
  The name of the Organization.
  """
  deleteLinkedBranch(
    """
    Parameters for DeleteLinkedBranch
    """
    input: DeleteLinkedBranchInput!
  ): DeleteLinkedBranchPayload

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  deleteProjectV2Field(
    """
    Parameters for DeleteProjectV2Field
    """
    input: DeleteProjectV2FieldInput!
  ): DeleteProjectV2FieldPayload

  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  UPDATED_AT
}

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Parameters for LinkProjectV2ToRepository
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Returns a single ruleset from the current repository by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!

    """
    Include rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true
  ): RepositoryRuleset

  """
  A list of rulesets for this repository.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The security policy URL.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  How the default commit message will be generated when squash merging a pull request.
  """
  squashMergeCommitMessage: SquashMergeCommitMessage!

  """
  How the default commit title will be generated when squash merging a pull request.
  """
  squashMergeCommitTitle: SquashMergeCommitTitle!

  """
  Whether a squash merge commit can use the pull request title as default.
  """
  squashPrTitleUsedAsDefault: Boolean!
    @deprecated(
      reason: "`squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC."
    )

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

"""
Autogenerated input type of LinkProjectV2ToTeam
"""
input LinkProjectV2ToTeamInput {
  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The ID of the project to link to the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to link to the project.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposDisableAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveOutsideCollaboratorAuditEntry object
  """
  id: ID!

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgAddBillingManagerAuditEntry object
  """
  id: ID!

  """
  Publish an existing sponsorship tier that is currently still a draft to a GitHub Sponsors profile.
  """
  publishSponsorsTier(
    """
    Parameters for PublishSponsorsTier
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Parameters for RetireSponsorsTier
    """
    input: RetireSponsorsTierInput!
  ): RetireSponsorsTierPayload

  """
  Create a pull request that reverts the changes from a merged pull request.
  """
  revertPullRequest(
    """
    Parameters for RevertPullRequest
    """
    input: RevertPullRequestInput!
  ): RevertPullRequestPayload

  """
  Revoke the migrator role to a user for all organizations under an enterprise account.
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Audit log entry for a org.oauth_app_access_blocked event.
"""
type OrgOauthAppAccessBlockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The base commit for this entry
  """
  baseCommit: Commit

  """
  Abort a repository migration queued or in progress.
  """
  abortRepositoryMigration(
    """
    Parameters for AbortRepositoryMigration
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

  """
  Accepts a pending invitation for a user to become an administrator of an enterprise.
  """
  enqueuedAt: DateTime!

  """
  The actor that enqueued this entry
  """
  enqueuer: Actor!

  """
  The estimated time in seconds until this entry will be merged
  """
  estimatedTimeToMerge: Int

  """
  Starts a GitHub Enterprise Importer organization migration.
  """
  startOrganizationMigration(
    """
    Parameters for StartOrganizationMigration
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The entry is currently queued.
  """
  QUEUED

  """
  The entry is currently unmergeable.
  """
  UNMERGEABLE
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

"""
Detailed status information about a pull request merge.
"""
input LinkProjectV2ToRepositoryInput {
  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The ID of the project to link to the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to link to the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Parameters for ClearProjectV2ItemFieldValue
    """
    input: ClearProjectV2ItemFieldValueInput!
  ): ClearProjectV2ItemFieldValuePayload

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  The Node ID of the LinkedBranch object
  """
  id: ID!

  """
  Close a discussion.
  """
  closeDiscussion(
    """
    Parameters for CloseDiscussion
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Autogenerated input type of LockLockable
"""
input LinkProjectV2ToTeamInput {
  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  A list of nodes.
  """
  nodes: [ProjectV2]

  """
  Information to aid in pagination.
  """
  edges: [LinkedBranchEdge]

  """
  Creates a new user list.
  """
  createdAt: PreciseDateTime!

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  id: ID!

  """
  Update a repository ruleset
  """
  node: ProjectV2
}

"""
A field inside a project.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  Sets whether contributors are required to sign off on web-based commits for a repository.
  """
  createdAt: DateTime!

  """
  Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
  """
  dataType: ProjectV2FieldType!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  updatedAt: DateTime!
}

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
interface ProjectV2FieldCommon {
  """
  The Node ID of the MigrationSource object
  """
  createdAt: DateTime!

  """
  The migration source name.
  """
  dataType: ProjectV2FieldType!

  """
  The migration source type.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  Updates an existing user list.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  A unique identifier for the client performing the mutation.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  The ID of the project to link to the team.
  """
  nodes: [ProjectV2Field]

  """
  Unlink a branch from an issue.
  """
  deleteLinkedBranch(
    """
    Parameters for DeleteLinkedBranch
    """
    input: DeleteLinkedBranchInput!
  ): DeleteLinkedBranchPayload

  """
  Delete a package version.
  """
  GITHUB_ARCHIVE
}

"""
The GitHub Enterprise Importer (GEI) migration state.
"""
type ProjectV2FieldEdge {
  """
  The migration has failed.
  """
  hasSponsorsListing: Boolean!

  """
  The Node ID of the Organization object
  """
  id: ID!

  """
  The migration has invalid credentials.
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  The migration is in progress.
  """
  ASSIGNEES

  """
  Delete a project.
  """
  DATE

  """
  The Node ID of the OrgDisableOauthAppRestrictionsAuditEntry object
  """
  ITERATION

  """
  Delete a project field.
  """
  LABELS

  """
  The migration needs to have its credentials validated.
  """
  LINKED_PULL_REQUESTS

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  Whether the given account is sponsoring this user/organization.
  """
  MILESTONE

  """
  The Node ID of the OIDCProvider object
  """
  NUMBER

  """
  Deletes a pull request review.
  """
  REPOSITORY

  """
  The Node ID of the OrgRestoreMemberAuditEntry object
  """
  REVIEWERS

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT

  """
  Title
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  The organization's public profile location.
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  The content of the referenced draft issue, issue, or pull request
  """
  content: ProjectV2ItemContent

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  mannequins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

  """
  Whether the item is archived.
  """
  isArchived: Boolean!

  """
  The project that contains this item.
  """
  project: ProjectV2!

  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  type: ProjectV2ItemType!

  """
  Deletes a team discussion.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ItemEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Item]

  """
  The HTTP path for the OAuth application
  """
  deleteUserList(
    """
    Parameters for DeleteUserList
    """
    input: DeleteUserListInput!
  ): DeleteUserListPayload

  """
  The HTTP URL for the OAuth application
  """
  LOGIN
}

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  Remove a pull request from the merge queue.
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Disable auto merge on the given pull request
  """
  createdAt: DateTime!

  """
  The team the project is linked to
  """
  creator: Actor

  """
  The Node ID of the Milestone object
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

"""
The state of an OAuth application when it was created.
"""
enum OauthApplicationCreateAuditEntryState {
  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type OrgDisableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Starts a GitHub Enterprise Importer organization migration.
  """
  startOrganizationMigration(
    """
    Parameters for StartOrganizationMigration
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  number: Float

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Parameters for UnlinkProjectV2FromTeam
    """
    input: UnlinkProjectV2FromTeamInput!
  ): UnlinkProjectV2FromTeamPayload

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  An alert that has been manually closed by a user.
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  Cayman Islands
  """
  KY

  """
  Kazakhstan
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

"""
An edge in a connection.
"""
type ProjectV2ItemFieldValueEdge {
  """
  Laos
  """
  LA

  """
  Lebanon
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  DRAFT_ISSUE

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type RequiredStatusCheckDescription {
  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
An item in a pull request timeline
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

"""
The connection type for PullRequestTimelineItems.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  The project view's name.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  edges: [ProjectV2ViewEdge]

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  nodes: [ProjectV2View]

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

"""
An edge in a connection.
"""
type ProjectV2ViewEdge {
  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  mergeCommit: Commit

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  number: Int!

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  potentialMergeCommit: Commit

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the PushAllowance object
  """
  id: ID!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

"""
An edge in a connection.
"""
type SecurityAdvisoryEdge {
  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The item at the end of the edge.
  """
  node: SecurityAdvisory
}

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  The identifier type, e.g. GHSA, CVE
  """
  type: String!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

"""
An individual vulnerability within an Advisory
"""
type SecurityVulnerability {
  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

"""
An edge in a connection.
"""
type SecurityVulnerabilityEdge {
  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

"""
Ordering options for security vulnerability connections
"""
type Package implements Node {
  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Autogenerated return type of SetEnterpriseIdentityProvider
"""
type SetEnterpriseIdentityProviderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The identity provider for the enterprise.
  """
  identityProvider: EnterpriseIdentityProvider
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    query: String!

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Microblogging website.
  """
  TWITTER

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

"""
A version tag contains the mapping between a tag name and a version.
"""
type PackageTag implements Node {
  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  databaseId: Int

  """
  The Node ID of the Reactable object
  """
  id: ID!

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The name of the role this source has granted to the user.
  """
  databaseId: Int

  """
  The Node ID of the Reaction object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Parameters to be used for the repository_id condition
"""
type RepositoryIdConditionTarget {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReadyForReviewEvent object
  """
  id: ID!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests returned from the connection.
    """
    orderBy: IssueOrder

    """
    A list of states to filter the pull requests by.
    """
    states: [PullRequestState!]
  ): PullRequestConnection!

  """
  Branch protection rules for this ref
  """
  branchProtectionRule: BranchProtectionRule

  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    The head ref to compare against.
    """
    headRef: String!
  ): Comparison

  """
  The Node ID of the Ref object
  """
  id: ID!

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  The Node ID of the RepositoryMigration object
  """
  id: ID!

  """
  A list of rules from active Repository and Organization rulesets that apply to this ref.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repository rules.
    """
    orderBy: RepositoryRuleOrder = {field: UPDATED_AT, direction: DESC}
  ): RepositoryRuleConnection

  """
  The object the ref points to. Returns null when object does not exist.
  """
  sponsor: Sponsor

  """
  The migration source.
  """
  sponsorable: Sponsorable!

  """
  The associated sponsorship tier.
  """
  sponsorsTier: SponsorsTier

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  timestamp: DateTime

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Ways in which lists of git refs can be ordered upon return.
"""
enum SponsorsActivityAction {
  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  CANCELLED_SPONSORSHIP

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

  """
  The activity was scheduling a downgrade or cancellation.
  """
  PENDING_CHANGE

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

"""
Branch protection rules that are enforced on the viewer.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
type SponsorsActivityConnection {
  """
  Reunion
  """
  edges: [SponsorsActivityEdge]

  """
  Romania
  """
  nodes: [SponsorsActivity]

  """
  Serbia
  """
  RS

  """
  Russian Federation
  """
  RU

"""
Autogenerated return type of UpdateProjectColumn
"""
type SponsorsActivityEdge {
  """
  Rwanda
  """
  RW

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  createdAt: DateTime!

  """
  The Node ID of the ReferencedEvent object
  """
  id: ID!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
interface RepositoryNode {
  """
  Saudi Arabia
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  The end line number on the file to which the comment applies
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  The previous seven days.
  """
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  Andorra
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The Node ID of the RepositoryOwner object
  """
  descriptionHTML: HTML

  """
  The Node ID of the Release object
  """
  id: ID!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  AE

  """
  Afghanistan
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

  """
  The start line number on the file to which the comment applies
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

  """
  Identifies the state of the comment.
  """
  state: PullRequestReviewCommentState!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  updatedAt: DateTime!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    A name to filter the assets by.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Antigua and Barbuda
  """
  AG

  """
  Anguilla
  """
  AI

  """
  Albania
  """
  AL

  """
  Armenia
  """
  AM

  """
  Angola
  """
  AO

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type ReleaseAsset implements Node {
  """
  The asset's content-type
  """
  contentType: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The number of times this asset was downloaded
  """
  downloadCount: Int!

  """
  Identifies the URL where you can download the release asset via the browser.
  """
  downloadUrl: URI!

  """
  The Node ID of the ReleaseAsset object
  """
  id: ID!

  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  AQ

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The Node ID of the ProjectCard object
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  repositoryRuleset: RepositoryRuleset

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTarget
}

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise from which the user should be removed.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the user to remove from the enterprise.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  The user that was removed from the enterprise.
  """
  user: User

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  editor: Actor

  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  LOCK_BRANCH

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  MAX_REF_UPDATES

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

  """
  The Node ID of the RemovedFromMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The reason this pull request was removed from the queue.
  """
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
type RemovedFromProjectEvent implements Node {
  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  databaseId: Int

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  id: ID!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  currentTitle: String!

  """
  The Node ID of the RenamedTitleEvent object
  """
  id: ID!

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REQUIRED_SIGNATURES

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
input ReopenIssueInput {
  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  id: ID!

  """
  Find project by number.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  id: ID!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  Secret scanning
  """
  closed: Boolean!

  """
  Tag
  """
  TAG

  """
  Tag name pattern
  """
  createdAt: DateTime!

  """
  Only allow users with bypass permission to update matching refs.
  """
  creator: Actor

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  databaseId: Int

  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  List of fields and their constraints in the project
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  The project's number.
  """
  number: Int!

  """
  The side of the diff on which this thread was placed.
  """
  owner: ProjectV2Owner!

  """
  The Node ID of the PullRequestThread object
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

  """
  Whether or not the thread has been collapsed (resolved)
  """
  repositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  resourcePath: URI!

  """
  Whether this thread has been resolved
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddMemberAuditEntry object
  """
  id: ID!

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  The line in the file to which this thread refers
  """
  title: String!

  """
  Identifies the file path of this thread.
  """
  updatedAt: DateTime!

  """
  Identifies the pull request associated with this thread.
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  views(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  id: ID!

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  edges: [ProjectV2Edge]

  """
  The line of the first file diff in the thread.
  """
  nodes: [ProjectV2]

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoArchivedAuditEntry object
  """
  id: ID!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  node: ProjectV2
}

"""
An item in a pull request timeline
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

"""
The connection type for PullRequestTimelineItems.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  The enforcement level of this ruleset
  """
  name: String!

  """
  The Node ID of the RepositoryRuleset object
  """
  project: ProjectV2!

  """
  List of rules.
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  The actor that can bypass rules.
  """
  createdAt: DateTime!

  """
  The mode for the bypass actor
  """
  dataType: ProjectV2FieldType!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  name: String!

  """
  Identifies the ruleset associated with the allowed actor
  """
  project: ProjectV2!

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  Identifies the date and time when the object was last updated.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Field]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  Assignees
  """
  ASSIGNEES

  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  DATE

  """
  The bypass mode for this actor.
  """
  ITERATION

  """
  For organization owner bypasses, true
  """
  LABELS

  """
  For role bypasses, the role database ID
  """
  LINKED_PULL_REQUESTS

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  MILESTONE

  """
  A list of nodes.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  REPOSITORY

  """
  Identifies the total count of items in the connection.
  """
  REVIEWERS

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  SINGLE_SELECT

  """
  The item at the end of the edge.
  """
  TEXT

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  Branch
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  Tag
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  The Node ID of the RepositoryTopic object
  """
  content: ProjectV2ItemContent

  """
  Åland
  """
  createdAt: DateTime!

  """
  Azerbaijan
  """
  creator: Actor

  """
  Bosnia and Herzegovina
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  BB

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

  """
  Belgium
  """
  isArchived: Boolean!

  """
  Burkina Faso
  """
  project: ProjectV2!

  """
  Bahrain
  """
  type: ProjectV2ItemType!

  """
  Burundi
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  Benin
  """
  edges: [ProjectV2ItemEdge]

  """
  Saint Barthélemy
  """
  nodes: [ProjectV2Item]

  """
  Bermuda
  """
  BM

  """
  Brunei Darussalam
  """
  BN

"""
A team of users in an organization.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  Bhutan
  """
  creator: Actor

  """
  Bouvet Island
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  Botswana
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  The Node ID of the PushAllowance object
  """
  id: ID!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Costa Rica
  """
  CR

  """
  Cape Verde
  """
  CV

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the PushAllowance object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union PushAllowanceActor = App | Team | User

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Guernsey
  """
  GG

  """
  The actor who created the item.
  """
  GH

  """
  Gibraltar
  """
  GI

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  An alert that has been manually closed by a user.
  """
  GU

  """
  Guinea-Bissau
  """
  GW

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  Israel
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  Isle of Man
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  India
  """
  IN

  """
  British Indian Ocean Territory
  """
  IO

"""
An edge in a connection.
"""
type ProjectV2ItemFieldValueEdge {
  """
  Iraq
  """
  databaseId: Int

  """
  The Node ID of the Reactable object
  """
  id: ID!

  """
  Iran
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Reaction object
  """
  id: ID!

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  The object the ref points to. Returns null when object does not exist.
  """
  id: ID!
}

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReadyForReviewEvent object
  """
  id: ID!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  branchProtectionRule: BranchProtectionRule

  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    The head ref to compare against.
    """
    headRef: String!
  ): Comparison

  """
  The Node ID of the Ref object
  """
  id: ID!

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  A list of rules from active Repository and Organization rulesets that apply to this ref.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repository rules.
    """
    orderBy: RepositoryRuleOrder = {field: UPDATED_AT, direction: DESC}
  ): RepositoryRuleConnection

  """
  The object the ref points to. Returns null when object does not exist.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Ways in which lists of git refs can be ordered upon return.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Branch protection rules that are enforced on the viewer.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReferencedEvent object
  """
  id: ID!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  """
  The project view's name.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  descriptionHTML: HTML

  """
  The Node ID of the Release object
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  The login of the user to revoke the migrator role
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  id: ID!

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A name to filter the assets by.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ViewEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2View]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Possible roles a user may have in relation to an organization.
"""
type ProjectV2ViewEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  A user who is a direct member of the organization.
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  Do not evaluate or enforce rules
  """
  downloadUrl: URI!

  """
  The Node ID of the ReleaseAsset object
  """
  id: ID!

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  tagNamePattern: TagNamePatternParametersInput

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  update: UpdateParametersInput

  """
  Parameters used for the `workflows` rule type
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveTopicAuditEntry object
  """
  id: ID!

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  downloadUrl: URI!

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  body: String!

  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  UPDATED_AT
}

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  A list of users that can be assigned to issues in this repository.
  """
  clientMutationId: String

  """
  The ID of the enterprise from which the user should be removed.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the user to remove from the enterprise.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

    """
    Filters users with query on user name and login.
    """
    query: String
  ): UserConnection!

  """
  The user that was removed from the enterprise.
  """
  user: User

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
enum SavedReplyOrderField {
  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

    """
    The login of one specific collaborator.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    query: String
  ): RepositoryCollaboratorConnection

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

  """
  Identifies the date and time when the object was created.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  A list of references for this advisory
  """
  references: [SecurityAdvisoryReference!]!

  """
  The severity of the advisory
  """
  severity: SecurityAdvisorySeverity!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

  """
  The Node ID of the RemovedFromMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  A discussion category by slug.
  """
  discussionCategory(
    """
    The slug of the discussion category to be returned.
    """
    slug: String!
  ): DiscussionCategory

  """
  A list of discussions that have been opened in the repository.
  """
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
type RemovedFromProjectEvent implements Node {
  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Only show answered or unanswered discussions
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: UPDATED_AT, direction: DESC}

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  environments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the environments
    """
    orderBy: Environments = {field: NAME, direction: ASC}
  ): EnvironmentConnection!

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  id: ID!

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Identifies the head Ref associated with the pull request.
  """
  currentTitle: String!

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  id: ID!

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Whether vulnerability alerts are enabled for the repository.
  """
  hasVulnerabilityAlertsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  headRefOid: GitObjectID!

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  homepageUrl: URI

  """
  The Node ID of the Repository object
  """
  id: ID!

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
input ReopenIssueInput {
  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  id: ID!

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  How the default commit message will be generated when merging a pull request.
  """
  mergeCommitMessage: MergeCommitMessage!

  """
  How the default commit title will be generated when merging a pull request.
  """
  mergeCommitTitle: MergeCommitTitle!

  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    branch: String
  ): MergeQueue

  """
  Returns a single milestone from the current repository by number.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  The repository associated with this node.
  """
  repository: Repository!

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  Finds and returns the Project according to the provided Project number.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

"""
Autogenerated input type of ReopenIssue
"""
input ReopenIssueInput {
  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  The HTTP path listing the repository's projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing the repository's projects
  """
  projectsUrl: URI!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  Identifies the date and time when the repository was last pushed to.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

    """
    If true, filters teams that are mapped to an LDAP Group (Enterprise only)
    """
    ldapMapped: Boolean

    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    orderBy: TeamOrder

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  Macedonia
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  id: ID!

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

  """
  The user or organization that is being sponsored, the maintainer.
  """
  sponsorable: Sponsorable!

  """
  The associated sponsorship tier.
  """
  sponsorsTier: SponsorsTier

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  REBASE
}

"""
A file changed in a pull request.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

  """
  The activity was scheduling a downgrade or cancellation.
  """
  PENDING_CHANGE

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  Returns a single vulnerability alert from the current repository by number.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  id: ID!

  """
  A list of vulnerability alerts that are on this repository.
  """
  SPONSOR_MATCH_DISABLED

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  TIER_CHANGE
}

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  Namibia
  """
  edges: [SponsorsActivityEdge]

  """
  New Caledonia
  """
  nodes: [SponsorsActivity]

  """
  Niger
  """
  NE

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Whether contributors are required to sign off on web-based commits in this repository.
  """
  webCommitSignoffRequired: Boolean!
}

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  Nigeria
  """
  NG

  """
  Nicaragua
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  The ordering direction.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  MONTH

"""
Represents an SSH signature on a Commit or Tag.
"""
type SshSignature implements GitSignature {
  """
  The previous seven days.
  """
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  Andorra
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  AF

  """
  Antigua and Barbuda
  """
  AG

  """
  Anguilla
  """
  AI

  """
  Albania
  """
  AL

  """
  Armenia
  """
  AM

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
type OrganizationIdentityProvider implements Node {
  """
  Angola
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoArchivedAuditEntry object
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

  """
  Aruba
  """
  AW

  """
  Åland
  """
  AX

  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  The total size in kilobytes of all repositories in the connection. Value will
  never be larger than max 32-bit signed integer.
  """
  BD

  """
  Belgium
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

  """
  Burundi
  """
  BI

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  BM

  """
  Brunei Darussalam
  """
  BN

  """
  Bolivia
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  BR

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!
}

  """
  Bhutan
  """
  BT

  """
  Bouvet Island
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  BY

  """
  Belize
  """
  BZ

  """
  Canada
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Congo (Kinshasa)
  """
  CD

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
type RepositoryIdConditionTarget {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  CF

  """
  Congo (Brazzaville)
  """
  CG

  """
  Switzerland
  """
  CH

  """
  Côte d'Ivoire
  """
  CI

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
union OrganizationOrUser = Organization | User

  """
  Chile
  """
  CL

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  CM

  """
  China
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Colombia
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

  """
  Costa Rica
  """
  CR

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  CV

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  CW

  """
  Christmas Island
  """
  CX

  """
  Cyprus
  """
  CY

  """
  Czech Republic
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Germany
  """
  DE

  """
  Djibouti
  """
  DJ

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  Dominica
  """
  DM

  """
  Dominican Republic
  """
  DO

  """
  Algeria
  """
  DZ

"""
Autogenerated input type of StartRepositoryMigration
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

  """
  Eritrea
  """
  ER

  """
  Spain
  """
  ES

  """
  Ethiopia
  """
  ET

  """
  Finland
  """
  FI

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  Fiji
  """
  FJ

  """
  Falkland Islands
  """
  FK

  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  FO

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  FR

  """
  Gabon
  """
  GA

  """
  United Kingdom
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

"""
Autogenerated return type of UnlinkProjectV2FromRepository
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

  """
  Grenada
  """
  GD

  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  GG

  """
  Ghana
  """
  GH

  """
  Gibraltar
  """
  GI

  """
  Greenland
  """
  GL

  """
  Gambia
  """
  GM

  """
  Guinea
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The Node ID of the RepositoryInvitation object
  """
  id: ID!

  """
  Guadeloupe
  """
  GP

  """
  Equatorial Guinea
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

  """
  Greece
  """
  GR

  """
  South Georgia and South Sandwich Islands
  """
  GS

  """
  Guatemala
  """
  GT

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  GU

  """
  Guinea-Bissau
  """
  CREATED_AT
}

"""
Represents an owner of a package.
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  downloadsTotalCount: Int!
}

"""
A version tag contains the mapping between a tag name and a version.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  Hong Kong
  """
  HK

  """
  Heard and McDonald Islands
  """
  HM

  """
  Honduras
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

  """
  Croatia
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  Haiti
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  Hungary
  """
  HU

  """
  Indonesia
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

  """
  Ireland
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering of the returned package files.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

  """
  Israel
  """
  IL

  """
  Isle of Man
  """
  RENAME

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  TRADE_RESTRICTION

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
enum SponsorsListingFeaturedItemFeatureableType {
  """
  The migration flag to continue on error.
  """
  IR

  """
  Iceland
  """
  IS

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  id: ID!

  """
  Jersey
  """
  JE

  """
  The migration source.
  """
  JM

  """
  Jordan
  """
  JO

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  JP

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

  """
  Kyrgyzstan
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  Cambodia
  """
  KH

  """
  Kiribati
  """
  KI

  """
  Comoros
  """
  KM

  """
  Saint Kitts and Nevis
  """
  KN

  """
  Korea, South
  """
  KR

  """
  Kuwait
  """
  KW

  """
  Cayman Islands
  """
  KY

  """
  Kazakhstan
  """
  KZ

  """
  Laos
  """
  LA

  """
  Lebanon
  """
  LB

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The source of this permission.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
interface RepositoryNode {
  """
  Saint Lucia
  """
  LC

  """
  Liechtenstein
  """
  LI

  """
  Sri Lanka
  """
  LK

  """
  Liberia
  """
  LR

  """
  Lesotho
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Lithuania
  """
  LT

  """
  Luxembourg
  """
  LU

  """
  Latvia
  """
  LV

"""
A Stripe Connect account for receiving sponsorship funds from GitHub Sponsors.
"""
type StripeConnectAccount {
  """
  Libya
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The Node ID of the RepositoryOwner object
  """
  id: ID!

  """
  Morocco
  """
  MA

  """
  Monaco
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  Moldova
  """
  MD

  """
  Montenegro
  """
  ME

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Madagascar
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

  """
  Marshall Islands
  """
  MH

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  MK

  """
  Mali
  """
  ML

  """
  Myanmar
  """
  MM

  """
  Mongolia
  """
  MN

  """
  Macau
  """
  MO

  """
  Northern Mariana Islands
  """
  MP

  """
  Martinique
  """
  MQ

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Mauritania
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type PullRequestRevisionMarker {
  """
  Montserrat
  """
  MS

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

"""
A Pinned Issue is a issue pinned to a repository's index page.
"""
type PinnedIssue implements Node {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

"""
An item in a pull request timeline
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  MERGE_QUEUE_LOCKED_REF

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REQUIRED_SIGNATURES

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Secret scanning
  """
  SECRET_SCANNING

  """
  Tag
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

  """
  Tag name pattern
  """
  TAG_NAME_PATTERN

  """
  Only allow users with bypass permission to update matching refs.
  """
  UPDATE

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  WORKFLOWS

  """
  Workflow files cannot be modified.
  """
  WORKFLOW_UPDATES
}

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetBypassActorConnection

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The enforcement level of this ruleset
  """
  enforcement: RuleEnforcement!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The type of rule.
    """
    type: RepositoryRuleType
  ): RepositoryRuleConnection

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  repositoryRoleName: String

  """
  Identifies the ruleset associated with the allowed actor
  """
  repositoryRuleset: RepositoryRuleset
}

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  createdAt: PreciseDateTime!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  OPEN
}

"""
A Git push.
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  A list of nodes.
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the PushAllowance object
  """
  id: ID!
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  actorId: ID

  """
  The bypass mode for this actor.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode!

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRuleset]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRuleset
}

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  Branch
  """
  BRANCH

  """
  Tag
  """
  TAG
}

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  id: ID!

  """
  Mauritius
  """
  MU

  """
  Maldives
  """
  MV

  """
  Malawi
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  Mexico
  """
  MX

  """
  Malaysia
  """
  MY

  """
  Mozambique
  """
  MZ

  """
  Namibia
  """
  NA

  """
  New Caledonia
  """
  NC

  """
  Niger
  """
  NE

  """
  Norfolk Island
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

  """
  Nigeria
  """
  NG

  """
  Nicaragua
  """
  NI

  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  NL

  """
  Norway
  """
  NO

  """
  Nepal
  """
  NP

  """
  Nauru
  """
  NR

  """
  Niue
  """
  NU

  """
  New Zealand
  """
  NZ

  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  OM

"""
Ways in which team connections can be ordered.
"""
input TransferEnterpriseOrganizationInput {
  """
  Panama
  """
  PA

  """
  Peru
  """
  PE

  """
  French Polynesia
  """
  PF

    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    query: String!

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  id: ID!

  """
  Philippines
  """
  PH

  """
  Pakistan
  """
  PK

  """
  Poland
  """
  PL

  """
  Saint Pierre and Miquelon
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

  """
  Pitcairn
  """
  PN

  """
  Puerto Rico
  """
  PR

  """
  Palestine
  """
  PS

  """
  Portugal
  """
  PT

  """
  Palau
  """
  PW

"""
How payment was made for funding a GitHub Sponsors sponsorship.
"""
enum SponsorshipPaymentSource {
  """
  Paraguay
  """
  PY

  """
  Qatar
  """
  QA

  """
  Reunion
  """
  RE

  """
  Romania
  """
  RO

  """
  Serbia
  """
  RS

  """
  Russian Federation
  """
  RU

  """
  Rwanda
  """
  RW

"""
The privacy of a sponsorship
"""
type TransferEnterpriseOrganizationPayload {
  """
  Saudi Arabia
  """
  SA

  """
  Solomon Islands
  """
  SB

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
New projects that manage issues, pull requests and drafts using tables and boards.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  Singapore
  """
  closed: Boolean!

  """
  Saint Helena
  """
  SH

  """
  Slovenia
  """
  createdAt: DateTime!

  """
  Svalbard and Jan Mayen Islands
  """
  creator: Actor

  """
  Slovakia
  """
  databaseId: Int

  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  items(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  Senegal
  """
  number: Int!

  """
  When was the alert auto-dismissed?
  """
  owner: ProjectV2Owner!

  """
  When was the alert created?
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

  """
  Suriname
  """
  repositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

  """
  South Sudan
  """
  resourcePath: URI!

  """
  Comment explaining the reason the alert was dismissed
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  The reason the alert was dismissed
  """
  title: String!

  """
  El Salvador
  """
  updatedAt: DateTime!

"""
The possible default commit titles for squash merges.
"""
enum SquashMergeCommitTitle {
  """
  Sint Maarten (Dutch part)
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  The Node ID of the Reactable object
  """
  id: ID!

  """
  When was the alert fixed?
  """
  views(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  edges: [ProjectV2Edge]

  """
  Chad
  """
  nodes: [ProjectV2]

  """
  French Southern Lands
  """
  TF

  """
  Togo
  """
  TG

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  Thailand
  """
  TH

  """
  Tajikistan
  """
  node: ProjectV2
}

"""
A field inside a project.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  Tokelau
  """
  createdAt: DateTime!

  """
  Timor-Leste
  """
  dataType: ProjectV2FieldType!

  """
  Turkmenistan
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  Tunisia
  """
  name: String!

  """
  Tonga
  """
  project: ProjectV2!

  """
  Trinidad and Tobago
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  Tuvalu
  """
  createdAt: DateTime!

  """
  Taiwan
  """
  dataType: ProjectV2FieldType!

  """
  The Node ID of the RepoRemoveTopicAuditEntry object
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  The Node ID of the Reaction object
  """
  name: String!

  """
  Tanzania
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  An alert that has been automatically closed by Dependabot.
  """
  edges: [ProjectV2FieldEdge]

  """
  An alert that has been manually closed by a user.
  """
  nodes: [ProjectV2Field]

  """
  United States of America
  """
  US

  """
  Uruguay
  """
  UY

"""
An edge in a connection.
"""
type ProjectV2FieldEdge {
  """
  Uzbekistan
  """
  UZ

  """
  Vatican City
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  Saint Vincent and the Grenadines
  """
  ASSIGNEES

  """
  Venezuela
  """
  DATE

  """
  Virgin Islands, British
  """
  ITERATION

  """
  Virgin Islands, U.S.
  """
  LABELS

  """
  Vietnam
  """
  LINKED_PULL_REQUESTS

  """
  Vanuatu
  """
  MILESTONE

  """
  Wallis and Futuna Islands
  """
  NUMBER

  """
  Samoa
  """
  REPOSITORY

  """
  Yemen
  """
  REVIEWERS

  """
  Mayotte
  """
  SINGLE_SELECT

"""
Autogenerated return type of StartOrganizationMigration
"""
type StartOrganizationMigrationPayload {
  """
  South Africa
  """
  TEXT

  """
  Zambia
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  Zimbabwe
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  The content of the referenced draft issue, issue, or pull request
  """
  content: ProjectV2ItemContent

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the date and time when the repository was archived.
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  assignableUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

  """
  Whether the item is archived.
  """
  isArchived: Boolean!

  """
  The signed URL to access the user-uploaded git archive.
  """
  project: ProjectV2!

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Whether to lock the source repository.
  """
  type: ProjectV2ItemType!

  """
  The signed URL to access the user-uploaded metadata archive.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  Branch can pull changes from its upstream repository
  """
  edges: [ProjectV2ItemEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Item]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The login of one specific collaborator.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    query: String
  ): RepositoryCollaboratorConnection

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type ProjectV2ItemEdge {
  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

  """
  Identifies the date and time when the object was created.
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The name of the country or region with the maintainer's bank account or fiscal
  host. Will only return a value when queried by the maintainer themselves, or
  by an admin of the sponsorable organization.
  """
  createdAt: DateTime!

  """
  The email address used by GitHub to contact the sponsorable about their GitHub
  Sponsors profile. Will only return a value when queried by the maintainer
  themselves, or by an admin of the sponsorable organization.
  """
  creator: Actor

  """
  Identifies the date and time when the object was created.
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  Status checks that are required.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
input RequiredStatusChecksParametersInput {
  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload {
  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

"""
Branch protection rules that are enforced on the viewer.
"""
type RefUpdateRule {
  """
  Can this branch be deleted.
  """
  allowsDeletions: Boolean!

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The new pull request that reverts the input pull request.
  """
  revertPullRequest: PullRequest
}

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The actor who created the item.
  """
  actor: ReviewDismissalAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

"""
Represents a 'review_dismissed' event on a given issue or pull request.
"""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Identifies the optional message associated with the event, rendered to HTML.
  """
  descriptionHTML: HTML

  """
  The Node ID of the Release object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

"""
A request for a user to review a pull request.
"""
type ReviewRequest implements Node {
  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ItemFieldValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
input RevokeEnterpriseOrganizationsMigratorRoleInput {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  SHA1
  """
  SHA1

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

"""
A Saved Reply is text a user can use to reply quickly.
"""
type SavedReply implements Node {
  """
  The body of the saved reply.
  """
  body: String!

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  The user that saved this reply.
  """
  user: Actor
}

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

"""
Properties by which saved reply connections can be ordered.
"""
enum SavedReplyOrderField {
  """
  GRAY
  """
  GRAY

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
type SearchResultItemConnection {
  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

"""
Represents the individual results of a search.
"""
enum SearchType {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CWEConnection!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  id: ID!

  """
  This is a long plaintext description of the advisory
  """
  description: String!

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  The project view's name.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  Classification of malware advisories.
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  JavaScript packages hosted at npmjs.com
  """
  edges: [ProjectV2ViewEdge]

  """
  .NET packages hosted at the NuGet Gallery
  """
  nodes: [ProjectV2View]

  """
  Python packages hosted at PyPI.org
  """
  PIP

  """
  Dart packages hosted at pub.dev
  """
  PUB

"""
An edge in a connection.
"""
type ProjectV2ViewEdge {
  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """
    The number for the vulnerability alert to be returned.
    """
    number: Int!
  ): RepositoryVulnerabilityAlert

  """
  A list of vulnerability alerts that are on this repository.
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  The identifier type, e.g. GHSA, CVE
  """
  type: String!

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder {
  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  name: String!
}

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  identifier: String!
}

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  A publicly accessible reference
  """
  url: URI!
}

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  edges: [SecurityVulnerabilityEdge]

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  pageInfo: PageInfo!

  """
  The name of the workflow
  """
  NAME

"""
An edge in a connection.
"""
type SecurityVulnerabilityEdge {
  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  node: SecurityVulnerability
}

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput {
  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

"""
Parameters to be used for the repository_id condition
"""
type RepositoryIdConditionTarget {
  """
  The public key string.
  """
  key: String!

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The number of additions in this pull request.
  """
  additions: Int!

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput {
  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type SmimeSignature implements GitSignature {
  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  ASCII-armored signature header from object.
  """
  signature: String!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Identifies the date and time when the repository was last pushed to.
  """
  displayName: String!

  """
  Software or company that hosts the social media account.
  """
  provider: SocialAccountProvider!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

"""
Entities that can sponsor others via GitHub Sponsors
"""
type RepositoryInvitation implements Node {
  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    activeOnly: Boolean = true

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  createdAt: PreciseDateTime!

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  id: ID!

  """
  Identifies the ruleset associated with the allowed actor
  """
  repositoryRuleset: RepositoryRuleset
}

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  ALWAYS

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRulesetBypassActor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  actorId: ID

  """
  The bypass mode for this actor.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode!

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRuleset]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRuleset
}

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  Branch
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  Tag
  """
  TAG
}

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  id: ID!

  """
  A user who belongs to the organization with the GitHub Sponsors profile.
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

"""
Required status check
"""
type StatusCheckConfiguration {
  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

  """
  The user or organization that is being sponsored, the maintainer.
  """
  sponsorable: Sponsorable!

"""
Required status check
"""
input StatusCheckConfigurationInput {
  """
  The associated sponsorship tier.
  """
  sponsorsTier: SponsorsTier

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  The activity was cancelling a sponsorship.
  """
  CANCELLED_SPONSORSHIP

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

  """
  The activity was scheduling a downgrade or cancellation.
  """
  PENDING_CHANGE

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  TIER_CHANGE
}

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  A list of edges.
  """
  edges: [SponsorsActivityEdge]

  """
  A list of nodes.
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The number of status contexts in this rollup.
  """
  statusContextCount: Int!

  """
  Counts of status contexts by state.
  """
  statusContextCountsByState: [StatusContextStateCount!]

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  Andorra
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  AF

  """
  Antigua and Barbuda
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Anguilla
  """
  AI

  """
  Albania
  """
  AL

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  Armenia
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  id: ID!

  """
  Angola
  """
  AO

  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland
  """
  AX

  """
  Azerbaijan
  """
  AZ

  """
  When was the alert auto-dismissed?
  """
  autoDismissedAt: DateTime

  """
  When was the alert created?
  """
  BA

  """
  Barbados
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Bangladesh
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

  """
  Comment explaining the reason the alert was dismissed
  """
  dismissComment: String

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  BE

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  When was the alert fixed?
  """
  fixedAt: DateTime

  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  BM

  """
  Brunei Darussalam
  """
  BN

  """
  Bolivia
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  BR

  """
  Bahamas
  """
  BS

  """
  Bhutan
  """
  BT

  """
  Bouvet Island
  """
  BV

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  BY

  """
  Belize
  """
  BZ

  """
  Canada
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Congo (Kinshasa)
  """
  CD

"""
The privacy of a sponsorship
"""
interface Subscribable {
  """
  An alert that has been automatically closed by Dependabot.
  """
  AUTO_DISMISSED

  """
  An alert that has been manually closed by a user.
  """
  CF

  """
  Congo (Brazzaville)
  """
  CG

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  CH

"""
The possible default commit messages for squash merges.
"""
enum SquashMergeCommitMessage {
  """
  Côte d'Ivoire
  """
  CI

  """
  Cook Islands
  """
  union: Boolean = false

  """
  Chile
  """
  CL

"""
The possible default commit titles for squash merges.
"""
enum SquashMergeCommitTitle {
  """
  Cameroon
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

  """
  China
  """
  CN

  """
  Colombia
  """
  CO

  """
  Costa Rica
  """
  CR

  """
  Cape Verde
  """
  CV

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  CX

  """
  Cyprus
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Czech Republic
  """
  WAITING
}

"""
Types that can be requested reviewers.
"""
union RequestedReviewer = Bot | Mannequin | Team | User

  """
  Germany
  """
  DE

  """
  Djibouti
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

  """
  Denmark
  """
  DK

"""
Represents a 'subscribed' event on a given `Subscribable`.
"""
input UpdateRepositoryWebCommitSignoffSettingInput {
  """
  Dominica
  """
  DM

"""
The possible team notification values.
"""
enum TeamNotificationSetting {
  """
  Dominican Republic
  """
  DO

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  DZ

  """
  Ecuador
  """
  EC

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type UpdatePatreonSponsorabilityPayload {
  """
  Estonia
  """
  EE

  """
  Egypt
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

"""
Autogenerated input type of UnmarkProjectV2AsTemplate
"""
input UnmarkProjectV2AsTemplateInput {
  """
  Western Sahara
  """
  EH

  """
  Eritrea
  """
  ER

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfiguration!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
input RequiredStatusChecksParametersInput {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfigurationInput!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  id: ID!

"""
Autogenerated input type of RerequestCheckSuite
"""
interface Starrable {
  """
  Spain
  """
  ES

  """
  Ethiopia
  """
  ET

  """
  Finland
  """
  FI

"""
Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
"""
input UpdateProjectCardInput {
  """
  Fiji
  """
  FJ

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput {
  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  clientMutationId: String

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The thread to resolve.
  """
  thread: PullRequestReviewThread
}

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the published tier to retire.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was retired.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  The description of the revert pull request.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates whether the revert pull request should be a draft.
  """
  draft: Boolean = false

  """
  The ID of the pull request to revert.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The title of the revert pull request.
  """
  title: String
}

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that was reverted.
  """
  pullRequest: PullRequest

  """
  The new pull request that reverts the input pull request.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveTopicAuditEntry object
  """
  id: ID!

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The actor that can dismiss.
  """
  actor: ReviewDismissalAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the ReviewDismissalAllowance object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union ReviewDismissalAllowanceActor = App | Team | User

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  A list of edges.
  """
  edges: [ReviewDismissalAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewDismissalAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewDismissalAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewDismissalAllowance
}

"""
Represents a 'review_dismissed' event on a given issue or pull request.
"""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Identifies the optional message associated with the 'review_dismissed' event.
  """
  dismissalMessage: String

  """
  Identifies the optional message associated with the event, rendered to HTML.
  """
  dismissalMessageHTML: String

  """
  The Node ID of the ReviewDismissedEvent object
  """
  id: ID!

  """
  Identifies the previous state of the review with the 'review_dismissed' event.
  """
  previousReviewState: PullRequestReviewState!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the commit which caused the review to become stale.
  """
  pullRequestCommit: PullRequestCommit

  """
  The HTTP path for this review dismissed event.
  """
  resourcePath: URI!

  """
  Identifies the review associated with the 'review_dismissed' event.
  """
  review: PullRequestReview

  """
  The HTTP URL for this review dismissed event.
  """
  url: URI!
}

"""
A request for a user to review a pull request.
"""
type ReviewRequest implements Node {
  """
  Whether this request was created for a code owner
  """
  asCodeOwner: Boolean!

  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  A list of users that can be assigned to issues in this repository.
  """
  assignableUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filters users with query on user name and login.
    """
    query: String
  ): UserConnection!

  """
  The Node ID of the ReviewRequest object
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

  """
  Identifies the pull request associated with this review request.
  """
  pullRequest: PullRequest!

  """
  The reviewer that is requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
The connection type for ReviewRequest.
"""
type ReviewRequestConnection {
  """
  A list of edges.
  """
  edges: [ReviewRequestEdge]

  """
  A list of nodes.
  """
  collaborators(
    """
    Collaborators affiliation level with a repository.
    """
    affiliation: CollaboratorAffiliation

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The login of one specific collaborator.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    query: String
  ): RepositoryCollaboratorConnection

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewRequestEdge {
  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

  """
  Identifies the date and time when the object was created.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewRequest
}

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type ReviewRequestRemovedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestRemovedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review request was removed.
  """
  requestedReviewer: RequestedReviewer
}

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestedEvent object
  """
  id: ID!

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
type PullRequestTimelineConnection {
  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  A discussion category by slug.
  """
  discussionCategory(
    """
    The slug of the discussion category to be returned.
    """
    slug: String!
  ): DiscussionCategory

  """
  A list of discussions that have been opened in the repository.
  """
  discussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Only show answered or unanswered discussions
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Only include discussions that belong to the category with this ID.
    """
    categoryId: ID = null

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

"""
An item in a pull request timeline
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type ReviewStatusHovercardContext implements HovercardContext {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  The current status of the pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the environments
    """
    orderBy: Environments = {field: NAME, direction: ASC}
  ): EnvironmentConnection!

  """
  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of the user to revoke the migrator role
  """
  login: String!
}

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organizations that had the migrator role revoked for the given user.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection
}

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The user login or Team slug to revoke the migrator role from.
  """
  actor: String!

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  actorType: ActorType!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Whether vulnerability alerts are enabled for the repository.
  """
  hasVulnerabilityAlertsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of RevokeMigratorRole
"""
type RevokeMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  homepageUrl: URI

  """
  The Node ID of the Repository object
  """
  id: ID!

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Possible roles a user may have in relation to an organization.
"""
enum RoleInOrganization {
  """
  A user who is a direct member of the organization.
  """
  DIRECT_MEMBER

  """
  A user with full administrative access to the organization.
  """
  OWNER

  """
  A user who is unaffiliated with the organization.
  """
  UNAFFILIATED
}

"""
The level of enforcement for a rule or ruleset.
"""
enum RuleEnforcement {
  """
  Rules will be enforced
  """
  ACTIVE

  """
  Do not evaluate or enforce rules
  """
  DISABLED

  """
  Allow admins to test rules before enforcing them. Admins can view insights on
  the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
  """
  EVALUATE
}

"""
Types which can be parameters for `RepositoryRule` objects.
"""
union RuleParameters =
    BranchNamePatternParameters
  | CommitAuthorEmailPatternParameters
  | CommitMessagePatternParameters
  | CommitterEmailPatternParameters
  | PullRequestParameters
  | RequiredDeploymentsParameters
  | RequiredStatusChecksParameters
  | TagNamePatternParameters
  | UpdateParameters
  | WorkflowsParameters

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  Parameters used for the `branch_name_pattern` rule type
  """
  branchNamePattern: BranchNamePatternParametersInput

  """
  Parameters used for the `commit_author_email_pattern` rule type
  """
  commitAuthorEmailPattern: CommitAuthorEmailPatternParametersInput

  """
  Parameters used for the `commit_message_pattern` rule type
  """
  commitMessagePattern: CommitMessagePatternParametersInput

  """
  Parameters used for the `committer_email_pattern` rule type
  """
  committerEmailPattern: CommitterEmailPatternParametersInput

  """
  Parameters used for the `pull_request` rule type
  """
  pullRequest: PullRequestParametersInput

  """
  Parameters used for the `required_deployments` rule type
  """
  requiredDeployments: RequiredDeploymentsParametersInput

  """
  Parameters used for the `required_status_checks` rule type
  """
  requiredStatusChecks: RequiredStatusChecksParametersInput

  """
  Parameters used for the `tag_name_pattern` rule type
  """
  tagNamePattern: TagNamePatternParametersInput

  """
  Parameters used for the `update` rule type
  """
  update: UpdateParametersInput

  """
  Parameters used for the `workflows` rule type
  """
  workflows: WorkflowsParametersInput
}

"""
Types which can have `RepositoryRule` objects.
"""
union RuleSource = Organization | Repository

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum SamlDigestAlgorithm {
  """
  SHA1
  """
  SHA1

  """
  SHA256
  """
  SHA256

  """
  SHA384
  """
  SHA384

  """
  SHA512
  """
  SHA512
}

"""
The possible signature algorithms used to sign SAML requests for a Identity Provider.
"""
enum SamlSignatureAlgorithm {
  """
  RSA-SHA1
  """
  RSA_SHA1

  """
  RSA-SHA256
  """
  RSA_SHA256

  """
  RSA-SHA384
  """
  RSA_SHA384

  """
  RSA-SHA512
  """
  RSA_SHA512
}

"""
A Saved Reply is text a user can use to reply quickly.
"""
type SavedReply implements Node {
  """
  The body of the saved reply.
  """
  body: String!

  """
  The saved reply body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the SavedReply object
  """
  id: ID!

  """
  The title of the saved reply.
  """
  title: String!

  """
  The user that saved this reply.
  """
  user: Actor
}

"""
The connection type for SavedReply.
"""
type SavedReplyConnection {
  """
  A list of edges.
  """
  edges: [SavedReplyEdge]

  """
  A list of nodes.
  """
  nodes: [SavedReply]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  How the default commit message will be generated when merging a pull request.
  """
  mergeCommitMessage: MergeCommitMessage!

  """
  How the default commit title will be generated when merging a pull request.
  """
  mergeCommitTitle: MergeCommitTitle!

  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    branch: String
  ): MergeQueue

  """
  Returns a single milestone from the current repository by number.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SavedReply
}

"""
Ordering options for saved reply connections.
"""
input SavedReplyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order saved replies by.
  """
  field: SavedReplyOrderField!
}

"""
Properties by which saved reply connections can be ordered.
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  Order saved reply by when they were updated.
  """
  UPDATED_AT
}

"""
The results of a search.
"""
union SearchResultItem = App | Discussion | Issue | MarketplaceListing | Organization | PullRequest | Repository | User

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
type SearchResultItemConnection {
  """
  The total number of pieces of code that matched the search query. Regardless
  of the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  codeCount: Int!

  """
  The total number of discussions that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  discussionCount: Int!

  """
  A list of edges.
  """
  edges: [SearchResultItemEdge]

  """
  The total number of issues that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  issueCount: Int!

  """
  A list of nodes.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the PushAllowance object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union PushAllowanceActor = App | Team | User

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of repositories that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  repositoryCount: Int!

  """
  The total number of users that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  userCount: Int!

  """
  The total number of wiki pages that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  wikiCount: Int!
}

"""
An edge in a connection.
"""
type SearchResultItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SearchResultItem

  """
  Text matches on the result found.
  """
  textMatches: [TextMatch]
}

"""
Represents the individual results of a search.
"""
enum SearchType {
  """
  Returns matching discussions in repositories.
  """
  DISCUSSION

  """
  Returns results matching issues in repositories.
  """
  ISSUE

  """
  Returns results matching repositories.
  """
  REPOSITORY

  """
  Returns results matching users and organizations on GitHub.
  """
  USER
}

"""
A GitHub Security Advisory
"""
type SecurityAdvisory implements Node {
  """
  Find a project by number.
  """
  cvss: CVSS!

  """
  CWEs associated with this Advisory
  """
  cwes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CWEConnection!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The HTTP path listing organization's projects
  """
  publishedAt: DateTime!

  """
  A list of references for this advisory
  """
  references: [SecurityAdvisoryReference!]!

  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  search(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    query: String!

    """
    The types of search items to search within.
    """
    type: SearchType!
  ): SearchResultItemConnection!

  """
  A short plaintext summary of the advisory
  """
  summary: String!

  """
  When the advisory was last updated
  """
  updatedAt: DateTime!

  """
  Vulnerabilities associated with this Advisory
  """
  vulnerabilities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the returned topics.
    """
    orderBy: SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}

    """
    A package name to filter vulnerabilities by.
    """
    package: String

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The HTTP path listing the repository's projects
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible ecosystems of a security vulnerability's package.
"""
enum SecurityAdvisoryEcosystem {
  """
  GitHub Actions
  """
  ACTIONS

  """
  PHP packages hosted at packagist.org
  """
  COMPOSER

  """
  Erlang/Elixir packages hosted at hex.pm
  """
  ERLANG

  """
  Go modules
  """
  databaseId: Int

  """
  The Node ID of the Reactable object
  """
  id: ID!

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  Dart packages hosted at pub.dev
  """
  PUB

  """
  Ruby gems hosted at RubyGems.org
  """
  RUBYGEMS

  """
  Rust crates
  """
  RUST

  """
  Swift packages
  """
  SWIFT
}

"""
An edge in a connection.
"""
type SecurityAdvisoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityAdvisory
}

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  The identifier type, e.g. GHSA, CVE
  """
  type: String!

  """
  The identifier
  """
  databaseId: Int

  """
  The Node ID of the Reaction object
  """
  id: ID!

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter {
  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Identifier formats available for advisories.
"""
enum SecurityAdvisoryIdentifierType {
  """
  Common Vulnerabilities and Exposures Identifier.
  """
  CVE

  """
  GitHub Security Advisory ID.
  """
  GHSA
}

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

"""
Properties by which security advisory connections can be ordered.
"""
enum SecurityAdvisoryOrderField {
  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Order advisories by update time
  """
  UPDATED_AT
}

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
  """
  ecosystem: SecurityAdvisoryEcosystem!

  """
  The package name
  """
  name: String!
}

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  High.
  """
  HIGH

  """
  Low.
  """
  LOW

  """
  Moderate.
  """
  MODERATE
}

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
The connection type for SecurityVulnerability.
"""
type SecurityVulnerabilityConnection {
  """
  A list of edges.
  """
  edges: [SecurityVulnerabilityEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityVulnerability]

  """
  Returns a single ruleset from the current repository by ID.
  """
  ruleset(
    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Ordering options for security vulnerability connections
"""
input SecurityVulnerabilityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security vulnerabilities by.
  """
  field: SecurityVulnerabilityOrderField!
}

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  """
  Order vulnerability by update time
  """
  UPDATED_AT
}

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    orderBy: TeamOrder

  """
  The ID of the enterprise on which to set an identity provider.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: String!

  """
  The Issuer Entity ID for the SAML identity provider
  """
  issuer: String

  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: SamlSignatureAlgorithm!

  """
  The URL endpoint for the identity provider's SAML SSO.
  """
  ssoUrl: URI!
}

"""
Autogenerated return type of SetEnterpriseIdentityProvider
"""
type SetEnterpriseIdentityProviderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The identity provider for the enterprise.
  """
  createdAt: DateTime!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  id: ID!

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the organization to set a limit for.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
type SetOrganizationInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization that the interaction limit was set for.
  """
  organization: Organization
}

"""
Autogenerated input type of SetRepositoryInteractionLimit
"""
input SetRepositoryInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  branchProtectionRule: BranchProtectionRule

  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    The head ref to compare against.
    """
    headRef: String!
  ): Comparison

  """
  The Node ID of the Ref object
  """
  id: ID!

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """
    The number for the vulnerability alert to be returned.
    """
    number: Int!
  ): RepositoryVulnerabilityAlert

  """
  A list of vulnerability alerts that are on this repository.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user that the interaction limit was set for.
  """
  user: User
}

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Ways in which lists of git refs can be ordered upon return.
"""
type SmimeSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  True if the signature is valid and verified by GitHub.
  """
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """
  ASCII-armored signature header from object.
  """
  signature: String!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Whether contributors are required to sign off on web-based commits in this repository.
  """
  webCommitSignoffRequired: Boolean!
}

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Name of the social media account as it appears on the profile.
  """
  displayName: String!

  """
  Software or company that hosts the social media account.
  """
  provider: SocialAccountProvider!

  """
  URL of the social media account.
  """
  url: URI!
}

"""
The connection type for SocialAccount.
"""
type SocialAccountConnection {
  """
  A list of edges.
  """
  edges: [SocialAccountEdge]

  """
  A list of nodes.
  """
  nodes: [SocialAccount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Branch protection rules that are enforced on the viewer.
"""
type SocialAccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SocialAccount
}

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
enum SocialAccountProvider {
  """
  Social media and networking website.
  """
  FACEBOOK

  """
  Catch-all for social media providers that do not yet have specific handling.
  """
  GENERIC

  """
  Fork of Mastodon with a greater focus on local posting.
  """
  HOMETOWN

  """
  Social media website with a focus on photo and video sharing.
  """
  INSTAGRAM

  """
  Professional networking website.
  """
  LINKEDIN

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

  """
  JavaScript package registry.
  """
  NPM

  """
  Social news aggregation and discussion website.
  """
  REDDIT

  """
  Live-streaming service.
  """
  TWITCH

  """
  Microblogging website.
  """
  TWITTER

  """
  Online video platform.
  """
  YOUTUBE
}

"""
Entities that can sponsor others via GitHub Sponsors
"""
union Sponsor = Organization | User

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The amount in cents.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReferencedEvent object
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  invitationType: OrganizationInvitationType!

  """
  The user who was invited to the organization.
  """
  invitee: User

  """
  The user who created the invitation.
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

  """
  The sponsor's GitHub account.
  """
  sponsor: Sponsorable!

  """
  The maintainer's GitHub account.
  """
  sponsorable: Sponsorable!
}

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  A list of edges.
  """
  edges: [SponsorAndLifetimeValueEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorAndLifetimeValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorAndLifetimeValue
}

"""
Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
"""
input SponsorAndLifetimeValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order results by.
  """
  field: SponsorAndLifetimeValueOrderField!
}

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  LIFETIME_VALUE

  """
  Order results by the sponsor's login (username).
  """
  SPONSOR_LOGIN

  """
  Order results by the sponsor's relevance to the viewer.
  """
  SPONSOR_RELEVANCE
}

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  A list of edges.
  """
  edges: [SponsorEdge]

  """
  A list of nodes.
  """
  nodes: [Sponsor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type SponsorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The total size in kilobytes of all repositories in the connection. Value will
  never be larger than max 32-bit signed integer.
  """
  node: Sponsor
}

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
input SponsorOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsor entities by.
  """
  field: SponsorOrderField!
}

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN

  """
  Order sponsors by their relevance to the viewer.
  """
  RELEVANCE
}

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
union OrganizationOrUser = Organization | User

"""
Ordering options for organization connections.
"""
interface Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  descriptionHTML: HTML

  """
  The Node ID of the Release object
  """
  id: ID!

  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  hasSponsorsListing: Boolean!

  """
  Whether the given account is sponsoring this user/organization.
  """
  isSponsoredBy(
    """
    The target account's login.
    """
    accountLogin: String!
  ): Boolean!

  """
  True if the viewer is sponsored by this user/organization.
  """
  isSponsoringViewer: Boolean!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Information for an uploaded package.
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A name to filter the assets by.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!
}

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

"""
Parameters to be used for the repository_id condition
"""
type RepositoryIdConditionTarget {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
Parameters to be used for the repository_id condition
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

  """
  MD5 hash of the file.
  """
  md5: String

  """
  Name of the file.
  """
  name: String!

  """
  The package version this file belongs to.
  """
  packageVersion: PackageVersion

  """
  SHA1 hash of the file.
  """
  sha1: String

  """
  SHA256 hash of the file.
  """
  sha256: String

  """
  Size of the file in bytes.
  """
  size: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
A subset of repository info.
"""
interface RepositoryInfo {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  downloadUrl: URI!

  """
  The Node ID of the ReleaseAsset object
  """
  id: ID!

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  hasIssuesEnabled: Boolean!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  hasWikiEnabled: Boolean!

"""
Represents an owner of a package.
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    repositoryId: ID
  ): PackageConnection!
}

"""
Represents a object that contains package activity statistics such as downloads.
"""
type PackageStatistics {
  """
  Number of times the package was downloaded since it was created.
  """
  downloadsTotalCount: Int!
}

"""
A version tag contains the mapping between a tag name and a version.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

  """
  Identifies the tag name of the version.
  """
  name: String!

  """
  Version that the tag is associated with.
  """
  version: PackageVersion
}

"""
The possible types of a package.
"""
enum PackageType {
  """
  A debian package.
  """
  DEBIAN

  """
  A docker image.
  """
  DOCKER
    @deprecated(
      reason: "DOCKER will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2021-06-21 UTC."
    )

  """
  A maven package.
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

  """
  An npm package.
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  A nuget package.
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  A python package.
  """
  PYPI

  """
  The sponsorships where this user or organization is the funder.
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

  """
  The package associated with this version.
  """
  package: Package

  """
  The platform this version was built for.
  """
  platform: String

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  Identifies the date and time when the repository was last pushed to.
  """
  viewerIsSponsoring: Boolean!
}

"""
Entities that can be sponsored via GitHub Sponsors
"""
union SponsorableItem = Organization | User

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  A list of edges.
  """
  edges: [SponsorableItemEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorableItem]

  """
  GL

  """
  Gambia
  """
  GM

"""
Autogenerated input type of StartOrganizationMigration
"""
type SponsorableItemEdge {
  """
  Guinea
  """
  GN

  """
  Guadeloupe
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  id: ID!

  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

  """
  The user or organization that is being sponsored, the maintainer.
  """
  sponsorable: Sponsorable!

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise from which the user should be removed.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The source of this permission.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  The user that was removed from the enterprise.
  """
  user: User

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
input RemoveEnterpriseOrganizationInput {
  """
  The associated sponsorship tier.
  """
  sponsorsTier: SponsorsTier

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  The activity was cancelling a sponsorship.
  """
  email: String

  """
  The Node ID of the RepositoryInvitation object
  """
  id: ID!

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

  """
  The activity was scheduling a downgrade or cancellation.
  """
  PENDING_CHANGE

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  TIER_CHANGE
}

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  Israel
  """
  edges: [SponsorsActivityEdge]

  """
  Isle of Man
  """
  nodes: [SponsorsActivity]

  """
  India
  """
  IN

  """
  British Indian Ocean Territory
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  Iraq
  """
  IQ

  """
  Iran
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  RENAME

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
enum SponsorsCountryOrRegionCode {
  """
  The migration flag to continue on error.
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  id: ID!

  """
  Antigua and Barbuda
  """
  AG

  """
  The migration source.
  """
  AI

  """
  Albania
  """
  AL

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  AM

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

  """
  The Node ID of the RemovedFromMergeQueueEvent object
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The reason this pull request was removed from the queue.
  """
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
type RemovedFromProjectEvent implements Node {
  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  databaseId: Int

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  id: ID!

  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland
  """
  AX

  """
  Azerbaijan
  """
  currentTitle: String!

  """
  The Node ID of the RenamedTitleEvent object
  """
  id: ID!

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was reopened.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

"""
Autogenerated input type of ReopenIssue
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
interface RepositoryNode {
  """
  Belgium
  """
  BE

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  BH

  """
  Burundi
  """
  BI

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

  """
  Bermuda
  """
  BM

  """
  Brunei Darussalam
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The Node ID of the RepositoryOwner object
  """
  id: ID!

  """
  Bolivia
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

  """
  Bahamas
  """
  BS

  """
  Bhutan
  """
  BT

  """
  Bouvet Island
  """
  BV

  """
  Botswana
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

  """
  Belize
  """
  BZ

  """
  Canada
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Congo (Kinshasa)
  """
  CD

  """
  Central African Republic
  """
  CF

  """
  Congo (Brazzaville)
  """
  CG

  """
  Switzerland
  """
  CH

  """
  Côte d'Ivoire
  """
  CI

  """
  Cook Islands
  """
  CK

  """
  Chile
  """
  CL

  """
  Cameroon
  """
  CM

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddMemberAuditEntry object
  """
  id: ID!

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  LOCK_BRANCH

  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  id: ID!

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REQUIRED_SIGNATURES

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Secret scanning
  """
  SECRET_SCANNING

  """
  Tag
  """
  TAG

  """
  Tag name pattern
  """
  TAG_NAME_PATTERN

  """
  Only allow users with bypass permission to update matching refs.
  """
  UPDATE

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  WORKFLOWS

  """
  Workflow files cannot be modified.
  """
  WORKFLOW_UPDATES
}

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetBypassActorConnection

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The type of rule.
    """
    type: RepositoryRuleType
  ): RepositoryRuleConnection

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  repositoryRoleName: String

  """
  Identifies the ruleset associated with the allowed actor
  """
  repositoryRuleset: RepositoryRuleset
}

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  ALWAYS

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRulesetBypassActor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  actorId: ID

  """
  The bypass mode for this actor.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode!

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetEdge]

  """
  A list of nodes.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRuleset
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
New projects that manage issues, pull requests and drafts using tables and boards.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  Costa Rica
  """
  closed: Boolean!

  """
  Cape Verde
  """
  CV

  """
  Curaçao
  """
  createdAt: DateTime!

  """
  Christmas Island
  """
  creator: Actor

  """
  Cyprus
  """
  databaseId: Int

  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

  """
  Djibouti
  """
  DJ

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  Dominica
  """
  number: Int!

  """
  Dominican Republic
  """
  owner: ProjectV2Owner!

  """
  Algeria
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

  """
  Ecuador
  """
  EC

  """
  Estonia
  """
  EE

  """
  Egypt
  """
  EG

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

  """
  Eritrea
  """
  resourcePath: URI!

  """
  Spain
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  Ethiopia
  """
  title: String!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  updatedAt: DateTime!

  """
  Finland
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

"""
Autogenerated input type of UnsubscribeFromNotifications
"""
input UnsubscribeFromNotificationsInput
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  Fiji
  """
  FJ

  """
  Falkland Islands
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  id: ID!

  """
  Micronesia
  """
  FM

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  France
  """
  edges: [ProjectV2Edge]

  """
  Gabon
  """
  nodes: [ProjectV2]

  """
  United Kingdom
  """
  GB

  """
  Grenada
  """
  GD

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  node: ProjectV2
}

"""
A field inside a project.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  Guernsey
  """
  createdAt: DateTime!

  """
  Ghana
  """
  dataType: ProjectV2FieldType!

  """
  Gibraltar
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  Greenland
  """
  name: String!

  """
  Gambia
  """
  project: ProjectV2!

  """
  Guadeloupe
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  Equatorial Guinea
  """
  createdAt: DateTime!

  """
  Greece
  """
  dataType: ProjectV2FieldType!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  South Georgia and South Sandwich Islands
  """
  name: String!

  """
  Guatemala
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  Guinea-Bissau
  """
  edges: [ProjectV2FieldEdge]

  """
  Guyana
  """
  nodes: [ProjectV2Field]

  """
  Hong Kong
  """
  HK

  """
  Heard and McDonald Islands
  """
  HM

"""
An edge in a connection.
"""
type ProjectV2FieldEdge {
  """
  Honduras
  """
  HN

  """
  Croatia
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  Haiti
  """
  ASSIGNEES

  """
  Indonesia
  """
  DATE

  """
  When was the alert auto-dismissed?
  """
  ITERATION

  """
  When was the alert created?
  """
  LABELS

  """
  Israel
  """
  LINKED_PULL_REQUESTS

  """
  Isle of Man
  """
  MILESTONE

  """
  Comment explaining the reason the alert was dismissed
  """
  NUMBER

  """
  The reason the alert was dismissed
  """
  REPOSITORY

  """
  British Indian Ocean Territory
  """
  REVIEWERS

  """
  Iraq
  """
  SINGLE_SELECT

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  TEXT

  """
  When was the alert fixed?
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  Italy
  """
  content: ProjectV2ItemContent

  """
  Jersey
  """
  createdAt: DateTime!

  """
  Jamaica
  """
  creator: Actor

  """
  Jordan
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  JP

  """
  Kenya
  """
  KE

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

  """
  Cambodia
  """
  isArchived: Boolean!

  """
  Kiribati
  """
  project: ProjectV2!

  """
  Saint Kitts and Nevis
  """
  type: ProjectV2ItemType!

  """
  Korea, South
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  Kuwait
  """
  edges: [ProjectV2ItemEdge]

  """
  Cayman Islands
  """
  nodes: [ProjectV2Item]

  """
  Kazakhstan
  """
  KZ

  """
  Laos
  """
  LA

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
Autogenerated return type of UnarchiveProjectV2Item
"""
type ProjectV2ItemEdge {
  """
  An alert that has been automatically closed by Dependabot.
  """
  AUTO_DISMISSED

  """
  An alert that has been manually closed by a user.
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  createdAt: DateTime!

  """
  Liechtenstein
  """
  creator: Actor

  """
  Sri Lanka
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  Liberia
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type RequiredStatusCheckDescription {
  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

"""
Autogenerated input type of RerequestCheckSuite
"""
input RerequestCheckSuiteInput {
  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The actor who created the item.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ItemFieldValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

  """
  The collaborator can view the project
  """
  READER

"""
Autogenerated return type of RevokeMigratorRole
"""
type RevokeMigratorRolePayload {
  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  A user with full administrative access to the organization.
  """
  OWNER

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

"""
The level of enforcement for a rule or ruleset.
"""
enum RuleEnforcement {
  """
  Rules will be enforced
  """
  ACTIVE

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

"""
The possible signature algorithms used to sign SAML requests for a Identity Provider.
"""
enum SamlSignatureAlgorithm {
  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  The project view's name.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  When the advisory was last updated
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  Erlang/Elixir packages hosted at hex.pm
  """
  edges: [ProjectV2ViewEdge]

  """
  Go modules
  """
  nodes: [ProjectV2View]

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

"""
An edge in a connection.
"""
type ProjectV2ViewEdge {
  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

  """
  Python packages hosted at PyPI.org
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  The identifier type, e.g. GHSA, CVE
  """
  type: String!

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder {
  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  name: String!
}

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  identifier: String!
}

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  A publicly accessible reference
  """
  url: URI!
}

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  updatedAt: DateTime!

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  edges: [SecurityVulnerabilityEdge]

  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  totalCount: Int!
}

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    The slug of the discussion category to be returned.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
type SetOrganizationInteractionLimitPayload {
  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

"""
Autogenerated input type of SetRepositoryInteractionLimit
"""
input SetRepositoryInteractionLimitInput {
  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The ID of the repository to set a limit for.
  """
  forks(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput {
  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

"""
Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
"""
input SponsorAndLifetimeValueOrder {
  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    branch: String
  ): MergeQueue

  """
  Returns a single milestone from the current repository by number.
  """
  edges: [SponsorEdge]

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  Germany
  """
  DE

  """
  Djibouti
  """
  DJ

"""
Autogenerated return type of UnlinkProjectV2FromRepository
"""
type UnlinkProjectV2FromRepositoryPayload {
  """
  Denmark
  """
  DK

  """
  Dominica
  """
  DM

"""
A record that can be featured on a GitHub Sponsors profile.
"""
union SponsorsListingFeatureableItem = Repository | User

"""
A record that is promoted on a GitHub Sponsors profile.
"""
type SponsorsListingFeaturedItem implements Node {
  """
  Dominican Republic
  """
  DO

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  DZ

  """
  Ecuador
  """
  EC

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  EE

  """
  Egypt
  """
  EG

"""
The different kinds of records that can be featured on a GitHub Sponsors profile page.
"""
enum SponsorsListingFeaturedItemFeatureableType {
  """
  Western Sahara
  """
  EH

  """
  Eritrea
  """
  ER

"""
Autogenerated input type of UnlinkProjectV2FromTeam
"""
input UnlinkProjectV2FromTeamInput {
  """
  Spain
  """
  ES

  """
  Ethiopia
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Finland
  """
  FI

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
enum TeamNotificationSetting {
  """
  Fiji
  """
  FJ

  """
  Falkland Islands
  """
  FK

  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  FR

  """
  Gabon
  """
  GA

  """
  United Kingdom
  """
  GB

  """
  Grenada
  """
  GD

"""
Autogenerated return type of StartOrganizationMigration
"""
type StartOrganizationMigrationPayload {
  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  GG

  """
  Ghana
  """
  GH

  """
  Gibraltar
  """
  GI

"""
Represents an 'unsubscribed' event on a given `Subscribable`.
"""
type UpdateRepositoryWebCommitSignoffSettingPayload {
  """
  Greenland
  """
  GL

  """
  Gambia
  """
  GM

  """
  Guinea
  """
  GN

  """
  Guadeloupe
  """
  email: String

  """
  The Node ID of the RepositoryInvitation object
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  Equatorial Guinea
  """
  GQ

  """
  Greece
  """
  GR

  """
  South Georgia and South Sandwich Islands
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  Guatemala
  """
  GT

  """
  Guam
  """
  GU

  """
  Guinea-Bissau
  """
  GW

  """
  Guyana
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

  """
  Hong Kong
  """
  HK

  """
  Heard and McDonald Islands
  """
  HM

  """
  Honduras
  """
  HN

  """
  Croatia
  """
  HR

  """
  Haiti
  """
  HT

  """
  Hungary
  """
  HU

  """
  Indonesia
  """
  ID

  """
  Ireland
  """
  IE

  """
  Israel
  """
  IL

  """
  Isle of Man
  """
  IM

  """
  India
  """
  RENAME

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type RepositoryMigration implements Migration & Node {
  """
  The migration flag to continue on error.
  """
  IO

  """
  Iraq
  """
  IQ

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  id: ID!

  """
  Iceland
  """
  IS

  """
  The migration source.
  """
  IT

  """
  Jersey
  """
  JE

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

"""
Autogenerated input type of UnlinkProjectV2FromRepository
"""
type StatusCheckRollupContextConnection {
  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

  """
  Japan
  """
  JP

  """
  Kenya
  """
  KE

  """
  Kyrgyzstan
  """
  KG

  """
  Cambodia
  """
  KH

  """
  Kiribati
  """
  KI

  """
  Comoros
  """
  KM

  """
  Saint Kitts and Nevis
  """
  KN

  """
  Korea, South
  """
  KR

  """
  Kuwait
  """
  KW

  """
  Cayman Islands
  """
  KY

  """
  Kazakhstan
  """
  KZ

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
interface RepositoryNode {
  """
  Laos
  """
  LA

"""
The privacy of a sponsorship
"""
enum SponsorshipPrivacy {
  """
  Lebanon
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Saint Lucia
  """
  LC

"""
The possible default commit messages for squash merges.
"""
enum SquashMergeCommitMessage {
  """
  Liechtenstein
  """
  LI

  """
  Sri Lanka
  """
  LK

  """
  Liberia
  """
  LR

  """
  Lesotho
  """
  LS

  """
  Lithuania
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Luxembourg
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

  """
  The Node ID of the RepositoryOwner object
  """
  id: ID!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  LV

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Morocco
  """
  MA

  """
  Monaco
  """
  MC

  """
  Moldova
  """
  MD

  """
  Montenegro
  """
  ME

  """
  Saint Martin (French part)
  """
  MF

  """
  Madagascar
  """
  MG

  """
  Marshall Islands
  """
  MH

  """
  Macedonia
  """
  MK

  """
  Mali
  """
  createdAt: PreciseDateTime!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  id: ID!

  """
  Myanmar
  """
  PUBLIC
}

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Configuration for the repository_name condition
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  COMMITTER_EMAIL_PATTERN

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  LOCK_BRANCH

  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REQUIRED_SIGNATURES

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Secret scanning
  """
  SECRET_SCANNING

  """
  Tag
  """
  TAG

  """
  Tag name pattern
  """
  TAG_NAME_PATTERN

  """
  Only allow users with bypass permission to update matching refs.
  """
  UPDATE

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  WORKFLOWS

  """
  Workflow files cannot be modified.
  """
  WORKFLOW_UPDATES
}

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetBypassActorConnection

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The enforcement level of this ruleset
  """
  enforcement: RuleEnforcement!

  """
  The Node ID of the RepositoryRuleset object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The type of rule.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

  """
  Find a project by number.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  The HTTP path listing organization's projects
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRulesetBypassActor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PullRequestReviewThread
}

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type PullRequestRevisionMarker {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The item at the end of the edge.
  """
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  actorId: ID

  """
  The bypass mode for this actor.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode!

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRuleset]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRuleset
}

"""
The targets supported for rulesets
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  id: ID!

  """
  Mongolia
  """
  MN

"""
The possible commit status states.
"""
interface Starrable {
  """
  Macau
  """
  MO

  """
  Northern Mariana Islands
  """
  MP

  """
  Martinique
  """
  MQ

  """
  Mauritania
  """
  MR

  """
  Montserrat
  """
  MS

  """
  Malta
  """
  MT

  """
  Mauritius
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

  """
  Maldives
  """
  MV

  """
  Malawi
  """
  MW

  """
  Mexico
  """
  MX

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  Mozambique
  """
  MZ

  """
  Namibia
  """
  NA

  """
  New Caledonia
  """
  NC

  """
  Niger
  """
  NE

  """
  Norfolk Island
  """
  NF

  """
  Nigeria
  """
  NG

  """
  Nicaragua
  """
  NI

  """
  Netherlands
  """
  NL

  """
  Norway
  """
  NO

  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  id: ID!

  """
  Niue
  """
  NU

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Peru
  """
  PE

  """
  French Polynesia
  """
  PF

  """
  Papua New Guinea
  """
  PG

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Poland
  """
  PL

  """
  Saint Pierre and Miquelon
  """
  PM

  """
  Pitcairn
  """
  PN

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Reunion
  """
  RE

  """
  Romania
  """
  enterpriseUrl: URI

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

  """
  Seychelles
  """
  SC

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Comment explaining the reason the alert was dismissed
  """
  dismissComment: String

  """
  The reason the alert was dismissed
  """
  SK

  """
  Sierra Leone
  """
  SL

  """
  San Marino
  """
  SM

    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    orderBy: TeamOrder

"""
Represents the rollup for both the check runs and status for a commit.
"""
interface Subscribable {
  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  id: ID!

  """
  Suriname
  """
  SR

  """
  South Sudan
  """
  SS

  """
  Sao Tome and Principe
  """
  ST

  """
  El Salvador
  """
  SV

  """
  Sint Maarten (Dutch part)
  """
  SX

"""
A Git push.
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  TC

  """
  Chad
  """
  TD

  """
  French Southern Lands
  """
  TF

  """
  Togo
  """
  TG

  """
  Thailand
  """
  TH

  """
  Tajikistan
  """
  TJ

  """
  Tokelau
  """
  TK

  """
  Timor-Leste
  """
  TL

  """
  Turkmenistan
  """
  TM

  """
  Tunisia
  """
  TN

  """
  An alert that has been automatically closed by Dependabot.
  """
  AUTO_DISMISSED

  """
  An alert that has been manually closed by a user.
  """
  TO

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  createdAt: PreciseDateTime!

"""
An audit entry in an organization audit log.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

"""
Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
"""
input UpdatePatreonSponsorabilityInput {
  """
  Tuvalu
  """
  TV

  """
  Taiwan
  """
  TW

  """
  Tanzania
  """
  TZ

  """
  Ukraine
  """
  union: Boolean = false

  """
  Uganda
  """
  UG

"""
The possible commit status states.
"""
enum StatusState {
  """
  United States Minor Outlying Islands
  """
  UM

  """
  United States of America
  """
  US

  """
  Uruguay
  """
  UY

  """
  Uzbekistan
  """
  UZ

  """
  Vatican City
  """
  VA

  """
  Saint Vincent and the Grenadines
  """
  VC

  """
  Venezuela
  """
  VE

  """
  Virgin Islands, British
  """
  VG

  """
  Virgin Islands, U.S.
  """
  WAITING
}

"""
Types that can be requested reviewers.
"""
union RequestedReviewer = Bot | Mannequin | Team | User

  """
  Vietnam
  """
  VN

  """
  Vanuatu
  """
  VU

  """
  Wallis and Futuna Islands
  """
  WF

  """
  Samoa
  """
  WS

  """
  Yemen
  """
  YE

  """
  Mayotte
  """
  YT

  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  A list of users that can be assigned to issues in this repository.
  """
  assignableUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filters users with query on user name and login.
    """
    query: String
  ): UserConnection!

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type RequiredStatusCheckDescription {
  """
  Zambia
  """
  ZM

  """
  Zimbabwe
  """
  ZW
}

"""
Parameters to be used for the tag_name_pattern rule
"""
input TagNamePatternParametersInput {
  """
  How this rule will appear to users.
  """
  collaborators(
    """
    Collaborators affiliation level with a repository.
    """
    affiliation: CollaboratorAffiliation

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The login of one specific collaborator.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    query: String
  ): RepositoryCollaboratorConnection

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfiguration!]!

  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

  """
  Identifies the date and time when the object was created.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
input RequiredStatusChecksParametersInput {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfigurationInput!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Autogenerated input type of RerequestCheckSuite
"""
input RerequestCheckSuiteInput {
  """
  The name of the submodule in .gitmodules (Base64-encoded)
  """
  nameRaw: Base64String!

  """
  The path in the superproject that this submodule is located in
  """
  operator: String!

  """
  The path in the superproject that this submodule is located in (Base64-encoded)
  """
  pathRaw: Base64String!

  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  pattern: String!
}

"""
A team of users in an organization.
"""
enum ThreadSubscriptionState {
  """
  The subscription status is currently disabled.
  """
  authorAssociation: CommentAuthorAssociation!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the thread to resolve
  """
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
type ResolveReviewThreadPayload {
  """
  A discussion category by slug.
  """
  discussionCategory(
    """
    The slug of the discussion category to be returned.
    """
    slug: String!
  ): DiscussionCategory

  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  discussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Only show answered or unanswered discussions
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Only include discussions that belong to the category with this ID.
    """
    categoryId: ID = null

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    orderBy: DiscussionOrder = {field: UPDATED_AT, direction: DESC}

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  The thread to resolve.
  """
  thread: PullRequestReviewThread
}

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

    """
    Returns the last _n_ elements from the list.
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the published tier to retire.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was retired.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  The description of the revert pull request.
  """
  body: String

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

  """
  Indicates whether the revert pull request should be a draft.
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The title of the revert pull request.
  """
  title: String
}

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The pull request that was reverted.
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  revertPullRequest: PullRequest
}

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The actor that can dismiss.
  """
  actor: ReviewDismissalAllowanceActor

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Whether vulnerability alerts are enabled for the repository.
  """
  hasVulnerabilityAlertsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the ReviewDismissalAllowance object
  """
  homepageUrl: URI

  """
  The Node ID of the Repository object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union ReviewDismissalAllowanceActor = App | Team | User

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  A list of edges.
  """
  edges: [ReviewDismissalAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewDismissalAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewDismissalAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewDismissalAllowance
}

"""
Represents a 'review_dismissed' event on a given issue or pull request.
"""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Identifies the optional message associated with the 'review_dismissed' event.
  """
  dismissalMessage: String

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
enum OrganizationInvitationType {
  """
  Identifies the optional message associated with the event, rendered to HTML.
  """
  dismissalMessageHTML: String

  """
  The Node ID of the ReviewDismissedEvent object
  """
  id: ID!

  """
  Identifies the previous state of the review with the 'review_dismissed' event.
  """
  previousReviewState: PullRequestReviewState!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the commit which caused the review to become stale.
  """
  pullRequestCommit: PullRequestCommit

  """
  The HTTP path for this review dismissed event.
  """
  resourcePath: URI!

  """
  Identifies the review associated with the 'review_dismissed' event.
  """
  review: PullRequestReview

  """
  The HTTP URL for this review dismissed event.
  """
  url: URI!
}

"""
A request for a user to review a pull request.
"""
type ReviewRequest implements Node {
  """
  Whether this request was created for a code owner
  """
  asCodeOwner: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Reactable object
  """
  id: ID!

  """
  The Node ID of the ReviewRequest object
  """
  id: ID!

  """
  Identifies the pull request associated with this review request.
  """
  pullRequest: PullRequest!

  """
  The reviewer that is requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
The connection type for ReviewRequest.
"""
type ReviewRequestConnection {
  """
  A list of edges.
  """
  edges: [ReviewRequestEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewRequest]

  """
  How the default commit message will be generated when merging a pull request.
  """
  mergeCommitMessage: MergeCommitMessage!

  """
  How the default commit title will be generated when merging a pull request.
  """
  mergeCommitTitle: MergeCommitTitle!

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
union OrganizationOrUser = Organization | User

  """
  Returns a single milestone from the current repository by number.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewRequest
}

"""
Represents an 'review_request_removed' event on a given pull request.
"""
type ReviewRequestRemovedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestRemovedEvent object
  """
  databaseId: Int

  """
  The Node ID of the Reaction object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review request was removed.
  """
  requestedReviewer: RequestedReviewer
}

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review was requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type ReviewStatusHovercardContext implements HovercardContext {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  Organizations this user is a member of that are relevant
  """
  relevantOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  The total number of organizations this user is in
  """
  reviewDecision: PullRequestReviewDecision
}

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

  """
  Find the latest version for the package.
  """
  latestVersion: PackageVersion

  """
  Identifies the name of the package.
  """
  name: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of the user to revoke the migrator role
  """
  login: String!
}

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organizations that had the migrator role revoked for the given user.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection
}

"""
Autogenerated input type of RevokeMigratorRole
"""
input RevokeMigratorRoleInput {
  """
  The user login or Team slug to revoke the migrator role from.
  """
  actor: String!

  """
  Specifies the type of the actor, can be either USER or TEAM.
  """
  actorType: ActorType!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Finds and returns the Project according to the provided Project number.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Possible roles a user may have in relation to an organization.
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

  """
  MD5 hash of the file.
  """
  md5: String

  """
  A user who is a direct member of the organization.
  """
  DIRECT_MEMBER

  """
  A user with full administrative access to the organization.
  """
  OWNER

  """
  A user who is unaffiliated with the organization.
  """
  UNAFFILIATED
}

"""
The level of enforcement for a rule or ruleset.
"""
enum RuleEnforcement {
  """
  Rules will be enforced
  """
  ACTIVE

  """
  The HTTP path listing the repository's projects
  """
  committerEmailPattern: CommitterEmailPatternParametersInput

  """
  Parameters used for the `pull_request` rule type
  """
  pullRequest: PullRequestParametersInput

  """
  Parameters used for the `required_deployments` rule type
  """
  requiredDeployments: RequiredDeploymentsParametersInput

  """
  Parameters used for the `required_status_checks` rule type
  """
  requiredStatusChecks: RequiredStatusChecksParametersInput

  """
  Parameters used for the `tag_name_pattern` rule type
  """
  tagNamePattern: TagNamePatternParametersInput

  """
  Parameters used for the `update` rule type
  """
  update: UpdateParametersInput

  """
  Parameters used for the `workflows` rule type
  """
  workflows: WorkflowsParametersInput
}

"""
Types which can have `RepositoryRule` objects.
"""
union RuleSource = Organization | Repository

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum SamlDigestAlgorithm {
  """
  SHA1
  """
  createdAt: DateTime!

  """
  The Node ID of the ReadyForReviewEvent object
  """
  id: ID!

  """
  SHA256
  """
  SHA256

  """
  SHA384
  """
  SHA384

  """
  SHA512
  """
  SHA512
}

"""
The possible signature algorithms used to sign SAML requests for a Identity Provider.
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  RSA-SHA1
  """
  RSA_SHA1

  """
  RSA-SHA256
  """
  downloadsTotalCount: Int!
}

"""
A version tag contains the mapping between a tag name and a version.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

  """
  RSA-SHA384
  """
  RSA_SHA384

  """
  RSA-SHA512
  """
  RSA_SHA512
}

"""
A Saved Reply is text a user can use to reply quickly.
"""
type SavedReply implements Node {
  """
  The body of the saved reply.
  """
  branchProtectionRule: BranchProtectionRule

  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    The head ref to compare against.
    """
    headRef: String!
  ): Comparison

  """
  The Node ID of the Ref object
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

  """
  Identifies the date and time when the repository was last pushed to.
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  Identifies the primary key from the database.
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  The Node ID of the SavedReply object
  """
  id: ID!

  """
  The title of the saved reply.
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

  """
  A list of rules from active Repository and Organization rulesets that apply to this ref.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repository rules.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

  """
  The package associated with this version.
  """
  package: Package

  """
  The platform this version was built for.
  """
  platform: String

  """
  Whether or not this version is a pre-release.
  """
  preRelease: Boolean!

  """
  The README of this package version.
  """
  readme: String

  """
  The release associated with this package version.
  """
  release: Release

  """
  Statistics about package activity.
  """
  statistics: PackageVersionStatistics

  """
  The package version summary.
  """
  summary: String

  """
  The object the ref points to. Returns null when object does not exist.
  """
  user: Actor
}

"""
The connection type for SavedReply.
"""
type SavedReplyConnection {
  """
  A list of edges.
  """
  edges: [SavedReplyEdge]

  """
  A list of nodes.
  """
  nodes: [SavedReply]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SavedReply
}

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Ways in which lists of git refs can be ordered upon return.
"""
input SavedReplyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order saved replies by.
  """
  field: SavedReplyOrderField!
}

"""
Properties by which saved reply connections can be ordered.
"""
enum SavedReplyOrderField {
  """
  Order saved reply by when they were updated.
  """
  UPDATED_AT
}

"""
The results of a search.
"""
union SearchResultItem = App | Discussion | Issue | MarketplaceListing | Organization | PullRequest | Repository | User

"""
Branch protection rules that are enforced on the viewer.
"""
type SearchResultItemConnection {
  """
  The total number of pieces of code that matched the search query. Regardless
  of the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  codeCount: Int!

  """
  The total number of discussions that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  discussionCount: Int!

  """
  A list of edges.
  """
  edges: [SearchResultItemEdge]

  """
  The total number of issues that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  issueCount: Int!

  """
  A list of nodes.
  """
  nodes: [SearchResultItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of repositories that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  repositoryCount: Int!

  """
  The total number of users that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  userCount: Int!

  """
  The total number of wiki pages that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  wikiCount: Int!
}

"""
An edge in a connection.
"""
type SearchResultItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SearchResultItem

  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The source of this permission.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReferencedEvent object
  """
  id: ID!

  """
  A list of rulesets for this repository.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The security policy URL.
  """
  textMatches: [TextMatch]
}

"""
Represents the individual results of a search.
"""
enum SearchType {
  """
  Returns matching discussions in repositories.
  """
  DISCUSSION

  """
  Returns results matching issues in repositories.
  """
  ISSUE

  """
  How the default commit message will be generated when squash merging a pull request.
  """
  squashMergeCommitMessage: SquashMergeCommitMessage!

  """
  How the default commit title will be generated when squash merging a pull request.
  """
  squashMergeCommitTitle: SquashMergeCommitTitle!

  """
  Whether a squash merge commit can use the pull request title as default.
  """
  squashPrTitleUsedAsDefault: Boolean!
    @deprecated(
      reason: "`squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC."
    )

  """
  Returns results matching users and organizations on GitHub.
  """
  USER
}

"""
A GitHub Security Advisory
"""
type SecurityAdvisory implements Node {
  """
  The classification of the advisory
  """
  classification: SecurityAdvisoryClassification!

  """
  The CVSS associated with this advisory
  """
  cvss: CVSS!

  """
  CWEs associated with this Advisory
  """
  cwes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CWEConnection!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  This is a long plaintext description of the advisory
  """
  description: String!

  """
  The GitHub Security Advisory ID
  """
  ghsaId: String!

  """
  The Node ID of the SecurityAdvisory object
  """
  id: ID!

  """
  A list of identifiers for this advisory
  """
  identifiers: [SecurityAdvisoryIdentifier!]!

  """
  The permalink for the advisory's dependabot alerts page
  """
  notificationsPermalink: URI

  """
  The organization that originated the advisory
  """
  descriptionHTML: HTML

  """
  The Node ID of the Release object
  """
  id: ID!

  """
  The permalink for the advisory
  """
  permalink: URI

  """
  When the advisory was published
  """
  publishedAt: DateTime!

  """
  A list of references for this advisory
  """
  references: [SecurityAdvisoryReference!]!

  """
  The severity of the advisory
  """
  severity: SecurityAdvisorySeverity!

  """
  A short plaintext summary of the advisory
  """
  summary: String!

  """
  When the advisory was last updated
  """
  updatedAt: DateTime!

  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """
    The number for the vulnerability alert to be returned.
    """
    number: Int!
  ): RepositoryVulnerabilityAlert

  """
  A list of vulnerability alerts that are on this repository.
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

  """
  The repository that the release belongs to.
  """
  repository: Repository!

  """
  The HTTP path for this issue
  """
  resourcePath: URI!

  """
  Whether contributors are required to sign off on web-based commits in this repository.
  """
  webCommitSignoffRequired: Boolean!
}

"""
Classification of the advisory.
"""
enum SecurityAdvisoryClassification {
  """
  Classification of general advisories.
  """
  GENERAL

  """
  Classification of malware advisories.
  """
  MALWARE
}

"""
The connection type for SecurityAdvisory.
"""
type SecurityAdvisoryConnection {
  """
  A list of edges.
  """
  edges: [SecurityAdvisoryEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityAdvisory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible ecosystems of a security vulnerability's package.
"""
enum SecurityAdvisoryEcosystem {
  """
  GitHub Actions
  """
  ACTIONS

  """
  PHP packages hosted at packagist.org
  """
  downloadUrl: URI!

  """
  The Node ID of the ReleaseAsset object
  """
  id: ID!

  """
  Erlang/Elixir packages hosted at hex.pm
  """
  ERLANG

  """
  Go modules
  """
  GO

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

  """
  Python packages hosted at PyPI.org
  """
  PIP

  """
  Dart packages hosted at pub.dev
  """
  PUB

  """
  Ruby gems hosted at RubyGems.org
  """
  RUBYGEMS

  """
  Rust crates
  """
  RUST

  """
  Swift packages
  """
  SWIFT
}

"""
An edge in a connection.
"""
type SecurityAdvisoryEdge {
  """
  A cursor for use in pagination.
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

  """
  The item at the end of the edge.
  """
  node: SecurityAdvisory
}

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  The identifier type, e.g. GHSA, CVE
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

  """
  The identifier
  """
  value: String!
}

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter {
  """
  The identifier type.
  """
  type: SecurityAdvisoryIdentifierType!

  """
  The total size in kilobytes of all repositories in the connection. Value will
  never be larger than max 32-bit signed integer.
  """
  value: String!
}

"""
Identifier formats available for advisories.
"""
enum SecurityAdvisoryIdentifierType {
  """
  Common Vulnerabilities and Exposures Identifier.
  """
  CVE

  """
  GitHub Security Advisory ID.
  """
  GHSA
}

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security advisories by.
  """
  field: SecurityAdvisoryOrderField!
}

"""
Properties by which security advisory connections can be ordered.
"""
enum SecurityAdvisoryOrderField {
  """
  Order advisories by publication time
  """
  PUBLISHED_AT

  """
  Order advisories by update time
  """
  UPDATED_AT
}

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
  """
  ecosystem: SecurityAdvisoryEcosystem!

  """
  The package name
  """
  name: String!
}

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  The package name or version
  """
  identifier: String!
}

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  A publicly accessible reference
  """
  repositoryDiscussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter discussions to only those that have been answered or not. Defaults to
    including both answered and unanswered discussions.
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: CREATED_AT, direction: DESC}

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!
}

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  Critical.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

  """
  High.
  """
  HIGH

  """
  Low.
  """
  LOW

  """
  Moderate.
  """
  MODERATE
}

"""
Parameters to be used for the repository_id condition
"""
type RepositoryIdConditionTarget {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
A subset of repository info.
"""
type SecurityVulnerability {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  advisory: SecurityAdvisory!

  """
  The first version containing a fix for the vulnerability
  """
  firstPatchedVersion: SecurityAdvisoryPackageVersion

  """
  A description of the vulnerable package
  """
  package: SecurityAdvisoryPackage!

  """
  The severity of the vulnerability within this package
  """
  severity: SecurityAdvisorySeverity!

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  updatedAt: DateTime!

  """
  A string that describes the vulnerable package versions.
  This string follows a basic syntax with a few forms.
  + `= 0.2.0` denotes a single vulnerable version.
  + `<= 1.0.8` denotes a version range up to and including the specified version
  + `< 0.1.11` denotes a version range up to, but excluding, the specified version
  + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
  + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
  """
  vulnerableVersionRange: String!
}

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise from which the user should be removed.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the user to remove from the enterprise.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  The user that was removed from the enterprise.
  """
  user: User

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
type SecurityVulnerabilityConnection {
  """
  A list of edges.
  """
  edges: [SecurityVulnerabilityEdge]

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  nodes: [SecurityVulnerability]

  """
  Information to aid in pagination.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SecurityVulnerabilityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityVulnerability
}

"""
Ordering options for security vulnerability connections
"""
input SecurityVulnerabilityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security vulnerabilities by.
  """
  field: SecurityVulnerabilityOrderField!
}

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  """
  Order vulnerability by update time
  """
  UPDATED_AT
}

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The digest algorithm used to sign SAML requests for the identity provider.
  """
  digestMethod: SamlDigestAlgorithm!

  """
  The ID of the enterprise on which to set an identity provider.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: String!

  """
  The Issuer Entity ID for the SAML identity provider
  """
  issuer: String

  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: SamlSignatureAlgorithm!

  """
  The URL endpoint for the identity provider's SAML SSO.
  """
  ssoUrl: URI!
}

"""
Autogenerated return type of SetEnterpriseIdentityProvider
"""
type SetEnterpriseIdentityProviderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Identifies the date and time when the repository was last pushed to.
  """
  identityProvider: EnterpriseIdentityProvider
}

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the organization to set a limit for.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
type SetOrganizationInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization that the interaction limit was set for.
  """
  organization: Organization
}

"""
Autogenerated input type of SetRepositoryInteractionLimit
"""
input SetRepositoryInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the repository to set a limit for.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that the interaction limit was set for.
  """
  repository: Repository
}

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput {
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the user to set a limit for.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user that the interaction limit was set for.
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

  """
  The Node ID of the RemovedFromMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The reason this pull request was removed from the queue.
  """
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
type SmimeSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  databaseId: Int

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  id: ID!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """
  ASCII-armored signature header from object.
  """
  email: String

  """
  The Node ID of the RepositoryInvitation object
  """
  id: ID!

  """
  GitHub user corresponding to the email signing this commit.
  """
  currentTitle: String!

  """
  The Node ID of the RenamedTitleEvent object
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  True if the signature was made with GitHub's signing key.
  """
  wasSignedByGitHub: Boolean!
}

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Name of the social media account as it appears on the profile.
  """
  displayName: String!

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
input ReopenIssueInput {
  """
  Software or company that hosts the social media account.
  """
  provider: SocialAccountProvider!

  """
  URL of the social media account.
  """
  url: URI!
}

"""
The connection type for SocialAccount.
"""
type SocialAccountConnection {
  """
  A list of edges.
  """
  edges: [SocialAccountEdge]

  """
  A list of nodes.
  """
  nodes: [SocialAccount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SocialAccount
}

"""
Software or company that hosts social media accounts.
"""
enum SocialAccountProvider {
  """
  Social media and networking website.
  """
  FACEBOOK

  """
  Catch-all for social media providers that do not yet have specific handling.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

  """
  Fork of Mastodon with a greater focus on local posting.
  """
  HOMETOWN

  """
  Social media website with a focus on photo and video sharing.
  """
  INSTAGRAM

  """
  Professional networking website.
  """
  LINKEDIN

  """
  Open-source federated microblogging service.
  """
  MASTODON

  """
  JavaScript package registry.
  """
  RENAME

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type RepositoryMigration implements Migration & Node {
  """
  The migration flag to continue on error.
  """
  REDDIT

  """
  Live-streaming service.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  id: ID!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

  """
  Online video platform.
  """
  YOUTUBE
}

"""
Entities that can sponsor others via GitHub Sponsors
"""
union Sponsor = Organization | User

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The migration source.
  """
  amountInCents: Int!

  """
  The amount in USD, formatted as a string.
  """
  formattedAmount: String!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  sponsor: Sponsorable!

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  A list of edges.
  """
  edges: [SponsorAndLifetimeValueEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorAndLifetimeValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorAndLifetimeValue
}

"""
Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
"""
input SponsorAndLifetimeValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order results by.
  """
  field: SponsorAndLifetimeValueOrderField!
}

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  LIFETIME_VALUE

  """
  Order results by the sponsor's login (username).
  """
  SPONSOR_LOGIN

  """
  Order results by the sponsor's relevance to the viewer.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddMemberAuditEntry object
  """
  id: ID!

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  A list of edges.
  """
  edges: [SponsorEdge]

  """
  A list of nodes.
  """
  nodes: [Sponsor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

"""
Represents a object that belongs to a repository.
"""
type SponsorEdge {
  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  The ordering direction.
  """
  closed: Boolean!

  """
  The field to order sponsor entities by.
  """
  field: SponsorOrderField!
}

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  """
  Order sponsorable entities by login (username).
  """
  createdAt: DateTime!

  """
  Order sponsors by their relevance to the viewer.
  """
  creator: Actor

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  databaseId: Int

  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  isSponsoredBy(
    """
    The target account's login.
    """
    size: Int
  ): URI!

  """
  The Node ID of the RepositoryOwner object
  """
  id: ID!

  """
  True if the viewer is sponsored by this user/organization.
  """
  isSponsoringViewer: Boolean!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  id: ID!

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  number: Int!

  """
  Array of repository properties that must match
  """
  owner: ProjectV2Owner!

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

  """
  The type of rule.
  """
  resourcePath: URI!

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  Configuration for the repository_id condition
  """
  title: String!

  """
  Configuration for the repository_name condition
  """
  updatedAt: DateTime!

  """
  Configuration for the repository_property condition
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoArchivedAuditEntry object
  """
  id: ID!

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  A list of edges.
  """
  edges: [ProjectV2Edge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2
}

"""
Specifies the attributes for a new or updated rule.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  Optional ID of this rule when updating
  """
  createdAt: DateTime!

  """
  The parameters for the rule.
  """
  dataType: ProjectV2FieldType!

  """
  The type of rule to create.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  name: String!

  """
  The field to order repository rules by.
  """
  project: ProjectV2!

  """
  Order repository rules by type
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  Authorization
  """
  createdAt: DateTime!

  """
  Branch name pattern
  """
  dataType: ProjectV2FieldType!

  """
  Committer email pattern
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  Commit author email pattern
  """
  name: String!

  """
  Commit message pattern
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  Branch is read-only. Users cannot push to the branch.
  """
  edges: [ProjectV2FieldEdge]

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  nodes: [ProjectV2Field]

  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

"""
An edge in a connection.
"""
type ProjectV2FieldEdge {
  """
  Merge queue locked ref
  """
  MERGE_QUEUE_LOCKED_REF

  """
  Prevent users with push access from force pushing to refs.
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  ASSIGNEES

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  DATE

  """
  Prevent merge commits from being pushed to matching refs.
  """
  ITERATION

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  LABELS

  """
  Commits pushed to matching refs must have verified signatures.
  """
  LINKED_PULL_REQUESTS

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  MILESTONE

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  NUMBER

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REPOSITORY

  """
  Secret scanning
  """
  REVIEWERS

  """
  Tag
  """
  SINGLE_SELECT

  """
  Tag name pattern
  """
  TEXT

  """
  Only allow users with bypass permission to update matching refs.
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  The actors that can bypass this ruleset
  """
  content: ProjectV2ItemContent

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  createdAt: DateTime!

  """
  Identifies the date and time when the object was created.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  isArchived: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  project: ProjectV2!

  """
  Identifies the ruleset associated with the allowed actor
  """
  type: ProjectV2ItemType!

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ItemEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Item]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  createdAt: DateTime!

  """
  The bypass mode for this actor.
  """
  creator: Actor

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  id: ID!

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

"""
Entities that can be subscribed to for web and email notifications.
"""
interface SubscribableThread {
  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The activity was scheduling a downgrade or cancellation.
  """
  PENDING_CHANGE

  """
  The actor who created the item.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

"""
The different kinds of records that can be featured on a GitHub Sponsors profile page.
"""
type SponsorsActivityEdge {
  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Parameters to be used for the tag_name_pattern rule
"""
type TagNamePatternParameters {
  """
  The previous seven days.
  """
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  Andorra
  """
  AD

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  Aruba
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  Åland
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

"""
An edge in a connection.
"""
type ProjectV2ItemFieldValueEdge {
  """
  Barbados
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type RequiredStatusCheckDescription {
  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput {
  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  Identifies the previous state of the review with the 'review_dismissed' event.
  """
  previousReviewState: PullRequestReviewState!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the commit which caused the review to become stale.
  """
  pullRequestCommit: PullRequestCommit

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  The reviewer that is requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    orderBy: TeamOrder

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ViewEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2View]

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ViewEdge {
  """
  A cursor for use in pagination.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

  """
  The item at the end of the edge.
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  The total number of pieces of code that matched the search query. Regardless
  of the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  codeCount: Int!

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  POSITION
}

"""
A workflow inside a project.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  notificationsPermalink: URI

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  permalink: URI

  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  severity: SecurityAdvisorySeverity!

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

"""
Properties by which security advisory connections can be ordered.
"""
enum SecurityAdvisoryOrderField {
  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
type OrganizationIdentityProvider implements Node {
  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

  """
  The x509 certificate used by the Identity Provider to sign assertions and responses.
  """
  idpCertificate: X509Certificate

  """
  The Issuer Entity ID for the SAML Identity Provider
  """
  issuer: String

  """
  Organization this Identity Provider belongs to
  """
  organization: Organization

  """
  The signature algorithm used to sign SAML requests for the Identity Provider.
  """
  signatureMethod: URI

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
An individual vulnerability within an Advisory
"""
type SecurityVulnerability {
  """
  Returns the contributing guidelines for this repository.
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  advisory: SecurityAdvisory!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  The user who created the invitation.
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The severity of the vulnerability within this package
  """
  severity: SecurityAdvisorySeverity!

  """
  When the vulnerability was last updated
  """
  updatedAt: DateTime!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
enum OrganizationInvitationType {
  """
  The invitation was to an email address.
  """
  EMAIL

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
union OrganizationOrUser = Organization | User

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

"""
Information for an uploaded package.
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

"""
A file in a package version.
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  How the default commit title will be generated when merging a pull request.
  """
  mergeCommitTitle: MergeCommitTitle!

  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

"""
Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
A version tag contains the mapping between a tag name and a version.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  A list of nodes.
  """
  nodes: [Sponsor]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  A rubygems package.
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  BE

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  BF

"""
Parameters to be used for the repository_id condition
"""
type RepositoryIdConditionTarget {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  repositoryIds: [ID!]!
}

"""
A subset of repository info.
"""
interface RepositoryInfo {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  BG

  """
  Bahrain
  """
  BH

  """
  Burundi
  """
  BI

  """
  Benin
  """
  BJ

  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The source of this permission.
  """
  hasDiscussionsEnabled: Boolean!

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
type PullRequestChangedFile {
  """
  Indicates if the repository has issues feature enabled.
  """
  BL

  """
  Bermuda
  """
  BM

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  BN

  """
  Bolivia
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  BR

  """
  Bahamas
  """
  BS

  """
  Bhutan
  """
  BT

  """
  Bouvet Island
  """
  BV

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  Belize
  """
  BZ

  """
  Canada
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Congo (Kinshasa)
  """
  CD

  """
  Central African Republic
  """
  CF

  """
  Congo (Brazzaville)
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

  """
  Switzerland
  """
  CH

  """
  Identifies the date and time when the repository was last pushed to.
  """
  CI

  """
  Cook Islands
  """
  CK

  """
  Chile
  """
  CL

  """
  Cameroon
  """
  CM

  """
  China
  """
  CN

  """
  Colombia
  """
  CO

  """
  Costa Rica
  """
  CR

  """
  Cape Verde
  """
  CV

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  CX

  """
  Cyprus
  """
  CY

  """
  Czech Republic
  """
  CZ

  """
  Germany
  """
  DE

  """
  Djibouti
  """
  DJ

  """
  Denmark
  """
  DK

  """
  Dominica
  """
  DM

  """
  Dominican Republic
  """
  DO

  """
  Algeria
  """
  DZ

  """
  Ecuador
  """
  EC

"""
Required status check
"""
type StatusCheckConfiguration {
  """
  Estonia
  """
  EE

  """
  Egypt
  """
  EG

  """
  Western Sahara
  """
  EH

  """
  Eritrea
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

  """
  The Node ID of the RepositoryInvitation object
  """
  id: ID!

  """
  Spain
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

  """
  Ethiopia
  """
  ET

  """
  Finland
  """
  FI

  """
  Fiji
  """
  FJ

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  Falkland Islands
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  FR

  """
  Gabon
  """
  GA

  """
  United Kingdom
  """
  GB

  """
  Grenada
  """
  GD

  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  GG

  """
  Ghana
  """
  GH

  """
  Gibraltar
  """
  GI

  """
  Greenland
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Gambia
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type RepositoryMigration implements Migration & Node {
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  GN

  """
  Guadeloupe
  """
  GP

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

  """
  Greece
  """
  GR

  """
  The migration source.
  """
  GS

  """
  Guatemala
  """
  GT

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  GU

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

  """
  Guyana
  """
  GY

  """
  Hong Kong
  """
  HK

  """
  Heard and McDonald Islands
  """
  HM

  """
  Honduras
  """
  HN

  """
  Croatia
  """
  HR

  """
  Haiti
  """
  HT

  """
  Hungary
  """
  HU

  """
  Indonesia
  """
  ID

  """
  Ireland
  """
  IE

  """
  Israel
  """
  IL

  """
  Isle of Man
  """
  IM

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
interface RepositoryNode {
  """
  India
  """
  IN

  """
  British Indian Ocean Territory
  """
  IO

  """
  Iraq
  """
  IQ

  """
  Iran
  """
  IR

  """
  Iceland
  """
  IS

  """
  Italy
  """
  IT

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  JE

  """
  Jamaica
  """
  JM

  """
  Jordan
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The Node ID of the RepositoryOwner object
  """
  id: ID!

  """
  Japan
  """
  JP

  """
  Kenya
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

  """
  Kyrgyzstan
  """
  KG

  """
  Cambodia
  """
  KH

  """
  Kiribati
  """
  KI

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  KN

  """
  Korea, South
  """
  KR

  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  Laos
  """
  LA

  """
  Lebanon
  """
  LB

  """
  Saint Lucia
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  Liechtenstein
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

  """
  Sri Lanka
  """
  LK

  """
  Liberia
  """
  LR

  """
  Lesotho
  """
  LS

  """
  Lithuania
  """
  LT

  """
  Luxembourg
  """
  LU

  """
  Latvia
  """
  LV

  """
  Libya
  """
  LY

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  repositoryRuleset: RepositoryRuleset

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
New projects that manage issues, pull requests and drafts using tables and boards.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  Merge queue locked ref
  """
  closed: Boolean!

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  createdAt: DateTime!

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  creator: Actor

  """
  Prevent merge commits from being pushed to matching refs.
  """
  databaseId: Int

  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  id: ID!

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REQUIRED_SIGNATURES

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Secret scanning
  """
  SECRET_SCANNING

  """
  Tag
  """
  TAG

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  Only allow users with bypass permission to update matching refs.
  """
  number: Int!

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  owner: ProjectV2Owner!

  """
  Workflow files cannot be modified.
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  resourcePath: URI!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  title: String!

  """
  Identifies the primary key from the database.
  """
  updatedAt: DateTime!

  """
  The enforcement level of this ruleset
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  The Node ID of the RepositoryRuleset object
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  A comment that has been made against the file of a pull request
  """
  edges: [ProjectV2Edge]

  """
  A comment that has been made against the line of a pull request
  """
  nodes: [ProjectV2]

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  repositoryRoleName: String

  """
  Identifies the ruleset associated with the allowed actor
  """
  repositoryRuleset: RepositoryRuleset
}

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  The actor can always bypass rules
  """
  ALWAYS

  """
  The actor can only bypass rules via a pull request
  """
  node: ProjectV2
}

"""
A threaded list of comments for a given pull request.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  A list of pull request comments associated with the thread.
  """
  createdAt: DateTime!

  """
  The side of the diff on which this thread was placed.
  """
  dataType: ProjectV2FieldType!

  """
  The Node ID of the PullRequestThread object
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  name: String!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  project: ProjectV2!

  """
  The line in the file to which this thread refers
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  Identifies the file path of this thread.
  """
  createdAt: DateTime!

  """
  Identifies the pull request associated with this thread.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the repository associated with this thread.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  The user who resolved this thread
  """
  name: String!

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Field]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  Assignees
  """
  ASSIGNEES

  """
  Date
  """
  DATE

  """
  The bypass mode for this actor.
  """
  ITERATION

  """
  For organization owner bypasses, true
  """
  LABELS

  """
  For role bypasses, the role database ID
  """
  LINKED_PULL_REQUESTS

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  MILESTONE

  """
  A list of nodes.
  """
  NUMBER

  """
  Information to aid in pagination.
  """
  REPOSITORY

  """
  Identifies the total count of items in the connection.
  """
  REVIEWERS

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  SINGLE_SELECT

  """
  The item at the end of the edge.
  """
  TEXT

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  Branch
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  Tag
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  The Node ID of the RepositoryTopic object
  """
  content: ProjectV2ItemContent

  """
  Monaco
  """
  createdAt: DateTime!

  """
  Moldova
  """
  creator: Actor

  """
  Montenegro
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  fieldValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

  """
  Madagascar
  """
  isArchived: Boolean!

  """
  Marshall Islands
  """
  project: ProjectV2!

  """
  Mali
  """
  type: ProjectV2ItemType!

  """
  Myanmar
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  Mongolia
  """
  edges: [ProjectV2ItemEdge]

  """
  Macau
  """
  nodes: [ProjectV2Item]

  """
  Northern Mariana Islands
  """
  MP

  """
  Martinique
  """
  totalCount: Int!
}

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  Mauritania
  """
  MR

  """
  Montserrat
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Malta
  """
  createdAt: DateTime!

  """
  Mauritius
  """
  creator: Actor

  """
  Maldives
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  Malawi
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  New Zealand
  """
  NZ

  """
  Oman
  """
  OM

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Palestine
  """
  PS

  """
  Portugal
  """
  PT

  """
  Palau
  """
  PW

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Senegal
  """
  SN

  """
  The actor who created the item.
  """
  SO

  """
  Suriname
  """
  SR

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Timor-Leste
  """
  union: Boolean = false

  """
  Turkmenistan
  """
  TM

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  Saint Vincent and the Grenadines
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  Venezuela
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  Virgin Islands, British
  """
  VG

  """
  Virgin Islands, U.S.
  """
  VI

"""
An edge in a connection.
"""
type ProjectV2ItemFieldValueEdge {
  """
  Vietnam
  """
  VN

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type RequiredStatusCheckDescription {
  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
input RequiredStatusChecksParametersInput {
  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput {
  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

  """
  Find a project by number.
  """
  projectV2(
    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

"""
An edge in a connection.
"""
type ReviewDismissalAllowanceEdge {
  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

"""
A request for a user to review a pull request.
"""
type ReviewRequest implements Node {
  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    If true, filters teams that are mapped to an LDAP Group (Enterprise only)
    """
    ldapMapped: Boolean

    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    orderBy: TeamOrder

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  The reviewer that is requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  The project view's name.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
type OrganizationIdentityProvider implements Node {
  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  SHA384
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  RSA-SHA384
  """
  RSA_SHA384

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  The email address of the user invited to the organization.
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The user who created the invitation.
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ViewEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2View]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ViewEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
input ProjectV2ViewOrder {
  """
  The total number of pieces of code that matched the search query. Regardless
  of the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  codeCount: Int!

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

"""
Represents the individual results of a search.
"""
enum SearchType {
  """
  The name of the workflow.
  """
  DISCUSSION

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  ISSUE

  """
  Returns results matching repositories.
  """
  REPOSITORY

  """
  Returns results matching users and organizations on GitHub.
  """
  USER
}

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  notificationsPermalink: URI

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  permalink: URI

  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  severity: SecurityAdvisorySeverity!

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  relevantOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

"""
An individual vulnerability within an Advisory
"""
type SecurityVulnerability {
  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  CREATED_AT
}

"""
Represents an owner of a package.
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

"""
A version tag contains the mapping between a tag name and a version.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

  """
  Check if this comment was created via an email reply.
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  Identifies the primary key from the database.
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering of the returned package files.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The source of this permission.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The ID of the repository to set a limit for.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that the interaction limit was set for.
  """
  repository: Repository
}

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput {
  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

"""
The connection type for SocialAccount.
"""
type SocialAccountConnection {
  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """
    The number for the vulnerability alert to be returned.
    """
    number: Int!
  ): RepositoryVulnerabilityAlert

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Open-source federated microblogging service.
  """
  MASTODON

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type SponsorEdge {
  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

  """
  Order sponsors by their relevance to the viewer.
  """
  RELEVANCE
}

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

  """
  The total size in kilobytes of all repositories in the connection. Value will
  never be larger than max 32-bit signed integer.
  """
  isSponsoredBy(
    """
    The target account's login.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  TRADE_RESTRICTION

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
enum SponsorsCountryOrRegionCode {
  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  AD

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  id: ID!

  """
  Afghanistan
  """
  AF

  """
  The migration source.
  """
  AG

  """
  Anguilla
  """
  AI

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
type UpdateParameters {
  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

  """
  Angola
  """
  AO

  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

"""
Autogenerated input type of UnmarkProjectV2AsTemplate
"""
input UnmarkProjectV2AsTemplateInput {
  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

  """
  Australia
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

  """
  Aruba
  """
  AW

  """
  Åland
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

"""
How payment was made for funding a GitHub Sponsors sponsorship.
"""
enum SponsorshipPaymentSource {
  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
interface RepositoryNode {
  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

  """
  Burundi
  """
  BI

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The Node ID of the RepositoryOwner object
  """
  id: ID!

  """
  Brunei Darussalam
  """
  BN

  """
  Bolivia
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  BR

  """
  Bahamas
  """
  BS

  """
  Bhutan
  """
  BT

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  BV

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  BY

  """
  Belize
  """
  BZ

  """
  Canada
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

  """
  Cocos (Keeling) Islands
  """
  CC

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  The Node ID of the RepositoryRule object
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  pageInfo: PageInfo!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  MERGE_QUEUE_LOCKED_REF

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REQUIRED_SIGNATURES

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Secret scanning
  """
  SECRET_SCANNING

  """
  Tag
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

  """
  Tag name pattern
  """
  TAG_NAME_PATTERN

  """
  Only allow users with bypass permission to update matching refs.
  """
  UPDATE

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  WORKFLOWS

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  WORKFLOW_UPDATES
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
New projects that manage issues, pull requests and drafts using tables and boards.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  closed: Boolean!

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  creator: Actor

  """
  The enforcement level of this ruleset
  """
  databaseId: Int

  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

    """
    The type of rule.
    """
    type: RepositoryRuleType
  ): RepositoryRuleConnection

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The start line number on the file to which the comment applies
  """
  number: Int!

  """
  Identifies the state of the comment.
  """
  owner: ProjectV2Owner!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

  """
  Identifies when the comment was last updated.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  resourcePath: URI!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  Identifies the ruleset associated with the allowed actor
  """
  title: String!

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  updatedAt: DateTime!

  """
  The bypass mode for this actor.
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  views(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  A list of edges.
  """
  edges: [ProjectV2Edge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2
}

"""
The targets supported for rulesets
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  Branch
  """
  createdAt: DateTime!

  """
  Tag
  """
  dataType: ProjectV2FieldType!

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  name: String!

  """
  Central African Republic
  """
  project: ProjectV2!

  """
  Switzerland
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  Côte d'Ivoire
  """
  createdAt: DateTime!

  """
  Cook Islands
  """
  dataType: ProjectV2FieldType!

  """
  Chile
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  Cameroon
  """
  name: String!

  """
  China
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  Cyprus
  """
  edges: [ProjectV2FieldEdge]

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Czech Republic
  """
  nodes: [ProjectV2Field]

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

  """
  Germany
  """
  DE

  """
  Djibouti
  """
  DJ

  """
  Denmark
  """
  DK

"""
The possible default commit titles for squash merges.
"""
type ProjectV2FieldEdge {
  """
  Dominica
  """
  DM

  """
  Dominican Republic
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  Algeria
  """
  ASSIGNEES

  """
  Ecuador
  """
  DATE

  """
  Estonia
  """
  ITERATION

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  LABELS

  """
  Egypt
  """
  LINKED_PULL_REQUESTS

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  MILESTONE

  """
  Western Sahara
  """
  NUMBER

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  REPOSITORY

  """
  Indicates whether the current viewer can reply to this thread.
  """
  REVIEWERS

  """
  Spain
  """
  SINGLE_SELECT

  """
  Ethiopia
  """
  TEXT

"""
Ways in which star connections can be ordered.
"""
input UpdateParametersInput {
  """
  Finland
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  Falkland Islands
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  France
  """
  content: ProjectV2ItemContent

  """
  Gabon
  """
  createdAt: DateTime!

  """
  United Kingdom
  """
  creator: Actor

"""
Autogenerated return type of UnmarkProjectV2AsTemplate
"""
type UnmarkProjectV2AsTemplatePayload {
  """
  Grenada
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  GE

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  GG

  """
  Ghana
  """
  GH

  """
  Gibraltar
  """
  GI

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isArchived: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  project: ProjectV2!

  """
  The line in the file to which this thread refers
  """
  type: ProjectV2ItemType!

  """
  Identifies the file path of this thread.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  Identifies the pull request associated with this thread.
  """
  edges: [ProjectV2ItemEdge]

  """
  Identifies the repository associated with this thread.
  """
  nodes: [ProjectV2Item]

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Greenland
  """
  createdAt: DateTime!

  """
  Gambia
  """
  creator: Actor

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  field: ProjectV2FieldConfiguration!

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  When was the alert fixed?
  """
  fixedAt: DateTime

  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Japan
  """
  JP

  """
  Kenya
  """
  KE

  """
  Kyrgyzstan
  """
  KG

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Moldova
  """
  MD

  """
  The actor who created the item.
  """
  ME

  """
  Saint Martin (French part)
  """
  MF

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
input RequiredStatusChecksParametersInput {
  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

"""
Autogenerated input type of RerequestCheckSuite
"""
input RerequestCheckSuiteInput {
  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  The Node ID of the Push object
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the thread to resolve
  """
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
Autogenerated return type of ResolveReviewThread
"""
type ProjectV2ItemFieldValueEdge {
  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

  """
  Identifies the date and time when the object was created.
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    query: String!

"""
An edge in a connection.
"""
type ReviewDismissalAllowanceEdge {
  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

"""
Represents a 'review_dismissed' event on a given issue or pull request.
"""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  The reviewer that is requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
interface Reactable {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Parameters used for the `commit_message_pattern` rule type
  """
  databaseId: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Parameters used for the `tag_name_pattern` rule type
  """
  tagNamePattern: TagNamePatternParametersInput

  """
  Parameters used for the `update` rule type
  """
  update: UpdateParametersInput

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum SamlDigestAlgorithm {
  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

"""
The possible signature algorithms used to sign SAML requests for a Identity Provider.
"""
enum SamlSignatureAlgorithm {
  """
  The project view's name.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  The user that saved this reply.
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

"""
Properties by which saved reply connections can be ordered.
"""
enum SavedReplyOrderField {
  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  The total number of pieces of code that matched the search query. Regardless
  of the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  edges: [ProjectV2ViewEdge]

  """
  The total number of discussions that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  nodes: [ProjectV2View]

  """
  A list of edges.
  """
  edges: [SearchResultItemEdge]

  """
  The total number of issues that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  issueCount: Int!

"""
An edge in a connection.
"""
type ProjectV2ViewEdge {
  """
  A list of nodes.
  """
  nodes: [SearchResultItem]

  """
  Information to aid in pagination.
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  compare(
    """
    The head ref to compare against.
    """
    headRef: String!
  ): Comparison

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  id: ID!

  """
  This is a long plaintext description of the advisory
  """
  description: String!

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  severity: SecurityAdvisorySeverity!

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  exclude: [String!]!

  """
  The name of the workflow
  """
  NAME

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  include: [String!]!
}

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  The number of additions in this pull request.
  """
  additions: Int!

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter discussions to only those that have been answered or not. Defaults to
    including both answered and unanswered discussions.
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

"""
Parameters to be used for the repository_id condition
"""
type RepositoryIdConditionTarget {
  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The first version containing a fix for the vulnerability
  """
  downloadUrl: URI!

  """
  The Node ID of the ReleaseAsset object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  updatedAt: DateTime!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  The HTTP path listing organization's projects
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
type SetOrganizationInteractionLimitPayload {
  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The permalink to the pull request.
  """
  permalink: URI!

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

  """
  Find a project by number.
  """
  projectV2(
    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  A list of nodes.
  """
  nodes: [SponsorAndLifetimeValue]

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    The target account's login.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Ordering options for results returned from the connection.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The enforcement level of this ruleset
  """
  enforcement: RuleEnforcement!

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  websiteUrl: URI
}

"""
An audit entry in an organization audit log.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
type PullRequestChangedFile {
  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  repositoryRoleName: String

  """
  Identifies the ruleset associated with the allowed actor
  """
  repositoryRuleset: RepositoryRuleset
}

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRulesetBypassActor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PullRequestChangedFile
}

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
type PullRequestCommit implements Node & UniformResourceLocatable {
  """
  The Git commit object
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  externalIdentities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter to external identities with the users login
    """
    login: String

    """
    Filter to external identities with valid org membership only
    """
    membersOnly: Boolean

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

  """
  The pull request this commit belongs to
  """
  pullRequest: PullRequest!

  """
  The HTTP path for this pull request commit
  """
  resourcePath: URI!

  """
  The HTTP URL for this pull request commit
  """
  url: URI!
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  invitationType: OrganizationInvitationType!

  """
  The user who was invited to the organization.
  """
  actorId: ID

  """
  The bypass mode for this actor.
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRuleset]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRuleset
}

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  Branch
  """
  BRANCH

  """
  Tag
  """
  TAG
}

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  PRIVATE
}

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
union OrganizationOrUser = Organization | User

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  The actor who authored the comment.
  """
  author: Actor

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  onBehalfOf(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  The total number of organizations this user is in
  """
  totalOrganizationCount: Int!
}

"""
Information for an uploaded package.
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

  """
  Find the latest version for the package.
  """
  latestVersion: PackageVersion

  """
  Identifies the name of the package.
  """
  name: String!

  """
  Identifies the type of the package.
  """
  packageType: PackageType!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  id: ID!

"""
The connection type for SponsorableItem.
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

  """
  MD5 hash of the file.
  """
  md5: String

  """
  Name of the file.
  """
  name: String!

  """
  The package version this file belongs to.
  """
  packageVersion: PackageVersion

  """
  SHA1 hash of the file.
  """
  sha1: String

  """
  Nicaragua
  """
  edges: [SponsorableItemEdge]

  """
  Netherlands
  """
  nodes: [SponsorableItem]

  """
  Norway
  """
  NO

  """
  Nepal
  """
  NP

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  NR

  """
  Niue
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  When was the alert auto-dismissed?
  """
  autoDismissedAt: DateTime

  """
  When was the alert created?
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  CREATED_AT
}

"""
Represents an owner of a package.
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  Comment explaining the reason the alert was dismissed
  """
  dismissComment: String

  """
  The reason the alert was dismissed
  """
  downloadsTotalCount: Int!
}

"""
A version tag contains the mapping between a tag name and a version.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

  """
  When was the alert fixed?
  """
  fixedAt: DateTime

  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

  """
  Identifies the primary key from the database as a BigInt.
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  The Node ID of the PullRequestReviewComment object
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  The activity was cancelling a sponsorship.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering of the returned package files.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  NEW_SPONSORSHIP

  """
  The activity was scheduling a downgrade or cancellation.
  """
  PENDING_CHANGE

  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  TIER_CHANGE
}

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  Paraguay
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  Qatar
  """
  nodes: [SponsorsActivity]

  """
  Reunion
  """
  RE

  """
  Romania
  """
  RO

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  Serbia
  """
  RS

  """
  Russian Federation
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

"""
Autogenerated input type of UpdateProject
"""
input UpdateProjectInput {
  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum RepositoryVulnerabilityAlertState {
  """
  An alert that has been automatically closed by Dependabot.
  """
  AUTO_DISMISSED

  """
  An alert that has been manually closed by a user.
  """
  DISMISSED

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  FIXED

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  id: ID!

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  union: Boolean = false

  """
  The previous seven days.
  """
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  Andorra
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  AF

  """
  Antigua and Barbuda
  """
  AG

  """
  Anguilla
  """
  AI

  """
  Albania
  """
  AL

  """
  Armenia
  """
  AM

  """
  Angola
  """
  AO

  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The source of this permission.
  """
  WAITING
}

"""
Types that can be requested reviewers.
"""
union RequestedReviewer = Bot | Mannequin | Team | User

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland
  """
  AX

  """
  Azerbaijan
  """
  AZ

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
input UpdateRepositoryWebCommitSignoffSettingInput {
  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  BE

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfiguration!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
input RequiredStatusChecksParametersInput {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfigurationInput!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Autogenerated input type of RerequestCheckSuite
"""
input RerequestCheckSuiteInput {
  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  BH

  """
  Burundi
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the thread to resolve
  """
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The thread to resolve.
  """
  thread: PullRequestReviewThread
}

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the published tier to retire.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was retired.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  The description of the revert pull request.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates whether the revert pull request should be a draft.
  """
  draft: Boolean = false

  """
  The ID of the pull request to revert.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The title of the revert pull request.
  """
  title: String
}

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that was reverted.
  """
  pullRequest: PullRequest

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  revertPullRequest: PullRequest
}

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type PinnedIssue implements Node {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

  """
  The actor that can dismiss.
  """
  actor: ReviewDismissalAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the ReviewDismissalAllowance object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union ReviewDismissalAllowanceActor = App | Team | User

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  A list of edges.
  """
  edges: [ReviewDismissalAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewDismissalAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewDismissalAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The item at the end of the edge.
  """
  node: ReviewDismissalAllowance
}

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Identifies the optional message associated with the 'review_dismissed' event.
  """
  dismissalMessage: String

  """
  Identifies the optional message associated with the event, rendered to HTML.
  """
  dismissalMessageHTML: String

  """
  The Node ID of the ReviewDismissedEvent object
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

  """
  Identifies the previous state of the review with the 'review_dismissed' event.
  """
  previousReviewState: PullRequestReviewState!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the commit which caused the review to become stale.
  """
  pullRequestCommit: PullRequestCommit

  """
  The HTTP path for this review dismissed event.
  """
  resourcePath: URI!

  """
  Identifies the review associated with the 'review_dismissed' event.
  """
  review: PullRequestReview

  """
  The HTTP URL for this review dismissed event.
  """
  url: URI!
}

"""
A request for a user to review a pull request.
"""
type ReviewRequest implements Node {
  """
  Whether this request was created for a code owner
  """
  asCodeOwner: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ReviewRequest object
  """
  id: ID!

  """
  Identifies the pull request associated with this review request.
  """
  pullRequest: PullRequest!

  """
  The reviewer that is requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
type ReviewRequestConnection {
  """
  A list of edges.
  """
  edges: [ReviewRequestEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewRequest]

  """
  Information to aid in pagination.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewRequest
}

"""
An item in a pull request timeline
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

"""
The connection type for PullRequestTimelineItems.
"""
type ReviewRequestRemovedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestRemovedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review request was removed.
  """
  requestedReviewer: RequestedReviewer
}

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review was requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type Project implements Closable & Node & Updatable {
  """
  The project's description body.
  """
  body: String

  """
  The projects description body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  closed: Boolean!

  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  The current status of the pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision
}

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
input RevokeEnterpriseOrganizationsMigratorRoleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

  """
  The login of the user to revoke the migrator role
  """
  login: String!
}

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organizations that had the migrator role revoked for the given user.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection
}

"""
Autogenerated input type of RevokeMigratorRole
"""
input RevokeMigratorRoleInput {
  """
  The user login or Team slug to revoke the migrator role from.
  """
  actor: String!

  """
  Specifies the type of the actor, can be either USER or TEAM.
  """
  actorType: ActorType!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization that the user/team belongs to.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of RevokeMigratorRole
"""
type RevokeMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  success: Boolean
}

"""
Possible roles a user may have in relation to an organization.
"""
enum RoleInOrganization {
  """
  A user who is a direct member of the organization.
  """
  DIRECT_MEMBER

  """
  A user with full administrative access to the organization.
  """
  OWNER

  """
  A user who is unaffiliated with the organization.
  """
  UNAFFILIATED
}

"""
The level of enforcement for a rule or ruleset.
"""
enum RuleEnforcement {
  """
  Rules will be enforced
  """
  ACTIVE

  """
  Do not evaluate or enforce rules
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

  """
  Allow admins to test rules before enforcing them. Admins can view insights on
  the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
  """
  EVALUATE
}

"""
Types which can be parameters for `RepositoryRule` objects.
"""
union RuleParameters =
    BranchNamePatternParameters
  | CommitAuthorEmailPatternParameters
  | CommitMessagePatternParameters
  | CommitterEmailPatternParameters
  | PullRequestParameters
  | RequiredDeploymentsParameters
  | RequiredStatusChecksParameters
  | TagNamePatternParameters
  | UpdateParameters
  | WorkflowsParameters

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  Parameters used for the `branch_name_pattern` rule type
  """
  branchNamePattern: BranchNamePatternParametersInput

  """
  Parameters used for the `commit_author_email_pattern` rule type
  """
  commitAuthorEmailPattern: CommitAuthorEmailPatternParametersInput

  """
  Parameters used for the `commit_message_pattern` rule type
  """
  commitMessagePattern: CommitMessagePatternParametersInput

  """
  Parameters used for the `committer_email_pattern` rule type
  """
  committerEmailPattern: CommitterEmailPatternParametersInput

  """
  Parameters used for the `pull_request` rule type
  """
  pullRequest: PullRequestParametersInput

  """
  Parameters used for the `required_deployments` rule type
  """
  requiredDeployments: RequiredDeploymentsParametersInput

  """
  Parameters used for the `required_status_checks` rule type
  """
  requiredStatusChecks: RequiredStatusChecksParametersInput

  """
  Parameters used for the `tag_name_pattern` rule type
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Parameters used for the `update` rule type
  """
  update: UpdateParametersInput

  """
  Parameters used for the `workflows` rule type
  """
  workflows: WorkflowsParametersInput
}

"""
Types which can have `RepositoryRule` objects.
"""
union RuleSource = Organization | Repository

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum SamlDigestAlgorithm {
  """
  SHA1
  """
  SHA1

  """
  SHA256
  """
  SHA256

  """
  SHA384
  """
  SHA384

  """
  SHA512
  """
  SHA512
}

"""
The possible signature algorithms used to sign SAML requests for a Identity Provider.
"""
enum SamlSignatureAlgorithm {
  """
  RSA-SHA1
  """
  RSA_SHA1

  """
  RSA-SHA256
  """
  RSA_SHA256

  """
  RSA-SHA384
  """
  RSA_SHA384

  """
  RSA-SHA512
  """
  RSA_SHA512
}

"""
A Saved Reply is text a user can use to reply quickly.
"""
type SavedReply implements Node {
  """
  The body of the saved reply.
  """
  body: String!

  """
  The saved reply body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

  """
  The project column's name.
  """
  name: String!

  """
  The project that contains this column.
  """
  project: Project!

  """
  The semantic purpose of the column
  """
  purpose: ProjectColumnPurpose

  """
  The Node ID of the SavedReply object
  """
  id: ID!

  """
  The title of the saved reply.
  """
  title: String!

  """
  The user that saved this reply.
  """
  user: Actor
}

"""
The connection type for SavedReply.
"""
type SavedReplyConnection {
  """
  A list of edges.
  """
  edges: [SavedReplyEdge]

  """
  A list of nodes.
  """
  nodes: [SavedReply]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SavedReply
}

"""
Ordering options for saved reply connections.
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  The SHA after the push
  """
  nextSha: GitObjectID

  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order saved replies by.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

"""
Properties by which saved reply connections can be ordered.
"""
enum SavedReplyOrderField {
  """
  Order saved reply by when they were updated.
  """
  UPDATED_AT
}

"""
The results of a search.
"""
union SearchResultItem = App | Discussion | Issue | MarketplaceListing | Organization | PullRequest | Repository | User

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
type SearchResultItemConnection {
  """
  The total number of pieces of code that matched the search query. Regardless
  of the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  codeCount: Int!

  """
  The total number of discussions that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the PushAllowance object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union PushAllowanceActor = App | Team | User

  """
  A list of edges.
  """
  edges: [SearchResultItemEdge]

  """
  The total number of issues that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  issueCount: Int!

  """
  A list of nodes.
  """
  nodes: [SearchResultItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of repositories that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  repositoryCount: Int!

  """
  The total number of users that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  userCount: Int!

  """
  The total number of wiki pages that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  wikiCount: Int!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
Represents the individual results of a search.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  Returns matching discussions in repositories.
  """
  closed: Boolean!

  """
  Returns results matching issues in repositories.
  """
  ISSUE

  """
  Returns results matching repositories.
  """
  createdAt: DateTime!

  """
  Returns results matching users and organizations on GitHub.
  """
  creator: Actor

"""
A GitHub Security Advisory
"""
type SecurityAdvisory implements Node {
  """
  The classification of the advisory
  """
  databaseId: Int

  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  cwes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

  """
  This is a long plaintext description of the advisory
  """
  description: String!

  """
  The GitHub Security Advisory ID
  """
  ghsaId: String!

  """
  The Node ID of the SecurityAdvisory object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  The permalink for the advisory's dependabot alerts page
  """
  number: Int!

  """
  The organization that originated the advisory
  """
  owner: ProjectV2Owner!

  """
  The permalink for the advisory
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  search(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

  """
  The HTTP path for this project
  """
  resourcePath: URI!

  """
  The project's short description.
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  A list of references for this advisory
  """
  title: String!

  """
  The severity of the advisory
  """
  updatedAt: DateTime!

  """
  A short plaintext summary of the advisory
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  When the advisory was last updated
  """
  updatedAt: DateTime!

  """
  Vulnerabilities associated with this Advisory
  """
  vulnerabilities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  A list of edges.
  """
  edges: [ProjectV2Edge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2
}

"""
A field inside a project.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  When the advisory was withdrawn, if it has been withdrawn
  """
  project: ProjectV2!

"""
Classification of the advisory.
"""
enum SecurityAdvisoryClassification {
  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Field]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible ecosystems of a security vulnerability's package.
"""
type ProjectV2FieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  GitHub Actions
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  PHP packages hosted at packagist.org
  """
  ASSIGNEES

  """
  Erlang/Elixir packages hosted at hex.pm
  """
  DATE

  """
  Go modules
  """
  ITERATION

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  LABELS

  """
  Java artifacts hosted at the Maven central repository
  """
  LINKED_PULL_REQUESTS

  """
  JavaScript packages hosted at npmjs.com
  """
  MILESTONE

  """
  The Node ID of the Reactable object
  """
  NUMBER

  """
  .NET packages hosted at the NuGet Gallery
  """
  REPOSITORY

  """
  Python packages hosted at PyPI.org
  """
  REVIEWERS

  """
  Dart packages hosted at pub.dev
  """
  SINGLE_SELECT

  """
  Ruby gems hosted at RubyGems.org
  """
  TEXT

  """
  Rust crates
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  Swift packages
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  A cursor for use in pagination.
  """
  content: ProjectV2ItemContent

  """
  The item at the end of the edge.
  """
  createdAt: DateTime!

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  The identifier type, e.g. GHSA, CVE
  """
  creator: Actor

  """
  The identifier
  """
  databaseId: Int

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter {
  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  fieldValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

  """
  The identifier string. Supports exact or partial matching.
  """
  isArchived: Boolean!

"""
Identifier formats available for advisories.
"""
enum SecurityAdvisoryIdentifierType {
  """
  Common Vulnerabilities and Exposures Identifier.
  """
  project: ProjectV2!

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder {
  """
  The ordering direction.
  """
  type: ProjectV2ItemType!

  """
  The field to order security advisories by.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  Order advisories by publication time
  """
  edges: [ProjectV2ItemEdge]

  """
  The Node ID of the Reaction object
  """
  nodes: [ProjectV2Item]

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
  """
  ecosystem: SecurityAdvisoryEcosystem!

  """
  The package name
  """
  name: String!
}

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  The package name or version
  """
  identifier: String!
}

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  A publicly accessible reference
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Critical.
  """
  createdAt: DateTime!

  """
  High.
  """
  creator: Actor

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

"""
Autogenerated return type of SetEnterpriseIdentityProvider
"""
type SetEnterpriseIdentityProviderPayload {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The actor who created the item.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReadyForReviewEvent object
  """
  id: ID!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Branch protection rules for this ref
  """
  branchProtectionRule: BranchProtectionRule

  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    The head ref to compare against.
    """
    headRef: String!
  ): Comparison

  """
  The Node ID of the Ref object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ItemFieldValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  The amount in cents.
  """
  amountInCents: Int!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  The sponsor's GitHub account.
  """
  sponsor: Sponsorable!

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type SponsorEdge {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  The project view's name.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  Canada
  """
  edges: [ProjectV2ViewEdge]

  """
  Cocos (Keeling) Islands
  """
  nodes: [ProjectV2View]

  """
  Congo (Kinshasa)
  """
  CD

  """
  Central African Republic
  """
  CF

"""
An edge in a connection.
"""
type ProjectV2ViewEdge {
  """
  Congo (Brazzaville)
  """
  CG

  """
  Switzerland
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  NEW_SPONSORSHIP

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  PENDING_CHANGE

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  AD

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  AF

  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  AL

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  BY

  """
  Returns a single ruleset from the current repository by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!

    """
    Include rulesets configured at higher levels that apply to this repository
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Whether a squash merge commit can use the pull request title as default.
  """
  squashPrTitleUsedAsDefault: Boolean!
    @deprecated(
      reason: "`squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC."
    )

  """
  Central African Republic
  """
  CF

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Côte d'Ivoire
  """
  CI

  """
  Cook Islands
  """
  CK

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  China
  """
  CN

  """
  Colombia
  """
  CO

  """
  Costa Rica
  """
  CR

  """
  Cape Verde
  """
  CV

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

  """
  The Node ID of the RemovedFromMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

"""
Autogenerated input type of ReopenIssue
"""
input ReopenIssueInput {
  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Egypt
  """
  EG

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Japan
  """
  JP

  """
  Kenya
  """
  KE

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Comoros
  """
  KM

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  LY

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Saint Martin (French part)
  """
  MF

  """
  Madagascar
  """
  MG

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Macau
  """
  MO

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Namibia
  """
  NA

  """
  New Caledonia
  """
  NC

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  New Zealand
  """
  NZ

  """
  Oman
  """
  OM

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Pitcairn
  """
  PN

  """
  Puerto Rico
  """
  PR

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  Ukraine
  """
  UA

  """
  Uganda
  """
  UG

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  United States of America
  """
  US

  """
  Uruguay
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  UZ

  """
  Vatican City
  """
  VA

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  VC

  """
  Venezuela
  """
  VE

  """
  Virgin Islands, British
  """
  VG

  """
  Virgin Islands, U.S.
  """
  VI

  """
  Vietnam
  """
  VN

  """
  Vanuatu
  """
  VU

  """
  Wallis and Futuna Islands
  """
  WF

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

"""
Specifies the conditions required for a ruleset to evaluate
"""
type PullRequestCommitCommentThread implements Node & RepositoryNode {
  """
  The comments that exist in this thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CommitCommentConnection!

  """
  The commit the comments were made on.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  LOCK_BRANCH

  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  MERGE_QUEUE_LOCKED_REF

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  SECRET_SCANNING

  """
  Tag
  """
  TAG

  """
  Tag name pattern
  """
  TAG_NAME_PATTERN

  """
  Only allow users with bypass permission to update matching refs.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  WORKFLOWS

  """
  Workflow files cannot be modified.
  """
  WORKFLOW_UPDATES
}

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetBypassActorConnection

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The enforcement level of this ruleset
  """
  enforcement: RuleEnforcement!

  """
  The Node ID of the RepositoryRuleset object
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  Identifies the ruleset associated with the allowed actor
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  ALWAYS

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  nodes: [RepositoryRulesetBypassActor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  The bypass mode for this actor.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode!

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRuleset]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  node: RepositoryRuleset
}

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  BRANCH

  """
  Tag
  """
  TAG
}

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  Yemen
  """
  YE

  """
  Mayotte
  """
  YT

  """
  South Africa
  """
  ZA

  """
  Zambia
  """
  ZM

  """
  Zimbabwe
  """
  ZW
}

"""
Autogenerated input type of UnlinkProjectV2FromRepository
"""
input UnlinkProjectV2FromRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: DateTime!

  """
  The Node ID of the Sponsorship object
  """
  id: ID!

  """
  Whether the sponsorship is active. False implies the sponsor is a past sponsor
  of the maintainer, while true implies they are a current sponsor.
  """
  isActive: Boolean!

  """
  Whether this sponsorship represents a one-time payment versus a recurring sponsorship.
  """
  commitUrl: URI!

  """
  Whether the sponsor has chosen to receive sponsorship update emails sent from
  the sponsorable. Only returns a non-null value when the viewer has permission to know this.
  """
  id: ID!

  """
  The ID of the repository to unlink from the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of UnlinkProjectV2FromRepository
"""
type UnlinkProjectV2FromRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  authorAssociation: CommentAuthorAssociation!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The platform that was most recently used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The privacy level for this sponsorship.
  """
  repository: Repository
}

"""
The possible states of a thread subscription form action
"""
enum ThreadSubscriptionFormAction {
  """
  The User cannot subscribe or unsubscribe to the thread
  """
  NONE

  """
  The Stripe Connect account currently in use for payouts for this Sponsors
  listing, if any. Will only return a value when queried by the maintainer
  themselves, or by an admin of the sponsorable organization.
  """
  activeStripeConnectAccount: StripeConnectAccount

  """
  The name of the country or region with the maintainer's bank account or fiscal
  host. Will only return a value when queried by the maintainer themselves, or
  by an admin of the sponsorable organization.
  """
  billingCountryOrRegion: String

  """
  The email address used by GitHub to contact the sponsorable about their GitHub
  Sponsors profile. Will only return a value when queried by the maintainer
  themselves, or by an admin of the sponsorable organization.
  """
  contactEmailAddress: String

  """
  Identifies the date and time when the object was created.
  """
  SUBSCRIBE

  """
  The HTTP path for the Sponsors dashboard for this Sponsors listing.
  """
  dashboardResourcePath: URI!

  """
  The HTTP URL for the Sponsors dashboard for this Sponsors listing.
  """
  dashboardUrl: URI!

  """
  The records featured on the GitHub Sponsors profile.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The fiscal host used for payments, if any. Will only return a value when
  queried by the maintainer themselves, or by an admin of the sponsorable organization.
  """
  fiscalHost: Organization

  """
  The full description of the listing.
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  id: ID!

  """
  The Node ID of the SponsorsListing object
  """
  id: ID!

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
Parameters to be used for the tag_name_pattern rule
"""
input TagNamePatternParametersInput {
  """
  How this rule will appear to users.
  """
  name: String

  """
  The name of the country or region where the maintainer resides. Will only
  return a value when queried by the maintainer themselves, or by an admin of
  the sponsorable organization.
  """
  residenceCountryOrRegion: String

  """
  The HTTP path for this Sponsors listing.
  """
  resourcePath: URI!

  """
  The short description of the listing.
  """
  negate: Boolean

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
A team of users in an organization.
"""
enum ThreadSubscriptionState {
  """
  The tiers for this GitHub Sponsors profile.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include tiers that aren't published. Only admins of the Sponsors
    listing can see draft tiers. Only admins of the Sponsors listing and viewers
    who are currently sponsoring on a retired tier can see those retired tiers.
    Defaults to including only published tiers, which are visible to anyone who
    can see the GitHub Sponsors profile.
    """
    includeUnpublished: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Order for connection
    """
    orderBy: SponsorsTierOrder = {field: MONTHLY_PRICE_IN_CENTS, direction: ASC}
  ): SponsorsTierConnection

  """
  The HTTP URL for this Sponsors listing.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

"""
A record that is promoted on a GitHub Sponsors profile.
"""
type SponsorsListingFeaturedItem implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Will either be a description from the sponsorable maintainer about why they
  featured this item, or the item's description itself, such as a user's bio
  from their GitHub profile page.
  """
  description: String

  """
  The record that is featured on the GitHub Sponsors profile.
  """
  featureable: SponsorsListingFeatureableItem!

  """
  The Node ID of the SponsorsListingFeaturedItem object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The position of this featured item on the GitHub Sponsors profile with a lower
  position indicating higher precedence. Starts at 1.
  """
  position: Int!

  """
  The GitHub Sponsors profile that features this record.
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  id: ID!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The different kinds of records that can be featured on a GitHub Sponsors profile page.
"""
enum SponsorsListingFeaturedItemFeatureableType {
  """
  A repository owned by the user or organization with the GitHub Sponsors profile.
  """
  REPOSITORY

  """
  A user who belongs to the organization with the GitHub Sponsors profile.
  """
  USER
}

  """
  The User is never notified because they are ignoring the list
  """
  commentsResourcePath: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  commentsUrl: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The User is not recieving notifications from this thread
  """
  NONE

  """
  The author of the newsletter.
  """
  author: User

  """
  The contents of the newsletter, the message the sponsorable wanted to give.
  """
  bodyVersion: String!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The User is notified because they are subscribed to the thread
  """
  createdAt: DateTime!

  """
  When was the alert auto-dismissed?
  """
  autoDismissedAt: DateTime

  """
  When was the alert created?
  """
  descriptionHTML: HTML!

  """
  The Node ID of the SponsorsTier object
  """
  id: ID!

  """
  The User is notified because they chose custom settings for this thread.
  """
  editor: Actor

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type PullRequestRevisionMarker {
  """
  Comment explaining the reason the alert was dismissed
  """
  dismissComment: String

  """
  The reason the alert was dismissed
  """
  id: ID!

  """
  The User is notified because they chose custom settings for this thread.
  """
  SUBSCRIBED_TO_THREAD_TYPE

  """
  The subscription status is currently unavailable.
  """
  isPinned: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
A topic aggregates entities that are related to a subject.
"""
type Topic implements Node & Starrable {
  """
  When was the alert fixed?
  """
  fixedAt: DateTime

  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

  """
  Indicates whether this tier is still a work in progress by the sponsorable and
  not yet published to the associated GitHub Sponsors profile. Draft tiers
  cannot be used for new sponsorships and will not be in use on existing
  sponsorships. Draft tiers cannot be seen by anyone but the admins of the
  GitHub Sponsors profile.
  """
  isDraft: Boolean!

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
type PullRequestTimelineConnection {
  """
  Indicates whether this tier is published to the associated GitHub Sponsors
  profile. Published tiers are visible to anyone who can see the GitHub Sponsors
  profile, and are available for use in sponsorships if the GitHub Sponsors
  profile is publicly visible.
  """
  isPublished: Boolean!

  """
  Indicates whether this tier has been retired from the associated GitHub
  Sponsors profile. Retired tiers are no longer shown on the GitHub Sponsors
  profile and cannot be chosen for new sponsorships. Existing sponsorships may
  still use retired tiers if the sponsor selected the tier before it was retired.
  """
  isRetired: Boolean!

  """
  The sponsorships using this tier.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to unlink from the project.
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to return private sponsorships using this tier. Defaults to
    only returning public sponsorships on this tier.
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The HTTP path for this comment
  """
  resourcePath: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Identifies the date and time when the object was last updated.
  """
  node: PullRequestTimelineItem
}

"""
An item in a pull request timeline
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

  """
  The HTTP URL for this comment
  """
  editTeamUrl: URI!

  """
  The Node ID of the Team object
  """
  id: ID!

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If true, only repositories whose owner can be sponsored via GitHub Sponsors will be returned.
    """
    sponsorableOnly: Boolean = false

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The team the project is unlinked from
  """
  url: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated input type of UnlinkRepositoryFromProject
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  Are successful deployments required before merging.
  """
  viewerCanPin: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Are merge commits prohibited from being pushed to this branch.
  """
  webCommitSignoffRequired: Boolean!
}

"""
How payment was made for funding a GitHub Sponsors sponsorship.
"""
enum RepositoryVulnerabilityAlertState {
  """
  An alert that has been automatically closed by Dependabot.
  """
  AUTO_DISMISSED

  """
  An alert that has been manually closed by a user.
  """
  DISMISSED

  """
  Payment was made through GitHub.
  """
  GITHUB

  """
  Payment was made through Patreon.
  """
  PATREON
}

"""
The privacy of a sponsorship
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  Indicates if the repository should have the discussions feature enabled.
  """
  createdAt: DateTime!

  """
  The Node ID of the Sponsorship object
  """
  id: ID!

"""
The possible default commit messages for squash merges.
"""
enum SquashMergeCommitMessage {
  """
  Whether the sponsorship is active. False implies the sponsor is a past sponsor
  of the maintainer, while true implies they are a current sponsor.
  """
  isActive: Boolean!

  """
  Whether this sponsorship represents a one-time payment versus a recurring sponsorship.
  """
  union: Boolean = false

  """
  Whether the sponsor has chosen to receive sponsorship update emails sent from
  the sponsorable. Only returns a non-null value when the viewer has permission to know this.
  """
  COMMIT_MESSAGES

  """
  Default to the pull request's body.
  """
  PR_BODY
}

"""
The possible default commit titles for squash merges.
"""
enum SquashMergeCommitTitle {
  """
  The platform that was most recently used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The privacy level for this sponsorship.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
Represents an SSH signature on a Commit or Tag.
"""
type SshSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  True if the signature is valid and verified by GitHub.
  """
  isValid: Boolean!

  """
  Hex-encoded fingerprint of the key that signed this object.
  """
  keyFingerprint: String

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  WAITING
}

"""
Types that can be requested reviewers.
"""
union RequestedReviewer = Bot | Mannequin | Team | User

  """
  ASCII-armored signature header from object.
  """
  signature: String!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  True if the signature was made with GitHub's signing key.
  """
  wasSignedByGitHub: Boolean!
}

"""
Ways in which star connections can be ordered.
"""
input StarOrder {
  """
  A message confirming the result of updating the web commit signoff setting.
  """
  PERSONAL_PREFERENCE @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  The organization with the updated web commit signoff setting.
  """
  TOO_GENERAL @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  TOO_SPECIFIC @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
input UpdateParametersInput {
  """
  The notification setting that the team has set.
  """
  notificationSetting: TeamNotificationSetting!

  """
  The organization that owns this team.
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  The author of the newsletter.
  """
  author: User

  """
  The contents of the newsletter, the message the sponsorable wanted to give.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnlabeledEvent object
  """
  starredAt: DateTime!
}

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfiguration!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
input RequiredStatusChecksParametersInput {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfigurationInput!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Autogenerated input type of RerequestCheckSuite
"""
interface Starrable {
  """
  The Node ID of the Starrable object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  id: ID!

  """
  The Node ID of the SponsorshipNewsletter object
  """
  id: ID!

  """
  Finds and returns the project according to the provided project number.
  """
  projectV2(
    """
    The Project number.
    """
    number: Int!
  ): ProjectV2

  """
  List of projects this team has collaborator access to.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filtering options for projects returned from this connection
    """
    filterBy: ProjectV2Filters = {}

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    The query to search projects by.
    """
    query: String = ""
  ): ProjectV2Connection!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the thread to resolve
  """
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The thread to resolve.
  """
  thread: PullRequestReviewThread
}

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the published tier to retire.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was retired.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  The description of the revert pull request.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates whether the revert pull request should be a draft.
  """
  draft: Boolean = false

  """
  The ID of the pull request to revert.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The title of the revert pull request.
  """
  title: String
}

"""
Autogenerated return type of RevertPullRequest
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  The SHA after the push
  """
  nextSha: GitObjectID

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that was reverted.
  """
  pullRequest: PullRequest

  """
  The new pull request that reverts the input pull request.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveTopicAuditEntry object
  """
  id: ID!

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The actor that can dismiss.
  """
  actor: ReviewDismissalAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the PushAllowance object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union ReviewDismissalAllowanceActor = App | Team | User

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  A list of edges.
  """
  edges: [ReviewDismissalAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewDismissalAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewDismissalAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewDismissalAllowance
}

"""
Represents a 'review_dismissed' event on a given issue or pull request.
"""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Identifies the optional message associated with the 'review_dismissed' event.
  """
  dismissalMessage: String

  """
  Identifies the optional message associated with the event, rendered to HTML.
  """
  dismissalMessageHTML: String

  """
  The Node ID of the ReviewDismissedEvent object
  """
  id: ID!

  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  previousReviewState: PullRequestReviewState!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the commit which caused the review to become stale.
  """
  pullRequestCommit: PullRequestCommit

  """
  The HTTP path for this review dismissed event.
  """
  resourcePath: URI!

  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  search(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    query: String!

    """
    The types of search items to search within.
    """
    type: SearchType!
  ): SearchResultItemConnection!

  """
  The HTTP URL for this review dismissed event.
  """
  url: URI!
}

"""
A request for a user to review a pull request.
"""
type ReviewRequest implements Node {
  """
  Whether this request was created for a code owner
  """
  asCodeOwner: Boolean!

  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  A list of users that can be assigned to issues in this repository.
  """
  assignableUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filters users with query on user name and login.
    """
    query: String
  ): UserConnection!

  """
  The Node ID of the ReviewRequest object
  """
  id: ID!

  """
  Identifies the pull request associated with this review request.
  """
  pullRequest: PullRequest!

  """
  The reviewer that is requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
The connection type for ReviewRequest.
"""
type ReviewRequestConnection {
  """
  A list of edges.
  """
  databaseId: Int

  """
  The Node ID of the Reactable object
  """
  id: ID!

  """
  A list of nodes.
  """
  collaborators(
    """
    Collaborators affiliation level with a repository.
    """
    affiliation: CollaboratorAffiliation

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The login of one specific collaborator.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    query: String
  ): RepositoryCollaboratorConnection

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewRequest
}

"""
Represents an 'review_request_removed' event on a given pull request.
"""
type ReviewRequestRemovedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestRemovedEvent object
  """
  databaseId: Int

  """
  The Node ID of the Reaction object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review request was removed.
  """
  requestedReviewer: RequestedReviewer
}

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review was requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type ReviewStatusHovercardContext implements HovercardContext {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  The current status of the pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision
}

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
input RevokeEnterpriseOrganizationsMigratorRoleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of the user to revoke the migrator role
  """
  login: String!
}

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A discussion category by slug.
  """
  discussionCategory(
    """
    The slug of the discussion category to be returned.
    """
    slug: String!
  ): DiscussionCategory

  """
  A list of discussions that have been opened in the repository.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Only show answered or unanswered discussions
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection
}

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: UPDATED_AT, direction: DESC}

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  The user login or Team slug to revoke the migrator role from.
  """
  actor: String!

  """
  Specifies the type of the actor, can be either USER or TEAM.
  """
  actorType: ActorType!

  """
  A unique identifier for the client performing the mutation.
  """
  environments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the environments
    """
    orderBy: Environments = {field: NAME, direction: ASC}
  ): EnvironmentConnection!

  """
  The ID of the organization that the user/team belongs to.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of RevokeMigratorRole
"""
type RevokeMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Possible roles a user may have in relation to an organization.
"""
enum RoleInOrganization {
  """
  A user who is a direct member of the organization.
  """
  DIRECT_MEMBER

  """
  A user with full administrative access to the organization.
  """
  OWNER

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

"""
The level of enforcement for a rule or ruleset.
"""
enum RuleEnforcement {
  """
  createdAt: DateTime!

  """
  The Node ID of the ReadyForReviewEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  ACTIVE

  """
  Do not evaluate or enforce rules
  """
  DISABLED

  """
  Allow admins to test rules before enforcing them. Admins can view insights on
  the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
  """
  EVALUATE
}

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  Parameters used for the `branch_name_pattern` rule type
  """
  branchProtectionRule: BranchProtectionRule

  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    The head ref to compare against.
    """
    headRef: String!
  ): Comparison

  """
  The Node ID of the Ref object
  """
  id: ID!

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  commitAuthorEmailPattern: CommitAuthorEmailPatternParametersInput

  """
  Parameters used for the `commit_message_pattern` rule type
  """
  commitMessagePattern: CommitMessagePatternParametersInput

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  A list of rules from active Repository and Organization rulesets that apply to this ref.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repository rules.
    """
    orderBy: RepositoryRuleOrder = {field: UPDATED_AT, direction: DESC}
  ): RepositoryRuleConnection

  """
  The object the ref points to. Returns null when object does not exist.
  """
  hasVulnerabilityAlertsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  committerEmailPattern: CommitterEmailPatternParametersInput

  """
  Parameters used for the `pull_request` rule type
  """
  homepageUrl: URI

  """
  The Node ID of the Repository object
  """
  id: ID!

  """
  Parameters used for the `required_deployments` rule type
  """
  requiredDeployments: RequiredDeploymentsParametersInput

  """
  Parameters used for the `required_status_checks` rule type
  """
  requiredStatusChecks: RequiredStatusChecksParametersInput

  """
  Parameters used for the `tag_name_pattern` rule type
  """
  tagNamePattern: TagNamePatternParametersInput

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Ways in which lists of git refs can be ordered upon return.
"""
input RefOrder {
  """
  Parameters used for the `update` rule type
  """
  update: UpdateParametersInput

  """
  Parameters used for the `workflows` rule type
  """
  workflows: WorkflowsParametersInput
}

"""
Types which can have `RepositoryRule` objects.
"""
union RuleSource = Organization | Repository

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum SamlDigestAlgorithm {
  """
  SHA1
  """
  SHA1

  """
  SHA256
  """
  SHA256

  """
  SHA384
  """
  SHA384

  """
  SHA512
  """
  SHA512
}

"""
Branch protection rules that are enforced on the viewer.
"""
enum SamlSignatureAlgorithm {
  """
  RSA-SHA1
  """
  RSA_SHA1

  """
  RSA-SHA256
  """
  RSA_SHA256

  """
  RSA-SHA384
  """
  RSA_SHA384

  """
  RSA-SHA512
  """
  RSA_SHA512
}

"""
A Saved Reply is text a user can use to reply quickly.
"""
type SavedReply implements Node {
  """
  The body of the saved reply.
  """
  body: String!

  """
  The saved reply body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the SavedReply object
  """
  id: ID!

  """
  The title of the saved reply.
  """
  title: String!

  """
  The user that saved this reply.
  """
  user: Actor
}

"""
The connection type for SavedReply.
"""
type SavedReplyConnection {
  """
  A list of edges.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReferencedEvent object
  """
  id: ID!

  """
  A list of nodes.
  """
  nodes: [SavedReply]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SavedReply
}

"""
Ordering options for saved reply connections.
"""
input SavedReplyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order saved replies by.
  """
  field: SavedReplyOrderField!
}

"""
Properties by which saved reply connections can be ordered.
"""
enum SavedReplyOrderField {
  """
  Order saved reply by when they were updated.
  """
  UPDATED_AT
}

"""
The results of a search.
"""
union SearchResultItem = App | Discussion | Issue | MarketplaceListing | Organization | PullRequest | Repository | User

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
type SearchResultItemConnection {
  """
  The total number of pieces of code that matched the search query. Regardless
  of the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  codeCount: Int!

  """
  The total number of discussions that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  discussionCount: Int!

  """
  A list of edges.
  """
  edges: [SearchResultItemEdge]

  """
  How the default commit message will be generated when merging a pull request.
  """
  mergeCommitMessage: MergeCommitMessage!

  """
  How the default commit title will be generated when merging a pull request.
  """
  mergeCommitTitle: MergeCommitTitle!

  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    branch: String
  ): MergeQueue

  """
  Returns a single milestone from the current repository by number.
  """
  issueCount: Int!

  """
  A list of nodes.
  """
  nodes: [SearchResultItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of repositories that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  repositoryCount: Int!

  """
  The total number of users that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  userCount: Int!

  """
  The total number of wiki pages that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  wikiCount: Int!
}

"""
An edge in a connection.
"""
type SearchResultItemEdge {
  """
  A cursor for use in pagination.
  """
  descriptionHTML: HTML

  """
  The Node ID of the Release object
  """
  id: ID!

  """
  The item at the end of the edge.
  """
  node: SearchResultItem

  """
  Text matches on the result found.
  """
  textMatches: [TextMatch]
}

"""
Represents the individual results of a search.
"""
enum SearchType {
  """
  Returns matching discussions in repositories.
  """
  DISCUSSION

  """
  Returns results matching issues in repositories.
  """
  ISSUE

  """
  Returns results matching repositories.
  """
  REPOSITORY

  """
  Returns results matching users and organizations on GitHub.
  """
  USER
}

"""
A GitHub Security Advisory
"""
type SecurityAdvisory implements Node {
  """
  The classification of the advisory
  """
  classification: SecurityAdvisoryClassification!

  """
  The CVSS associated with this advisory
  """
  cvss: CVSS!

  """
  CWEs associated with this Advisory
  """
  cwes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A name to filter the assets by.
    """
    name: String
  ): ReleaseAssetConnection!

  """
  The repository that the release belongs to.
  """
  repository: Repository!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  This is a long plaintext description of the advisory
  """
  description: String!

  """
  The GitHub Security Advisory ID
  """
  ghsaId: String!

  """
  The Node ID of the SecurityAdvisory object
  """
  id: ID!

  """
  A list of identifiers for this advisory
  """
  identifiers: [SecurityAdvisoryIdentifier!]!

  """
  The permalink for the advisory's dependabot alerts page
  """
  notificationsPermalink: URI

  """
  The organization that originated the advisory
  """
  origin: String!

  """
  The permalink for the advisory
  """
  permalink: URI

  """
  When the advisory was published
  """
  publishedAt: DateTime!

  """
  A list of references for this advisory
  """
  references: [SecurityAdvisoryReference!]!

  """
  The severity of the advisory
  """
  severity: SecurityAdvisorySeverity!

  """
  Finds and returns the Project according to the provided Project number.
  """
  downloadUrl: URI!

  """
  The Node ID of the ReleaseAsset object
  """
  id: ID!

  """
  Vulnerabilities associated with this Advisory
  """
  vulnerabilities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The HTTP path listing the repository's projects
  """
  MALWARE
}

"""
The connection type for SecurityAdvisory.
"""
type SecurityAdvisoryConnection {
  """
  A list of edges.
  """
  edges: [SecurityAdvisoryEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityAdvisory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible ecosystems of a security vulnerability's package.
"""
enum SecurityAdvisoryEcosystem {
  """
  GitHub Actions
  """
  ACTIONS

  """
  PHP packages hosted at packagist.org
  """
  COMPOSER

  """
  Erlang/Elixir packages hosted at hex.pm
  """
  ERLANG

  """
  Go modules
  """
  GO

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

  """
  Python packages hosted at PyPI.org
  """
  PIP

  """
  Dart packages hosted at pub.dev
  """
  PUB

  """
  Ruby gems hosted at RubyGems.org
  """
  RUBYGEMS

  """
  Rust crates
  """
  RUST

  """
  Swift packages
  """
  SWIFT
}

"""
An edge in a connection.
"""
type SecurityAdvisoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityAdvisory
}

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  Identifies the date and time when the repository was last pushed to.
  """
  type: String!

  """
  The identifier
  """
  value: String!
}

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter {
  """
  The identifier type.
  """
  type: SecurityAdvisoryIdentifierType!

  """
  The identifier string. Supports exact or partial matching.
  """
  value: String!
}

"""
Identifier formats available for advisories.
"""
enum SecurityAdvisoryIdentifierType {
  """
  Common Vulnerabilities and Exposures Identifier.
  """
  CVE

  """
  GitHub Security Advisory ID.
  """
  GHSA
}

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security advisories by.
  """
  field: SecurityAdvisoryOrderField!
}

"""
Properties by which security advisory connections can be ordered.
"""
enum SecurityAdvisoryOrderField {
  """
  Order advisories by publication time
  """
  PUBLISHED_AT

  """
  Order advisories by update time
  """
  UPDATED_AT
}

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise from which the user should be removed.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the user to remove from the enterprise.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  The user that was removed from the enterprise.
  """
  user: User

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
type SecurityAdvisoryPackage {
  """
  The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
  """
  ecosystem: SecurityAdvisoryEcosystem!

  """
  The package name
  """
  name: String!
}

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  The package name or version
  """
  identifier: String!
}

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  A publicly accessible reference
  """
  url: URI!
}

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  Critical.
  """
  CRITICAL

  """
  High.
  """
  HIGH

  """
  Low.
  """
  LOW

  """
  Moderate.
  """
  MODERATE
}

"""
An individual vulnerability within an Advisory
"""
type SecurityVulnerability {
  """
  The Advisory associated with this Vulnerability
  """
  advisory: SecurityAdvisory!

  """
  The first version containing a fix for the vulnerability
  """
  firstPatchedVersion: SecurityAdvisoryPackageVersion

  """
  A description of the vulnerable package
  """
  package: SecurityAdvisoryPackage!

  """
  The severity of the vulnerability within this package
  """
  severity: SecurityAdvisorySeverity!

  """
  When the vulnerability was last updated
  """
  updatedAt: DateTime!

  """
  A string that describes the vulnerable package versions.
  This string follows a basic syntax with a few forms.
  + `= 0.2.0` denotes a single vulnerable version.
  + `<= 1.0.8` denotes a version range up to and including the specified version
  + `< 0.1.11` denotes a version range up to, but excluding, the specified version
  + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
  + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
  """
  vulnerableVersionRange: String!
}

"""
The connection type for SecurityVulnerability.
"""
type SecurityVulnerabilityConnection {
  """
  A list of edges.
  """
  edges: [SecurityVulnerabilityEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityVulnerability]

  """
  Returns a single ruleset from the current repository by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!

    """
    Include rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true
  ): RepositoryRuleset

  """
  A list of rulesets for this repository.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  subject: Reactable
}

  """
  The security policy URL.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SecurityVulnerabilityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  How the default commit message will be generated when squash merging a pull request.
  """
  squashMergeCommitMessage: SquashMergeCommitMessage!

  """
  How the default commit title will be generated when squash merging a pull request.
  """
  squashMergeCommitTitle: SquashMergeCommitTitle!

  """
  Whether a squash merge commit can use the pull request title as default.
  """
  squashPrTitleUsedAsDefault: Boolean!
    @deprecated(
      reason: "`squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC."
    )

"""
Ordering options for security vulnerability connections
"""
input SecurityVulnerabilityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security vulnerabilities by.
  """
  field: SecurityVulnerabilityOrderField!
}

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

  """
  The Node ID of the RemovedFromMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The reason this pull request was removed from the queue.
  """
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
enum SecurityVulnerabilityOrderField {
  """
  Order vulnerability by update time
  """
  UPDATED_AT
}

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The digest algorithm used to sign SAML requests for the identity provider.
  """
  databaseId: Int

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  id: ID!

  """
  The ID of the enterprise on which to set an identity provider.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: String!

  """
  The Issuer Entity ID for the SAML identity provider
  """
  issuer: String

  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: SamlSignatureAlgorithm!

  """
  The URL endpoint for the identity provider's SAML SSO.
  """
  currentTitle: String!

  """
  The Node ID of the RenamedTitleEvent object
  """
  id: ID!

"""
Autogenerated return type of SetEnterpriseIdentityProvider
"""
type SetEnterpriseIdentityProviderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The identity provider for the enterprise.
  """
  identityProvider: EnterpriseIdentityProvider
}

"""
An object which has a renamable title
"""
union RenamedTitleSubject = Issue | PullRequest

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
input SetOrganizationInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the organization to set a limit for.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
type SetOrganizationInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization that the interaction limit was set for.
  """
  organization: Organization
}

"""
Autogenerated input type of SetRepositoryInteractionLimit
"""
input SetRepositoryInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the repository to set a limit for.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

  """
  The repository that the interaction limit was set for.
  """
  repository: Repository
}

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """
    The number for the vulnerability alert to be returned.
    """
    number: Int!
  ): RepositoryVulnerabilityAlert

  """
  A list of vulnerability alerts that are on this repository.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user that the interaction limit was set for.
  """
  user: User
}

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type SmimeSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  id: ID!

  """
  True if the signature is valid and verified by GitHub.
  """
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """
  ASCII-armored signature header from object.
  """
  signature: String!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Whether contributors are required to sign off on web-based commits in this repository.
  """
  webCommitSignoffRequired: Boolean!
}

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Name of the social media account as it appears on the profile.
  """
  displayName: String!

  """
  Software or company that hosts the social media account.
  """
  provider: SocialAccountProvider!

  """
  URL of the social media account.
  """
  url: URI!
}

"""
The connection type for SocialAccount.
"""
type SocialAccountConnection {
  """
  A list of edges.
  """
  edges: [SocialAccountEdge]

  """
  A list of nodes.
  """
  nodes: [SocialAccount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SocialAccount
}

"""
Software or company that hosts social media accounts.
"""
enum SocialAccountProvider {
  """
  Social media and networking website.
  """
  FACEBOOK

  """
  Catch-all for social media providers that do not yet have specific handling.
  """
  GENERIC

  """
  Fork of Mastodon with a greater focus on local posting.
  """
  HOMETOWN

  """
  Social media website with a focus on photo and video sharing.
  """
  INSTAGRAM

  """
  Professional networking website.
  """
  LINKEDIN

  """
  Open-source federated microblogging service.
  """
  MASTODON

  """
  JavaScript package registry.
  """
  NPM

  """
  Social news aggregation and discussion website.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddMemberAuditEntry object
  """
  id: ID!

  """
  Live-streaming service.
  """
  TWITCH

  """
  Microblogging website.
  """
  TWITTER

  """
  Online video platform.
  """
  YOUTUBE
}

"""
Entities that can sponsor others via GitHub Sponsors
"""
union Sponsor = Organization | User

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The amount in cents.
  """
  amountInCents: Int!

  """
  The amount in USD, formatted as a string.
  """
  formattedAmount: String!

  """
  The sponsor's GitHub account.
  """
  sponsor: Sponsorable!

  """
  The maintainer's GitHub account.
  """
  sponsorable: Sponsorable!
}

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  A list of edges.
  """
  edges: [SponsorAndLifetimeValueEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorAndLifetimeValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorAndLifetimeValue
}

"""
Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
"""
input SponsorAndLifetimeValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order results by.
  """
  field: SponsorAndLifetimeValueOrderField!
}

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  LIFETIME_VALUE

  """
  Order results by the sponsor's login (username).
  """
  SPONSOR_LOGIN

  """
  Order results by the sponsor's relevance to the viewer.
  """
  SPONSOR_RELEVANCE
}

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  A list of edges.
  """
  edges: [SponsorEdge]

  """
  A list of nodes.
  """
  nodes: [Sponsor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type SponsorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The total size in kilobytes of all repositories in the connection. Value will
  never be larger than max 32-bit signed integer.
  """
  node: Sponsor
}

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
input SponsorOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsor entities by.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  id: ID!

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN

  """
  Order sponsors by their relevance to the viewer.
  """
  RELEVANCE
}

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  estimatedNextSponsorsPayoutInCents: Int!

  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  hasSponsorsListing: Boolean!

  """
  Whether the given account is sponsoring this user/organization.
  """
  isSponsoredBy(
    """
    The target account's login.
    """
    accountLogin: String!
  ): Boolean!

  """
  True if the viewer is sponsored by this user/organization.
  """
  isSponsoringViewer: Boolean!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!
}

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

"""
Parameters to be used for the repository_id condition
"""
type RepositoryIdConditionTarget {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
A subset of repository info.
"""
interface RepositoryInfo {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoArchivedAuditEntry object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  hasWikiEnabled: Boolean!

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  Identifies the date and time when the repository was last pushed to.
  """
  viewerIsSponsoring: Boolean!
}

"""
Entities that can be sponsored via GitHub Sponsors
"""
union SponsorableItem = Organization | User

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  A list of edges.
  """
  edges: [SponsorableItemEdge]

  """
  The migration source access token.
  """
  nodes: [SponsorableItem]

  """
  The Node ID of the issue to be transferred
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  Whether to continue the migration on error. Defaults to `true`.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of UnlinkProjectV2FromRepository
"""
type SponsorableItemEdge {
  """
  The signed URL to access the user-uploaded git archive.
  """
  number: Int!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The repository the project is no longer linked to.
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  id: ID!

"""
The privacy of a sponsorship
"""
enum TeamNotificationSetting {
  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

"""
The possible default commit messages for squash merges.
"""
enum SquashMergeCommitMessage {
  """
  The user or organization that is being sponsored, the maintainer.
  """
  sponsorable: Sponsorable!

  """
  The associated sponsorship tier.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  The activity was cancelling a sponsorship.
  """
  email: String

  """
  The Node ID of the RepositoryInvitation object
  """
  id: ID!

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

"""
Represents an SSH signature on a Commit or Tag.
"""
type SshSignature implements GitSignature {
  """
  The activity was scheduling a downgrade or cancellation.
  """
  PENDING_CHANGE

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  TIER_CHANGE
}

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  Hex-encoded fingerprint of the key that signed this object.
  """
  edges: [SponsorsActivityEdge]

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  nodes: [SponsorsActivity]

  """
  ASCII-armored signature header from object.
  """
  signature: String!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  True if the signature was made with GitHub's signing key.
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

"""
Autogenerated input type of UnlinkRepositoryFromProject
"""
type UpdatePatreonSponsorabilityPayload {
  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  RENAME

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type RepositoryMigration implements Migration & Node {
  """
  The migration flag to continue on error.
  """
  continueOnError: Boolean!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  id: ID!

  """
  Find a project by number.
  """
  AE

  """
  Afghanistan
  """
  AF

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  AG

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
Required status check
"""
interface Starrable {
  """
  Albania
  """
  AL

  """
  Armenia
  """
  AM

  """
  Angola
  """
  AO

  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland
  """
  AX

  """
  Azerbaijan
  """
  AZ

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
interface RepositoryNode {
  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  BE

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  BH

  """
  Burundi
  """
  BI

  """
  Benin
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The Node ID of the RepositoryOwner object
  """
  id: ID!

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

  """
  The HTTP path listing organization's projects
  """
  id: ID!

  """
  Bolivia
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  BR

  """
  Bahamas
  """
  BS

  """
  Bhutan
  """
  BT

  """
  Bouvet Island
  """
  BV

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  BY

  """
  Belize
  """
  PUBLIC
}

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  LOCK_BRANCH

  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  MERGE_QUEUE_LOCKED_REF

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REQUIRED_SIGNATURES

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Secret scanning
  """
  SECRET_SCANNING

  """
  Tag
  """
  TAG

  """
  Tag name pattern
  """
  TAG_NAME_PATTERN

  """
  Only allow users with bypass permission to update matching refs.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  WORKFLOWS

  """
  Workflow files cannot be modified.
  """
  WORKFLOW_UPDATES
}

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetBypassActorConnection

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The enforcement level of this ruleset
  """
  enforcement: RuleEnforcement!

  """
  The Node ID of the RepositoryRuleset object
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The type of rule.
    """
    type: RepositoryRuleType
  ): RepositoryRuleConnection

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  repositoryRoleName: String

  """
  Identifies the ruleset associated with the allowed actor
  """
  repositoryRuleset: RepositoryRuleset
}

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  ALWAYS

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRulesetBypassActor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  actorId: ID

  """
  The bypass mode for this actor.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode!

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  A list of nodes.
  """
  nodes: [RepositoryRuleset]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  createdAt: PreciseDateTime!

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  Branch
  """
  BRANCH

  """
  Tag
  """
  TAG
}

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  id: ID!

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Côte d'Ivoire
  """
  CI

"""
Autogenerated input type of UnarchiveProjectV2Item
"""
input UnarchiveProjectV2ItemInput {
  """
  Cook Islands
  """
  CK

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

  """
  Curaçao
  """
  CW

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Dominican Republic
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  id: ID!

  """
  Algeria
  """
  DZ

  """
  Ecuador
  """
  EC

  """
  Estonia
  """
  EE

"""
Required status check
"""
type StatusCheckConfiguration {
  """
  Egypt
  """
  EG

  """
  Western Sahara
  """
  EH

"""
Required status check
"""
input StatusCheckConfigurationInput {
  """
  Eritrea
  """
  ER

  """
  Spain
  """
  ES

"""
Represents the rollup for both the check runs and status for a commit.
"""
input UpdatePatreonSponsorabilityInput {
  """
  Ethiopia
  """
  ET

  """
  Finland
  """
  FI

  """
  Fiji
  """
  FJ

  """
  Falkland Islands
  """
  FK

  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  France
  """
  FR

  """
  Gabon
  """
  GA

  """
  United Kingdom
  """
  GB

  """
  Grenada
  """
  GD

  """
  Georgia
  """
  GE

    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    orderBy: TeamOrder

  """
  Guernsey
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  id: ID!

  """
  Ghana
  """
  GH

  """
  Gibraltar
  """
  GI

  """
  Greenland
  """
  GL

  """
  Gambia
  """
  GM

  """
  Guinea
  """
  GN

"""
Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
"""
type UpdatePatreonSponsorabilityPayload {
  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  GP

  """
  Equatorial Guinea
  """
  GQ

  """
  Greece
  """
  GR

  """
  South Georgia and South Sandwich Islands
  """
  GS

  """
  When was the alert auto-dismissed?
  """
  autoDismissedAt: DateTime

  """
  When was the alert created?
  """
  GT

  """
  Guam
  """
  GU

  """
  Guinea-Bissau
  """
  GW

  """
  Comment explaining the reason the alert was dismissed
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

  """
  The reason the alert was dismissed
  """
  GY

  """
  Hong Kong
  """
  HK

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  HM

"""
An audit entry in an organization audit log.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

"""
Ways in which team connections can be ordered.
"""
interface Subscribable {
  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  id: ID!

  """
  Haiti
  """
  HT

  """
  Hungary
  """
  HU

  """
  Indonesia
  """
  ID

  """
  Ireland
  """
  IE

  """
  Israel
  """
  IL

  """
  Isle of Man
  """
  IM

  """
  India
  """
  IN

  """
  British Indian Ocean Territory
  """
  IO

  """
  Iraq
  """
  IQ

  """
  Iran
  """
  IR

  """
  Iceland
  """
  IS

  """
  Italy
  """
  IT

  """
  Jersey
  """
  JE

  """
  Jamaica
  """
  JM

  """
  Jordan
  """
  JO

  """
  Japan
  """
  JP

  """
  An alert that has been automatically closed by Dependabot.
  """
  AUTO_DISMISSED

  """
  An alert that has been manually closed by a user.
  """
  KE

  """
  Kyrgyzstan
  """
  KG

  """
  Cambodia
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

  """
  Kiribati
  """
  KI

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
type OrganizationIdentityProvider implements Node {
  """
  Comoros
  """
  KM

  """
  Saint Kitts and Nevis
  """
  KN

  """
  Korea, South
  """
  union: Boolean = false

  """
  Kuwait
  """
  KW

  """
  Cayman Islands
  """
  KY

  """
  Kazakhstan
  """
  KZ

  """
  Laos
  """
  LA

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

  """
  Saint Lucia
  """
  LC

  """
  Liechtenstein
  """
  LI

  """
  Sri Lanka
  """
  LK

  """
  Liberia
  """
  LR

  """
  Lesotho
  """
  WAITING
}

"""
Types that can be requested reviewers.
"""
union RequestedReviewer = Bot | Mannequin | Team | User

  """
  Lithuania
  """
  LT

  """
  Luxembourg
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  LV

  """
  Libya
  """
  LY

  """
  Morocco
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

  """
  Monaco
  """
  MC

  """
  Moldova
  """
  MD

  """
  Montenegro
  """
  ME

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  id: ID!

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
interface SubscribableThread {
  """
  Saint Martin (French part)
  """
  MF

  """
  Madagascar
  """
  MG

  """
  Marshall Islands
  """
  MH

  """
  Macedonia
  """
  MK

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfiguration!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
input RequiredStatusChecksParametersInput {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfigurationInput!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Autogenerated input type of RerequestCheckSuite
"""
input RerequestCheckSuiteInput {
  """
  Mali
  """
  ML

  """
  Myanmar
  """
  MM

  """
  Mongolia
  """
  MN

  """
  Macau
  """
  MO

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
input ResolveReviewThreadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the thread to resolve
  """
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The thread to resolve.
  """
  thread: PullRequestReviewThread
}

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveTopicAuditEntry object
  """
  id: ID!

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the published tier to retire.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was retired.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  The description of the revert pull request.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates whether the revert pull request should be a draft.
  """
  draft: Boolean = false

  """
  The ID of the pull request to revert.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The title of the revert pull request.
  """
  title: String
}

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
type RevertPullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that was reverted.
  """
  pullRequest: PullRequest

  """
  The new pull request that reverts the input pull request.
  """
  revertPullRequest: PullRequest
}

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The actor that can dismiss.
  """
  actor: ReviewDismissalAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the ReviewDismissalAllowance object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union ReviewDismissalAllowanceActor = App | Team | User

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  A list of edges.
  """
  edges: [ReviewDismissalAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewDismissalAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewDismissalAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewDismissalAllowance
}

"""
Represents a 'review_dismissed' event on a given issue or pull request.
"""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  A list of users that can be assigned to issues in this repository.
  """
  assignableUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  The total number of organizations this user is in
  """
  totalOrganizationCount: Int!
}

"""
Information for an uploaded package.
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

    """
    Filters users with query on user name and login.
    """
    query: String
  ): UserConnection!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Identifies the optional message associated with the 'review_dismissed' event.
  """
  dismissalMessage: String

  """
  Identifies the optional message associated with the event, rendered to HTML.
  """
  dismissalMessageHTML: String

  """
  The Node ID of the ReviewDismissedEvent object
  """
  id: ID!

  """
  Identifies the previous state of the review with the 'review_dismissed' event.
  """
  collaborators(
    """
    Collaborators affiliation level with a repository.
    """
    affiliation: CollaboratorAffiliation

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The login of one specific collaborator.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    query: String
  ): RepositoryCollaboratorConnection

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the commit which caused the review to become stale.
  """
  pullRequestCommit: PullRequestCommit

  """
  The HTTP path for this review dismissed event.
  """
  resourcePath: URI!

  """
  Identifies the review associated with the 'review_dismissed' event.
  """
  review: PullRequestReview

  """
  The HTTP URL for this review dismissed event.
  """
  url: URI!
}

"""
A request for a user to review a pull request.
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

  """
  MD5 hash of the file.
  """
  md5: String

  """
  Name of the file.
  """
  name: String!

  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

  """
  Identifies the date and time when the object was created.
  """
  asCodeOwner: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ReviewRequest object
  """
  id: ID!

  """
  Identifies the pull request associated with this review request.
  """
  pullRequest: PullRequest!

  """
  The reviewer that is requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
The connection type for ReviewRequest.
"""
type ReviewRequestConnection {
  """
  A list of edges.
  """
  edges: [ReviewRequestEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewRequest
}

"""
Represents an 'review_request_removed' event on a given pull request.
"""
type ReviewRequestRemovedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestRemovedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  A discussion category by slug.
  """
  CREATED_AT
}

"""
Represents an owner of a package.
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  A list of discussions that have been opened in the repository.
  """
  discussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Only show answered or unanswered discussions
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Only include discussions that belong to the category with this ID.
    """
    categoryId: ID = null

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: UPDATED_AT, direction: DESC}

    """
    A list of states to filter the discussions by.
    """
    repositoryId: ID
  ): PackageConnection!
}

"""
Represents a object that contains package activity statistics such as downloads.
"""
type PackageStatistics {
  """
  Number of times the package was downloaded since it was created.
  """
  downloadsTotalCount: Int!
}

"""
A version tag contains the mapping between a tag name and a version.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review was requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type ReviewStatusHovercardContext implements HovercardContext {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  The current status of the pull request with respect to code review.
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

  """
  An npm package.
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  A nuget package.
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of the user to revoke the migrator role
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organizations that had the migrator role revoked for the given user.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

  """
  The package associated with this version.
  """
  package: Package

  """
  The platform this version was built for.
  """
  platform: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection
}

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The user login or Team slug to revoke the migrator role from.
  """
  actor: String!

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  actorType: ActorType!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Whether vulnerability alerts are enabled for the repository.
  """
  hasVulnerabilityAlertsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of RevokeMigratorRole
"""
type RevokeMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  homepageUrl: URI

  """
  The Node ID of the Repository object
  """
  id: ID!

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Possible roles a user may have in relation to an organization.
"""
enum RoleInOrganization {
  """
  A user who is a direct member of the organization.
  """
  DIRECT_MEMBER

  """
  A user with full administrative access to the organization.
  """
  OWNER

  """
  A user who is unaffiliated with the organization.
  """
  UNAFFILIATED
}

"""
The level of enforcement for a rule or ruleset.
"""
enum RuleEnforcement {
  """
  Rules will be enforced
  """
  ACTIVE

  """
  Do not evaluate or enforce rules
  """
  DISABLED

  """
  Allow admins to test rules before enforcing them. Admins can view insights on
  the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
  """
  EVALUATE
}

"""
Types which can be parameters for `RepositoryRule` objects.
"""
union RuleParameters =
    BranchNamePatternParameters
  | CommitAuthorEmailPatternParameters
  | CommitMessagePatternParameters
  | CommitterEmailPatternParameters
  | PullRequestParameters
  | RequiredDeploymentsParameters
  | RequiredStatusChecksParameters
  | TagNamePatternParameters
  | UpdateParameters
  | WorkflowsParameters

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  Parameters used for the `branch_name_pattern` rule type
  """
  branchNamePattern: BranchNamePatternParametersInput

  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The source of this permission.
  """
  commitAuthorEmailPattern: CommitAuthorEmailPatternParametersInput

  """
  Parameters used for the `commit_message_pattern` rule type
  """
  commitMessagePattern: CommitMessagePatternParametersInput

  """
  Parameters used for the `committer_email_pattern` rule type
  """
  committerEmailPattern: CommitterEmailPatternParametersInput

  """
  Parameters used for the `pull_request` rule type
  """
  pullRequest: PullRequestParametersInput

  """
  Parameters used for the `required_deployments` rule type
  """
  requiredDeployments: RequiredDeploymentsParametersInput

  """
  Parameters used for the `required_status_checks` rule type
  """
  requiredStatusChecks: RequiredStatusChecksParametersInput

  """
  Parameters used for the `tag_name_pattern` rule type
  """
  tagNamePattern: TagNamePatternParametersInput

  """
  Parameters used for the `update` rule type
  """
  update: UpdateParametersInput

  """
  Parameters used for the `workflows` rule type
  """
  workflows: WorkflowsParametersInput
}

"""
Types which can have `RepositoryRule` objects.
"""
union RuleSource = Organization | Repository

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum SamlDigestAlgorithm {
  """
  SHA1
  """
  SHA1

  """
  SHA256
  """
  SHA256

  """
  SHA384
  """
  SHA384

  """
  SHA512
  """
  SHA512
}

"""
The possible signature algorithms used to sign SAML requests for a Identity Provider.
"""
enum SamlSignatureAlgorithm {
  """
  RSA-SHA1
  """
  RSA_SHA1

  """
  RSA-SHA256
  """
  RSA_SHA256

  """
  RSA-SHA384
  """
  RSA_SHA384

  """
  RSA-SHA512
  """
  RSA_SHA512
}

"""
A Saved Reply is text a user can use to reply quickly.
"""
type SavedReply implements Node {
  """
  The body of the saved reply.
  """
  body: String!

  """
  The saved reply body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the SavedReply object
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

  """
  The title of the saved reply.
  """
  title: String!

  """
  The user that saved this reply.
  """
  user: Actor
}

"""
The connection type for SavedReply.
"""
type SavedReplyConnection {
  """
  A list of edges.
  """
  edges: [SavedReplyEdge]

  """
  A list of nodes.
  """
  nodes: [SavedReply]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SavedReply
}

"""
Ordering options for saved reply connections.
"""
input SavedReplyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order saved replies by.
  """
  field: SavedReplyOrderField!
}

"""
Properties by which saved reply connections can be ordered.
"""
enum SavedReplyOrderField {
  """
  Order saved reply by when they were updated.
  """
  UPDATED_AT
}

"""
The results of a search.
"""
union SearchResultItem = App | Discussion | Issue | MarketplaceListing | Organization | PullRequest | Repository | User

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
type SearchResultItemConnection {
  """
  The total number of pieces of code that matched the search query. Regardless
  of the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  codeCount: Int!

  """
  The total number of discussions that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  discussionCount: Int!

  """
  A list of edges.
  """
  edges: [SearchResultItemEdge]

  """
  How the default commit message will be generated when merging a pull request.
  """
  mergeCommitMessage: MergeCommitMessage!

  """
  How the default commit title will be generated when merging a pull request.
  """
  mergeCommitTitle: MergeCommitTitle!

  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    branch: String
  ): MergeQueue

  """
  Returns a single milestone from the current repository by number.
  """
  issueCount: Int!

  """
  A list of nodes.
  """
  nodes: [SearchResultItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of repositories that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  repositoryCount: Int!

  """
  The total number of users that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  userCount: Int!

  """
  The total number of wiki pages that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  wikiCount: Int!
}

"""
An edge in a connection.
"""
type SearchResultItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

  """
  Text matches on the result found.
  """
  textMatches: [TextMatch]
}

"""
Represents the individual results of a search.
"""
enum SearchType {
  """
  Returns matching discussions in repositories.
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

  """
  Returns results matching issues in repositories.
  """
  ISSUE

  """
  Returns results matching repositories.
  """
  REPOSITORY

  """
  Returns results matching users and organizations on GitHub.
  """
  USER
}

"""
A GitHub Security Advisory
"""
type SecurityAdvisory implements Node {
  """
  The classification of the advisory
  """
  classification: SecurityAdvisoryClassification!

  """
  The CVSS associated with this advisory
  """
  cvss: CVSS!

  """
  CWEs associated with this Advisory
  """
  cwes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CWEConnection!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  This is a long plaintext description of the advisory
  """
  description: String!

  """
  The GitHub Security Advisory ID
  """
  ghsaId: String!

  """
  The Node ID of the SecurityAdvisory object
  """
  id: ID!

  """
  A list of identifiers for this advisory
  """
  identifiers: [SecurityAdvisoryIdentifier!]!

  """
  The permalink for the advisory's dependabot alerts page
  """
  notificationsPermalink: URI

  """
  The organization that originated the advisory
  """
  origin: String!

  """
  The permalink for the advisory
  """
  permalink: URI

  """
  When the advisory was published
  """
  publishedAt: DateTime!

  """
  A list of references for this advisory
  """
  references: [SecurityAdvisoryReference!]!

  """
  The severity of the advisory
  """
  severity: SecurityAdvisorySeverity!

  """
  Finds and returns the Project according to the provided Project number.
  """
  updatedAt: DateTime!

  """
  Vulnerabilities associated with this Advisory
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

  """
  The HTTP path listing the repository's projects
  """
  MALWARE
}

"""
The connection type for SecurityAdvisory.
"""
type SecurityAdvisoryConnection {
  """
  A list of edges.
  """
  edges: [SecurityAdvisoryEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityAdvisory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible ecosystems of a security vulnerability's package.
"""
enum SecurityAdvisoryEcosystem {
  """
  GitHub Actions
  """
  ACTIONS

  """
  PHP packages hosted at packagist.org
  """
  COMPOSER

  """
  Erlang/Elixir packages hosted at hex.pm
  """
  ERLANG

  """
  Go modules
  """
  GO

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

  """
  Python packages hosted at PyPI.org
  """
  PIP

  """
  Dart packages hosted at pub.dev
  """
  PUB

  """
  Ruby gems hosted at RubyGems.org
  """
  RUBYGEMS

  """
  Rust crates
  """
  RUST

  """
  Swift packages
  """
  SWIFT
}

"""
An edge in a connection.
"""
type SecurityAdvisoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityAdvisory
}

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  Identifies the date and time when the repository was last pushed to.
  """
  type: String!

  """
  The identifier
  """
  value: String!
}

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter {
  """
  The identifier type.
  """
  type: SecurityAdvisoryIdentifierType!

  """
  The identifier string. Supports exact or partial matching.
  """
  value: String!
}

"""
Identifier formats available for advisories.
"""
enum SecurityAdvisoryIdentifierType {
  """
  Common Vulnerabilities and Exposures Identifier.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

  """
  GitHub Security Advisory ID.
  """
  GHSA
}

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security advisories by.
  """
  field: SecurityAdvisoryOrderField!
}

"""
Properties by which security advisory connections can be ordered.
"""
enum SecurityAdvisoryOrderField {
  """
  Order advisories by publication time
  """
  PUBLISHED_AT

  """
  Order advisories by update time
  """
  UPDATED_AT
}

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
  """
  ecosystem: SecurityAdvisoryEcosystem!

  """
  The package name
  """
  name: String!
}

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  The package name or version
  """
  identifier: String!
}

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  A publicly accessible reference
  """
  url: URI!
}

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  Critical.
  """
  CRITICAL

  """
  High.
  """
  HIGH

  """
  Low.
  """
  LOW

  """
  Moderate.
  """
  MODERATE
}

"""
An individual vulnerability within an Advisory
"""
type SecurityVulnerability {
  """
  The Advisory associated with this Vulnerability
  """
  advisory: SecurityAdvisory!

  """
  The first version containing a fix for the vulnerability
  """
  firstPatchedVersion: SecurityAdvisoryPackageVersion

  """
  A description of the vulnerable package
  """
  package: SecurityAdvisoryPackage!

  """
  The severity of the vulnerability within this package
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

  """
  When the vulnerability was last updated
  """
  updatedAt: DateTime!

  """
  A string that describes the vulnerable package versions.
  This string follows a basic syntax with a few forms.
  + `= 0.2.0` denotes a single vulnerable version.
  + `<= 1.0.8` denotes a version range up to and including the specified version
  + `< 0.1.11` denotes a version range up to, but excluding, the specified version
  + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
  + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
  """
  vulnerableVersionRange: String!
}

"""
The connection type for SecurityVulnerability.
"""
type SecurityVulnerabilityConnection {
  """
  A list of edges.
  """
  edges: [SecurityVulnerabilityEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityVulnerability]

  """
  Returns a single ruleset from the current repository by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!

    """
    Include rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true
  ): RepositoryRuleset

  """
  A list of rulesets for this repository.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The security policy URL.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SecurityVulnerabilityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  How the default commit message will be generated when squash merging a pull request.
  """
  squashMergeCommitMessage: SquashMergeCommitMessage!

  """
  How the default commit title will be generated when squash merging a pull request.
  """
  squashMergeCommitTitle: SquashMergeCommitTitle!

  """
  Whether a squash merge commit can use the pull request title as default.
  """
  squashPrTitleUsedAsDefault: Boolean!
    @deprecated(
      reason: "`squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC."
    )

"""
Ordering options for security vulnerability connections
"""
input SecurityVulnerabilityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security vulnerabilities by.
  """
  field: SecurityVulnerabilityOrderField!
}

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  """
  Order vulnerability by update time
  """
  UPDATED_AT
}

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The digest algorithm used to sign SAML requests for the identity provider.
  """
  digestMethod: SamlDigestAlgorithm!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: String!

  """
  The Issuer Entity ID for the SAML identity provider
  """
  issuer: String

  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: SamlSignatureAlgorithm!

  """
  The URL endpoint for the identity provider's SAML SSO.
  """
  ssoUrl: URI!
}

"""
Autogenerated return type of SetEnterpriseIdentityProvider
"""
type SetEnterpriseIdentityProviderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

  """
  The identity provider for the enterprise.
  """
  identityProvider: EnterpriseIdentityProvider
}

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the organization to set a limit for.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
type SetOrganizationInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization that the interaction limit was set for.
  """
  organization: Organization
}

"""
Autogenerated input type of SetRepositoryInteractionLimit
"""
input SetRepositoryInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the repository to set a limit for.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  repository: Repository
}

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """
    The number for the vulnerability alert to be returned.
    """
    number: Int!
  ): RepositoryVulnerabilityAlert

  """
  A list of vulnerability alerts that are on this repository.
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user that the interaction limit was set for.
  """
  user: User
}

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type SmimeSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  True if the signature is valid and verified by GitHub.
  """
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """
  ASCII-armored signature header from object.
  """
  signature: String!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Whether contributors are required to sign off on web-based commits in this repository.
  """
  webCommitSignoffRequired: Boolean!
}

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Name of the social media account as it appears on the profile.
  """
  displayName: String!

  """
  Software or company that hosts the social media account.
  """
  provider: SocialAccountProvider!

  """
  URL of the social media account.
  """
  url: URI!
}

"""
The connection type for SocialAccount.
"""
type SocialAccountConnection {
  """
  A list of edges.
  """
  edges: [SocialAccountEdge]

  """
  A list of nodes.
  """
  nodes: [SocialAccount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SocialAccount
}

"""
Software or company that hosts social media accounts.
"""
enum SocialAccountProvider {
  """
  Social media and networking website.
  """
  FACEBOOK

  """
  Catch-all for social media providers that do not yet have specific handling.
  """
  GENERIC

  """
  Fork of Mastodon with a greater focus on local posting.
  """
  HOMETOWN

  """
  Social media website with a focus on photo and video sharing.
  """
  INSTAGRAM

  """
  Professional networking website.
  """
  LINKEDIN

  """
  Open-source federated microblogging service.
  """
  MASTODON

  """
  JavaScript package registry.
  """
  NPM

  """
  Social news aggregation and discussion website.
  """
  REDDIT

  """
  Live-streaming service.
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

  """
  Microblogging website.
  """
  TWITTER

  """
  Online video platform.
  """
  YOUTUBE
}

"""
Entities that can sponsor others via GitHub Sponsors
"""
union Sponsor = Organization | User

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The amount in cents.
  """
  amountInCents: Int!

  """
  The amount in USD, formatted as a string.
  """
  formattedAmount: String!

  """
  The sponsor's GitHub account.
  """
  sponsor: Sponsorable!

  """
  The maintainer's GitHub account.
  """
  sponsorable: Sponsorable!
}

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  A list of edges.
  """
  edges: [SponsorAndLifetimeValueEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorAndLifetimeValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorAndLifetimeValue
}

"""
Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
"""
input SponsorAndLifetimeValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order results by.
  """
  field: SponsorAndLifetimeValueOrderField!
}

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  LIFETIME_VALUE

  """
  Order results by the sponsor's login (username).
  """
  SPONSOR_LOGIN

  """
  Order results by the sponsor's relevance to the viewer.
  """
  SPONSOR_RELEVANCE
}

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  A list of edges.
  """
  edges: [SponsorEdge]

  """
  A list of nodes.
  """
  nodes: [Sponsor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type SponsorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The total size in kilobytes of all repositories in the connection. Value will
  never be larger than max 32-bit signed integer.
  """
  node: Sponsor
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
Properties by which sponsor connections can be ordered.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  Order sponsorable entities by login (username).
  """
  closed: Boolean!

  """
  Order sponsors by their relevance to the viewer.
  """
  RELEVANCE
}

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  createdAt: DateTime!

  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  creator: Actor

  """
  Whether the given account is sponsoring this user/organization.
  """
  databaseId: Int

  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  The project's number.
  """
  number: Int!

  """
  The project's owner. Currently limited to organizations and users.
  """
  owner: ProjectV2Owner!

  """
  Returns true if the project is public.
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

  """
  The HTTP path for this project
  """
  resourcePath: URI!

  """
  The project's short description.
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  The project's name.
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this project
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  A list of edges.
  """
  edges: [ProjectV2Edge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2]

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  One of these repo IDs must match the repo.
  """
  node: ProjectV2
}

"""
A subset of repository info.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  Identifies the date and time when the repository was archived.
  """
  createdAt: DateTime!

  """
  Identifies the date and time when the object was created.
  """
  dataType: ProjectV2FieldType!

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  name: String!

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  project: ProjectV2!

  """
  Indicates if the repository has issues feature enabled.
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  createdAt: DateTime!

  """
  Indicates if the repository has wiki feature enabled.
  """
  dataType: ProjectV2FieldType!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  The sponsorships where this user or organization is the funder.
  """
  name: String!

"""
Autogenerated input type of UpdateProjectCard
"""
input UpdateProjectCardInput {
  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  Niger
  """
  edges: [ProjectV2FieldEdge]

  """
  Norfolk Island
  """
  nodes: [ProjectV2Field]

  """
  Nigeria
  """
  NG

  """
  Nicaragua
  """
  NI

"""
An edge in a connection.
"""
type ProjectV2FieldEdge {
  """
  Netherlands
  """
  NL

  """
  Norway
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  The ordering direction.
  """
  ASSIGNEES

  """
  The field to order sponsorable entities by.
  """
  DATE

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  ITERATION

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  LABELS

  """
  The sponsor's current privacy level.
  """
  LINKED_PULL_REQUESTS

  """
  The Node ID of the SponsorsActivity object
  """
  MILESTONE

  """
  The platform that was used to pay for the sponsorship.
  """
  NUMBER

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  REPOSITORY

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  REVIEWERS

  """
  The user or organization that is being sponsored, the maintainer.
  """
  SINGLE_SELECT

  """
  The associated sponsorship tier.
  """
  TEXT

  """
  The timestamp of this event.
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  The content of the referenced draft issue, issue, or pull request
  """
  content: ProjectV2ItemContent

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  The activity was cancelling a sponsorship.
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  fieldValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

  """
  The activity was starting a sponsorship.
  """
  isArchived: Boolean!

  """
  The activity was scheduling a downgrade or cancellation.
  """
  project: ProjectV2!

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  type: ProjectV2ItemType!

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  Palestine
  """
  edges: [ProjectV2ItemEdge]

  """
  Portugal
  """
  nodes: [ProjectV2Item]

  """
  Palau
  """
  PW

  """
  Paraguay
  """
  totalCount: Int!
}

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  Qatar
  """
  QA

  """
  Reunion
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Saint Barthélemy
  """
  BL

  """
  The actor who created the item.
  """
  BM

  """
  Brunei Darussalam
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Belarus
  """
  BY

  """
  Belize
  """
  BZ

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ItemFieldValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  A list of nodes.
  """
  nodes: [RepositoryRulesetBypassActor]

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

"""
Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
"""
type UpdateUserListsForItemPayload {
  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

"""
Autogenerated input type of UpdateRepositoryRuleset
"""
input UpdateRepositoryRulesetInput {
  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  France
  """
  FR

  """
  Gabon
  """
  GA

  """
  United Kingdom
  """
  GB

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Greenland
  """
  GL

  """
  Gambia
  """
  enterpriseUrl: URI

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  The project view's name.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  Haiti
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  id: ID!

  """
  Israel
  """
  IL

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  Jamaica
  """
  edges: [ProjectV2ViewEdge]

  """
  Jordan
  """
  nodes: [ProjectV2View]

  """
  Japan
  """
  JP

  """
  Kenya
  """
  KE

"""
An edge in a connection.
"""
type ProjectV2ViewEdge {
  """
  Kyrgyzstan
  """
  KG

  """
  Cambodia
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  Saint Kitts and Nevis
  """
  KN

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  LU

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  LV

  """
  Libya
  """
  WAITING
}

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  MK

  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  MN

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  The HTTP path listing organization's projects
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

"""
The possible signature algorithms used to sign SAML requests for a Identity Provider.
"""
enum SamlSignatureAlgorithm {
  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

"""
Ordering options for saved reply connections.
"""
input SavedReplyOrder {
  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

"""
A GitHub Security Advisory
"""
type SecurityAdvisory implements Node {
  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  Erlang/Elixir packages hosted at hex.pm
  """
  ERLANG

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  websiteUrl: URI
}

"""
An audit entry in an organization audit log.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  PIP

  """
  Dart packages hosted at pub.dev
  """
  PUB

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  RUBYGEMS

  """
  Rust crates
  """
  RUST

  """
  Swift packages
  """
  SWIFT
}

"""
An edge in a connection.
"""
type SecurityAdvisoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityAdvisory
}

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  The identifier type, e.g. GHSA, CVE
  """
  type: String!

  """
  The identifier
  """
  value: String!
}

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
input SecurityAdvisoryIdentifierFilter {
  """
  The identifier type.
  """
  type: SecurityAdvisoryIdentifierType!

  """
  The identifier string. Supports exact or partial matching.
  """
  value: String!
}

"""
Identifier formats available for advisories.
"""
enum SecurityAdvisoryIdentifierType {
  """
  Common Vulnerabilities and Exposures Identifier.
  """
  CVE

  """
  GitHub Security Advisory ID.
  """
  GHSA
}

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security advisories by.
  """
  field: SecurityAdvisoryOrderField!
}

"""
Properties by which security advisory connections can be ordered.
"""
enum SecurityAdvisoryOrderField {
  """
  Order advisories by publication time
  """
  PUBLISHED_AT

  """
  Order advisories by update time
  """
  UPDATED_AT
}

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
  """
  ecosystem: SecurityAdvisoryEcosystem!

  """
  The package name
  """
  name: String!
}

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
type SecurityAdvisoryPackageVersion {
  """
  The package name or version
  """
  identifier: String!
}

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  A publicly accessible reference
  """
  externalIdentities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter to external identities with the users login
    """
    login: String

    """
    Filter to external identities with valid org membership only
    """
    membersOnly: Boolean

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  Critical.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  High.
  """
  HIGH

  """
  Low.
  """
  LOW

  """
  Moderate.
  """
  MODERATE
}

"""
An individual vulnerability within an Advisory
"""
type SecurityVulnerability {
  """
  The Advisory associated with this Vulnerability
  """
  advisory: SecurityAdvisory!

  """
  The first version containing a fix for the vulnerability
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  id: ID!

  """
  A description of the vulnerable package
  """
  package: SecurityAdvisoryPackage!

  """
  The severity of the vulnerability within this package
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

  """
  When the vulnerability was last updated
  """
  updatedAt: DateTime!

  """
  A string that describes the vulnerable package versions.
  This string follows a basic syntax with a few forms.
  + `= 0.2.0` denotes a single vulnerable version.
  + `<= 1.0.8` denotes a version range up to and including the specified version
  + `< 0.1.11` denotes a version range up to, but excluding, the specified version
  + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
  + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
  """
  vulnerableVersionRange: String!
}

"""
The connection type for SecurityVulnerability.
"""
type SecurityVulnerabilityConnection {
  """
  A list of edges.
  """
  edges: [SecurityVulnerabilityEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityVulnerability]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SecurityVulnerabilityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityVulnerability
}

"""
Ordering options for security vulnerability connections
"""
input SecurityVulnerabilityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security vulnerabilities by.
  """
  field: SecurityVulnerabilityOrderField!
}

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  """
  Order vulnerability by update time
  """
  UPDATED_AT
}

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The digest algorithm used to sign SAML requests for the identity provider.
  """
  digestMethod: SamlDigestAlgorithm!

  """
  The ID of the enterprise on which to set an identity provider.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: String!

  """
  The Issuer Entity ID for the SAML identity provider
  """
  issuer: String

  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: SamlSignatureAlgorithm!

  """
  The URL endpoint for the identity provider's SAML SSO.
  """
  ssoUrl: URI!
}

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
type SetEnterpriseIdentityProviderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The identity provider for the enterprise.
  """
  identityProvider: EnterpriseIdentityProvider
}

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the organization to set a limit for.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
type SetOrganizationInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization that the interaction limit was set for.
  """
  organization: Organization
}

"""
Autogenerated input type of SetRepositoryInteractionLimit
"""
input SetRepositoryInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the repository to set a limit for.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that the interaction limit was set for.
  """
  repository: Repository
}

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the user to set a limit for.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user that the interaction limit was set for.
  """
  user: User
}

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type SmimeSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  True if the signature is valid and verified by GitHub.
  """
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """
  ASCII-armored signature header from object.
  """
  signature: String!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  True if the signature was made with GitHub's signing key.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Name of the social media account as it appears on the profile.
  """
  displayName: String!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  provider: SocialAccountProvider!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  A list of teams that this review was made on behalf of.
  """
  url: URI!
}

"""
The connection type for SocialAccount.
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

  """
  A list of edges.
  """
  edges: [SocialAccountEdge]

  """
  A list of nodes.
  """
  nodes: [SocialAccount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """
    The number for the vulnerability alert to be returned.
    """
    number: Int!
  ): RepositoryVulnerabilityAlert

  """
  A list of vulnerability alerts that are on this repository.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  watchers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Whether contributors are required to sign off on web-based commits in this repository.
  """
  webCommitSignoffRequired: Boolean!
}

"""
Software or company that hosts social media accounts.
"""
enum SocialAccountProvider {
  """
  Social media and networking website.
  """
  FACEBOOK

  """
  Catch-all for social media providers that do not yet have specific handling.
  """
  GENERIC

  """
  Fork of Mastodon with a greater focus on local posting.
  """
  HOMETOWN

  """
  Social media website with a focus on photo and video sharing.
  """
  INSTAGRAM

  """
  Professional networking website.
  """
  LINKEDIN

  """
  Open-source federated microblogging service.
  """
  MASTODON

"""
A file in a package version.
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

  """
  Social news aggregation and discussion website.
  """
  REDDIT

  """
  Live-streaming service.
  """
  TWITCH

  """
  Microblogging website.
  """
  TWITTER

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  YOUTUBE
}

"""
Entities that can sponsor others via GitHub Sponsors
"""
union Sponsor = Organization | User

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The amount in cents.
  """
  amountInCents: Int!

  """
  The amount in USD, formatted as a string.
  """
  formattedAmount: String!

  """
  The sponsor's GitHub account.
  """
  sponsor: Sponsorable!

  """
  The maintainer's GitHub account.
  """
  sponsorable: Sponsorable!
}

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  A list of edges.
  """
  edges: [SponsorAndLifetimeValueEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorAndLifetimeValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorAndLifetimeValue
}

"""
Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
"""
input SponsorAndLifetimeValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order results by.
  """
  field: SponsorAndLifetimeValueOrderField!
}

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Order results by the sponsor's login (username).
  """
  SPONSOR_LOGIN

  """
  Order results by the sponsor's relevance to the viewer.
  """
  SPONSOR_RELEVANCE
}

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  A list of edges.
  """
  CREATED_AT
}

"""
Represents an owner of a package.
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

  """
  A list of nodes.
  """
  nodes: [Sponsor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type SponsorEdge {
  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  cursor: String!

  """
  The total size in kilobytes of all repositories in the connection. Value will
  never be larger than max 32-bit signed integer.
  """
  node: Sponsor
}

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  The field to order sponsor entities by.
  """
  field: SponsorOrderField!
}

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN

  """
  Order sponsors by their relevance to the viewer.
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  A maven package.
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

  """
  An npm package.
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  Whether the given account is sponsoring this user/organization.
  """
  isSponsoredBy(
    """
    The target account's login.
    """
    accountLogin: String!
  ): Boolean!

  """
  True if the viewer is sponsored by this user/organization.
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  state: PullRequestReviewCommentState!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  updatedAt: DateTime!

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!
}

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The source of this permission.
  """
  viewerIsSponsoring: Boolean!
}

"""
Parameters to be used for the repository_id condition
"""
type RepositoryIdConditionTarget {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
A subset of repository info.
"""
union SponsorableItem = Organization | User

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  edges: [SponsorableItemEdge]

  """
  Netherlands
  """
  nodes: [SponsorableItem]

  """
  Norway
  """
  NO

  """
  Nepal
  """
  NP

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  NR

  """
  Niue
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  id: ID!

  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

  """
  The user or organization that is being sponsored, the maintainer.
  """
  sponsorable: Sponsorable!

  """
  The associated sponsorship tier.
  """
  sponsorsTier: SponsorsTier

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  The activity was cancelling a sponsorship.
  """
  CANCELLED_SPONSORSHIP

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

  """
  The activity was scheduling a downgrade or cancellation.
  """
  PENDING_CHANGE

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  Identifies the date and time when the repository was last pushed to.
  """
  TIER_CHANGE
}

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  Paraguay
  """
  edges: [SponsorsActivityEdge]

  """
  Qatar
  """
  nodes: [SponsorsActivity]

  """
  Reunion
  """
  RE

  """
  Romania
  """
  RO

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  Serbia
  """
  RS

  """
  Russian Federation
  """
  node: SponsorsActivity
}

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type PinnedIssue implements Node {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

  """
  The issue that was pinned.
  """
  issue: Issue!

  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  Andorra
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  AF

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
type PullRequestTimelineConnection {
  """
  Antigua and Barbuda
  """
  AG

  """
  Anguilla
  """
  AI

  """
  Albania
  """
  AL

  """
  Armenia
  """
  AM

  """
  Angola
  """
  email: String

  """
  The Node ID of the RepositoryInvitation object
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

  """
  Antarctica
  """
  AQ

"""
An item in a pull request timeline
"""
interface ProfileOwner {
  """
  Determine if this repository owner has any items that can be pinned to their profile.
  """
  anyPinnableItems(
    """
    Filter to only a particular kind of pinnable item.
    """
    type: PinnableItemType
  ): Boolean!

  """
  The public profile email.
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

  """
  Showcases a selection of repositories and gists that the profile owner has
  either curated or that have been selected automatically based on popularity.
  """
  itemShowcase: ProfileItemShowcase!

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland
  """
  AX

  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  BE

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  BF

  """
  Bulgaria
  """
  BG

"""
Ways in which team connections can be ordered.
"""
input TeamOrder {
  """
  Bahrain
  """
  BH

  """
  Burundi
  """
  BI

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type RepositoryMigration implements Migration & Node {
  """
  The migration flag to continue on error.
  """
  BM

  """
  Brunei Darussalam
  """
  BN

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  id: ID!

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  The migration source.
  """
  BR

  """
  Bahamas
  """
  BS

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  BT

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  BY

  """
  Belize
  """
  BZ

  """
  Canada
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Congo (Kinshasa)
  """
  CD

  """
  Central African Republic
  """
  CF

  """
  Congo (Brazzaville)
  """
  CG

  """
  Switzerland
  """
  CH

  """
  Côte d'Ivoire
  """
  CI

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Cook Islands
  """
  CK

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
interface RepositoryNode {
  """
  Chile
  """
  CL

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Cameroon
  """
  CM

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  China
  """
  CN

  """
  Colombia
  """
  CO

  """
  Costa Rica
  """
  CR

  """
  Cape Verde
  """
  CV

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The Node ID of the RepositoryOwner object
  """
  id: ID!

"""
Autogenerated input type of UnlinkProjectV2FromRepository
"""
input UnlinkProjectV2FromRepositoryInput {
  """
  Cyprus
  """
  CY

  """
  Czech Republic
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Germany
  """
  DE

  """
  Djibouti
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

  """
  Denmark
  """
  DK

  """
  Dominica
  """
  DM

  """
  Dominican Republic
  """
  DO

  """
  Algeria
  """
  DZ

  """
  Ecuador
  """
  EC

  """
  Estonia
  """
  EE

"""
Required status check
"""
type StatusCheckConfiguration {
  """
  Egypt
  """
  EG

  """
  Western Sahara
  """
  EH

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the PushAllowance object
  """
  id: ID!
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
Properties by which repository rule connections can be ordered.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  Order repository rules by created time
  """
  closed: Boolean!

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  createdAt: DateTime!

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  creator: Actor

  """
  Branch name pattern
  """
  databaseId: Int

  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

  """
  Branch is read-only. Users cannot push to the branch.
  """
  LOCK_BRANCH

  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  Prevent users with push access from force pushing to refs.
  """
  number: Int!

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  owner: ProjectV2Owner!

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  REQUIRED_LINEAR_HISTORY

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REQUIRED_SIGNATURES

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  SECRET_SCANNING

  """
  Tag
  """
  TAG

  """
  Tag name pattern
  """
  TAG_NAME_PATTERN

  """
  Only allow users with bypass permission to update matching refs.
  """
  UPDATE

    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    query: String!

  """
  Workflow files cannot be modified.
  """
  WORKFLOW_UPDATES
}

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  resourcePath: URI!

  """
  Identifies the date and time when the object was created.
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  Identifies the primary key from the database.
  """
  title: String!

  """
  The enforcement level of this ruleset
  """
  updatedAt: DateTime!

  """
  The Node ID of the RepositoryRuleset object
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  The actor that can bypass rules.
  """
  edges: [ProjectV2Edge]

  """
  The mode for the bypass actor
  """
  nodes: [ProjectV2]

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  node: ProjectV2
}

"""
A field inside a project.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  Identifies the ruleset associated with the allowed actor
  """
  createdAt: DateTime!

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  dataType: ProjectV2FieldType!

  """
  The actor can only bypass rules via a pull request
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  name: String!

  """
  A list of nodes.
  """
  project: ProjectV2!

  """
  Identifies the total count of items in the connection.
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  A cursor for use in pagination.
  """
  createdAt: DateTime!

  """
  The Node ID of the Reactable object
  """
  dataType: ProjectV2FieldType!

  """
  The item at the end of the edge.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  name: String!

  """
  The bypass mode for this actor.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Field]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  Branch
  """
  ASSIGNEES

  """
  Tag
  """
  DATE

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  ITERATION

  """
  The Node ID of the Reaction object
  """
  LABELS

  """
  Eritrea
  """
  LINKED_PULL_REQUESTS

  """
  Spain
  """
  MILESTONE

  """
  Ethiopia
  """
  NUMBER

  """
  Finland
  """
  REPOSITORY

"""
Represents the rollup for both the check runs and status for a commit.
"""
type UnlinkProjectV2FromRepositoryPayload {
  """
  Fiji
  """
  REVIEWERS

  """
  Falkland Islands
  """
  SINGLE_SELECT

  """
  Micronesia
  """
  TEXT

  """
  Faroe Islands
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  France
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  Gabon
  """
  content: ProjectV2ItemContent

  """
  United Kingdom
  """
  createdAt: DateTime!

  """
  Grenada
  """
  creator: Actor

  """
  Georgia
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  GF

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

"""
A record that is promoted on a GitHub Sponsors profile.
"""
type SponsorsListingFeaturedItem implements Node {
  """
  Ghana
  """
  isArchived: Boolean!

  """
  Gibraltar
  """
  project: ProjectV2!

  """
  Gambia
  """
  type: ProjectV2ItemType!

  """
  Guinea
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  Guadeloupe
  """
  edges: [ProjectV2ItemEdge]

  """
  Equatorial Guinea
  """
  nodes: [ProjectV2Item]

  """
  Greece
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  id: ID!

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  Guatemala
  """
  GT

  """
  Guam
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Guinea-Bissau
  """
  createdAt: DateTime!

  """
  Guyana
  """
  creator: Actor

  """
  Hong Kong
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  Heard and McDonald Islands
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

"""
Autogenerated input type of UnlinkRepositoryFromProject
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  Jamaica
  """
  JM

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Comment explaining the reason the alert was dismissed
  """
  dismissComment: String

  """
  The reason the alert was dismissed
  """
  KW

  """
  Cayman Islands
  """
  KY

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Mali
  """
  ML

  """
  The actor who created the item.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReadyForReviewEvent object
  """
  id: ID!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  nodes: [ProjectV2ItemFieldValue]

"""
Ways in which lists of git refs can be ordered upon return.
"""
input RefOrder {
  """
  Nepal
  """
  NP

  """
  Nauru
  """
  NR

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type ProjectV2ItemFieldValueEdge {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Whether the given account is sponsoring this user/organization.
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The organization's public profile location.
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

"""
Autogenerated input type of RerequestCheckSuite
"""
enum SquashMergeCommitMessage {
  """
  A list of all mannequins for this organization.
  """
  mannequins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter mannequins by login.
    """
    login: String

    """
    Ordering options for mannequins returned from the connection.
    """
    orderBy: MannequinOrder = {field: CREATED_AT, direction: ASC}
  ): MannequinConnection!

  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  The Node ID of the ReviewDismissedEvent object
  """
  id: ID!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  The reviewer that is requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type ReviewStatusHovercardContext implements HovercardContext {
  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

"""
Autogenerated return type of RevokeMigratorRole
"""
type RevokeMigratorRolePayload {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum SamlDigestAlgorithm {
  """
  Find a project by number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The HTTP path listing organization's projects
  """
  projectsResourcePath: URI!

  """
  The ID of the user to remove from the enterprise.
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The user that was removed from the enterprise.
  """
  user: User

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ViewEdge]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ViewEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  edges: [SearchResultItemEdge]

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  issueCount: Int!

  """
  A list of nodes.
  """
  nodes: [SearchResultItem]

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  reactionGroups: [ReactionGroup!]

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  DISCUSSION

  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  USER
}

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

"""
The connection type for SecurityAdvisory.
"""
type SecurityAdvisoryConnection {
  """
  The body as Markdown.
  """
  body: String!

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Erlang/Elixir packages hosted at hex.pm
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    If true, filters teams that are mapped to an LDAP Group (Enterprise only)
    """
    ldapMapped: Boolean

    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    orderBy: TeamOrder

    """
    If non-null, filters teams according to privacy
    """
    privacy: TeamPrivacy

    """
    If non-null, filters teams with query on team name and team slug
    """
    query: String

    """
    If non-null, filters teams according to whether the viewer is an admin or member on team
    """
    role: TeamRole

    """
    If true, restrict to only root teams
    """
    rootTeamsOnly: Boolean = false

    """
    User logins to filter by
    """
    userLogins: [String!]
  ): TeamConnection!

  """
  The HTTP path listing organization's teams
  """
  teamsResourcePath: URI!

  """
  The HTTP URL listing organization's teams
  """
  teamsUrl: URI!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  twitterUsername: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this organization.
  """
  url: URI!

  """
  Organization is adminable by the viewer.
  """
  viewerCanAdminister: Boolean!

  """
  Can the viewer pin repositories and gists to the profile?
  """
  viewerCanChangePinnedItems: Boolean!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  websiteUrl: URI
}

"""
An audit entry in an organization audit log.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder {
  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  A publicly accessible reference
  """
  url: URI!
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
type OrganizationIdentityProvider implements Node {
  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
type SetUserInteractionLimitPayload {
  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

"""
The connection type for SocialAccount.
"""
type SocialAccountConnection {
  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Software or company that hosts social media accounts.
"""
enum SocialAccountProvider {
  """
  Social media and networking website.
  """
  FACEBOOK

  """
  Catch-all for social media providers that do not yet have specific handling.
  """
  GENERIC

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  JavaScript package registry.
  """
  NPM

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
type SponsorAndLifetimeValueConnection {
  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  Whether or not the viewer can apply suggestion.
  """
  totalOrganizationCount: Int!
}

"""
Information for an uploaded package.
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!
}

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    repositoryId: ID
  ): DiscussionCommentConnection!
}

"""
An edge in a connection.
"""
type RepositoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Repository
}

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
type RepositoryIdConditionTarget {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
A subset of repository info.
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

  """
  The description of the repository.
  """
  description: String

  """
  The description of the repository rendered to HTML.
  """
  descriptionHTML: HTML!

  """
  Returns how many forks there are of this repository in the whole network.
  """
  forkCount: Int!

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  hasIssuesEnabled: Boolean!

  """
  Indicates if the repository has the Projects feature enabled.
  """
  hasProjectsEnabled: Boolean!

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  Indicates if the repository has wiki feature enabled.
  """
  hasWikiEnabled: Boolean!

  """
  The repository's URL.
  """
  homepageUrl: URI

  """
  Indicates if the repository is unmaintained.
  """
  isArchived: Boolean!

  """
  Identifies if the repository is a fork.
  """
  isFork: Boolean!

  """
  Indicates if a repository is either owned by an organization, or is a private fork of an organization repository.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

  """
  Indicates if the repository has been locked or not.
  """
  isLocked: Boolean!

  """
  Identifies if the repository is a mirror.
  """
  isMirror: Boolean!

  """
  Identifies if the repository is private or internal.
  """
  isPrivate: Boolean!

  """
  Identifies if the repository is a template that can be used to generate new repositories.
  """
  isTemplate: Boolean!

  """
  The license associated with the repository
  """
  licenseInfo: License

  """
  The reason the repository has been locked.
  """
  lockReason: RepositoryLockReason

"""
Represents an owner of a package.
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  The image used to represent this repository in Open Graph data.
  """
  openGraphImageUrl: URI!

  """
  The User owner of the repository.
  """
  owner: RepositoryOwner!

  """
  Identifies the date and time when the repository was last pushed to.
  """
  pushedAt: DateTime

  """
  The HTTP path for this repository
  """
  resourcePath: URI!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!
}

"""
Entities that can be sponsored via GitHub Sponsors
"""
union SponsorableItem = Organization | User

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  Rwanda
  """
  edges: [SponsorableItemEdge]

  """
  Saudi Arabia
  """
  nodes: [SponsorableItem]

  """
  Solomon Islands
  """
  SB

  """
  Seychelles
  """
  SC

"""
An edge in a connection.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

  """
  Sudan
  """
  SD

  """
  Sweden
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

    """
    Ordering of the returned package files.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

  """
  The email address that received the invitation.
  """
  email: String

  """
  The Node ID of the RepositoryInvitation object
  """
  id: ID!

  """
  The user who received the invitation.
  """
  invitee: User

  """
  The user who created the invitation.
  """
  inviter: User!

  """
  The permalink for this repository invitation.
  """
  permalink: URI!

  """
  The permission granted on this repository by this invitation.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The Node ID of the SponsorsActivity object
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  previousSponsorsTier: SponsorsTier

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  sponsor: Sponsor

  """
  The user or organization that is being sponsored, the maintainer.
  """
  sponsorable: Sponsorable!

  """
  The associated sponsorship tier.
  """
  sponsorsTier: SponsorsTier

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  RENAME

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type RepositoryMigration implements Migration & Node {
  """
  The migration flag to continue on error.
  """
  continueOnError: Boolean!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  id: ID!

  """
  The activity was starting a sponsorship.
  """
  createdAt: PreciseDateTime!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  id: ID!

  """
  The migration source.
  """
  PENDING_CHANGE

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  SPONSOR_MATCH_DISABLED

  """
  The migration state.
  """
  state: MigrationState!

  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The source of this permission.
  """
  warningsCount: Int!
}

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  Turks and Caicos Islands
  """
  edges: [SponsorsActivityEdge]

  """
  Chad
  """
  nodes: [SponsorsActivity]

  """
  French Southern Lands
  """
  TF

  """
  Togo
  """
  TG

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  Thailand
  """
  TH

  """
  Tajikistan
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  The ordering direction.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

  """
  The previous calendar day.
  """
  DAY

"""
The possible states of a thread subscription form action
"""
interface Starrable {
  """
  The previous thirty days.
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  The previous seven days.
  """
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  Andorra
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The Node ID of the RepositoryOwner object
  """
  id: ID!

  """
  United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Antigua and Barbuda
  """
  AG

  """
  Anguilla
  """
  AI

  """
  Albania
  """
  AL

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  AM

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  AO

  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

  """
  Australia
  """
  PUBLIC
}

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  LOCK_BRANCH

  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REQUIRED_SIGNATURES

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Secret scanning
  """
  SECRET_SCANNING

  """
  Tag
  """
  TAG

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  TAG_NAME_PATTERN

  """
  Only allow users with bypass permission to update matching refs.
  """
  UPDATE

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  WORKFLOWS

  """
  Workflow files cannot be modified.
  """
  WORKFLOW_UPDATES
}

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetBypassActorConnection

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

  """
  Identifies the date and time when the object was created.
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The enforcement level of this ruleset
  """
  enforcement: RuleEnforcement!

  """
  The Node ID of the RepositoryRuleset object
  """
  createdAt: PreciseDateTime!

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type PullRequestRevisionMarker {
  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The type of rule.
    """
    type: RepositoryRuleType
  ): RepositoryRuleConnection

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  repositoryRoleName: String

  """
  Identifies the ruleset associated with the allowed actor
  """
  repositoryRuleset: RepositoryRuleset
}

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  ALWAYS

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRulesetBypassActor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRuleset]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRuleset
}

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  Branch
  """
  BRANCH

  """
  Tag
  """
  TAG
}

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

  """
  Aruba
  """
  AW

  """
  Åland
  """
  AX

  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  BE

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  BH

  """
  Burundi
  """
  BI

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

  """
  Brunei Darussalam
  """
  BN

  """
  Bolivia
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  BR

  """
  Bahamas
  """
  BS

  """
  Bhutan
  """
  BT

  """
  Bouvet Island
  """
  BV

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  enterpriseUrl: URI

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
New projects that manage issues, pull requests and drafts using tables and boards.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  Congo (Kinshasa)
  """
  closed: Boolean!

  """
  Central African Republic
  """
  CF

  """
  Congo (Brazzaville)
  """
  createdAt: DateTime!

  """
  Switzerland
  """
  creator: Actor

"""
Required status check
"""
input StatusCheckConfigurationInput {
  """
  Côte d'Ivoire
  """
  databaseId: Int

  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

"""
Represents the rollup for both the check runs and status for a commit.
"""
type StatusCheckRollup implements Node {
  """
  List of fields and their constraints in the project
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

  """
  Cameroon
  """
  items(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  China
  """
  number: Int!

  """
  Colombia
  """
  owner: ProjectV2Owner!

  """
  Costa Rica
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

  """
  Cape Verde
  """
  repositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  resourcePath: URI!

  """
  Curaçao
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  Christmas Island
  """
  title: String!

"""
The different kinds of records that can be featured on a GitHub Sponsors profile page.
"""
enum SponsorsListingFeaturedItemFeatureableType {
  """
  Cyprus
  """
  updatedAt: DateTime!

  """
  Czech Republic
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Germany
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  id: ID!

  """
  Djibouti
  """
  DJ

  """
  Denmark
  """
  DK

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  Dominican Republic
  """
  edges: [ProjectV2Edge]

  """
  Algeria
  """
  nodes: [ProjectV2]

  """
  Ecuador
  """
  EC

  """
  Estonia
  """
  EE

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  Egypt
  """
  EG

  """
  Western Sahara
  """
  node: ProjectV2
}

"""
Autogenerated return type of UnmarkProjectV2AsTemplate
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  When was the alert auto-dismissed?
  """
  createdAt: DateTime!

  """
  When was the alert created?
  """
  dataType: ProjectV2FieldType!

  """
  Spain
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

"""
Autogenerated input type of UnmarkProjectV2AsTemplate
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  name: String!

  """
  Comment explaining the reason the alert was dismissed
  """
  project: ProjectV2!

  """
  Fiji
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  Falkland Islands
  """
  createdAt: DateTime!

  """
  When was the alert fixed?
  """
  dataType: ProjectV2FieldType!

  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  Gabon
  """
  edges: [ProjectV2FieldEdge]

  """
  United Kingdom
  """
  nodes: [ProjectV2Field]

  """
  Grenada
  """
  GD

  """
  Georgia
  """
  GE

"""
An edge in a connection.
"""
type ProjectV2FieldEdge {
  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  Ghana
  """
  ASSIGNEES

  """
  Gibraltar
  """
  DATE

  """
  Greenland
  """
  ITERATION

  """
  Gambia
  """
  LABELS

  """
  Guinea
  """
  LINKED_PULL_REQUESTS

  """
  Guadeloupe
  """
  MILESTONE

  """
  Equatorial Guinea
  """
  NUMBER

  """
  Greece
  """
  REPOSITORY

  """
  South Georgia and South Sandwich Islands
  """
  REVIEWERS

  """
  An alert that has been automatically closed by Dependabot.
  """
  SINGLE_SELECT

  """
  An alert that has been manually closed by a user.
  """
  TEXT

  """
  Guam
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  Guinea-Bissau
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  Guyana
  """
  content: ProjectV2ItemContent

  """
  Hong Kong
  """
  createdAt: DateTime!

  """
  Heard and McDonald Islands
  """
  creator: Actor

  """
  Identifies the date and time when the repository was archived.
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The HTTP path listing organization's projects
  """
  id: ID!

  """
  Whether the item is archived.
  """
  isArchived: Boolean!

  """
  Croatia
  """
  project: ProjectV2!

  """
  Hungary
  """
  type: ProjectV2ItemType!

  """
  Indonesia
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  Ireland
  """
  edges: [ProjectV2ItemEdge]

  """
  Israel
  """
  nodes: [ProjectV2Item]

  """
  Isle of Man
  """
  IM

  """
  Returns the contributing guidelines for this repository.
  """
  totalCount: Int!
}

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  Identifies the date and time when the object was created.
  """
  IN

  """
  British Indian Ocean Territory
  """
  node: ProjectV2Item
}

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Iceland
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  Italy
  """
  field: ProjectV2FieldConfiguration!

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  Labels value of a field
  """
  labels(
    """
    Only show answered or unanswered discussions
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

    """
    If true, filters teams that are mapped to an LDAP Group (Enterprise only)
    """
    ldapMapped: Boolean

    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    orderBy: TeamOrder

    """
    If non-null, filters teams according to privacy
    """
    privacy: TeamPrivacy

    """
    If non-null, filters teams with query on team name and team slug
    """
    query: String

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

"""
A request for a user to review a pull request.
"""
type ReviewRequest implements Node {
  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ItemFieldValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
input RefNameConditionTargetInput {
  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  RSA-SHA384
  """
  RSA_SHA384

  """
  The field's type.
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

"""
A Saved Reply is text a user can use to reply quickly.
"""
type SavedReply implements Node {
  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  body: String!

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  The user that saved this reply.
  """
  user: Actor
}

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

"""
Ordering options for saved reply connections.
"""
input SavedReplyOrder {
  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

"""
Represents the individual results of a search.
"""
enum SearchType {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
union OrganizationOrUser = Organization | User

"""
Ordering options for organization connections.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  The total number of organizations this user is in
  """
  totalOrganizationCount: Int!
}

"""
Information for an uploaded package.
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

  """
  Find the latest version for the package.
  """
  latestVersion: PackageVersion

  """
  Identifies the name of the package.
  """
  name: String!

  """
  Identifies the type of the package.
  """
  packageType: PackageType!

  """
  The repository this package belongs to.
  """
  repository: Repository

  """
  Statistics about package activity.
  """
  statistics: PackageStatistics

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  node: Package
}

"""
A file in a package version.
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  The project view's name.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  When the advisory was last updated
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

"""
Represents an owner of a package.
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ViewEdge]

"""
A version tag contains the mapping between a tag name and a version.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ViewEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

  """
  Roadmap layout
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  Table layout
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 views by.
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

    """
    Ordering of the returned package files.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  PUB

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  RUBYGEMS

  """
  Rust crates
  """
  RUST

  """
  Swift packages
  """
  SWIFT
}

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  PUBLISHED_AT

  """
  The name of the workflow
  """
  NAME

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  name: String!
}

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The source of this permission.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

"""
Parameters to be used for the repository_id condition
"""
type RepositoryIdConditionTarget {
  """
  The public key string.
  """
  key: String!

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  """
  The number of additions in this pull request.
  """
  additions: Int!

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Color stops of the chosen gradient
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

  """
  The ID of the enterprise from which the user should be removed.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  The user that was removed from the enterprise.
  """
  user: User

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type SmimeSignature implements GitSignature {
  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Order results by the sponsor's login (username).
  """
  SPONSOR_LOGIN

  """
  Order results by the sponsor's relevance to the viewer.
  """
  createdAt: PreciseDateTime!

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

"""
Represents a object that belongs to a repository.
"""
type SponsorEdge {
  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The item at the end of the edge.
  """
  node: Sponsor
}

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  closed: Boolean!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this project
  """
  url: URI!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  repositoryRoleName: String

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  repositoryRuleset: RepositoryRuleset
}

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  ALWAYS

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRulesetBypassActor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  actorId: ID

  """
  The bypass mode for this actor.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRuleset]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRuleset
}

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  Branch
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  Tag
  """
  TAG
}

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  id: ID!

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!
}

"""
Entities that can be sponsored via GitHub Sponsors
"""
union SponsorableItem = Organization | User

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  Moldova
  """
  edges: [SponsorableItemEdge]

  """
  Montenegro
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

  """
  Saint Martin (French part)
  """
  MF

  """
  Madagascar
  """
  MG

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  """
  Marshall Islands
  """
  MH

  """
  Macedonia
  """
  node: SponsorableItem
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
Properties by which sponsorable connections can be ordered.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  Order sponsorable entities by login (username).
  """
  closed: Boolean!

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  createdAt: DateTime!

  """
  The Node ID of the SponsorsActivity object
  """
  creator: Actor

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  databaseId: Int

  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  items(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  The user or organization that is being sponsored, the maintainer.
  """
  number: Int!

  """
  The associated sponsorship tier.
  """
  owner: ProjectV2Owner!

  """
  The timestamp of this event.
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  repositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  The activity was cancelling a sponsorship.
  """
  resourcePath: URI!

  """
  The activity was starting a sponsorship.
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  The activity was scheduling a downgrade or cancellation.
  """
  title: String!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  updatedAt: DateTime!

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  views(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  New Caledonia
  """
  edges: [SponsorsActivityEdge]

  """
  edges: [ProjectV2Edge]

  """
  Norfolk Island
  """
  nodes: [ProjectV2]

  """
  Nigeria
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  id: ID!

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  Nicaragua
  """
  NI

  """
  Netherlands
  """
  node: ProjectV2
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  The ordering direction.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  The field to order activity by.
  """
  name: String!

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  project: ProjectV2!

  """
  The previous calendar day.
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  The previous thirty days.
  """
  createdAt: DateTime!

  """
  The previous seven days.
  """
  dataType: ProjectV2FieldType!

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  name: String!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Field]

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

"""
An edge in a connection.
"""
type ProjectV2FieldEdge {
  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  When was the alert auto-dismissed?
  """
  ASSIGNEES

  """
  When was the alert created?
  """
  DATE

  """
  Andorra
  """
  ITERATION

  """
  United Arab Emirates
  """
  LABELS

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  LINKED_PULL_REQUESTS

  """
  Comment explaining the reason the alert was dismissed
  """
  MILESTONE

  """
  The reason the alert was dismissed
  """
  NUMBER

  """
  Antigua and Barbuda
  """
  REPOSITORY

  """
  Anguilla
  """
  REVIEWERS

  """
  When was the alert fixed?
  """
  SINGLE_SELECT

  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  TEXT

  """
  Angola
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  Antarctica
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  Identifies the primary key from the database as a BigInt.
  """
  content: ProjectV2ItemContent

  """
  The Node ID of the PullRequestReview object
  """
  createdAt: DateTime!

  """
  Argentina
  """
  creator: Actor

  """
  Returns whether or not a comment has been minimized.
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  fieldValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  isArchived: Boolean!

  """
  A list of teams that this review was made on behalf of.
  """
  project: ProjectV2!

  """
  Aruba
  """
  type: ProjectV2ItemType!

  """
  Åland
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  Azerbaijan
  """
  edges: [ProjectV2ItemEdge]

  """
  Bosnia and Herzegovina
  """
  nodes: [ProjectV2Item]

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  totalCount: Int!
}

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  Belgium
  """
  BE

  """
  An alert that has been automatically closed by Dependabot.
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  An alert that has been manually closed by a user.
  """
  createdAt: DateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  creator: Actor

  """
  Bulgaria
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  Bahrain
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

"""
Autogenerated input type of UpdateRepositoryRuleset
"""
input UpdateRepositoryRulesetInput {
  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Cape Verde
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  The actor who created the item.
  """
  CW

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput {
  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  clientMutationId: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ItemFieldValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

"""
Autogenerated input type of RevokeMigratorRole
"""
input RevokeMigratorRoleInput {
  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
enum RoleInOrganization {
  """
  The collaborator has no direct access to the project
  """
  NONE

  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  Do not evaluate or enforce rules
  """
  DISABLED

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

"""
Types which can be parameters for `RepositoryRule` objects.
"""
union RuleParameters =
    BranchNamePatternParameters
  | CommitAuthorEmailPatternParameters
  | CommitMessagePatternParameters
  | CommitterEmailPatternParameters
  | PullRequestParameters
  | RequiredDeploymentsParameters
  | RequiredStatusChecksParameters
  | TagNamePatternParameters
  | UpdateParameters
  | WorkflowsParameters

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  Parameters used for the `branch_name_pattern` rule type
  """
  branchNamePattern: BranchNamePatternParametersInput

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum SamlDigestAlgorithm {
  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  The project view's name.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

"""
Represents the individual results of a search.
"""
enum SearchType {
  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  Returns results matching users and organizations on GitHub.
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  The organization that originated the advisory
  """
  edges: [ProjectV2ViewEdge]

  """
  The permalink for the advisory
  """
  nodes: [ProjectV2View]

  """
  When the advisory was published
  """
  publishedAt: DateTime!

  """
  A list of references for this advisory
  """
  references: [SecurityAdvisoryReference!]!

"""
An edge in a connection.
"""
type ProjectV2ViewEdge {
  """
  The severity of the advisory
  """
  severity: SecurityAdvisorySeverity!

  """
  A short plaintext summary of the advisory
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  Classification of general advisories.
  """
  GENERAL

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  COMPOSER

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  ERLANG

  """
  Go modules
  """
  GO

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  cursor: String!

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  type: String!

  """
  The name of the workflow
  """
  NAME

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter {
  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  value: String!
}

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Only show answered or unanswered discussions
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

"""
Ordering options for security vulnerability connections
"""
input SecurityVulnerabilityOrder {
  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The ID of the user to set a limit for.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    If true, filters teams that are mapped to an LDAP Group (Enterprise only)
    """
    ldapMapped: Boolean

    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    orderBy: TeamOrder

    """
    If non-null, filters teams according to privacy
    """
    privacy: TeamPrivacy

    """
    If non-null, filters teams with query on team name and team slug
    """
    query: String

    """
    If non-null, filters teams according to whether the viewer is an admin or member on team
    """
    role: TeamRole

    """
    If true, restrict to only root teams
    """
    rootTeamsOnly: Boolean = false

    """
    User logins to filter by
    """
    userLogins: [String!]
  ): TeamConnection!

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  websiteUrl: URI
}

"""
An audit entry in an organization audit log.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type SponsorEdge {
  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Order sponsors by their relevance to the viewer.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReadyForReviewEvent object
  """
  id: ID!

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

"""
Ways in which lists of git refs can be ordered upon return.
"""
input RefOrder {
  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
type OrganizationIdentityProvider implements Node {
  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

  """
  The email address of the user invited to the organization.
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  invitationType: OrganizationInvitationType!

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  downloadUrl: URI!

  """
  The Node ID of the ReleaseAsset object
  """
  id: ID!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  Andorra
  """
  AD

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  AE

  """
  Afghanistan
  """
  AF

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
enum OrganizationInvitationType {
  """
  Antigua and Barbuda
  """
  AG

  """
  Anguilla
  """
  AI

  """
  Albania
  """
  AL

  """
  Armenia
  """
  AM

  """
  Angola
  """
  AO

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
type PullRequestChangedFile {
  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  The total size in kilobytes of all repositories in the connection. Value will
  never be larger than max 32-bit signed integer.
  """
  AX

  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  PRIVATE
}

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
union OrganizationOrUser = Organization | User

  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  BH

  """
  Burundi
  """
  BI

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!
}

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

  """
  Brunei Darussalam
  """
  BN

  """
  Bolivia
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  BR

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  Bhutan
  """
  BT

"""
Parameters to be used for the repository_id condition
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
A subset of repository info.
"""
interface RepositoryInfo {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  BV

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise from which the user should be removed.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the user to remove from the enterprise.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  The user that was removed from the enterprise.
  """
  user: User

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
input RemoveEnterpriseOrganizationInput {
  """
  Botswana
  """
  BW

  """
  Belarus
  """
  node: Package
}

"""
A file in a package version.
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

  """
  Belize
  """
  BZ

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  CD

  """
  Central African Republic
  """
  CF

  """
  Congo (Brazzaville)
  """
  CG

  """
  Switzerland
  """
  CH

  """
  Côte d'Ivoire
  """
  CI

  """
  Cook Islands
  """
  CK

  """
  Chile
  """
  CL

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  CREATED_AT
}

"""
Represents an owner of a package.
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

  """
  China
  """
  CN

  """
  Colombia
  """
  CO

  """
  Costa Rica
  """
  CR

  """
  Cape Verde
  """
  CV

  """
  Curaçao
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

  """
  Christmas Island
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  Cyprus
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  Czech Republic
  """
  CZ

  """
  Identifies the date and time when the repository was last pushed to.
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

  """
  Djibouti
  """
  DJ

  """
  Denmark
  """
  DK

  """
  Dominica
  """
  DM

  """
  The reaction groups for the subject.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

    """
    Ordering of the returned package files.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

  """
  Algeria
  """
  DZ

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  EC

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  EE

  """
  Egypt
  """
  EG

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  Western Sahara
  """
  EH

  """
  Eritrea
  """
  ER

  """
  Spain
  """
  ES

  """
  Ethiopia
  """
  ET

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

  """
  The Node ID of the RemovedFromMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The reason this pull request was removed from the queue.
  """
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
type RemovedFromProjectEvent implements Node {
  """
  Finland
  """
  FI

  """
  Fiji
  """
  FJ

  """
  Falkland Islands
  """
  databaseId: Int

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  id: ID!

  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  FR

  """
  Gabon
  """
  GA

  """
  United Kingdom
  """
  currentTitle: String!

  """
  The Node ID of the RenamedTitleEvent object
  """
  id: ID!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  GD

  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The source of this permission.
  """
  GE

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
input ReopenIssueInput {
  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  email: String

  """
  The Node ID of the RepositoryInvitation object
  """
  id: ID!

  """
  Ghana
  """
  GH

  """
  Gibraltar
  """
  GI

  """
  Greenland
  """
  GL

  """
  Gambia
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Guinea
  """
  GN

  """
  Guadeloupe
  """
  GP

  """
  Equatorial Guinea
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

  """
  Greece
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

  """
  South Georgia and South Sandwich Islands
  """
  GS

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  GT

  """
  Guam
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  Guyana
  """
  GY

  """
  Hong Kong
  """
  HK

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  Heard and McDonald Islands
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  Honduras
  """
  HN

  """
  Croatia
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  id: ID!

  """
  Haiti
  """
  RENAME

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type RepositoryMigration implements Migration & Node {
  """
  The migration flag to continue on error.
  """
  HU

  """
  Indonesia
  """
  ID

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  databaseId: String

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  id: ID!

  """
  Israel
  """
  IL

  """
  The migration source.
  """
  IM

  """
  India
  """
  IN

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  IO

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

  """
  Iran
  """
  IR

  """
  Iceland
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

  """
  Italy
  """
  IT

  """
  Jersey
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

  """
  Jamaica
  """
  JM

  """
  Jordan
  """
  JO

  """
  Japan
  """
  JP

  """
  Kenya
  """
  KE

  """
  Kyrgyzstan
  """
  KG

  """
  Cambodia
  """
  KH

"""
The possible team notification values.
"""
enum TeamNotificationSetting {
  """
  Kiribati
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddMemberAuditEntry object
  """
  id: ID!

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
interface RepositoryNode {
  """
  Comoros
  """
  KM

  """
  Saint Kitts and Nevis
  """
  KN

  """
  Korea, South
  """
  KR

  """
  Kuwait
  """
  KW

  """
  Cayman Islands
  """
  KY

  """
  Kazakhstan
  """
  KZ

  """
  Laos
  """
  LA

  """
  Lebanon
  """
  LB

  """
  Saint Lucia
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The Node ID of the RepositoryOwner object
  """
  id: ID!

  """
  Liechtenstein
  """
  LI

  """
  Sri Lanka
  """
  LK

  """
  Liberia
  """
  LR

  """
  Lesotho
  """
  LS

  """
  Lithuania
  """
  LT

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

  """
  Latvia
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

  """
  Libya
  """
  LY

  """
  Morocco
  """
  MA

  """
  Monaco
  """
  MC

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Montenegro
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  id: ID!

  """
  Saint Martin (French part)
  """
  MF

  """
  Madagascar
  """
  MG

  """
  Marshall Islands
  """
  MH

  """
  Macedonia
  """
  MK

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  Mali
  """
  ML

  """
  Myanmar
  """
  MM

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  MN

  """
  Macau
  """
  MO

  """
  Northern Mariana Islands
  """
  MP

  """
  Martinique
  """
  MQ

  """
  Mauritania
  """
  MR

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoArchivedAuditEntry object
  """
  id: ID!

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
An item in a pull request timeline
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

"""
The connection type for PullRequestTimelineItems.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  createdAt: PreciseDateTime!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  id: ID!

  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  MERGE_QUEUE_LOCKED_REF

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REQUIRED_SIGNATURES

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Secret scanning
  """
  SECRET_SCANNING

  """
  Tag
  """
  TAG

  """
  Tag name pattern
  """
  TAG_NAME_PATTERN

  """
  Only allow users with bypass permission to update matching refs.
  """
  UPDATE

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  WORKFLOWS

  """
  Workflow files cannot be modified.
  """
  WORKFLOW_UPDATES
}

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetBypassActorConnection

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The enforcement level of this ruleset
  """
  enforcement: RuleEnforcement!

  """
  The Node ID of the RepositoryRuleset object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The type of rule.
    """
    type: RepositoryRuleType
  ): RepositoryRuleConnection

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  repositoryRoleName: String

  """
  Identifies the ruleset associated with the allowed actor
  """
  repositoryRuleset: RepositoryRuleset
}

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  ALWAYS

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRulesetBypassActor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  A cursor for use in pagination.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The item at the end of the edge.
  """
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  actorId: ID

  """
  The bypass mode for this actor.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode!

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the PushAllowance object
  """
  id: ID!
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRuleset]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRuleset
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
New projects that manage issues, pull requests and drafts using tables and boards.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  Mauritius
  """
  closed: Boolean!

  """
  Maldives
  """
  MV

  """
  Malawi
  """
  createdAt: DateTime!

  """
  Mexico
  """
  creator: Actor

  """
  Malaysia
  """
  databaseId: Int

  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  id: ID!

  """
  Namibia
  """
  NA

  """
  New Caledonia
  """
  NC

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

  """
  Norfolk Island
  """
  NF

  """
  Nigeria
  """
  NG

  """
  Nicaragua
  """
  NI

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  Norway
  """
  number: Int!

  """
  Nepal
  """
  owner: ProjectV2Owner!

  """
  Nauru
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

  """
  Niue
  """
  NU

  """
  New Zealand
  """
  NZ

  """
  Oman
  """
  OM

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

"""
Autogenerated input type of UnlinkProjectV2FromTeam
"""
input UnlinkProjectV2FromTeamInput {
  """
  Peru
  """
  resourcePath: URI!

  """
  French Polynesia
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  title: String!

  """
  Papua New Guinea
  """
  updatedAt: DateTime!

  """
  Philippines
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Pakistan
  """
  PK

  """
  Poland
  """
  PL

  """
  Saint Pierre and Miquelon
  """
  createdAt: PreciseDateTime!

  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  Puerto Rico
  """
  edges: [ProjectV2Edge]

  """
  Palestine
  """
  nodes: [ProjectV2]

  """
  Portugal
  """
  PT

  """
  Palau
  """
  PW

  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  PY

  """
  Qatar
  """
  QA

  """
  Reunion
  """
  RE

  """
  Romania
  """
  RO

    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    query: String!

  """
  Russian Federation
  """
  RU

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  Rwanda
  """
  RW

  """
  Saudi Arabia
  """
  node: ProjectV2
}

"""
Required status check
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  Solomon Islands
  """
  createdAt: DateTime!

  """
  Seychelles
  """
  dataType: ProjectV2FieldType!

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  Sudan
  """
  name: String!

  """
  Sweden
  """
  project: ProjectV2!

  """
  Saint Helena
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  Slovenia
  """
  createdAt: DateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  dataType: ProjectV2FieldType!

  """
  Svalbard and Jan Mayen Islands
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  Slovakia
  """
  name: String!

  """
  Sierra Leone
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  When was the alert created?
  """
  edges: [ProjectV2FieldEdge]

  """
  Somalia
  """
  nodes: [ProjectV2Field]

  """
  Suriname
  """
  SR

  """
  Comment explaining the reason the alert was dismissed
  """
  dismissComment: String

"""
An edge in a connection.
"""
type ProjectV2FieldEdge {
  """
  The reason the alert was dismissed
  """
  SS

  """
  Sao Tome and Principe
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  El Salvador
  """
  ASSIGNEES

  """
  When was the alert fixed?
  """
  DATE

  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  ITERATION

  """
  Turks and Caicos Islands
  """
  LABELS

  """
  Chad
  """
  LINKED_PULL_REQUESTS

  """
  French Southern Lands
  """
  MILESTONE

  """
  Togo
  """
  NUMBER

  """
  Thailand
  """
  REPOSITORY

  """
  Tajikistan
  """
  REVIEWERS

  """
  Tokelau
  """
  SINGLE_SELECT

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  TEXT

  """
  Timor-Leste
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  Turkmenistan
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  Tunisia
  """
  content: ProjectV2ItemContent

  """
  Tonga
  """
  createdAt: DateTime!

  """
  Türkiye
  """
  creator: Actor

"""
The possible commit status states.
"""
type UpdateParameters {
  """
  Trinidad and Tobago
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  fieldValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Tuvalu
  """
  isArchived: Boolean!

  """
  Taiwan
  """
  project: ProjectV2!

  """
  An alert that has been automatically closed by Dependabot.
  """
  type: ProjectV2ItemType!

  """
  An alert that has been manually closed by a user.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  Uganda
  """
  edges: [ProjectV2ItemEdge]

  """
  United States Minor Outlying Islands
  """
  nodes: [ProjectV2Item]

  """
  United States of America
  """
  US

  """
  Uruguay
  """
  UY

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  Vatican City
  """
  VA

  """
  Saint Vincent and the Grenadines
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Venezuela
  """
  createdAt: DateTime!

  """
  Virgin Islands, British
  """
  creator: Actor

  """
  Virgin Islands, U.S.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  Vietnam
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

"""
Autogenerated input type of UnsubscribeFromNotifications
"""
input UnsubscribeFromNotificationsInput
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

"""
Autogenerated input type of RerequestCheckSuite
"""
input RerequestCheckSuiteInput {
  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The HTTP URL for this contribution.
  """
  createdAt: PreciseDateTime!

  """
  The actor who created the item.
  """
  id: ID!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  The HTTP path listing organization's projects
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

"""
Ordering options for saved reply connections.
"""
input SavedReplyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
type SearchResultItemConnection {
  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  When the advisory was published
  """
  publishedAt: DateTime!

  """
  A list of references for this advisory
  """
  references: [SecurityAdvisoryReference!]!

"""
An edge in a connection.
"""
type ProjectV2ViewEdge {
  """
  The severity of the advisory
  """
  severity: SecurityAdvisorySeverity!

    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    orderBy: TeamOrder

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
type SecurityAdvisoryConnection {
  """
  The name of the workflow.
  """
  edges: [SecurityAdvisoryEdge]

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  nodes: [SecurityAdvisory]

    """
    The login of one specific collaborator.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    query: String
  ): RepositoryCollaboratorConnection

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  PUB

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  RUST

  """
  The name of the workflow
  """
  NAME

"""
An edge in a connection.
"""
type SecurityAdvisoryEdge {
  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  node: SecurityAdvisory
}

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder {
  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

"""
Properties by which security advisory connections can be ordered.
"""
enum SecurityAdvisoryOrderField {
  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter to external identities with the users login
    """
    login: String

    """
    Filter to external identities with valid org membership only
    """
    membersOnly: Boolean

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

"""
An individual vulnerability within an Advisory
"""
type SecurityVulnerability {
  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

  """
  The repository associated with this pull request's base Ref.
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Only show answered or unanswered discussions
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
input ReopenIssueInput {
  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  A string that describes the vulnerable package versions.
  This string follows a basic syntax with a few forms.
  + `= 0.2.0` denotes a single vulnerable version.
  + `<= 1.0.8` denotes a version range up to and including the specified version
  + `< 0.1.11` denotes a version range up to, but excluding, the specified version
  + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
  + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
  """
  vulnerableVersionRange: String!
}

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: UPDATED_AT, direction: DESC}

    """
    A list of states to filter the discussions by.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
union OrganizationOrUser = Organization | User

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

"""
Autogenerated return type of SetEnterpriseIdentityProvider
"""
type SetEnterpriseIdentityProviderPayload {
  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  The total number of organizations this user is in
  """
  totalOrganizationCount: Int!
}

"""
Information for an uploaded package.
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

  """
  Find the latest version for the package.
  """
  latestVersion: PackageVersion

  """
  Identifies the name of the package.
  """
  name: String!

  """
  Identifies the type of the package.
  """
  packageType: PackageType!

  """
  The repository this package belongs to.
  """
  repository: Repository

  """
  Statistics about package activity.
  """
  statistics: PackageStatistics

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  node: Package
}

"""
A file in a package version.
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The permalink to the pull request.
  """
  permalink: URI!

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

"""
Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
"""
input SponsorAndLifetimeValueOrder {
  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  CREATED_AT
}

"""
Represents an owner of a package.
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    repositoryId: ID
  ): PackageConnection!
}

"""
Represents a object that contains package activity statistics such as downloads.
"""
type PackageStatistics {
  """
  Number of times the package was downloaded since it was created.
  """
  downloadsTotalCount: Int!
}

"""
A version tag contains the mapping between a tag name and a version.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

  """
  Identifies the tag name of the version.
  """
  name: String!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  A maven package.
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

  """
  An npm package.
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  A nuget package.
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Ordering options for sponsors returned from the connection.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    states: [PullRequestState!]
  ): PullRequestConnection!

  """
  Identifies the date and time when the repository was last pushed to.
  """
  pushedAt: DateTime

  """
  Whether or not rebase-merging is enabled on this repository.
  """
  rebaseMergeAllowed: Boolean!

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  Andorra
  """
  AD

  """
  United Arab Emirates
  """
  AE

"""
Parameters to be used for the repository_id condition
"""
type RepositoryIdConditionTarget {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  id: ID!

"""
A subset of repository info.
"""
interface RepositoryInfo {
  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  archivedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  AF

  """
  Antigua and Barbuda
  """
  AG

  """
  Anguilla
  """
  AI

  """
  Albania
  """
  AL

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The source of this permission.
  """
  AM

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
type PullRequestChangedFile {
  """
  Angola
  """
  AO

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  AQ

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland
  """
  AX

  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

  """
  Bahrain
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

  """
  Burundi
  """
  BI

  """
  Identifies the date and time when the repository was last pushed to.
  """
  BJ

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  BM

  """
  Brunei Darussalam
  """
  BN

  """
  Bolivia
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  BR

  """
  Bahamas
  """
  BS

  """
  Bhutan
  """
  BT

  """
  Bouvet Island
  """
  BV

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  BY

  """
  Belize
  """
  BZ

  """
  Canada
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Congo (Kinshasa)
  """
  CD

  """
  Central African Republic
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Congo (Brazzaville)
  """
  CG

  """
  Switzerland
  """
  CH

  """
  Côte d'Ivoire
  """
  CI

"""
How payment was made for funding a GitHub Sponsors sponsorship.
"""
enum SponsorshipPaymentSource {
  """
  Cook Islands
  """
  CK

  """
  Chile
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  Cameroon
  """
  email: String

  """
  The Node ID of the RepositoryInvitation object
  """
  id: ID!

  """
  China
  """
  CN

  """
  Colombia
  """
  CO

  """
  Costa Rica
  """
  CR

  """
  Cape Verde
  """
  CV

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  CX

"""
Represents an SSH signature on a Commit or Tag.
"""
type SshSignature implements GitSignature {
  """
  Cyprus
  """
  CY

  """
  Czech Republic
  """
  CZ

  """
  Germany
  """
  DE

  """
  Djibouti
  """
  DJ

  """
  Denmark
  """
  DK

  """
  Dominica
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

"""
Ways in which star connections can be ordered.
"""
input StarOrder {
  """
  Dominican Republic
  """
  DO

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  DZ

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  EC

  """
  Estonia
  """
  EE

  """
  Egypt
  """
  EG

  """
  Western Sahara
  """
  EH

  """
  Eritrea
  """
  RENAME

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type RepositoryMigration implements Migration & Node {
  """
  The migration flag to continue on error.
  """
  ES

  """
  Ethiopia
  """
  ET

"""
Things that can be starred.
"""
interface Starrable {
  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  id: ID!

  """
  Fiji
  """
  FJ

  """
  The migration source.
  """
  FK

  """
  Micronesia
  """
  FM

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  FO

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

  """
  Gabon
  """
  createdAt: PreciseDateTime!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  id: ID!

  """
  United Kingdom
  """
  GB

  """
  Grenada
  """
  GD

  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  GG

"""
Autogenerated input type of StartOrganizationMigration
"""
input StartOrganizationMigrationInput {
  """
  Ghana
  """
  GH

  """
  Gibraltar
  """
  GI

  """
  Greenland
  """
  GL

  """
  Gambia
  """
  GM

  """
  Guinea
  """
  GN

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
type StartOrganizationMigrationPayload {
  """
  Guadeloupe
  """
  GP

  """
  Equatorial Guinea
  """
  GQ

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  GR

  """
  South Georgia and South Sandwich Islands
  """
  GS

  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  Guam
  """
  GU

  """
  Guinea-Bissau
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  Guyana
  """
  GY

  """
  Hong Kong
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  id: ID!

  """
  Heard and McDonald Islands
  """
  HM

  """
  Honduras
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The comment this is a reply to.
  """
  replyTo: PullRequestReviewComment

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path permalink for this review comment.
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  state: PullRequestReviewCommentState!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  updatedAt: DateTime!

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

  """
  Croatia
  """
  HR

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Hungary
  """
  HU

  """
  Indonesia
  """
  ID

  """
  Ireland
  """
  IE

  """
  Israel
  """
  IL

  """
  Isle of Man
  """
  IM

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  IN

  """
  British Indian Ocean Territory
  """
  IO

  """
  Iraq
  """
  IQ

  """
  Iran
  """
  IR

  """
  Iceland
  """
  IS

  """
  Italy
  """
  IT

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  LOCK_BRANCH

  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  MERGE_QUEUE_LOCKED_REF

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
New projects that manage issues, pull requests and drafts using tables and boards.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  Secret scanning
  """
  closed: Boolean!

  """
  Tag
  """
  TAG

  """
  Tag name pattern
  """
  createdAt: DateTime!

  """
  Only allow users with bypass permission to update matching refs.
  """
  creator: Actor

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  databaseId: Int

  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  List of fields and their constraints in the project
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  Identifies the file path of this thread.
  """
  number: Int!

  """
  Identifies the pull request associated with this thread.
  """
  owner: ProjectV2Owner!

  """
  Identifies the repository associated with this thread.
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  Identifies the primary key from the database.
  """
  title: String!

  """
  The enforcement level of this ruleset
  """
  updatedAt: DateTime!

  """
  The Node ID of the RepositoryRuleset object
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  A list of edges.
  """
  edges: [ProjectV2Edge]

  """
  Source of ruleset.
  """
  nodes: [ProjectV2]

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  node: ProjectV2
}

"""
A field inside a project.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  createdAt: DateTime!

  """
  This actor represents the ability for an organization owner to bypass
  """
  dataType: ProjectV2FieldType!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  name: String!

  """
  Identifies the ruleset associated with the allowed actor
  """
  project: ProjectV2!

  """
  The actor can only bypass rules via a pull request
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  A list of edges.
  """
  createdAt: DateTime!

  """
  A list of nodes.
  """
  dataType: ProjectV2FieldType!

  """
  Information to aid in pagination.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  Identifies the total count of items in the connection.
  """
  name: String!

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Field]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  Branch
  """
  ASSIGNEES

  """
  Tag
  """
  DATE

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  ITERATION

  """
  Jersey
  """
  LABELS

  """
  Jamaica
  """
  LINKED_PULL_REQUESTS

  """
  Jordan
  """
  MILESTONE

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  NUMBER

  """
  Japan
  """
  REPOSITORY

  """
  Kenya
  """
  REVIEWERS

  """
  Kyrgyzstan
  """
  SINGLE_SELECT

  """
  Cambodia
  """
  TEXT

  """
  Kiribati
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  Comoros
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  Saint Kitts and Nevis
  """
  content: ProjectV2ItemContent

  """
  Korea, South
  """
  createdAt: DateTime!

  """
  Kuwait
  """
  creator: Actor

  """
  Cayman Islands
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  KZ

  """
  Laos
  """
  LA

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Liechtenstein
  """
  project: ProjectV2!

  """
  Liberia
  """
  type: ProjectV2ItemType!

  """
  Lesotho
  """
  updatedAt: DateTime!
}

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The Node ID of the Push object
  """
  createdAt: DateTime!

  """
  The Node ID of the RepoRemoveTopicAuditEntry object
  """
  creator: Actor

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

    """
    If true, filters teams that are mapped to an LDAP Group (Enterprise only)
    """
    ldapMapped: Boolean

    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    orderBy: TeamOrder

    """
    If non-null, filters teams according to privacy
    """
    privacy: TeamPrivacy

    """
    If non-null, filters teams with query on team name and team slug
    """
    query: String

    """
    If non-null, filters teams according to whether the viewer is an admin or member on team
    """
    role: TeamRole

    """
    If true, restrict to only root teams
    """
    rootTeamsOnly: Boolean = false

    """
    User logins to filter by
    """
    userLogins: [String!]
  ): TeamConnection!

  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  websiteUrl: URI
}

"""
An audit entry in an organization audit log.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Peru
  """
  PE

  """
  The actor who created the item.
  """
  PF

  """
  Papua New Guinea
  """
  PG

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  Russian Federation
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  Rwanda
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

  """
  Saudi Arabia
  """
  SA

"""
An edge in a connection.
"""
type ProjectV2ItemFieldValueEdge {
  """
  Solomon Islands
  """
  union: Boolean = false

  """
  Seychelles
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

"""
Parameters to be used for the tag_name_pattern rule
"""
input TagNamePatternParametersInput {
  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
union OrganizationOrUser = Organization | User

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  The total number of organizations this user is in
  """
  totalOrganizationCount: Int!
}

"""
The possible roles of a collaborator on a project.
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

  """
  The collaborator has no direct access to the project
  """
  NONE

  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  The Node ID of the ReviewDismissedEvent object
  """
  id: ID!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the pull request associated with this review request.
  """
  pullRequest: PullRequest!

  """
  The reviewer that is requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
input RevokeEnterpriseOrganizationsMigratorRoleInput {
  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    repositoryId: ID
  ): PackageConnection!
}

"""
Represents a object that contains package activity statistics such as downloads.
"""
type PackageStatistics {
  """
  Number of times the package was downloaded since it was created.
  """
  downloadsTotalCount: Int!
}

"""
A version tag contains the mapping between a tag name and a version.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

  """
  Identifies the tag name of the version.
  """
  name: String!

  """
  Version that the tag is associated with.
  """
  version: PackageVersion
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  A maven package.
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

  """
  An npm package.
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  A nuget package.
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  A python package.
  """
  PYPI

  """
  A rubygems package.
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

"""
Information about a specific package version.
"""
type PackageVersion implements Node {
  """
  List of files associated with this package version
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  The project view's name.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  SHA384
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The Node ID of the ReadyForReviewEvent object
  """
  id: ID!

  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """
    The number for the vulnerability alert to be returned.
    """
    number: Int!
  ): RepositoryVulnerabilityAlert

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ViewEdge]

  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The source of this permission.
  """
  nodes: [ProjectV2View]

  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    The head ref to compare against.
    """
    headRef: String!
  ): Comparison

  """
  The Node ID of the Ref object
  """
  id: ID!

"""
The results of a search.
"""
type ProjectV2ViewEdge {
  """
  The total number of pieces of code that matched the search query. Regardless
  of the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  codeCount: Int!

  """
  The total number of discussions that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  The object the ref points to. Returns null when object does not exist.
  """
  nodes: [SearchResultItem]

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

  """
  The Node ID of the ProjectV2Workflow object
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

"""
A GitHub Security Advisory
"""
type SecurityAdvisory implements Node {
  """
  The name of the workflow.
  """
  classification: SecurityAdvisoryClassification!

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  cvss: CVSS!

  """
  CWEs associated with this Advisory
  """
  cwes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  permalink: URI

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  references: [SecurityAdvisoryReference!]!

  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  UPDATED_AT
}

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

"""
A subset of repository info.
"""
interface RepositoryInfo {
  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter {
  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Identifier formats available for advisories.
"""
enum SecurityAdvisoryIdentifierType {
  """
  Common Vulnerabilities and Exposures Identifier.
  """
  CVE

  """
  GitHub Security Advisory ID.
  """
  GHSA
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  The body as Markdown.
  """
  body: String!

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  High.
  """
  HIGH

  """
  Low.
  """
  LOW

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The severity of the vulnerability within this package
  """
  severity: SecurityAdvisorySeverity!

  """
  When the vulnerability was last updated
  """
  updatedAt: DateTime!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    type: PinnableItemType
  ): Boolean!

  """
  The public profile email.
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

  """
  Showcases a selection of repositories and gists that the profile owner has
  either curated or that have been selected automatically based on popularity.
  """
  itemShowcase: ProfileItemShowcase!

  """
  The public profile location.
  """
  location: String

  """
  The username used to login.
  """
  login: String!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput {
  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectColumnConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who originally created the project.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

  """
  The project's name.
  """
  name: String!

  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  Project progress details.
  """
  progress: ProjectProgress!

  """
  The HTTP path for this project
  """
  resourcePath: URI!

  """
  Whether the project is open or closed.
  """
  state: ProjectState!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this project
  """
  url: URI!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!
}

"""
A card in a project.
"""
type ProjectCard implements Node {
  """
  The project column this card is associated under. A card may only belong to one
  project column at a time. The column field will be null if the card is created
  in a pending state and has yet to be associated with a column. Once cards are
  associated with a column, they will not become pending in the future.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include archived items.
    """
    includeArchived: Boolean = true

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
type SocialAccountConnection {
  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

"""
Autogenerated input type of ReopenIssue
"""
enum SocialAccountProvider {
  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    orderBy: RepositoryOrder

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
New projects that manage issues, pull requests and drafts using tables and boards.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  Indicates if the object can be closed by the viewer.
  """
  closed: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  Identifies the date and time when the object was last updated.
  """
  createdAt: DateTime!

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  creator: Actor

  """
  The mode for the bypass actor
  """
  databaseId: Int

  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  number: Int!

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  owner: ProjectV2Owner!

  """
  Reasons why the current viewer can not update this comment.
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoArchivedAuditEntry object
  """
  id: ID!

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

  """
  A list of nodes.
  """
  resourcePath: URI!

  """
  Information to aid in pagination.
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  Identifies the total count of items in the connection.
  """
  title: String!

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  updatedAt: DateTime!

  """
  Update branch via rebase
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

"""
A file changed in a pull request.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  actorId: ID

  """
  The bypass mode for this actor.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode!

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  A list of edges.
  """
  edges: [ProjectV2Edge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2
}

"""
The targets supported for rulesets
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Git commit object
  """
  dataType: ProjectV2FieldType!

  """
  The Node ID of the PullRequestCommit object
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Tag
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  The Node ID of the RepositoryTopic object
  """
  createdAt: DateTime!

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The amount in cents.
  """
  dataType: ProjectV2FieldType!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  The amount in USD, formatted as a string.
  """
  name: String!

  """
  The sponsor's GitHub account.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Field]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  The ordering direction.
  """
  ASSIGNEES

  """
  The field to order results by.
  """
  DATE

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  ITERATION

  """
  Order results by the sponsor's login (username).
  """
  LABELS

  """
  Order results by the sponsor's relevance to the viewer.
  """
  LINKED_PULL_REQUESTS

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  A list of edges.
  """
  MILESTONE

  """
  A list of nodes.
  """
  NUMBER

  """
  Information to aid in pagination.
  """
  REPOSITORY

  """
  Identifies the total count of items in the connection.
  """
  REVIEWERS

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type SponsorEdge {
  """
  A cursor for use in pagination.
  """
  SINGLE_SELECT

  """
  The item at the end of the edge.
  """
  TEXT

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
input SponsorOrder {
  """
  The ordering direction.
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  The field to order sponsor entities by.
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  content: ProjectV2ItemContent

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  """
  Order sponsorable entities by login (username).
  """
  createdAt: DateTime!

  """
  Order sponsors by their relevance to the viewer.
  """
  creator: Actor

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  fieldValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  isArchived: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  project: ProjectV2!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  type: ProjectV2ItemType!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  edges: [ProjectV2ItemEdge]

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  nodes: [ProjectV2Item]

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  True if the viewer is sponsored by this user/organization.
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  createdAt: DateTime!

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  creator: Actor

  """
  List of users and organizations this entity is sponsoring.
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  List of sponsors for this user or organization.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The actor who created the item.
  """
  id: ID!

  """
  Comment explaining the reason the alert was dismissed
  """
  dismissComment: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  The previous calendar day.
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  MONTH

"""
An edge in a connection.
"""
type ProjectV2ItemFieldValueEdge {
  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
input RequiredStatusChecksParametersInput {
  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload {
  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  createdAt: PreciseDateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  The ID of the published tier to retire.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The HTTP path for this review dismissed event.
  """
  resourcePath: URI!

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    If true, filters teams that are mapped to an LDAP Group (Enterprise only)
    """
    ldapMapped: Boolean

    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    userLogins: [String!]
  ): TeamConnection!

  """
  The HTTP path listing organization's teams
  """
  teamsResourcePath: URI!

  """
  The HTTP URL listing organization's teams
  """
  teamsUrl: URI!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  twitterUsername: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this organization.
  """
  url: URI!

  """
  Organization is adminable by the viewer.
  """
  viewerCanAdminister: Boolean!

  """
  Can the viewer pin repositories and gists to the profile?
  """
  viewerCanChangePinnedItems: Boolean!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!

  """
  Viewer can create repositories on this organization
  """
  viewerCanCreateRepositories: Boolean!

  """
  Viewer can create teams on this organization.
  """
  viewerCanCreateTeams: Boolean!

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  Viewer is an active member of this organization.
  """
  viewerIsAMember: Boolean!

  """
  Whether or not this Organization is followed by the viewer.
  """
  viewerIsFollowing: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  websiteUrl: URI
}

"""
An audit entry in an organization audit log.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

"""
The connection type for OrganizationAuditEntry.
"""
type ProjectV2ViewConnection {
  """
  Identifies the actor who performed the event.
  """
  edges: [ProjectV2ViewEdge]

  """
  Identifies the date and time when the object was created.
  """
  nodes: [ProjectV2View]

  """
  The Node ID of the ReviewRequestedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review was requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type ProjectV2ViewEdge {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
type OrganizationIdentityProvider implements Node {
  """
  The digest algorithm used to sign SAML requests for the Identity Provider.
  """
  digestMethod: URI

  """
  External Identities provisioned by this Identity Provider
  """
  externalIdentities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter to external identities with the users login
    """
    login: String

    """
    Filter to external identities with valid org membership only
    """
    membersOnly: Boolean

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

  """
  The x509 certificate used by the Identity Provider to sign assertions and responses.
  """
  idpCertificate: X509Certificate

  """
  The Issuer Entity ID for the SAML Identity Provider
  """
  issuer: String

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

"""
Possible roles a user may have in relation to an organization.
"""
enum RoleInOrganization {
  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

  """
  The Node ID of the ProjectV2Workflow object
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  UNAFFILIATED
}

"""
The level of enforcement for a rule or ruleset.
"""
enum RuleEnforcement {
  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

  """
  Do not evaluate or enforce rules
  """
  DISABLED

  """
  Allow admins to test rules before enforcing them. Admins can view insights on
  the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
  """
  EVALUATE
}

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  update: UpdateParametersInput

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  SHA1

  """
  The name of the workflow
  """
  NAME

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
enum OrganizationInvitationType {
  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  SHA512
}

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

"""
Properties by which saved reply connections can be ordered.
"""
enum SavedReplyOrderField {
  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  A list of references for this advisory
  """
  references: [SecurityAdvisoryReference!]!

  """
  The severity of the advisory
  """
  severity: SecurityAdvisorySeverity!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    classifications: [SecurityAdvisoryClassification!]

"""
Information for an uploaded package.
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

"""
A file in a package version.
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

"""
Identifier formats available for advisories.
"""
enum SecurityAdvisoryIdentifierType {
  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder {
  """
  Identifies the pull request number.
  """
  CREATED_AT
}

"""
Represents an owner of a package.
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The login of one specific collaborator.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    query: String
  ): RepositoryCollaboratorConnection

  """
  The permalink to the pull request.
  """
  permalink: URI!

"""
An edge in a connection.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  A maven package.
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

  """
  An npm package.
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  A nuget package.
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Indicates if the repository has wiki feature enabled.
  """
  signatureMethod: SamlSignatureAlgorithm!

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

"""
Autogenerated input type of SetRepositoryInteractionLimit
"""
input SetRepositoryInteractionLimitInput {
  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The repository that the interaction limit was set for.
  """
  repository: Repository
}

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  branchProtectionRule: BranchProtectionRule

  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    The head ref to compare against.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The source of this permission.
  """
  source: PermissionGranter!
}

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Branch protection rules that are enforced on the viewer.
"""
enum SocialAccountProvider {
  """
  Social media and networking website.
  """
  FACEBOOK

  """
  Catch-all for social media providers that do not yet have specific handling.
  """
  GENERIC

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Microblogging website.
  """
  TWITTER

  """
  Online video platform.
  """
  YOUTUBE
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  Whether or not the viewer can disable auto-merge
  """
  viewerCanDisableAutoMerge: Boolean!

  """
  Can the viewer edit files within this pull request.
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

  """
  Whether or not the viewer can enable auto-merge
  """
  viewerCanEnableAutoMerge: Boolean!

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  The HTTP path for this repository
  """
  resourcePath: URI!

  """
  Returns a single ruleset from the current repository by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!

    """
    Include rulesets configured at higher levels that apply to this repository
    """
    mergeType: PullRequestMergeMethod
  ): String!

  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: SubscriptionState
}

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
type PullRequestChangedFile {
  """
  The number of additions to the file.
  """
  additions: Int!

  """
  A list of rulesets for this repository.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The security policy URL.
  """
  downloadUrl: URI!

  """
  The Node ID of the ReleaseAsset object
  """
  id: ID!

  """
  A description of the repository, rendered to HTML without any links in it.
  """
  shortDescriptionHTML(
    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    limit: Int = 200
  ): HTML!

  """
  Whether or not squash-merging is enabled on this repository.
  """
  squashMergeAllowed: Boolean!

  """
  How the default commit message will be generated when squash merging a pull request.
  """
  squashMergeCommitMessage: SquashMergeCommitMessage!

  """
  How the default commit title will be generated when squash merging a pull request.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  Whether a squash merge commit can use the pull request title as default.
  """
  squashPrTitleUsedAsDefault: Boolean!
    @deprecated(
      reason: "`squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC."
    )

  """
  The SSH URL to clone this repository
  """
  sshUrl: GitSSHRemote!

  """
  The sponsorships where this user or organization is the funder.
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

  """
  The commit the comments were made on.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!
}

"""
Entities that can be sponsored via GitHub Sponsors
"""
union SponsorableItem = Organization | User

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  Cameroon
  """
  edges: [SponsorableItemEdge]

  """
  China
  """
  nodes: [SponsorableItem]

  """
  Colombia
  """
  CO

  """
  Costa Rica
  """
  CR

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  """
  Cape Verde
  """
  CV

  """
  Curaçao
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  id: ID!

  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """
    The number for the vulnerability alert to be returned.
    """
    number: Int!
  ): RepositoryVulnerabilityAlert

  """
  A list of vulnerability alerts that are on this repository.
  """
  sponsor: Sponsor

  """
  The user or organization that is being sponsored, the maintainer.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  The associated sponsorship tier.
  """
  sponsorsTier: SponsorsTier

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  The activity was cancelling a sponsorship.
  """
  CANCELLED_SPONSORSHIP

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

  """
  The activity was scheduling a downgrade or cancellation.
  """
  PENDING_CHANGE

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Whether contributors are required to sign off on web-based commits in this repository.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

  """
  The ID of the enterprise from which the user should be removed.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  The user that was removed from the enterprise.
  """
  user: User

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
type SponsorsActivityConnection {
  """
  Ethiopia
  """
  edges: [SponsorsActivityEdge]

  """
  Finland
  """
  nodes: [SponsorsActivity]

  """
  Fiji
  """
  FJ

  """
  Falkland Islands
  """
  FK

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  Andorra
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  AF

  """
  Antigua and Barbuda
  """
  AG

  """
  Anguilla
  """
  AI

  """
  Albania
  """
  AL

  """
  Armenia
  """
  AM

  """
  Angola
  """
  AO

  """
  Antarctica
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  AU

  """
  Aruba
  """
  AW

  """
  The total size in kilobytes of all repositories in the connection. Value will
  never be larger than max 32-bit signed integer.
  """
  AX

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  AZ

  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  BH

  """
  Burundi
  """
  BI

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

  """
  The Node ID of the RemovedFromMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  pullRequest: PullRequest

  """
  The reason this pull request was removed from the queue.
  """
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
type RemovedFromProjectEvent implements Node {
  """
  Benin
  """
  BJ

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  BL

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

  """
  Brunei Darussalam
  """
  BN

  """
  Bolivia
  """
  BO

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!
}

  """
  Brazil
  """
  BR

  """
  Bahamas
  """
  BS

  """
  Bhutan
  """
  currentTitle: String!

  """
  The Node ID of the RenamedTitleEvent object
  """
  id: ID!

  """
  Bouvet Island
  """
  BV

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  BY

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
input ReopenIssueInput {
  """
  Belize
  """
  BZ

  """
  Canada
  """
  CA

"""
Parameters to be used for the repository_id condition
"""
type RepositoryIdConditionTarget {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
A subset of repository info.
"""
interface RepositoryInfo {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  CC

  """
  Congo (Kinshasa)
  """
  CD

  """
  Central African Republic
  """
  CF

  """
  Congo (Brazzaville)
  """
  CG

"""
Autogenerated input type of TransferIssue
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  CH

  """
  Côte d'Ivoire
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  CK

  """
  Chile
  """
  CL

  """
  Cameroon
  """
  CM

  """
  China
  """
  CN

  """
  Colombia
  """
  CO

  """
  Costa Rica
  """
  CR

  """
  Cape Verde
  """
  CV

  """
  Curaçao
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  id: ID!

  """
  Christmas Island
  """
  CX

  """
  Cyprus
  """
  CY

  """
  Czech Republic
  """
  CZ

  """
  Germany
  """
  DE

  """
  Djibouti
  """
  DJ

  """
  Denmark
  """
  DK

  """
  Dominica
  """
  DM

  """
  Dominican Republic
  """
  DO

  """
  Identifies the date and time when the repository was last pushed to.
  """
  DZ

  """
  Ecuador
  """
  EC

  """
  Estonia
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

  """
  Egypt
  """
  EG

  """
  Western Sahara
  """
  EH

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
Ways in which team connections can be ordered.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  Fiji
  """
  closed: Boolean!

  """
  Falkland Islands
  """
  FK

  """
  Micronesia
  """
  createdAt: DateTime!

  """
  Faroe Islands
  """
  creator: Actor

  """
  France
  """
  databaseId: Int

  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  GB

  """
  Grenada
  """
  createdAt: PreciseDateTime!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  GG

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  Gibraltar
  """
  number: Int!

  """
  Greenland
  """
  owner: ProjectV2Owner!

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type PullRequestRevisionMarker {
  """
  Gambia
  """
  GM

  """
  Guinea
  """
  email: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

  """
  Guadeloupe
  """
  resourcePath: URI!

  """
  Equatorial Guinea
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  Greece
  """
  title: String!

  """
  South Georgia and South Sandwich Islands
  """
  updatedAt: DateTime!

  """
  Guatemala
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Guam
  """
  GU

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  The side of the diff on which this thread was placed.
  """
  edges: [ProjectV2Edge]

  """
  The Node ID of the PullRequestThread object
  """
  nodes: [ProjectV2]

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  node: ProjectV2
}

"""
A field inside a project.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  The user who resolved this thread
  """
  createdAt: DateTime!

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  dataType: ProjectV2FieldType!

  """
  The line of the first file diff in the thread.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  name: String!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  project: ProjectV2!

  """
  Whether or not the viewer can unresolve this thread
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  Guinea-Bissau
  """
  createdAt: DateTime!

  """
  Guyana
  """
  dataType: ProjectV2FieldType!

  """
  Hong Kong
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  Heard and McDonald Islands
  """
  name: String!

  """
  Honduras
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  Indonesia
  """
  edges: [ProjectV2FieldEdge]

  """
  Ireland
  """
  nodes: [ProjectV2Field]

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  id: ID!

  """
  Israel
  """
  IL

"""
An edge in a connection.
"""
type ProjectV2FieldEdge {
  """
  Isle of Man
  """
  RENAME

  """
  The repository is locked due to a trade controls related reason.
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  The migration flag to continue on error.
  """
  ASSIGNEES

  """
  British Indian Ocean Territory
  """
  DATE

  """
  Identifies the primary key from the database.
  """
  ITERATION

  """
  The reason the migration failed.
  """
  LABELS

  """
  The Node ID of the RepositoryMigration object
  """
  LINKED_PULL_REQUESTS

  """
  Iran
  """
  MILESTONE

  """
  Iceland
  """
  NUMBER

  """
  Italy
  """
  REPOSITORY

  """
  Jersey
  """
  REVIEWERS

  """
  Jamaica
  """
  SINGLE_SELECT

  """
  Jordan
  """
  TEXT

  """
  Japan
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  Kenya
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  Kyrgyzstan
  """
  content: ProjectV2ItemContent

  """
  Cambodia
  """
  createdAt: DateTime!

  """
  The migration source.
  """
  creator: Actor

  """
  Comoros
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  KN

  """
  The migration state.
  """
  createdAt: PreciseDateTime!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  isArchived: Boolean!

  """
  Kuwait
  """
  project: ProjectV2!

  """
  Kazakhstan
  """
  type: ProjectV2ItemType!

  """
  Laos
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  Lebanon
  """
  edges: [ProjectV2ItemEdge]

  """
  Saint Lucia
  """
  nodes: [ProjectV2Item]

  """
  Liechtenstein
  """
  LI

  """
  Sri Lanka
  """
  totalCount: Int!
}

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  Liberia
  """
  LR

  """
  Lesotho
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Lithuania
  """
  createdAt: DateTime!

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  creator: Actor

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  field: ProjectV2FieldConfiguration!

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  The actor who created the item.
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  Source of ruleset.
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type ProjectV2ItemFieldValueEdge {
  """
  A cursor for use in pagination.
  """
  The actor that can bypass rules.
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  Saint Pierre and Miquelon
  """
  PM

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Serbia
  """
  RS

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Ukraine
  """
  UA

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  The project view's name.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  Yemen
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Zambia
  """
  ZM

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  The subscription status is currently unavailable.
  """
  edges: [ProjectV2ViewEdge]

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  nodes: [ProjectV2View]

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type ProjectV2ViewEdge {
  """
  The Stripe Connect account currently in use for payouts for this Sponsors
  listing, if any. Will only return a value when queried by the maintainer
  themselves, or by an admin of the sponsorable organization.
  """
  activeStripeConnectAccount: StripeConnectAccount

  """
  The name of the country or region with the maintainer's bank account or fiscal
  host. Will only return a value when queried by the maintainer themselves, or
  by an admin of the sponsorable organization.
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfigurationInput!]!

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload {
  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  clientMutationId: String

  """
  The tier that was retired.
  """
  sponsorsTier: SponsorsTier
}

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  actor: ReviewDismissalAllowanceActor

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  edges: [ReviewDismissalAllowanceEdge]

  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  totalCount: Int!
}

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type ReviewStatusHovercardContext implements HovercardContext {
  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
input RevokeEnterpriseOrganizationsMigratorRoleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

"""
Autogenerated input type of RevokeMigratorRole
"""
input RevokeMigratorRoleInput {
  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Specifies the type of the actor, can be either USER or TEAM.
  """
  actorType: ActorType!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

"""
Ordering options for saved reply connections.
"""
input SavedReplyOrder {
  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The total number of repositories that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  repositoryCount: Int!

  """
  The total number of users that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  userCount: Int!

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

  """
  Text matches on the result found.
  """
  textMatches: [TextMatch]
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

"""
A GitHub Security Advisory
"""
type SecurityAdvisory implements Node {
  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The severity of the advisory
  """
  severity: SecurityAdvisorySeverity!

  """
  A short plaintext summary of the advisory
  """
  summary: String!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    orderBy: SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}

    """
    A package name to filter vulnerabilities by.
    """
    package: String

    """
    A list of severities to filter vulnerabilities by.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

"""
The possible ecosystems of a security vulnerability's package.
"""
enum SecurityAdvisoryEcosystem {
  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Identifier formats available for advisories.
"""
enum SecurityAdvisoryIdentifierType {
  """
  Common Vulnerabilities and Exposures Identifier.
  """
  CVE

  """
  GitHub Security Advisory ID.
  """
  GHSA
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the user to set a limit for.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  user: User
}

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type SmimeSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """
  ASCII-armored signature header from object.
  """
  signature: String!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """
    The number for the vulnerability alert to be returned.
    """
    number: Int!
  ): RepositoryVulnerabilityAlert

  """
  A list of vulnerability alerts that are on this repository.
  """
  wasSignedByGitHub: Boolean!
}

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
type SocialAccount {
  """
  Name of the social media account as it appears on the profile.
  """
  displayName: String!

  """
  Software or company that hosts the social media account.
  """
  provider: SocialAccountProvider!

  """
  URL of the social media account.
  """
  url: URI!
}

"""
The connection type for SocialAccount.
"""
type SocialAccountConnection {
  """
  A list of edges.
  """
  edges: [SocialAccountEdge]

  """
  A list of nodes.
  """
  nodes: [SocialAccount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Whether contributors are required to sign off on web-based commits in this repository.
  """
  webCommitSignoffRequired: Boolean!
}

"""
Software or company that hosts social media accounts.
"""
enum SocialAccountProvider {
  """
  Social media and networking website.
  """
  FACEBOOK

  """
  Catch-all for social media providers that do not yet have specific handling.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  Fork of Mastodon with a greater focus on local posting.
  """
  HOMETOWN

  """
  Social media website with a focus on photo and video sharing.
  """
  INSTAGRAM

  """
  Professional networking website.
  """
  LINKEDIN

  """
  Open-source federated microblogging service.
  """
  MASTODON

  """
  JavaScript package registry.
  """
  NPM

  """
  Social news aggregation and discussion website.
  """
  REDDIT

  """
  Live-streaming service.
  """
  TWITCH

  """
  Microblogging website.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

  """
  Online video platform.
  """
  YOUTUBE
}

"""
Entities that can sponsor others via GitHub Sponsors
"""
union Sponsor = Organization | User

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The amount in cents.
  """
  amountInCents: Int!

  """
  The amount in USD, formatted as a string.
  """
  formattedAmount: String!

  """
  The sponsor's GitHub account.
  """
  sponsor: Sponsorable!

  """
  The maintainer's GitHub account.
  """
  sponsorable: Sponsorable!
}

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  A list of edges.
  """
  edges: [SponsorAndLifetimeValueEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorAndLifetimeValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorAndLifetimeValue
}

"""
Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
"""
input SponsorAndLifetimeValueOrder {
  """
  The ordering direction.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The field to order results by.
  """
  field: SponsorAndLifetimeValueOrderField!
}

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  LIFETIME_VALUE

  """
  Order results by the sponsor's login (username).
  """
  SPONSOR_LOGIN

  """
  Order results by the sponsor's relevance to the viewer.
  """
  SPONSOR_RELEVANCE
}

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  A list of edges.
  """
  edges: [SponsorEdge]

  """
  A list of nodes.
  """
  nodes: [Sponsor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!

  """
  The total size in kilobytes of all repositories in the connection. Value will
  never be larger than max 32-bit signed integer.
  """
  totalDiskUsage: Int!
}

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type SponsorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Sponsor
}

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
input SponsorOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsor entities by.
  """
  field: SponsorOrderField!
}

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN

  """
  Order sponsors by their relevance to the viewer.
  """
  RELEVANCE
}

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  estimatedNextSponsorsPayoutInCents: Int!

  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  hasSponsorsListing: Boolean!

  """
  Whether the given account is sponsoring this user/organization.
  """
  isSponsoredBy(
    """
    The target account's login.
    """
    accountLogin: String!
  ): Boolean!

  """
  True if the viewer is sponsored by this user/organization.
  """
  isSponsoringViewer: Boolean!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!
}

  """
  List of users and organizations this entity is sponsoring.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  id: ID!

"""
An edge in a connection.
"""
type RepositoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Repository
}

"""
Parameters to be used for the repository_id condition
"""
type RepositoryIdConditionTarget {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
A subset of repository info.
"""
interface RepositoryInfo {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The description of the repository.
  """
  description: String

  """
  The description of the repository rendered to HTML.
  """
  descriptionHTML: HTML!

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  Returns how many forks there are of this repository in the whole network.
  """
  forkCount: Int!

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  hasIssuesEnabled: Boolean!

  """
  Indicates if the repository has the Projects feature enabled.
  """
  hasProjectsEnabled: Boolean!

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  hasWikiEnabled: Boolean!

  """
  The repository's URL.
  """
  homepageUrl: URI

  """
  Indicates if the repository is unmaintained.
  """
  isArchived: Boolean!

  """
  Identifies if the repository is a fork.
  """
  isFork: Boolean!

  """
  Indicates if a repository is either owned by an organization, or is a private fork of an organization repository.
  """
  isInOrganization: Boolean!

  """
  Indicates if the repository has been locked or not.
  """
  isLocked: Boolean!

  """
  Identifies if the repository is a mirror.
  """
  isMirror: Boolean!

  """
  Identifies if the repository is private or internal.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  Identifies if the repository is a template that can be used to generate new repositories.
  """
  isTemplate: Boolean!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

  """
  Identifies the date and time when the repository was last pushed to.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The GitHub Sponsors listing for this user or organization.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

"""
An invitation for a user to be added to a repository.
"""
type RepositoryInvitation implements Node {
  """
  The email address that received the invitation.
  """
  email: String

  """
  The Node ID of the RepositoryInvitation object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!
}

"""
Entities that can be sponsored via GitHub Sponsors
"""
union SponsorableItem = Organization | User

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  The Node ID of the SponsorsListingFeaturedItem object
  """
  edges: [SponsorableItemEdge]

  """
  The position of this featured item on the GitHub Sponsors profile with a lower
  position indicating higher precedence. Starts at 1.
  """
  nodes: [SponsorableItem]

  """
  The GitHub Sponsors profile that features this record.
  """
  sponsorsListing: SponsorsListing!

  """
  Identifies the date and time when the object was last updated.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type RepositoryMigration implements Migration & Node {
  """
  The migration flag to continue on error.
  """
  continueOnError: Boolean!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  id: ID!

  """
  The URL for the migration log (expires 1 day after migration completes).
  """
  migrationLogUrl: URI

  """
  The migration source.
  """
  migrationSource: MigrationSource!

  """
  The target repository name.
  """
  repositoryName: String!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  REPOSITORY

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

  """
  The user or organization that is being sponsored, the maintainer.
  """
  sponsorable: Sponsorable!

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
interface RepositoryNode {
  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  The activity was cancelling a sponsorship.
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

  """
  The activity was scheduling a downgrade or cancellation.
  """
  PENDING_CHANGE

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The Node ID of the RepositoryOwner object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  A list of edges.
  """
  edges: [SponsorsActivityEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorsActivity]

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    The search string to look for. Repositories will be returned where the name contains your search string.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

    """
    If true, only repositories whose owner can be sponsored via GitHub Sponsors will be returned.
    """
    sponsorableOnly: Boolean = false

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The ProjectColumn ID to update.
  """
  projectColumnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

"""
Autogenerated input type of UnsubscribeFromNotifications
"""
type SponsorsActivityEdge {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The NotificationThread IDs of the objects to unsubscribe from.
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  direction: OrderDirection!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  field: SponsorsActivityOrderField!
}

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  MERGE_QUEUE_LOCKED_REF

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REQUIRED_SIGNATURES

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Secret scanning
  """
  SECRET_SCANNING

  """
  Tag
  """
  TAG

  """
  Tag name pattern
  """
  TAG_NAME_PATTERN

  """
  Only allow users with bypass permission to update matching refs.
  """
  UPDATE

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  WORKFLOWS

  """
  Workflow files cannot be modified.
  """
  WORKFLOW_UPDATES
}

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetBypassActorConnection

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type PullRequestRevisionMarker {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The enforcement level of this ruleset
  """
  enforcement: RuleEnforcement!

  """
  The Node ID of the RepositoryRuleset object
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The type of rule.
    """
    type: RepositoryRuleType
  ): RepositoryRuleConnection

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  repositoryRoleName: String

"""
An item in a pull request timeline
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  ALWAYS

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRulesetBypassActor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  actorId: ID

  """
  The bypass mode for this actor.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode!

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRuleset]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRuleset
}

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  Branch
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

  """
  Tag
  """
  TAG
}

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  id: ID!

  """
  The HTTP path for this repository-topic.
  """
  resourcePath: URI!

  """
  The topic.
  """
  topic: Topic!

  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  Andorra
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  AF

  """
  Antigua and Barbuda
  """
  AG

  """
  Anguilla
  """
  AI

"""
Autogenerated return type of UnsubscribeFromNotifications
"""
type UnsubscribeFromNotificationsPayload
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  Albania
  """
  AL

  """
  Armenia
  """
  AM

  """
  Angola
  """
  AO

  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

"""
How payment was made for funding a GitHub Sponsors sponsorship.
"""
enum SponsorshipPaymentSource {
  """
  American Samoa
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  id: ID!

  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  id: ID!

  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  BE

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  BH

  """
  Burundi
  """
  BI

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  BM

  """
  Brunei Darussalam
  """
  BN

  """
  Bolivia
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  OPEN
}

"""
A Git push.
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  id: ID!

  """
  Bahamas
  """
  BS

  """
  Bhutan
  """
  BT

  """
  Bouvet Island
  """
  BV

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  BY

  """
  Belize
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the PushAllowance object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union PushAllowanceActor = App | Team | User

  """
  Canada
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveTopicAuditEntry object
  """
  id: ID!

  """
  Congo (Kinshasa)
  """
  CD

"""
Represents an SSH signature on a Commit or Tag.
"""
type SshSignature implements GitSignature {
  """
  When was the alert auto-dismissed?
  """
  autoDismissedAt: DateTime

  """
  When was the alert created?
  """
  CF

  """
  Congo (Brazzaville)
  """
  CG

  """
  Switzerland
  """
  CH

  """
  Comment explaining the reason the alert was dismissed
  """
  dismissComment: String

  """
  The reason the alert was dismissed
  """
  CI

  """
  Cook Islands
  """
  CK

  """
  Chile
  """
  CL

  """
  When was the alert fixed?
  """
  fixedAt: DateTime

  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  id: ID!

  """
  Colombia
  """
  CO

  """
  Costa Rica
  """
  CR

  """
  Cape Verde
  """
  CV

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  CX

  """
  Cyprus
  """
  CY

  """
  Czech Republic
  """
  CZ

  """
  Germany
  """
  DE

  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  DJ

  """
  Denmark
  """
  DK

"""
The possible states of a thread subscription form action
"""
enum ThreadSubscriptionFormAction {
  """
  Dominica
  """
  DM

  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  assignableUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    query: String!

    """
    The types of search items to search within.
    """
    query: String
  ): UserConnection!

"""
Autogenerated input type of StartOrganizationMigration
"""
input StartOrganizationMigrationInput {
  """
  Algeria
  """
  DZ

  """
  Ecuador
  """
  EC

  """
  Estonia
  """
  EE

  """
  Egypt
  """
  EG

  """
  An alert that has been automatically closed by Dependabot.
  """
  collaborators(
    """
    Collaborators affiliation level with a repository.
    """
    affiliation: CollaboratorAffiliation

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The login of one specific collaborator.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    query: String
  ): RepositoryCollaboratorConnection

  """
  An alert that has been manually closed by a user.
  """
  EH

"""
Autogenerated return type of StartOrganizationMigration
"""
type StartOrganizationMigrationPayload {
  """
  Eritrea
  """
  ER

  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

  """
  Identifies the date and time when the object was created.
  """
  ES

"""
Autogenerated input type of StartOrganizationMigration
"""
input StartOrganizationMigrationInput {
  """
  Ethiopia
  """
  ET

  """
  Finland
  """
  FI

  """
  Fiji
  """
  FJ

  """
  Falkland Islands
  """
  union: Boolean = false

  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  databaseId: Int

  """
  The Node ID of the Reactable object
  """
  id: ID!

  """
  Gabon
  """
  GA

  """
  United Kingdom
  """
  GB

"""
The possible states of a subscription.
"""
enum ThreadSubscriptionState {
  """
  Grenada
  """
  GD

  """
  A discussion category by slug.
  """
  discussionCategory(
    """
    The slug of the discussion category to be returned.
    """
    slug: String!
  ): DiscussionCategory

  """
  A list of discussions that have been opened in the repository.
  """
  GE

    """
    Only show answered or unanswered discussions
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Guernsey
  """
  WAITING
}

"""
Types that can be requested reviewers.
"""
union RequestedReviewer = Bot | Mannequin | Team | User

  """
  Ghana
  """
  GH

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: UPDATED_AT, direction: DESC}

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  Greenland
  """
  GL

  """
  Gambia
  """
  GM

  """
  Guinea
  """
  GN

  """
  Guadeloupe
  """
  GP

  """
  Equatorial Guinea
  """
  databaseId: Int

  """
  The Node ID of the Reaction object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the environments
    """
    orderBy: Environments = {field: NAME, direction: ASC}
  ): EnvironmentConnection!

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type RequiredStatusCheckDescription {
  """
  South Georgia and South Sandwich Islands
  """
  GS

  """
  Guatemala
  """
  GT

  """
  Guam
  """
  GU

  """
  Guinea-Bissau
  """
  GW

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
input RequiredStatusChecksParametersInput {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfigurationInput!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Hong Kong
  """
  HK

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  HM

  """
  Honduras
  """
  HN

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Whether vulnerability alerts are enabled for the repository.
  """
  hasVulnerabilityAlertsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  homepageUrl: URI

  """
  The Node ID of the Repository object
  """
  id: ID!

  """
  The ID of the thread to resolve
  """
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The thread to resolve.
  """
  thread: PullRequestReviewThread
}

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the published tier to retire.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was retired.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  The description of the revert pull request.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReadyForReviewEvent object
  """
  id: ID!

  """
  Indicates whether the revert pull request should be a draft.
  """
  draft: Boolean = false

  """
  The ID of the pull request to revert.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The title of the revert pull request.
  """
  title: String
}

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  branchProtectionRule: BranchProtectionRule

  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    The head ref to compare against.
    """
    headRef: String!
  ): Comparison

  """
  The Node ID of the Ref object
  """
  id: ID!

  """
  The pull request that was reverted.
  """
  pullRequest: PullRequest

  """
  The new pull request that reverts the input pull request.
  """
  revertPullRequest: PullRequest
}

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The actor that can dismiss.
  """
  actor: ReviewDismissalAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  A list of rules from active Repository and Organization rulesets that apply to this ref.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repository rules.
    """
    orderBy: RepositoryRuleOrder = {field: UPDATED_AT, direction: DESC}
  ): RepositoryRuleConnection

  """
  The object the ref points to. Returns null when object does not exist.
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union ReviewDismissalAllowanceActor = App | Team | User

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  A list of edges.
  """
  edges: [ReviewDismissalAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewDismissalAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewDismissalAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewDismissalAllowance
}

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Ways in which lists of git refs can be ordered upon return.
"""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Identifies the optional message associated with the 'review_dismissed' event.
  """
  dismissalMessage: String

  """
  Identifies the optional message associated with the event, rendered to HTML.
  """
  dismissalMessageHTML: String

  """
  The Node ID of the ReviewDismissedEvent object
  """
  id: ID!

  """
  Identifies the previous state of the review with the 'review_dismissed' event.
  """
  previousReviewState: PullRequestReviewState!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

"""
Branch protection rules that are enforced on the viewer.
"""
type RefUpdateRule {
  """
  Identifies the commit which caused the review to become stale.
  """
  pullRequestCommit: PullRequestCommit

  """
  The HTTP path for this review dismissed event.
  """
  resourcePath: URI!

  """
  Identifies the review associated with the 'review_dismissed' event.
  """
  review: PullRequestReview

  """
  The HTTP URL for this review dismissed event.
  """
  url: URI!
}

"""
A request for a user to review a pull request.
"""
type ReviewRequest implements Node {
  """
  Whether this request was created for a code owner
  """
  asCodeOwner: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ReviewRequest object
  """
  id: ID!

  """
  How the default commit message will be generated when merging a pull request.
  """
  mergeCommitMessage: MergeCommitMessage!

  """
  How the default commit title will be generated when merging a pull request.
  """
  mergeCommitTitle: MergeCommitTitle!

  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    branch: String
  ): MergeQueue

  """
  Returns a single milestone from the current repository by number.
  """
  pullRequest: PullRequest!

  """
  The reviewer that is requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
The connection type for ReviewRequest.
"""
type ReviewRequestConnection {
  """
  A list of edges.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReferencedEvent object
  """
  id: ID!

  """
  A list of nodes.
  """
  nodes: [ReviewRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewRequest
}

"""
Represents an 'review_request_removed' event on a given pull request.
"""
type ReviewRequestRemovedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestRemovedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review request was removed.
  """
  requestedReviewer: RequestedReviewer
}

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review was requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type ReviewStatusHovercardContext implements HovercardContext {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  The current status of the pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision
}

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
input RevokeEnterpriseOrganizationsMigratorRoleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  descriptionHTML: HTML

  """
  The Node ID of the Release object
  """
  id: ID!

  """
  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of the user to revoke the migrator role
  """
  login: String!
}

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organizations that had the migrator role revoked for the given user.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection
}

"""
Autogenerated input type of RevokeMigratorRole
"""
input RevokeMigratorRoleInput {
  """
  The user login or Team slug to revoke the migrator role from.
  """
  actor: String!

  """
  Specifies the type of the actor, can be either USER or TEAM.
  """
  actorType: ActorType!

  """
  Finds and returns the Project according to the provided Project number.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of RevokeMigratorRole
"""
type RevokeMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Possible roles a user may have in relation to an organization.
"""
enum RoleInOrganization {
  """
  A user who is a direct member of the organization.
  """
  DIRECT_MEMBER

  """
  A user with full administrative access to the organization.
  """
  OWNER

  """
  A user who is unaffiliated with the organization.
  """
  UNAFFILIATED
}

"""
The level of enforcement for a rule or ruleset.
"""
enum RuleEnforcement {
  """
  Rules will be enforced
  """
  ACTIVE

    """
    A name to filter the assets by.
    """
    name: String
  ): ReleaseAssetConnection!

  """
  Parameters used for the `pull_request` rule type
  """
  pullRequest: PullRequestParametersInput

  """
  Parameters used for the `required_deployments` rule type
  """
  requiredDeployments: RequiredDeploymentsParametersInput

  """
  Parameters used for the `required_status_checks` rule type
  """
  requiredStatusChecks: RequiredStatusChecksParametersInput

  """
  Parameters used for the `tag_name_pattern` rule type
  """
  tagNamePattern: TagNamePatternParametersInput

  """
  Parameters used for the `update` rule type
  """
  update: UpdateParametersInput

  """
  Parameters used for the `workflows` rule type
  """
  workflows: WorkflowsParametersInput
}

"""
Types which can have `RepositoryRule` objects.
"""
union RuleSource = Organization | Repository

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum SamlDigestAlgorithm {
  """
  SHA1
  """
  SHA1

  """
  SHA256
  """
  SHA256

  """
  SHA384
  """
  SHA384

  """
  SHA512
  """
  SHA512
}

"""
The possible signature algorithms used to sign SAML requests for a Identity Provider.
"""
enum SamlSignatureAlgorithm {
  """
  RSA-SHA1
  """
  RSA_SHA1

  """
  RSA-SHA256
  """
  RSA_SHA256

  """
  RSA-SHA384
  """
  RSA_SHA384

  """
  RSA-SHA512
  """
  downloadUrl: URI!

  """
  The Node ID of the ReleaseAsset object
  """
  id: ID!

"""
A Saved Reply is text a user can use to reply quickly.
"""
type SavedReply implements Node {
  """
  The body of the saved reply.
  """
  body: String!

  """
  Identifies the date and time when the repository was last pushed to.
  """
  bodyHTML: HTML!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the SavedReply object
  """
  id: ID!

  """
  The title of the saved reply.
  """
  title: String!

  """
  The user that saved this reply.
  """
  user: Actor
}

"""
The connection type for SavedReply.
"""
type SavedReplyConnection {
  """
  A list of edges.
  """
  edges: [SavedReplyEdge]

  """
  A list of nodes.
  """
  nodes: [SavedReply]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SavedReply
}

"""
Ordering options for saved reply connections.
"""
input SavedReplyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order saved replies by.
  """
  field: SavedReplyOrderField!
}

"""
Properties by which saved reply connections can be ordered.
"""
enum SavedReplyOrderField {
  """
  Order saved reply by when they were updated.
  """
  UPDATED_AT
}

"""
The results of a search.
"""
union SearchResultItem = App | Discussion | Issue | MarketplaceListing | Organization | PullRequest | Repository | User

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
type SearchResultItemConnection {
  """
  The total number of pieces of code that matched the search query. Regardless
  of the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  codeCount: Int!

  """
  The total number of discussions that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  discussionCount: Int!

  """
  A list of edges.
  """
  edges: [SearchResultItemEdge]

  """
  The total number of issues that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  issueCount: Int!

  """
  A list of nodes.
  """
  nodes: [SearchResultItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of repositories that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  repositoryCount: Int!

  """
  Returns a single ruleset from the current repository by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!

    """
    Include rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true
  ): RepositoryRuleset

  """
  A list of rulesets for this repository.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The security policy URL.
  """
  userCount: Int!

  """
  The total number of wiki pages that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  wikiCount: Int!
}

"""
An edge in a connection.
"""
type SearchResultItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  How the default commit message will be generated when squash merging a pull request.
  """
  squashMergeCommitMessage: SquashMergeCommitMessage!

  """
  How the default commit title will be generated when squash merging a pull request.
  """
  squashMergeCommitTitle: SquashMergeCommitTitle!

  """
  Whether a squash merge commit can use the pull request title as default.
  """
  squashPrTitleUsedAsDefault: Boolean!
    @deprecated(
      reason: "`squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC."
    )

  """
  Text matches on the result found.
  """
  textMatches: [TextMatch]
}

"""
Represents the individual results of a search.
"""
enum SearchType {
  """
  Returns matching discussions in repositories.
  """
  DISCUSSION

  """
  Returns results matching issues in repositories.
  """
  ISSUE

  """
  Returns results matching repositories.
  """
  REPOSITORY

  """
  Returns results matching users and organizations on GitHub.
  """
  USER
}

"""
A GitHub Security Advisory
"""
type SecurityAdvisory implements Node {
  """
  The classification of the advisory
  """
  classification: SecurityAdvisoryClassification!

  """
  The CVSS associated with this advisory
  """
  cvss: CVSS!

  """
  CWEs associated with this Advisory
  """
  cwes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CWEConnection!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  This is a long plaintext description of the advisory
  """
  description: String!

  """
  The GitHub Security Advisory ID
  """
  ghsaId: String!

  """
  The Node ID of the SecurityAdvisory object
  """
  id: ID!

  """
  A list of identifiers for this advisory
  """
  identifiers: [SecurityAdvisoryIdentifier!]!

  """
  The permalink for the advisory's dependabot alerts page
  """
  notificationsPermalink: URI

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise from which the user should be removed.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the user to remove from the enterprise.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  The user that was removed from the enterprise.
  """
  user: User

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
input RemoveEnterpriseOrganizationInput {
  """
  The organization that originated the advisory
  """
  origin: String!

  """
  The permalink for the advisory
  """
  permalink: URI

  """
  When the advisory was published
  """
  publishedAt: DateTime!

  """
  A list of references for this advisory
  """
  references: [SecurityAdvisoryReference!]!

  """
  The severity of the advisory
  """
  severity: SecurityAdvisorySeverity!

  """
  A short plaintext summary of the advisory
  """
  summary: String!

  """
  When the advisory was last updated
  """
  updatedAt: DateTime!

  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """
    The number for the vulnerability alert to be returned.
    """
    number: Int!
  ): RepositoryVulnerabilityAlert

  """
  A list of vulnerability alerts that are on this repository.
  """
  vulnerabilities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the returned topics.
    """
    orderBy: SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}

    """
    A package name to filter vulnerabilities by.
    """
    package: String

    """
    A list of severities to filter vulnerabilities by.
    """
    severities: [SecurityAdvisorySeverity!]
  ): SecurityVulnerabilityConnection!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Whether contributors are required to sign off on web-based commits in this repository.
  """
  webCommitSignoffRequired: Boolean!
}

"""
Classification of the advisory.
"""
enum SecurityAdvisoryClassification {
  """
  Classification of general advisories.
  """
  GENERAL

  """
  Classification of malware advisories.
  """
  MALWARE
}

"""
The connection type for SecurityAdvisory.
"""
type SecurityAdvisoryConnection {
  """
  A list of edges.
  """
  edges: [SecurityAdvisoryEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityAdvisory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible ecosystems of a security vulnerability's package.
"""
enum SecurityAdvisoryEcosystem {
  """
  GitHub Actions
  """
  ACTIONS

  """
  PHP packages hosted at packagist.org
  """
  COMPOSER

  """
  Erlang/Elixir packages hosted at hex.pm
  """
  ERLANG

  """
  Go modules
  """
  GO

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

  """
  Python packages hosted at PyPI.org
  """
  PIP

  """
  Dart packages hosted at pub.dev
  """
  PUB

  """
  Ruby gems hosted at RubyGems.org
  """
  RUBYGEMS

  """
  Rust crates
  """
  RUST

  """
  Swift packages
  """
  SWIFT
}

"""
An edge in a connection.
"""
type SecurityAdvisoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityAdvisory
}

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  type: String!

  """
  The identifier
  """
  value: String!
}

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter {
  """
  The identifier type.
  """
  type: SecurityAdvisoryIdentifierType!

  """
  The total size in kilobytes of all repositories in the connection. Value will
  never be larger than max 32-bit signed integer.
  """
  value: String!
}

"""
Identifier formats available for advisories.
"""
enum SecurityAdvisoryIdentifierType {
  """
  Common Vulnerabilities and Exposures Identifier.
  """
  CVE

  """
  GitHub Security Advisory ID.
  """
  GHSA
}

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security advisories by.
  """
  field: SecurityAdvisoryOrderField!
}

"""
Properties by which security advisory connections can be ordered.
"""
enum SecurityAdvisoryOrderField {
  """
  Order advisories by publication time
  """
  PUBLISHED_AT

  """
  Order advisories by update time
  """
  UPDATED_AT
}

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
  """
  ecosystem: SecurityAdvisoryEcosystem!

  """
  The package name
  """
  name: String!
}

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

  """
  The Node ID of the RemovedFromMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The reason this pull request was removed from the queue.
  """
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
type SecurityAdvisoryPackageVersion {
  """
  The package name or version
  """
  identifier: String!
}

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  A publicly accessible reference
  """
  repositoryDiscussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: CREATED_AT, direction: DESC}

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!
}

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  Critical.
  """
  CRITICAL

  """
  High.
  """
  currentTitle: String!

  """
  The Node ID of the RenamedTitleEvent object
  """
  id: ID!

  """
  Low.
  """
  LOW

  """
  Moderate.
  """
  MODERATE
}

"""
An object which has a renamable title
"""
union RenamedTitleSubject = Issue | PullRequest

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
type RepositoryIdConditionTarget {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
A subset of repository info.
"""
type SecurityVulnerability {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  advisory: SecurityAdvisory!

  """
  The first version containing a fix for the vulnerability
  """
  firstPatchedVersion: SecurityAdvisoryPackageVersion

  """
  A description of the vulnerable package
  """
  package: SecurityAdvisoryPackage!

  """
  The severity of the vulnerability within this package
  """
  severity: SecurityAdvisorySeverity!

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

  """
  A string that describes the vulnerable package versions.
  This string follows a basic syntax with a few forms.
  + `= 0.2.0` denotes a single vulnerable version.
  + `<= 1.0.8` denotes a version range up to and including the specified version
  + `< 0.1.11` denotes a version range up to, but excluding, the specified version
  + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
  + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
  """
  vulnerableVersionRange: String!
}

"""
The connection type for SecurityVulnerability.
"""
type SecurityVulnerabilityConnection {
  """
  A list of edges.
  """
  edges: [SecurityVulnerabilityEdge]

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  nodes: [SecurityVulnerability]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SecurityVulnerabilityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityVulnerability
}

"""
Ordering options for security vulnerability connections
"""
input SecurityVulnerabilityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security vulnerabilities by.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  id: ID!

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  """
  Order vulnerability by update time
  """
  UPDATED_AT
}

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The digest algorithm used to sign SAML requests for the identity provider.
  """
  digestMethod: SamlDigestAlgorithm!

  """
  The ID of the enterprise on which to set an identity provider.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: String!

  """
  The Issuer Entity ID for the SAML identity provider
  """
  issuer: String

  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: SamlSignatureAlgorithm!

  """
  The URL endpoint for the identity provider's SAML SSO.
  """
  ssoUrl: URI!
}

"""
Autogenerated return type of SetEnterpriseIdentityProvider
"""
type SetEnterpriseIdentityProviderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Identifies the date and time when the repository was last pushed to.
  """
  identityProvider: EnterpriseIdentityProvider
}

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the organization to set a limit for.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
type SetOrganizationInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization that the interaction limit was set for.
  """
  organization: Organization
}

"""
Autogenerated input type of SetRepositoryInteractionLimit
"""
input SetRepositoryInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the repository to set a limit for.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that the interaction limit was set for.
  """
  repository: Repository
}

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddMemberAuditEntry object
  """
  id: ID!

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the user to set a limit for.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user that the interaction limit was set for.
  """
  user: User
}

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type SmimeSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  True if the signature is valid and verified by GitHub.
  """
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """
  ASCII-armored signature header from object.
  """
  email: String

  """
  The Node ID of the RepositoryInvitation object
  """
  id: ID!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  True if the signature was made with GitHub's signing key.
  """
  wasSignedByGitHub: Boolean!
}

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Name of the social media account as it appears on the profile.
  """
  displayName: String!

  """
  Software or company that hosts the social media account.
  """
  provider: SocialAccountProvider!

  """
  URL of the social media account.
  """
  url: URI!
}

"""
The connection type for SocialAccount.
"""
type SocialAccountConnection {
  """
  A list of edges.
  """
  edges: [SocialAccountEdge]

  """
  A list of nodes.
  """
  nodes: [SocialAccount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SocialAccount
}

"""
Software or company that hosts social media accounts.
"""
enum SocialAccountProvider {
  """
  Social media and networking website.
  """
  FACEBOOK

  """
  Catch-all for social media providers that do not yet have specific handling.
  """
  GENERIC

  """
  Fork of Mastodon with a greater focus on local posting.
  """
  HOMETOWN

  """
  Social media website with a focus on photo and video sharing.
  """
  INSTAGRAM

  """
  Professional networking website.
  """
  LINKEDIN

  """
  Open-source federated microblogging service.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  id: ID!

  """
  JavaScript package registry.
  """
  RENAME

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type RepositoryMigration implements Migration & Node {
  """
  The migration flag to continue on error.
  """
  REDDIT

  """
  Live-streaming service.
  """
  TWITCH

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  id: ID!

  """
  Online video platform.
  """
  YOUTUBE
}

"""
Entities that can sponsor others via GitHub Sponsors
"""
union Sponsor = Organization | User

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The migration source.
  """
  amountInCents: Int!

  """
  The amount in USD, formatted as a string.
  """
  formattedAmount: String!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  sponsor: Sponsorable!

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  A list of edges.
  """
  edges: [SponsorAndLifetimeValueEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorAndLifetimeValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorAndLifetimeValue
}

"""
Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
"""
input SponsorAndLifetimeValueOrder {
  """
  The ordering direction.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoArchivedAuditEntry object
  """
  id: ID!

  """
  The field to order results by.
  """
  field: SponsorAndLifetimeValueOrderField!
}

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  LIFETIME_VALUE

  """
  Order results by the sponsor's login (username).
  """
  SPONSOR_LOGIN

  """
  Order results by the sponsor's relevance to the viewer.
  """
  SPONSOR_RELEVANCE
}

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  A list of edges.
  """
  edges: [SponsorEdge]

  """
  A list of nodes.
  """
  nodes: [Sponsor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
type SponsorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Sponsor
}

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
input SponsorOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsor entities by.
  """
  field: SponsorOrderField!
}

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN

  """
  Order sponsors by their relevance to the viewer.
  """
  RELEVANCE
}

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  estimatedNextSponsorsPayoutInCents: Int!

  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  hasSponsorsListing: Boolean!

  """
  Whether the given account is sponsoring this user/organization.
  """
  isSponsoredBy(
    """
    The target account's login.
    """
    size: Int
  ): URI!

  """
  The Node ID of the RepositoryOwner object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

  """
  True if the viewer is sponsored by this user/organization.
  """
  isSponsoringViewer: Boolean!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  id: ID!

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  LOCK_BRANCH

  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REQUIRED_SIGNATURES

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Secret scanning
  """
  SECRET_SCANNING

  """
  Tag
  """
  TAG

  """
  Tag name pattern
  """
  TAG_NAME_PATTERN

  """
  Only allow users with bypass permission to update matching refs.
  """
  UPDATE

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  WORKFLOWS

  """
  Workflow files cannot be modified.
  """
  WORKFLOW_UPDATES
}

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetBypassActorConnection

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The enforcement level of this ruleset
  """
  enforcement: RuleEnforcement!

  """
  The Node ID of the RepositoryRuleset object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The type of rule.
    """
    type: RepositoryRuleType
  ): RepositoryRuleConnection

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  repositoryRoleName: String

  """
  Identifies the ruleset associated with the allowed actor
  """
  repositoryRuleset: RepositoryRuleset
}

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  ALWAYS

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRulesetBypassActor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  The item at the end of the edge.
  """
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  actorId: ID

  """
  The bypass mode for this actor.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode!

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRuleset]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRuleset
}

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  Branch
  """
  BRANCH

  """
  Tag
  """
  TAG
}

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  id: ID!

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!
}

"""
Entities that can be sponsored via GitHub Sponsors
"""
union SponsorableItem = Organization | User

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  Jersey
  """
  edges: [SponsorableItemEdge]

  """
  Jamaica
  """
  nodes: [SponsorableItem]

  """
  Jordan
  """
  JO

  """
  Japan
  """
  JP

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  """
  Kenya
  """
  KE

  """
  Kyrgyzstan
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  id: ID!

  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  id: ID!

  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The user or organization that is being sponsored, the maintainer.
  """
  sponsorable: Sponsorable!

  """
  The associated sponsorship tier.
  """
  sponsorsTier: SponsorsTier

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
type RepositoryVulnerabilityAlert implements Node & RepositoryNode {
  """
  When was the alert auto-dismissed?
  """
  autoDismissedAt: DateTime

  """
  When was the alert created?
  """
  createdAt: DateTime!

  """
  The activity was cancelling a sponsorship.
  """
  CANCELLED_SPONSORSHIP

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

  """
  Comment explaining the reason the alert was dismissed
  """
  dismissComment: String

  """
  The reason the alert was dismissed
  """
  PENDING_CHANGE

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  When was the alert fixed?
  """
  fixedAt: DateTime

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  id: ID!

  """
  Luxembourg
  """
  nodes: [SponsorsActivity]

  """
  Latvia
  """
  LV

  """
  Libya
  """
  LY

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  Morocco
  """
  MA

  """
  Monaco
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  Andorra
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  AF

  """
  Antigua and Barbuda
  """
  AG

  """
  An alert that has been automatically closed by Dependabot.
  """
  AUTO_DISMISSED

  """
  An alert that has been manually closed by a user.
  """
  AI

  """
  Albania
  """
  AL

  """
  Armenia
  """
  AM

  """
  Angola
  """
  AO

  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  union: Boolean = false

  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  BE

  """
  Burkina Faso
  """
  WAITING
}

"""
Types that can be requested reviewers.
"""
union RequestedReviewer = Bot | Mannequin | Team | User

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  BH

  """
  Burundi
  """
  BI

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  BM

  """
  Brunei Darussalam
  """
  BN

    """
    The number of the pull request this is required for
    """
    pullRequestNumber: Int
  ): Boolean!
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type RequiredStatusCheckDescription {
  """
  Bolivia
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  BR

  """
  Bahamas
  """
  BS

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfiguration!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
input RequiredStatusChecksParametersInput {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfigurationInput!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Autogenerated input type of RerequestCheckSuite
"""
input RerequestCheckSuiteInput {
  """
  Bhutan
  """
  BT

  """
  Bouvet Island
  """
  BV

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  BY

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the thread to resolve
  """
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The thread to resolve.
  """
  thread: PullRequestReviewThread
}

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the published tier to retire.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was retired.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  The description of the revert pull request.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates whether the revert pull request should be a draft.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The ID of the pull request to revert.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The title of the revert pull request.
  """
  title: String
}

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that was reverted.
  """
  pullRequest: PullRequest

  """
  The new pull request that reverts the input pull request.
  """
  revertPullRequest: PullRequest
}

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The actor that can dismiss.
  """
  actor: ReviewDismissalAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the ReviewDismissalAllowance object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union ReviewDismissalAllowanceActor = App | Team | User

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  A list of edges.
  """
  edges: [ReviewDismissalAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewDismissalAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewDismissalAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewDismissalAllowance
}

"""
Represents a 'review_dismissed' event on a given issue or pull request.
"""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Identifies the optional message associated with the 'review_dismissed' event.
  """
  dismissalMessage: String

  """
  Identifies the optional message associated with the event, rendered to HTML.
  """
  dismissalMessageHTML: String

  """
  The Node ID of the ReviewDismissedEvent object
  """
  id: ID!

  """
  Identifies the previous state of the review with the 'review_dismissed' event.
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the commit which caused the review to become stale.
  """
  pullRequestCommit: PullRequestCommit

  """
  The HTTP path for this review dismissed event.
  """
  resourcePath: URI!

  """
  Identifies the review associated with the 'review_dismissed' event.
  """
  review: PullRequestReview

  """
  The HTTP URL for this review dismissed event.
  """
  url: URI!
}

"""
A request for a user to review a pull request.
"""
type ReviewRequest implements Node {
  """
  Whether this request was created for a code owner
  """
  asCodeOwner: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ReviewRequest object
  """
  id: ID!

  """
  Identifies the pull request associated with this review request.
  """
  pullRequest: PullRequest!

  """
  The reviewer that is requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
The connection type for ReviewRequest.
"""
type ReviewRequestConnection {
  """
  A list of edges.
  """
  edges: [ReviewRequestEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewRequest
}

"""
Represents an 'review_request_removed' event on a given pull request.
"""
type ReviewRequestRemovedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestRemovedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review request was removed.
  """
  requestedReviewer: RequestedReviewer
}

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestedEvent object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review was requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type ReviewStatusHovercardContext implements HovercardContext {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  The current status of the pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision
}

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
input RevokeEnterpriseOrganizationsMigratorRoleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of the user to revoke the migrator role
  """
  login: String!
}

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organizations that had the migrator role revoked for the given user.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection
}

"""
Autogenerated input type of RevokeMigratorRole
"""
input RevokeMigratorRoleInput {
  """
  The user login or Team slug to revoke the migrator role from.
  """
  actor: String!

  """
  Specifies the type of the actor, can be either USER or TEAM.
  """
  actorType: ActorType!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization that the user/team belongs to.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of RevokeMigratorRole
"""
type RevokeMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Possible roles a user may have in relation to an organization.
"""
enum RoleInOrganization {
  """
  A user who is a direct member of the organization.
  """
  DIRECT_MEMBER

  """
  A user with full administrative access to the organization.
  """
  OWNER

  """
  A user who is unaffiliated with the organization.
  """
  UNAFFILIATED
}

"""
The level of enforcement for a rule or ruleset.
"""
enum RuleEnforcement {
  """
  Rules will be enforced
  """
  ACTIVE

  """
  Do not evaluate or enforce rules
  """
  DISABLED

  """
  Allow admins to test rules before enforcing them. Admins can view insights on
  the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
  """
  EVALUATE
}

"""
Types which can be parameters for `RepositoryRule` objects.
"""
union RuleParameters =
    BranchNamePatternParameters
  | CommitAuthorEmailPatternParameters
  | CommitMessagePatternParameters
  | CommitterEmailPatternParameters
  | PullRequestParameters
  | RequiredDeploymentsParameters
  | RequiredStatusChecksParameters
  | TagNamePatternParameters
  | UpdateParameters
  | WorkflowsParameters

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  Parameters used for the `branch_name_pattern` rule type
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  id: ID!

  """
  Parameters used for the `commit_author_email_pattern` rule type
  """
  commitAuthorEmailPattern: CommitAuthorEmailPatternParametersInput

  """
  Parameters used for the `commit_message_pattern` rule type
  """
  commitMessagePattern: CommitMessagePatternParametersInput

  """
  Parameters used for the `committer_email_pattern` rule type
  """
  committerEmailPattern: CommitterEmailPatternParametersInput

  """
  Parameters used for the `pull_request` rule type
  """
  pullRequest: PullRequestParametersInput

  """
  Parameters used for the `required_deployments` rule type
  """
  requiredDeployments: RequiredDeploymentsParametersInput

  """
  Parameters used for the `required_status_checks` rule type
  """
  requiredStatusChecks: RequiredStatusChecksParametersInput

  """
  Parameters used for the `tag_name_pattern` rule type
  """
  tagNamePattern: TagNamePatternParametersInput

  """
  Parameters used for the `update` rule type
  """
  update: UpdateParametersInput

  """
  Parameters used for the `workflows` rule type
  """
  workflows: WorkflowsParametersInput
}

"""
Types which can have `RepositoryRule` objects.
"""
union RuleSource = Organization | Repository

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum SamlDigestAlgorithm {
  """
  SHA1
  """
  SHA1

  """
  SHA256
  """
  SHA256

  """
  SHA384
  """
  SHA384

  """
  SHA512
  """
  SHA512
}

"""
The possible signature algorithms used to sign SAML requests for a Identity Provider.
"""
enum SamlSignatureAlgorithm {
  """
  RSA-SHA1
  """
  RSA_SHA1

  """
  RSA-SHA256
  """
  RSA_SHA256

  """
  RSA-SHA384
  """
  RSA_SHA384

  """
  RSA-SHA512
  """
  RSA_SHA512
}

"""
A Saved Reply is text a user can use to reply quickly.
"""
type SavedReply implements Node {
  """
  The body of the saved reply.
  """
  body: String!

  """
  The saved reply body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the SavedReply object
  """
  id: ID!

  """
  The title of the saved reply.
  """
  title: String!

  """
  The user that saved this reply.
  """
  user: Actor
}

"""
The connection type for SavedReply.
"""
type SavedReplyConnection {
  """
  A list of edges.
  """
  edges: [SavedReplyEdge]

  """
  A list of nodes.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveTopicAuditEntry object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SavedReply
}

"""
Ordering options for saved reply connections.
"""
input SavedReplyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order saved replies by.
  """
  field: SavedReplyOrderField!
}

"""
Properties by which saved reply connections can be ordered.
"""
enum SavedReplyOrderField {
  """
  Order saved reply by when they were updated.
  """
  UPDATED_AT
}

"""
The results of a search.
"""
union SearchResultItem = App | Discussion | Issue | MarketplaceListing | Organization | PullRequest | Repository | User

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
type SearchResultItemConnection {
  """
  The total number of pieces of code that matched the search query. Regardless
  of the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  codeCount: Int!

  """
  The total number of discussions that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  discussionCount: Int!

  """
  A list of edges.
  """
  edges: [SearchResultItemEdge]

  """
  The total number of issues that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  issueCount: Int!

  """
  A list of nodes.
  """
  nodes: [SearchResultItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of repositories that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  repositoryCount: Int!

  """
  The total number of users that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  userCount: Int!

  """
  The total number of wiki pages that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  wikiCount: Int!
}

"""
An edge in a connection.
"""
type SearchResultItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SearchResultItem

  """
  Text matches on the result found.
  """
  textMatches: [TextMatch]
}

"""
Represents the individual results of a search.
"""
enum SearchType {
  """
  Returns matching discussions in repositories.
  """
  DISCUSSION

  """
  Returns results matching issues in repositories.
  """
  ISSUE

  """
  Returns results matching repositories.
  """
  REPOSITORY

  """
  Returns results matching users and organizations on GitHub.
  """
  USER
}

"""
A GitHub Security Advisory
"""
type SecurityAdvisory implements Node {
  """
  The classification of the advisory
  """
  classification: SecurityAdvisoryClassification!

  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  A list of users that can be assigned to issues in this repository.
  """
  cvss: CVSS!

  """
  CWEs associated with this Advisory
  """
  cwes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filters users with query on user name and login.
    """
    query: String
  ): UserConnection!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  This is a long plaintext description of the advisory
  """
  description: String!

  """
  The GitHub Security Advisory ID
  """
  ghsaId: String!

  """
  The Node ID of the SecurityAdvisory object
  """
  id: ID!

  """
  A list of identifiers for this advisory
  """
  collaborators(
    """
    Collaborators affiliation level with a repository.
    """
    affiliation: CollaboratorAffiliation

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The login of one specific collaborator.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    query: String
  ): RepositoryCollaboratorConnection

  """
  The permalink for the advisory's dependabot alerts page
  """
  notificationsPermalink: URI

  """
  The organization that originated the advisory
  """
  origin: String!

  """
  The permalink for the advisory
  """
  permalink: URI

  """
  When the advisory was published
  """
  publishedAt: DateTime!

  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

  """
  Identifies the date and time when the object was created.
  """
  references: [SecurityAdvisoryReference!]!

  """
  The severity of the advisory
  """
  severity: SecurityAdvisorySeverity!

  """
  A short plaintext summary of the advisory
  """
  summary: String!

  """
  When the advisory was last updated
  """
  updatedAt: DateTime!

  """
  Vulnerabilities associated with this Advisory
  """
  vulnerabilities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the returned topics.
    """
    orderBy: SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}

    """
    A package name to filter vulnerabilities by.
    """
    package: String

    """
    A list of severities to filter vulnerabilities by.
    """
    severities: [SecurityAdvisorySeverity!]
  ): SecurityVulnerabilityConnection!

  """
  When the advisory was withdrawn, if it has been withdrawn
  """
  withdrawnAt: DateTime
}

"""
Classification of the advisory.
"""
enum SecurityAdvisoryClassification {
  """
  Classification of general advisories.
  """
  GENERAL

  """
  Classification of malware advisories.
  """
  MALWARE
}

"""
The connection type for SecurityAdvisory.
"""
type SecurityAdvisoryConnection {
  """
  A list of edges.
  """
  edges: [SecurityAdvisoryEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityAdvisory]

  """
  A discussion category by slug.
  """
  discussionCategory(
    """
    The slug of the discussion category to be returned.
    """
    slug: String!
  ): DiscussionCategory

  """
  A list of discussions that have been opened in the repository.
  """
  pageInfo: PageInfo!

    """
    Only show answered or unanswered discussions
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

"""
The possible ecosystems of a security vulnerability's package.
"""
enum SecurityAdvisoryEcosystem {
  """
  GitHub Actions
  """
  ACTIONS

  """
  PHP packages hosted at packagist.org
  """
  COMPOSER

  """
  Erlang/Elixir packages hosted at hex.pm
  """
  ERLANG

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: UPDATED_AT, direction: DESC}

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

  """
  Python packages hosted at PyPI.org
  """
  PIP

  """
  Dart packages hosted at pub.dev
  """
  PUB

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the environments
    """
    orderBy: Environments = {field: NAME, direction: ASC}
  ): EnvironmentConnection!

  """
  Rust crates
  """
  RUST

  """
  Swift packages
  """
  SWIFT
}

"""
An edge in a connection.
"""
type SecurityAdvisoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityAdvisory
}

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  The identifier type, e.g. GHSA, CVE
  """
  type: String!

  """
  The identifier
  """
  value: String!
}

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

  """
  The identifier string. Supports exact or partial matching.
  """
  value: String!
}

"""
Identifier formats available for advisories.
"""
enum SecurityAdvisoryIdentifierType {
  """
  Common Vulnerabilities and Exposures Identifier.
  """
  CVE

  """
  GitHub Security Advisory ID.
  """
  GHSA
}

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The field to order security advisories by.
  """
  field: SecurityAdvisoryOrderField!
}

"""
Properties by which security advisory connections can be ordered.
"""
enum SecurityAdvisoryOrderField {
  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  PUBLISHED_AT

  """
  Order advisories by update time
  """
  UPDATED_AT
}

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Whether vulnerability alerts are enabled for the repository.
  """
  hasVulnerabilityAlertsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  ecosystem: SecurityAdvisoryEcosystem!

  """
  The package name
  """
  homepageUrl: URI

  """
  The Node ID of the Repository object
  """
  id: ID!

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  The package name or version
  """
  identifier: String!
}

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  A publicly accessible reference
  """
  url: URI!
}

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  Critical.
  """
  CRITICAL

  """
  High.
  """
  HIGH

  """
  Low.
  """
  LOW

  """
  Moderate.
  """
  MODERATE
}

"""
An individual vulnerability within an Advisory
"""
type SecurityVulnerability {
  """
  The Advisory associated with this Vulnerability
  """
  advisory: SecurityAdvisory!

  """
  The first version containing a fix for the vulnerability
  """
  firstPatchedVersion: SecurityAdvisoryPackageVersion

  """
  A description of the vulnerable package
  """
  package: SecurityAdvisoryPackage!

  """
  The severity of the vulnerability within this package
  """
  severity: SecurityAdvisorySeverity!

  """
  When the vulnerability was last updated
  """
  updatedAt: DateTime!

  """
  A string that describes the vulnerable package versions.
  This string follows a basic syntax with a few forms.
  + `= 0.2.0` denotes a single vulnerable version.
  + `<= 1.0.8` denotes a version range up to and including the specified version
  + `< 0.1.11` denotes a version range up to, but excluding, the specified version
  + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
  + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
  """
  vulnerableVersionRange: String!
}

"""
The connection type for SecurityVulnerability.
"""
type SecurityVulnerabilityConnection {
  """
  A list of edges.
  """
  edges: [SecurityVulnerabilityEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityVulnerability]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SecurityVulnerabilityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityVulnerability
}

"""
Ordering options for security vulnerability connections
"""
input SecurityVulnerabilityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security vulnerabilities by.
  """
  field: SecurityVulnerabilityOrderField!
}

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  """
  Order vulnerability by update time
  """
  UPDATED_AT
}

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The digest algorithm used to sign SAML requests for the identity provider.
  """
  digestMethod: SamlDigestAlgorithm!

  """
  The ID of the enterprise on which to set an identity provider.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: String!

  """
  The Issuer Entity ID for the SAML identity provider
  """
  issuer: String

  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: SamlSignatureAlgorithm!

  """
  The URL endpoint for the identity provider's SAML SSO.
  """
  ssoUrl: URI!
}

"""
Autogenerated return type of SetEnterpriseIdentityProvider
"""
type SetEnterpriseIdentityProviderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The identity provider for the enterprise.
  """
  identityProvider: EnterpriseIdentityProvider
}

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the organization to set a limit for.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
type SetOrganizationInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization that the interaction limit was set for.
  """
  organization: Organization
}

"""
Autogenerated input type of SetRepositoryInteractionLimit
"""
input SetRepositoryInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the repository to set a limit for.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that the interaction limit was set for.
  """
  repository: Repository
}

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  How the default commit message will be generated when merging a pull request.
  """
  mergeCommitMessage: MergeCommitMessage!

  """
  How the default commit title will be generated when merging a pull request.
  """
  mergeCommitTitle: MergeCommitTitle!

  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    branch: String
  ): MergeQueue

  """
  Returns a single milestone from the current repository by number.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user that the interaction limit was set for.
  """
  user: User
}

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type SmimeSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  True if the signature is valid and verified by GitHub.
  """
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """
  ASCII-armored signature header from object.
  """
  signature: String!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  True if the signature was made with GitHub's signing key.
  """
  wasSignedByGitHub: Boolean!
}

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Name of the social media account as it appears on the profile.
  """
  displayName: String!

  """
  Software or company that hosts the social media account.
  """
  provider: SocialAccountProvider!

  """
  URL of the social media account.
  """
  url: URI!
}

"""
The connection type for SocialAccount.
"""
type SocialAccountConnection {
  """
  A list of edges.
  """
  edges: [SocialAccountEdge]

  """
  A list of nodes.
  """
  nodes: [SocialAccount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SocialAccount
}

"""
Software or company that hosts social media accounts.
"""
enum SocialAccountProvider {
  """
  Social media and networking website.
  """
  FACEBOOK

  """
  Catch-all for social media providers that do not yet have specific handling.
  """
  GENERIC

  """
  Fork of Mastodon with a greater focus on local posting.
  """
  HOMETOWN

  """
  Social media website with a focus on photo and video sharing.
  """
  INSTAGRAM

  """
  Professional networking website.
  """
  LINKEDIN

  """
  Open-source federated microblogging service.
  """
  MASTODON

  """
  JavaScript package registry.
  """
  NPM

  """
  Social news aggregation and discussion website.
  """
  REDDIT

  """
  Live-streaming service.
  """
  TWITCH

  """
  Microblogging website.
  """
  TWITTER

  """
  Online video platform.
  """
  YOUTUBE
}

"""
Entities that can sponsor others via GitHub Sponsors
"""
union Sponsor = Organization | User

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The amount in cents.
  """
  amountInCents: Int!

  """
  The amount in USD, formatted as a string.
  """
  formattedAmount: String!

  """
  The sponsor's GitHub account.
  """
  sponsor: Sponsorable!

  """
  Finds and returns the Project according to the provided Project number.
  """
  edges: [SponsorAndLifetimeValueEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorAndLifetimeValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorAndLifetimeValue
}

"""
Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
"""
input SponsorAndLifetimeValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order results by.
  """
  field: SponsorAndLifetimeValueOrderField!
}

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  The HTTP path listing the repository's projects
  """
  totalCount: Int!
}

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type SponsorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Sponsor
}

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
input SponsorOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsor entities by.
  """
  field: SponsorOrderField!
}

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN

  """
  Order sponsors by their relevance to the viewer.
  """
  RELEVANCE
}

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  estimatedNextSponsorsPayoutInCents: Int!

  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  hasSponsorsListing: Boolean!

  """
  Whether the given account is sponsoring this user/organization.
  """
  isSponsoredBy(
    """
    The target account's login.
    """
    accountLogin: String!
  ): Boolean!

  """
  True if the viewer is sponsored by this user/organization.
  """
  isSponsoringViewer: Boolean!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    states: [PullRequestState!]
  ): PullRequestConnection!

  """
  Identifies the date and time when the repository was last pushed to.
  """
  pushedAt: DateTime

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    last: Int
  ): RepositoryTopicConnection!

  """
  The HTTP path for this repository
  """
  resourcePath: URI!

  """
  Returns a single ruleset from the current repository by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!

    """
    Include rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true
  ): RepositoryRuleset

  """
  A list of rulesets for this repository.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The security policy URL.
  """
  securityPolicyUrl: URI

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  How the default commit message will be generated when squash merging a pull request.
  """
  squashMergeCommitMessage: SquashMergeCommitMessage!

  """
  How the default commit title will be generated when squash merging a pull request.
  """
  squashMergeCommitTitle: SquashMergeCommitTitle!

  """
  Whether a squash merge commit can use the pull request title as default.
  """
  squashPrTitleUsedAsDefault: Boolean!
    @deprecated(
      reason: "`squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC."
    )

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

  """
  A list of emails this viewer can commit with.
  """
  viewerPossibleCommitEmails: [String!]

  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: SubscriptionState

  """
  Indicates the repository's visibility level.
  """
  visibility: RepositoryVisibility!

  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """
    The number for the vulnerability alert to be returned.
    """
    number: Int!
  ): RepositoryVulnerabilityAlert

  """
  A list of vulnerability alerts that are on this repository.
  """
  vulnerabilityAlerts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Whether contributors are required to sign off on web-based commits in this repository.
  """
  webCommitSignoffRequired: Boolean!
}

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!
}

"""
Entities that can be sponsored via GitHub Sponsors
"""
union SponsorableItem = Organization | User

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  Colombia
  """
  CO

  """
  edges: [SponsorableItemEdge]

  """
  Cape Verde
  """
  nodes: [SponsorableItem]

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  CX

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  """
  Cyprus
  """
  CY

  """
  Czech Republic
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  id: ID!

  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

  """
  The total size in kilobytes of all repositories in the connection. Value will
  never be larger than max 32-bit signed integer.
  """
  sponsorable: Sponsorable!

  """
  The associated sponsorship tier.
  """
  sponsorsTier: SponsorsTier

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  The activity was cancelling a sponsorship.
  """
  CANCELLED_SPONSORSHIP

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

  """
  The activity was scheduling a downgrade or cancellation.
  """
  PENDING_CHANGE

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  repositoryDiscussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter discussions to only those that have been answered or not. Defaults to
    including both answered and unanswered discussions.
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: CREATED_AT, direction: DESC}

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!
}

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  Falkland Islands
  """
  edges: [SponsorsActivityEdge]

  """
  Micronesia
  """
  nodes: [SponsorsActivity]

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  FR

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  Gabon
  """
  GA

  """
  United Kingdom
  """
  node: SponsorsActivity
}

"""
Parameters to be used for the repository_id condition
"""
type RepositoryIdConditionTarget {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
A subset of repository info.
"""
input SponsorsActivityOrder {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  DAY

  """
  The previous thirty days.
  """
  MONTH

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  Andorra
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  AF

  """
  Antigua and Barbuda
  """
  AG

  """
  Anguilla
  """
  AI

  """
  Albania
  """
  AL

  """
  Armenia
  """
  AM

  """
  Angola
  """
  AO

  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland
  """
  AX

  """
  Identifies the date and time when the repository was last pushed to.
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  BE

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  BH

  """
  Burundi
  """
  BI

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  BM

  """
  Brunei Darussalam
  """
  BN

  """
  Bolivia
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  BR

  """
  Bahamas
  """
  BS

  """
  Bhutan
  """
  BT

  """
  Bouvet Island
  """
  BV

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  BY

  """
  Belize
  """
  BZ

  """
  Canada
  """
  email: String

  """
  The Node ID of the RepositoryInvitation object
  """
  id: ID!

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Congo (Kinshasa)
  """
  CD

  """
  Central African Republic
  """
  CF

  """
  Congo (Brazzaville)
  """
  CG

  """
  Switzerland
  """
  CH

  """
  Côte d'Ivoire
  """
  CI

  """
  Cook Islands
  """
  CK

  """
  Chile
  """
  CL

  """
  Cameroon
  """
  CM

  """
  China
  """
  CN

  """
  Colombia
  """
  CO

  """
  Costa Rica
  """
  CR

  """
  Cape Verde
  """
  CV

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  CX

  """
  Cyprus
  """
  CY

  """
  Czech Republic
  """
  CZ

  """
  Germany
  """
  RENAME

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type RepositoryMigration implements Migration & Node {
  """
  The migration flag to continue on error.
  """
  DJ

  """
  Denmark
  """
  DK

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  id: ID!

  """
  Dominican Republic
  """
  DO

  """
  The migration source.
  """
  DZ

  """
  Ecuador
  """
  EC

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  EE

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

  """
  Western Sahara
  """
  EH

  """
  Eritrea
  """
  ER

  """
  Spain
  """
  ES

  """
  Ethiopia
  """
  ET

"""
Autogenerated input type of UnlinkProjectV2FromRepository
"""
input UnlinkProjectV2FromRepositoryInput {
  """
  Finland
  """
  FI

  """
  Fiji
  """
  FJ

  """
  Falkland Islands
  """
  FK

  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  FR

  """
  Gabon
  """
  GA

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
interface RepositoryNode {
  """
  United Kingdom
  """
  GB

  """
  Grenada
  """
  GD

  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  GG

  """
  Ghana
  """
  GH

  """
  Gibraltar
  """
  GI

  """
  Greenland
  """
  GL

  """
  Gambia
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The Node ID of the RepositoryOwner object
  """
  id: ID!

  """
  Guinea
  """
  GN

  """
  Guadeloupe
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Equatorial Guinea
  """
  GQ

  """
  Greece
  """
  GR

  """
  South Georgia and South Sandwich Islands
  """
  GS

  """
  Guatemala
  """
  GT

  """
  Guam
  """
  GU

  """
  Guinea-Bissau
  """
  GW

  """
  Guyana
  """
  GY

  """
  Hong Kong
  """
  HK

  """
  Heard and McDonald Islands
  """
  HM

  """
  Honduras
  """
  HN

  """
  Croatia
  """
  HR

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  LOCK_BRANCH

  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  MERGE_QUEUE_LOCKED_REF

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REQUIRED_SIGNATURES

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Secret scanning
  """
  SECRET_SCANNING

  """
  Tag
  """
  TAG

  """
  Tag name pattern
  """
  TAG_NAME_PATTERN

  """
  Only allow users with bypass permission to update matching refs.
  """
  UPDATE

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  WORKFLOWS

  """
  Workflow files cannot be modified.
  """
  WORKFLOW_UPDATES
}

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetBypassActorConnection

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The enforcement level of this ruleset
  """
  enforcement: RuleEnforcement!

  """
  The Node ID of the RepositoryRuleset object
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The type of rule.
    """
    type: RepositoryRuleType
  ): RepositoryRuleConnection

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  repositoryRoleName: String

  """
  Identifies the ruleset associated with the allowed actor
  """
  repositoryRuleset: RepositoryRuleset
}

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  ALWAYS

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRulesetBypassActor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  actorId: ID

  """
  The bypass mode for this actor.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode!

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRuleset]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRuleset
}

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  Branch
  """
  BRANCH

  """
  Tag
  """
  TAG
}

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  id: ID!

  """
  Hungary
  """
  HU

  """
  Indonesia
  """
  ID

  """
  Ireland
  """
  IE

  """
  Israel
  """
  IL

  """
  Isle of Man
  """
  IM

  """
  India
  """
  IN

  """
  British Indian Ocean Territory
  """
  IO

  """
  Iraq
  """
  IQ

  """
  Iran
  """
  IR

  """
  Iceland
  """
  IS

  """
  Italy
  """
  IT

  """
  Jersey
  """
  JE

  """
  Jamaica
  """
  JM

  """
  Jordan
  """
  JO

  """
  Japan
  """
  JP

  """
  Kenya
  """
  KE

  """
  Kyrgyzstan
  """
  KG

  """
  Cambodia
  """
  KH

  """
  Kiribati
  """
  KI

  """
  Comoros
  """
  KM

  """
  Saint Kitts and Nevis
  """
  KN

  """
  Korea, South
  """
  KR

  """
  Kuwait
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  id: ID!

  """
  Cayman Islands
  """
  KY

  """
  Kazakhstan
  """
  KZ

  """
  Laos
  """
  LA

  """
  Lebanon
  """
  LB

  """
  Saint Lucia
  """
  LC

  """
  Liechtenstein
  """
  LI

  """
  Sri Lanka
  """
  LK

  """
  Liberia
  """
  LR

  """
  Lesotho
  """
  LS

  """
  Lithuania
  """
  LT

  """
  Luxembourg
  """
  LU

"""
Autogenerated input type of UnlinkProjectV2FromRepository
"""
input UnlinkProjectV2FromRepositoryInput {
  """
  Latvia
  """
  LV

  """
  Libya
  """
  LY

  """
  Morocco
  """
  MA

  """
  Monaco
  """
  MC

  """
  Moldova
  """
  MD

  """
  Montenegro
  """
  ME

  """
  Saint Martin (French part)
  """
  MF

  """
  Madagascar
  """
  MG

  """
  Marshall Islands
  """
  MH

  """
  Macedonia
  """
  MK

  """
  Mali
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  id: ID!

  """
  Myanmar
  """
  MM

  """
  Mongolia
  """
  MN

  """
  Macau
  """
  MO

  """
  Northern Mariana Islands
  """
  MP

  """
  Martinique
  """
  MQ

  """
  Mauritania
  """
  MR

  """
  Montserrat
  """
  MS

  """
  Malta
  """
  MT

  """
  Mauritius
  """
  MU

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  When was the alert auto-dismissed?
  """
  autoDismissedAt: DateTime

  """
  When was the alert created?
  """
  MV

  """
  Malawi
  """
  MW

  """
  Mexico
  """
  MX

  """
  Comment explaining the reason the alert was dismissed
  """
  dismissComment: String

  """
  The reason the alert was dismissed
  """
  MY

  """
  Mozambique
  """
  MZ

  """
  Namibia
  """
  NA

  """
  When was the alert fixed?
  """
  fixedAt: DateTime

  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  id: ID!

  """
  Norfolk Island
  """
  NF

  """
  Nigeria
  """
  NG

  """
  Nicaragua
  """
  NI

  """
  Netherlands
  """
  NL

  """
  Norway
  """
  NO

  """
  Nepal
  """
  NP

  """
  Nauru
  """
  NR

  """
  Niue
  """
  NU

  """
  New Zealand
  """
  NZ

  """
  Oman
  """
  OM

  """
  Panama
  """
  PA

  """
  Peru
  """
  PE

"""
Represents the rollup for both the check runs and status for a commit.
"""
type UpdateRepositoryRulesetPayload {
  """
  French Polynesia
  """
  PF

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Papua New Guinea
  """
  PG

  """
  Philippines
  """
  PH

  """
  Pakistan
  """
  PK

  """
  An alert that has been automatically closed by Dependabot.
  """
  AUTO_DISMISSED

  """
  An alert that has been manually closed by a user.
  """
  PL

  """
  Saint Pierre and Miquelon
  """
  PM

  """
  Pitcairn
  """
  PN

  """
  Puerto Rico
  """
  PR

  """
  Palestine
  """
  PS

  """
  Portugal
  """
  PT

  """
  Palau
  """
  union: Boolean = false

  """
  Paraguay
  """
  PY

  """
  Qatar
  """
  QA

  """
  Reunion
  """
  RE

  """
  Romania
  """
  RO

  """
  Serbia
  """
  RS

  """
  Russian Federation
  """
  RU

  """
  Rwanda
  """
  RW

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  Saudi Arabia
  """
  SA

  """
  Solomon Islands
  """
  SB

  """
  Seychelles
  """
  SC

  """
  Sudan
  """
  SD

  """
  Sweden
  """
  SE

"""
Types that can be requested reviewers.
"""
union RequestedReviewer = Bot | Mannequin | Team | User

  """
  Saint Helena
  """
  SH

  """
  Slovenia
  """
  SI

  """
  Svalbard and Jan Mayen Islands
  """
  SJ

  """
  Slovakia
  """
  SK

  """
  Sierra Leone
  """
  SL

  """
  San Marino
  """
  SM

  """
  Senegal
  """
  SN

  """
  Somalia
  """
  SO

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type RequiredStatusCheckDescription {
  """
  Suriname
  """
  SR

  """
  South Sudan
  """
  SS

  """
  Sao Tome and Principe
  """
  ST

  """
  El Salvador
  """
  SV

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfiguration!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
input RequiredStatusChecksParametersInput {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfigurationInput!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Autogenerated input type of RerequestCheckSuite
"""
type UnlinkProjectV2FromRepositoryPayload {
  """
  Sint Maarten (Dutch part)
  """
  SX

  """
  Swaziland
  """
  SZ

  """
  Turks and Caicos Islands
  """
  TC

  """
  Chad
  """
  TD

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the thread to resolve
  """
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The thread to resolve.
  """
  thread: PullRequestReviewThread
}

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the published tier to retire.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was retired.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  The description of the revert pull request.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates whether the revert pull request should be a draft.
  """
  draft: Boolean = false

  """
  The ID of the pull request to revert.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The title of the revert pull request.
  """
  title: String
}

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that was reverted.
  """
  pullRequest: PullRequest

  """
  The new pull request that reverts the input pull request.
  """
  revertPullRequest: PullRequest
}

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The actor that can dismiss.
  """
  actor: ReviewDismissalAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the ReviewDismissalAllowance object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union ReviewDismissalAllowanceActor = App | Team | User

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  A list of edges.
  """
  edges: [ReviewDismissalAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewDismissalAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewDismissalAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewDismissalAllowance
}

"""
Represents a 'review_dismissed' event on a given issue or pull request.
"""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Identifies the optional message associated with the 'review_dismissed' event.
  """
  dismissalMessage: String

  """
  Identifies the optional message associated with the event, rendered to HTML.
  """
  dismissalMessageHTML: String

  """
  The Node ID of the ReviewDismissedEvent object
  """
  id: ID!

  """
  Identifies the previous state of the review with the 'review_dismissed' event.
  """
  previousReviewState: PullRequestReviewState!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the commit which caused the review to become stale.
  """
  pullRequestCommit: PullRequestCommit

  """
  The HTTP path for this review dismissed event.
  """
  resourcePath: URI!

  """
  Identifies the review associated with the 'review_dismissed' event.
  """
  review: PullRequestReview

  """
  The HTTP URL for this review dismissed event.
  """
  url: URI!
}

"""
A request for a user to review a pull request.
"""
type ReviewRequest implements Node {
  """
  Whether this request was created for a code owner
  """
  asCodeOwner: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ReviewRequest object
  """
  id: ID!

  """
  Identifies the pull request associated with this review request.
  """
  pullRequest: PullRequest!

  """
  The reviewer that is requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
The connection type for ReviewRequest.
"""
type ReviewRequestConnection {
  """
  A list of edges.
  """
  edges: [ReviewRequestEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewRequest
}

"""
Represents an 'review_request_removed' event on a given pull request.
"""
type ReviewRequestRemovedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestRemovedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review request was removed.
  """
  requestedReviewer: RequestedReviewer
}

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review was requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type ReviewStatusHovercardContext implements HovercardContext {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  The current status of the pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision
}

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
input RevokeEnterpriseOrganizationsMigratorRoleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of the user to revoke the migrator role
  """
  login: String!
}

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organizations that had the migrator role revoked for the given user.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection
}

"""
Autogenerated input type of RevokeMigratorRole
"""
input RevokeMigratorRoleInput {
  """
  The user login or Team slug to revoke the migrator role from.
  """
  actor: String!

  """
  Specifies the type of the actor, can be either USER or TEAM.
  """
  actorType: ActorType!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization that the user/team belongs to.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of RevokeMigratorRole
"""
type RevokeMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Possible roles a user may have in relation to an organization.
"""
enum RoleInOrganization {
  """
  A user who is a direct member of the organization.
  """
  DIRECT_MEMBER

  """
  A user with full administrative access to the organization.
  """
  OWNER

  """
  A user who is unaffiliated with the organization.
  """
  UNAFFILIATED
}

"""
The level of enforcement for a rule or ruleset.
"""
enum RuleEnforcement {
  """
  Rules will be enforced
  """
  ACTIVE

  """
  Do not evaluate or enforce rules
  """
  DISABLED

  """
  Allow admins to test rules before enforcing them. Admins can view insights on
  the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
  """
  EVALUATE
}

"""
Types which can be parameters for `RepositoryRule` objects.
"""
union RuleParameters =
    BranchNamePatternParameters
  | CommitAuthorEmailPatternParameters
  | CommitMessagePatternParameters
  | CommitterEmailPatternParameters
  | PullRequestParameters
  | RequiredDeploymentsParameters
  | RequiredStatusChecksParameters
  | TagNamePatternParameters
  | UpdateParameters
  | WorkflowsParameters

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  Parameters used for the `branch_name_pattern` rule type
  """
  branchNamePattern: BranchNamePatternParametersInput

  """
  Parameters used for the `commit_author_email_pattern` rule type
  """
  commitAuthorEmailPattern: CommitAuthorEmailPatternParametersInput

  """
  Parameters used for the `commit_message_pattern` rule type
  """
  commitMessagePattern: CommitMessagePatternParametersInput

  """
  Parameters used for the `committer_email_pattern` rule type
  """
  committerEmailPattern: CommitterEmailPatternParametersInput

  """
  Parameters used for the `pull_request` rule type
  """
  pullRequest: PullRequestParametersInput

  """
  Parameters used for the `required_deployments` rule type
  """
  requiredDeployments: RequiredDeploymentsParametersInput

  """
  Parameters used for the `required_status_checks` rule type
  """
  requiredStatusChecks: RequiredStatusChecksParametersInput

  """
  Parameters used for the `tag_name_pattern` rule type
  """
  tagNamePattern: TagNamePatternParametersInput

  """
  Parameters used for the `update` rule type
  """
  update: UpdateParametersInput

  """
  Parameters used for the `workflows` rule type
  """
  workflows: WorkflowsParametersInput
}

"""
Types which can have `RepositoryRule` objects.
"""
union RuleSource = Organization | Repository

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum SamlDigestAlgorithm {
  """
  SHA1
  """
  SHA1

  """
  SHA256
  """
  SHA256

  """
  SHA384
  """
  SHA384

  """
  SHA512
  """
  SHA512
}

"""
The possible signature algorithms used to sign SAML requests for a Identity Provider.
"""
enum SamlSignatureAlgorithm {
  """
  RSA-SHA1
  """
  RSA_SHA1

  """
  RSA-SHA256
  """
  RSA_SHA256

  """
  RSA-SHA384
  """
  RSA_SHA384

  """
  RSA-SHA512
  """
  RSA_SHA512
}

"""
A Saved Reply is text a user can use to reply quickly.
"""
type SavedReply implements Node {
  """
  The body of the saved reply.
  """
  body: String!

  """
  The saved reply body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the SavedReply object
  """
  id: ID!

  """
  The title of the saved reply.
  """
  title: String!

  """
  The user that saved this reply.
  """
  user: Actor
}

"""
The connection type for SavedReply.
"""
type SavedReplyConnection {
  """
  A list of edges.
  """
  edges: [SavedReplyEdge]

  """
  A list of nodes.
  """
  nodes: [SavedReply]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SavedReply
}

"""
Ordering options for saved reply connections.
"""
input SavedReplyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order saved replies by.
  """
  field: SavedReplyOrderField!
}

"""
Properties by which saved reply connections can be ordered.
"""
enum SavedReplyOrderField {
  """
  Order saved reply by when they were updated.
  """
  UPDATED_AT
}

"""
The results of a search.
"""
union SearchResultItem = App | Discussion | Issue | MarketplaceListing | Organization | PullRequest | Repository | User

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
type SearchResultItemConnection {
  """
  The total number of pieces of code that matched the search query. Regardless
  of the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  codeCount: Int!

  """
  The total number of discussions that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  discussionCount: Int!

  """
  A list of edges.
  """
  edges: [SearchResultItemEdge]

  """
  The total number of issues that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  issueCount: Int!

  """
  A list of nodes.
  """
  nodes: [SearchResultItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of repositories that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  repositoryCount: Int!

  """
  The total number of users that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  userCount: Int!

  """
  The total number of wiki pages that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  wikiCount: Int!
}

"""
An edge in a connection.
"""
type SearchResultItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SearchResultItem

  """
  Text matches on the result found.
  """
  textMatches: [TextMatch]
}

"""
Represents the individual results of a search.
"""
enum SearchType {
  """
  Returns matching discussions in repositories.
  """
  DISCUSSION

  """
  Returns results matching issues in repositories.
  """
  ISSUE

  """
  Returns results matching repositories.
  """
  REPOSITORY

  """
  Returns results matching users and organizations on GitHub.
  """
  USER
}

"""
A GitHub Security Advisory
"""
type SecurityAdvisory implements Node {
  """
  The classification of the advisory
  """
  classification: SecurityAdvisoryClassification!

  """
  The CVSS associated with this advisory
  """
  cvss: CVSS!

  """
  CWEs associated with this Advisory
  """
  cwes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CWEConnection!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  This is a long plaintext description of the advisory
  """
  description: String!

  """
  The GitHub Security Advisory ID
  """
  ghsaId: String!

  """
  The Node ID of the SecurityAdvisory object
  """
  id: ID!

  """
  A list of identifiers for this advisory
  """
  identifiers: [SecurityAdvisoryIdentifier!]!

  """
  The permalink for the advisory's dependabot alerts page
  """
  notificationsPermalink: URI

  """
  The organization that originated the advisory
  """
  origin: String!

  """
  Returns a single ruleset from the current repository by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!

    """
    Include rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true
  ): RepositoryRuleset

  """
  A list of rulesets for this repository.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The security policy URL.
  """
  permalink: URI

  """
  When the advisory was published
  """
  publishedAt: DateTime!

  """
  A list of references for this advisory
  """
  references: [SecurityAdvisoryReference!]!

  """
  How the default commit message will be generated when squash merging a pull request.
  """
  squashMergeCommitMessage: SquashMergeCommitMessage!

  """
  How the default commit title will be generated when squash merging a pull request.
  """
  squashMergeCommitTitle: SquashMergeCommitTitle!

  """
  Whether a squash merge commit can use the pull request title as default.
  """
  squashPrTitleUsedAsDefault: Boolean!
    @deprecated(
      reason: "`squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC."
    )

  """
  A short plaintext summary of the advisory
  """
  summary: String!

  """
  When the advisory was last updated
  """
  updatedAt: DateTime!

  """
  Vulnerabilities associated with this Advisory
  """
  vulnerabilities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the returned topics.
    """
    orderBy: SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}

    """
    A package name to filter vulnerabilities by.
    """
    package: String

    """
    A list of severities to filter vulnerabilities by.
    """
    severities: [SecurityAdvisorySeverity!]
  ): SecurityVulnerabilityConnection!

  """
  When the advisory was withdrawn, if it has been withdrawn
  """
  withdrawnAt: DateTime
}

"""
Classification of the advisory.
"""
enum SecurityAdvisoryClassification {
  """
  Classification of general advisories.
  """
  GENERAL

  """
  Classification of malware advisories.
  """
  MALWARE
}

"""
The connection type for SecurityAdvisory.
"""
type SecurityAdvisoryConnection {
  """
  A list of edges.
  """
  edges: [SecurityAdvisoryEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityAdvisory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible ecosystems of a security vulnerability's package.
"""
enum SecurityAdvisoryEcosystem {
  """
  GitHub Actions
  """
  ACTIONS

  """
  PHP packages hosted at packagist.org
  """
  COMPOSER

  """
  Erlang/Elixir packages hosted at hex.pm
  """
  ERLANG

  """
  Go modules
  """
  GO

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

  """
  Python packages hosted at PyPI.org
  """
  PIP

  """
  Dart packages hosted at pub.dev
  """
  PUB

  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """
    The number for the vulnerability alert to be returned.
    """
    number: Int!
  ): RepositoryVulnerabilityAlert

  """
  A list of vulnerability alerts that are on this repository.
  """
  RUBYGEMS

  """
  Rust crates
  """
  RUST

  """
  Swift packages
  """
  SWIFT
}

"""
An edge in a connection.
"""
type SecurityAdvisoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityAdvisory
}

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  The identifier type, e.g. GHSA, CVE
  """
  type: String!

  """
  The identifier
  """
  value: String!
}

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter {
  """
  The identifier type.
  """
  type: SecurityAdvisoryIdentifierType!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Whether contributors are required to sign off on web-based commits in this repository.
  """
  webCommitSignoffRequired: Boolean!
}

"""
Identifier formats available for advisories.
"""
enum SecurityAdvisoryIdentifierType {
  """
  Common Vulnerabilities and Exposures Identifier.
  """
  CVE

  """
  GitHub Security Advisory ID.
  """
  GHSA
}

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security advisories by.
  """
  field: SecurityAdvisoryOrderField!
}

"""
Properties by which security advisory connections can be ordered.
"""
enum SecurityAdvisoryOrderField {
  """
  Order advisories by publication time
  """
  PUBLISHED_AT

  """
  Order advisories by update time
  """
  UPDATED_AT
}

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
  """
  ecosystem: SecurityAdvisoryEcosystem!

  """
  The package name
  """
  name: String!
}

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  The package name or version
  """
  identifier: String!
}

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  A publicly accessible reference
  """
  url: URI!
}

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  Critical.
  """
  CRITICAL

  """
  High.
  """
  HIGH

  """
  Low.
  """
  LOW

  """
  Moderate.
  """
  MODERATE
}

"""
An individual vulnerability within an Advisory
"""
type SecurityVulnerability {
  """
  The Advisory associated with this Vulnerability
  """
  advisory: SecurityAdvisory!

  """
  The first version containing a fix for the vulnerability
  """
  firstPatchedVersion: SecurityAdvisoryPackageVersion

  """
  A description of the vulnerable package
  """
  package: SecurityAdvisoryPackage!

  """
  The severity of the vulnerability within this package
  """
  severity: SecurityAdvisorySeverity!

  """
  When the vulnerability was last updated
  """
  updatedAt: DateTime!

  """
  A string that describes the vulnerable package versions.
  This string follows a basic syntax with a few forms.
  + `= 0.2.0` denotes a single vulnerable version.
  + `<= 1.0.8` denotes a version range up to and including the specified version
  + `< 0.1.11` denotes a version range up to, but excluding, the specified version
  + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
  + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
  """
  vulnerableVersionRange: String!
}

"""
The connection type for SecurityVulnerability.
"""
type SecurityVulnerabilityConnection {
  """
  A list of edges.
  """
  edges: [SecurityVulnerabilityEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityVulnerability]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SecurityVulnerabilityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityVulnerability
}

"""
Ordering options for security vulnerability connections
"""
input SecurityVulnerabilityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security vulnerabilities by.
  """
  field: SecurityVulnerabilityOrderField!
}

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  """
  Order vulnerability by update time
  """
  UPDATED_AT
}

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The digest algorithm used to sign SAML requests for the identity provider.
  """
  digestMethod: SamlDigestAlgorithm!

  """
  The ID of the enterprise on which to set an identity provider.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The total size in kilobytes of all repositories in the connection. Value will
  never be larger than max 32-bit signed integer.
  """
  idpCertificate: String!

  """
  The Issuer Entity ID for the SAML identity provider
  """
  issuer: String

  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: SamlSignatureAlgorithm!

  """
  The URL endpoint for the identity provider's SAML SSO.
  """
  ssoUrl: URI!
}

"""
Autogenerated return type of SetEnterpriseIdentityProvider
"""
type SetEnterpriseIdentityProviderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The identity provider for the enterprise.
  """
  identityProvider: EnterpriseIdentityProvider
}

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the organization to set a limit for.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
type SetOrganizationInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!
}

"""
Autogenerated input type of SetRepositoryInteractionLimit
"""
input SetRepositoryInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the repository to set a limit for.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that the interaction limit was set for.
  """
  repository: Repository
}

"""
Parameters to be used for the repository_id condition
"""
type RepositoryIdConditionTarget {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
A subset of repository info.
"""
input SetUserInteractionLimitInput {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the user to set a limit for.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  user: User
}

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type SmimeSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """
  ASCII-armored signature header from object.
  """
  signature: String!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  True if the signature was made with GitHub's signing key.
  """
  wasSignedByGitHub: Boolean!
}

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Name of the social media account as it appears on the profile.
  """
  displayName: String!

  """
  Software or company that hosts the social media account.
  """
  provider: SocialAccountProvider!

  """
  URL of the social media account.
  """
  url: URI!
}

"""
The connection type for SocialAccount.
"""
type SocialAccountConnection {
  """
  A list of edges.
  """
  edges: [SocialAccountEdge]

  """
  A list of nodes.
  """
  nodes: [SocialAccount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SocialAccount
}

"""
Software or company that hosts social media accounts.
"""
enum SocialAccountProvider {
  """
  Social media and networking website.
  """
  FACEBOOK

  """
  Identifies the date and time when the repository was last pushed to.
  """
  GENERIC

  """
  Fork of Mastodon with a greater focus on local posting.
  """
  HOMETOWN

  """
  Social media website with a focus on photo and video sharing.
  """
  INSTAGRAM

  """
  Professional networking website.
  """
  LINKEDIN

  """
  Open-source federated microblogging service.
  """
  MASTODON

  """
  JavaScript package registry.
  """
  NPM

  """
  Social news aggregation and discussion website.
  """
  REDDIT

  """
  Live-streaming service.
  """
  TWITCH

  """
  Microblogging website.
  """
  TWITTER

  """
  Online video platform.
  """
  YOUTUBE
}

"""
Entities that can sponsor others via GitHub Sponsors
"""
union Sponsor = Organization | User

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The amount in cents.
  """
  amountInCents: Int!

  """
  The amount in USD, formatted as a string.
  """
  formattedAmount: String!

  """
  The sponsor's GitHub account.
  """
  sponsor: Sponsorable!

  """
  The maintainer's GitHub account.
  """
  sponsorable: Sponsorable!
}

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  A list of edges.
  """
  edges: [SponsorAndLifetimeValueEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorAndLifetimeValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorAndLifetimeValue
}

"""
Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
"""
type RepositoryInvitation implements Node {
  """
  The email address that received the invitation.
  """
  email: String

  """
  The Node ID of the RepositoryInvitation object
  """
  id: ID!

  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order results by.
  """
  field: SponsorAndLifetimeValueOrderField!
}

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  LIFETIME_VALUE

  """
  Order results by the sponsor's login (username).
  """
  SPONSOR_LOGIN

  """
  Order results by the sponsor's relevance to the viewer.
  """
  SPONSOR_RELEVANCE
}

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  A list of edges.
  """
  edges: [SponsorEdge]

  """
  A list of nodes.
  """
  nodes: [Sponsor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type SponsorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Sponsor
}

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
input SponsorOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsor entities by.
  """
  field: SponsorOrderField!
}

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN

  """
  Order sponsors by their relevance to the viewer.
  """
  RELEVANCE
}

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  estimatedNextSponsorsPayoutInCents: Int!

  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  hasSponsorsListing: Boolean!

  """
  Whether the given account is sponsoring this user/organization.
  """
  isSponsoredBy(
    """
    The target account's login.
    """
    accountLogin: String!
  ): Boolean!

  """
  True if the viewer is sponsored by this user/organization.
  """
  RENAME

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type RepositoryMigration implements Migration & Node {
  """
  The migration flag to continue on error.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  id: ID!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  The migration source.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!
}

"""
Entities that can be sponsored via GitHub Sponsors
"""
union SponsorableItem = Organization | User

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  Tanzania
  """
  edges: [SponsorableItemEdge]

  """
  Ukraine
  """
  nodes: [SponsorableItem]

  """
  Uganda
  """
  UG

  """
  United States Minor Outlying Islands
  """
  UM

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  """
  United States of America
  """
  US

  """
  Uruguay
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  id: ID!

  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

  """
  The user or organization that is being sponsored, the maintainer.
  """
  sponsorable: Sponsorable!

  """
  The associated sponsorship tier.
  """
  sponsorsTier: SponsorsTier

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  The activity was cancelling a sponsorship.
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The Node ID of the RepositoryOwner object
  """
  id: ID!

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

  """
  The activity was scheduling a downgrade or cancellation.
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  TIER_CHANGE
}

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  A unique identifier for the client performing the mutation.
  """
  edges: [SponsorsActivityEdge]

  """
  The name of project column.
  """
  nodes: [SponsorsActivity]

  """
  The value for the allow private repository forking policy on the enterprise.
  """
  policyValue: EnterpriseAllowPrivateRepositoryForkingPolicyValue

  """
  The value for the allow private repository forking policy on the enterprise.
  """
  discussion: TeamDiscussion!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  The Node ID of the UnmarkedAsDuplicateEvent object
  """
  editor: Actor

  """
  The Node ID of the TeamDiscussionComment object
  """
  node: SponsorsActivity
}

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  LOCK_BRANCH

  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  MERGE_QUEUE_LOCKED_REF

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REQUIRED_SIGNATURES

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Secret scanning
  """
  SECRET_SCANNING

  """
  Tag
  """
  TAG

  """
  Tag name pattern
  """
  TAG_NAME_PATTERN

  """
  Only allow users with bypass permission to update matching refs.
  """
  UPDATE

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  WORKFLOWS

  """
  Workflow files cannot be modified.
  """
  WORKFLOW_UPDATES
}

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetBypassActorConnection

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The enforcement level of this ruleset
  """
  enforcement: RuleEnforcement!

  """
  The Node ID of the RepositoryRuleset object
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The type of rule.
    """
    type: RepositoryRuleType
  ): RepositoryRuleConnection

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  repositoryRoleName: String

  """
  Identifies the ruleset associated with the allowed actor
  """
  repositoryRuleset: RepositoryRuleset
}

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  ALWAYS

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRulesetBypassActor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  actorId: ID

  """
  The bypass mode for this actor.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode!

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRuleset]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRuleset
}

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  Branch
  """
  BRANCH

  """
  Tag
  """
  TAG
}

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  id: ID!

  """
  The HTTP path for this repository-topic.
  """
  resourcePath: URI!

  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  Andorra
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  AF

  """
  Antigua and Barbuda
  """
  AG

  """
  Anguilla
  """
  AI

  """
  Albania
  """
  AL

  """
  Armenia
  """
  AM

  """
  Angola
  """
  AO

  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

"""
How payment was made for funding a GitHub Sponsors sponsorship.
"""
enum SponsorshipPaymentSource {
  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  id: ID!

  """
  Åland
  """
  AX

  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  BE

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  BH

"""
The possible default commit messages for squash merges.
"""
enum SquashMergeCommitMessage {
  """
  Burundi
  """
  BI

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  BM

  """
  Brunei Darussalam
  """
  BN

"""
Represents an SSH signature on a Commit or Tag.
"""
type SshSignature implements GitSignature {
  """
  Bolivia
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  BR

  """
  Bahamas
  """
  BS

  """
  Bhutan
  """
  BT

  """
  Bouvet Island
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  id: ID!

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  BY

  """
  Belize
  """
  BZ

  """
  Canada
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Congo (Kinshasa)
  """
  CD

  """
  Central African Republic
  """
  CF

"""
Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
"""
type UnmarkedAsDuplicateEvent implements Node {
  """
  Congo (Brazzaville)
  """
  CG

  """
  Switzerland
  """
  CH

  """
  When was the alert auto-dismissed?
  """
  autoDismissedAt: DateTime

  """
  When was the alert created?
  """
  CI

  """
  Cook Islands
  """
  CK

  """
  Chile
  """
  CL

"""
Autogenerated return type of UpdateProject
"""
type UpdateProjectPayload {
  """
  Comment explaining the reason the alert was dismissed
  """
  dismissComment: String

  """
  The reason the alert was dismissed
  """
  CM

  """
  China
  """
  CN

  """
  Colombia
  """
  CO

  """
  When was the alert fixed?
  """
  fixedAt: DateTime

  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  id: ID!

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  CX

"""
Parameters to be used for the tag_name_pattern rule
"""
type TagNamePatternParameters {
  """
  Cyprus
  """
  CY

  """
  Czech Republic
  """
  CZ

  """
  Germany
  """
  DE

  """
  Djibouti
  """
  DJ

  """
  Denmark
  """
  DK

  """
  Dominica
  """
  DM

"""
Parameters to be used for the tag_name_pattern rule
"""
input TagNamePatternParametersInput {
  """
  Dominican Republic
  """
  DO

  """
  Algeria
  """
  DZ

  """
  Ecuador
  """
  EC

  """
  Estonia
  """
  EE

  """
  Egypt
  """
  EG

"""
A team of users in an organization.
"""
type UnsubscribeFromNotificationsPayload
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  Western Sahara
  """
  EH

  """
  Eritrea
  """
  ER

"""
Autogenerated input type of UnsubscribeFromNotifications
"""
input UnsubscribeFromNotificationsInput
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  Spain
  """
  ES

  """
  Ethiopia
  """
  ET

"""
Autogenerated input type of StartOrganizationMigration
"""
input StartOrganizationMigrationInput {
  """
  An alert that has been automatically closed by Dependabot.
  """
  AUTO_DISMISSED

  """
  An alert that has been manually closed by a user.
  """
  FI

  """
  Fiji
  """
  FJ

  """
  Falkland Islands
  """
  FK

  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  FR

  """
  Gabon
  """
  union: Boolean = false

  """
  United Kingdom
  """
  GB

  """
  Grenada
  """
  GD

  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  GG

  """
  Ghana
  """
  GH

  """
  Gibraltar
  """
  GI

  """
  Greenland
  """
  GL

  """
  Gambia
  """
  GM

  """
  Guinea
  """
  WAITING
}

"""
Types that can be requested reviewers.
"""
union RequestedReviewer = Bot | Mannequin | Team | User

  """
  Guadeloupe
  """
  GP

  """
  Equatorial Guinea
  """
  GQ

  """
  Greece
  """
  GR

  """
  South Georgia and South Sandwich Islands
  """
  GS

  """
  Guatemala
  """
  GT

  """
  Guam
  """
  GU

  """
  Guinea-Bissau
  """
  GW

    """
    The number of the pull request this is required for
    """
    pullRequestNumber: Int
  ): Boolean!
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type RequiredStatusCheckDescription {
  """
  Guyana
  """
  GY

  """
  Hong Kong
  """
  HK

  """
  Heard and McDonald Islands
  """
  HM

  """
  Honduras
  """
  HN

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfiguration!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
input RequiredStatusChecksParametersInput {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfigurationInput!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Autogenerated input type of RerequestCheckSuite
"""
input RerequestCheckSuiteInput {
  """
  Croatia
  """
  HR

  """
  Haiti
  """
  HT

  """
  Hungary
  """
  HU

  """
  Indonesia
  """
  ID

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the thread to resolve
  """
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The thread to resolve.
  """
  thread: PullRequestReviewThread
}

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the published tier to retire.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was retired.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  The description of the revert pull request.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates whether the revert pull request should be a draft.
  """
  draft: Boolean = false

  """
  The ID of the pull request to revert.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The title of the revert pull request.
  """
  title: String
}

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that was reverted.
  """
  pullRequest: PullRequest

  """
  The new pull request that reverts the input pull request.
  """
  revertPullRequest: PullRequest
}

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The actor that can dismiss.
  """
  actor: ReviewDismissalAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the ReviewDismissalAllowance object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union ReviewDismissalAllowanceActor = App | Team | User

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  A list of edges.
  """
  edges: [ReviewDismissalAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewDismissalAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewDismissalAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewDismissalAllowance
}

"""
Represents a 'review_dismissed' event on a given issue or pull request.
"""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Identifies the optional message associated with the 'review_dismissed' event.
  """
  dismissalMessage: String

  """
  Identifies the optional message associated with the event, rendered to HTML.
  """
  dismissalMessageHTML: String

  """
  The Node ID of the ReviewDismissedEvent object
  """
  id: ID!

  """
  Identifies the previous state of the review with the 'review_dismissed' event.
  """
  previousReviewState: PullRequestReviewState!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the commit which caused the review to become stale.
  """
  pullRequestCommit: PullRequestCommit

  """
  The HTTP path for this review dismissed event.
  """
  resourcePath: URI!

  """
  Identifies the review associated with the 'review_dismissed' event.
  """
  review: PullRequestReview

  """
  The HTTP URL for this review dismissed event.
  """
  url: URI!
}

"""
A request for a user to review a pull request.
"""
type ReviewRequest implements Node {
  """
  Whether this request was created for a code owner
  """
  asCodeOwner: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ReviewRequest object
  """
  id: ID!

  """
  Identifies the pull request associated with this review request.
  """
  pullRequest: PullRequest!

  """
  The reviewer that is requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
The connection type for ReviewRequest.
"""
type ReviewRequestConnection {
  """
  A list of edges.
  """
  edges: [ReviewRequestEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewRequest
}

"""
Represents an 'review_request_removed' event on a given pull request.
"""
type ReviewRequestRemovedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestRemovedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review request was removed.
  """
  requestedReviewer: RequestedReviewer
}

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review was requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type ReviewStatusHovercardContext implements HovercardContext {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  The current status of the pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision
}

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
input RevokeEnterpriseOrganizationsMigratorRoleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of the user to revoke the migrator role
  """
  login: String!
}

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organizations that had the migrator role revoked for the given user.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection
}

"""
Autogenerated input type of RevokeMigratorRole
"""
input RevokeMigratorRoleInput {
  """
  The user login or Team slug to revoke the migrator role from.
  """
  actor: String!

  """
  Specifies the type of the actor, can be either USER or TEAM.
  """
  actorType: ActorType!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization that the user/team belongs to.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of RevokeMigratorRole
"""
type RevokeMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Possible roles a user may have in relation to an organization.
"""
enum RoleInOrganization {
  """
  A user who is a direct member of the organization.
  """
  DIRECT_MEMBER

  """
  A user with full administrative access to the organization.
  """
  OWNER

  """
  A user who is unaffiliated with the organization.
  """
  UNAFFILIATED
}

"""
The level of enforcement for a rule or ruleset.
"""
enum RuleEnforcement {
  """
  Rules will be enforced
  """
  ACTIVE

  """
  Do not evaluate or enforce rules
  """
  DISABLED

  """
  Allow admins to test rules before enforcing them. Admins can view insights on
  the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
  """
  EVALUATE
}

"""
Types which can be parameters for `RepositoryRule` objects.
"""
union RuleParameters =
    BranchNamePatternParameters
  | CommitAuthorEmailPatternParameters
  | CommitMessagePatternParameters
  | CommitterEmailPatternParameters
  | PullRequestParameters
  | RequiredDeploymentsParameters
  | RequiredStatusChecksParameters
  | TagNamePatternParameters
  | UpdateParameters
  | WorkflowsParameters

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  Parameters used for the `branch_name_pattern` rule type
  """
  branchNamePattern: BranchNamePatternParametersInput

  """
  Parameters used for the `commit_author_email_pattern` rule type
  """
  commitAuthorEmailPattern: CommitAuthorEmailPatternParametersInput

  """
  Parameters used for the `commit_message_pattern` rule type
  """
  commitMessagePattern: CommitMessagePatternParametersInput

  """
  Parameters used for the `committer_email_pattern` rule type
  """
  committerEmailPattern: CommitterEmailPatternParametersInput

  """
  Parameters used for the `pull_request` rule type
  """
  pullRequest: PullRequestParametersInput

  """
  Parameters used for the `required_deployments` rule type
  """
  requiredDeployments: RequiredDeploymentsParametersInput

  """
  Parameters used for the `required_status_checks` rule type
  """
  requiredStatusChecks: RequiredStatusChecksParametersInput

  """
  Parameters used for the `tag_name_pattern` rule type
  """
  tagNamePattern: TagNamePatternParametersInput

  """
  Parameters used for the `update` rule type
  """
  update: UpdateParametersInput

  """
  Parameters used for the `workflows` rule type
  """
  workflows: WorkflowsParametersInput
}

"""
Types which can have `RepositoryRule` objects.
"""
union RuleSource = Organization | Repository

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum SamlDigestAlgorithm {
  """
  SHA1
  """
  SHA1

  """
  SHA256
  """
  SHA256

  """
  SHA384
  """
  SHA384

  """
  SHA512
  """
  SHA512
}

"""
The possible signature algorithms used to sign SAML requests for a Identity Provider.
"""
enum SamlSignatureAlgorithm {
  """
  RSA-SHA1
  """
  RSA_SHA1

  """
  RSA-SHA256
  """
  RSA_SHA256

  """
  RSA-SHA384
  """
  RSA_SHA384

  """
  RSA-SHA512
  """
  RSA_SHA512
}

"""
A Saved Reply is text a user can use to reply quickly.
"""
type SavedReply implements Node {
  """
  The body of the saved reply.
  """
  body: String!

  """
  The saved reply body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the SavedReply object
  """
  id: ID!

  """
  The title of the saved reply.
  """
  title: String!

  """
  The user that saved this reply.
  """
  user: Actor
}

"""
The connection type for SavedReply.
"""
type SavedReplyConnection {
  """
  A list of edges.
  """
  edges: [SavedReplyEdge]

  """
  A list of nodes.
  """
  nodes: [SavedReply]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SavedReply
}

"""
Ordering options for saved reply connections.
"""
input SavedReplyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order saved replies by.
  """
  field: SavedReplyOrderField!
}

"""
Properties by which saved reply connections can be ordered.
"""
enum SavedReplyOrderField {
  """
  Order saved reply by when they were updated.
  """
  UPDATED_AT
}

"""
The results of a search.
"""
union SearchResultItem = App | Discussion | Issue | MarketplaceListing | Organization | PullRequest | Repository | User

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
type SearchResultItemConnection {
  """
  The total number of pieces of code that matched the search query. Regardless
  of the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  codeCount: Int!

  """
  The total number of discussions that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  discussionCount: Int!

  """
  A list of edges.
  """
  edges: [SearchResultItemEdge]

  """
  The total number of issues that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  issueCount: Int!

  """
  A list of nodes.
  """
  nodes: [SearchResultItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of repositories that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  repositoryCount: Int!

  """
  The total number of users that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  userCount: Int!

  """
  The total number of wiki pages that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  wikiCount: Int!
}

"""
An edge in a connection.
"""
type SearchResultItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SearchResultItem

  """
  Text matches on the result found.
  """
  textMatches: [TextMatch]
}

"""
Represents the individual results of a search.
"""
enum SearchType {
  """
  Returns matching discussions in repositories.
  """
  DISCUSSION

  """
  Returns results matching issues in repositories.
  """
  ISSUE

  """
  Returns results matching repositories.
  """
  REPOSITORY

  """
  Returns results matching users and organizations on GitHub.
  """
  USER
}

"""
A GitHub Security Advisory
"""
type SecurityAdvisory implements Node {
  """
  The classification of the advisory
  """
  classification: SecurityAdvisoryClassification!

  """
  The CVSS associated with this advisory
  """
  cvss: CVSS!

  """
  CWEs associated with this Advisory
  """
  cwes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CWEConnection!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  This is a long plaintext description of the advisory
  """
  description: String!

  """
  The GitHub Security Advisory ID
  """
  ghsaId: String!

  """
  The Node ID of the SecurityAdvisory object
  """
  id: ID!

  """
  A list of identifiers for this advisory
  """
  identifiers: [SecurityAdvisoryIdentifier!]!

  """
  The permalink for the advisory's dependabot alerts page
  """
  notificationsPermalink: URI

  """
  The organization that originated the advisory
  """
  origin: String!

  """
  The permalink for the advisory
  """
  permalink: URI

  """
  When the advisory was published
  """
  publishedAt: DateTime!

  """
  A list of references for this advisory
  """
  references: [SecurityAdvisoryReference!]!

  """
  The severity of the advisory
  """
  severity: SecurityAdvisorySeverity!

  """
  A short plaintext summary of the advisory
  """
  summary: String!

  """
  When the advisory was last updated
  """
  updatedAt: DateTime!

  """
  Vulnerabilities associated with this Advisory
  """
  vulnerabilities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the returned topics.
    """
    orderBy: SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}

    """
    A package name to filter vulnerabilities by.
    """
    package: String

    """
    A list of severities to filter vulnerabilities by.
    """
    severities: [SecurityAdvisorySeverity!]
  ): SecurityVulnerabilityConnection!

  """
  When the advisory was withdrawn, if it has been withdrawn
  """
  withdrawnAt: DateTime
}

"""
Classification of the advisory.
"""
enum SecurityAdvisoryClassification {
  """
  Classification of general advisories.
  """
  GENERAL

  """
  Classification of malware advisories.
  """
  MALWARE
}

"""
The connection type for SecurityAdvisory.
"""
type SecurityAdvisoryConnection {
  """
  A list of edges.
  """
  edges: [SecurityAdvisoryEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityAdvisory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible ecosystems of a security vulnerability's package.
"""
enum SecurityAdvisoryEcosystem {
  """
  GitHub Actions
  """
  ACTIONS

  """
  PHP packages hosted at packagist.org
  """
  COMPOSER

  """
  Erlang/Elixir packages hosted at hex.pm
  """
  ERLANG

  """
  Go modules
  """
  GO

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

  """
  Python packages hosted at PyPI.org
  """
  PIP

  """
  Dart packages hosted at pub.dev
  """
  PUB

  """
  Ruby gems hosted at RubyGems.org
  """
  RUBYGEMS

  """
  Rust crates
  """
  RUST

  """
  Swift packages
  """
  SWIFT
}

"""
An edge in a connection.
"""
type SecurityAdvisoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityAdvisory
}

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  The identifier type, e.g. GHSA, CVE
  """
  type: String!

  """
  The identifier
  """
  value: String!
}

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter {
  """
  The identifier type.
  """
  type: SecurityAdvisoryIdentifierType!

  """
  The identifier string. Supports exact or partial matching.
  """
  value: String!
}

"""
Identifier formats available for advisories.
"""
enum SecurityAdvisoryIdentifierType {
  """
  Common Vulnerabilities and Exposures Identifier.
  """
  CVE

  """
  GitHub Security Advisory ID.
  """
  GHSA
}

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security advisories by.
  """
  field: SecurityAdvisoryOrderField!
}

"""
Properties by which security advisory connections can be ordered.
"""
enum SecurityAdvisoryOrderField {
  """
  Order advisories by publication time
  """
  PUBLISHED_AT

  """
  Order advisories by update time
  """
  UPDATED_AT
}

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
  """
  ecosystem: SecurityAdvisoryEcosystem!

  """
  The package name
  """
  name: String!
}

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  The package name or version
  """
  identifier: String!
}

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  A publicly accessible reference
  """
  url: URI!
}

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  Critical.
  """
  CRITICAL

  """
  High.
  """
  HIGH

  """
  Low.
  """
  LOW

  """
  Moderate.
  """
  MODERATE
}

"""
An individual vulnerability within an Advisory
"""
type SecurityVulnerability {
  """
  The Advisory associated with this Vulnerability
  """
  advisory: SecurityAdvisory!

  """
  The first version containing a fix for the vulnerability
  """
  firstPatchedVersion: SecurityAdvisoryPackageVersion

  """
  A description of the vulnerable package
  """
  package: SecurityAdvisoryPackage!

  """
  The severity of the vulnerability within this package
  """
  severity: SecurityAdvisorySeverity!

  """
  When the vulnerability was last updated
  """
  updatedAt: DateTime!

  """
  A string that describes the vulnerable package versions.
  This string follows a basic syntax with a few forms.
  + `= 0.2.0` denotes a single vulnerable version.
  + `<= 1.0.8` denotes a version range up to and including the specified version
  + `< 0.1.11` denotes a version range up to, but excluding, the specified version
  + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
  + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
  """
  vulnerableVersionRange: String!
}

"""
The connection type for SecurityVulnerability.
"""
type SecurityVulnerabilityConnection {
  """
  A list of edges.
  """
  edges: [SecurityVulnerabilityEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityVulnerability]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SecurityVulnerabilityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityVulnerability
}

"""
Ordering options for security vulnerability connections
"""
input SecurityVulnerabilityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security vulnerabilities by.
  """
  field: SecurityVulnerabilityOrderField!
}

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  """
  Order vulnerability by update time
  """
  UPDATED_AT
}

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The digest algorithm used to sign SAML requests for the identity provider.
  """
  digestMethod: SamlDigestAlgorithm!

  """
  The ID of the enterprise on which to set an identity provider.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: String!

  """
  The Issuer Entity ID for the SAML identity provider
  """
  issuer: String

  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: SamlSignatureAlgorithm!

  """
  The URL endpoint for the identity provider's SAML SSO.
  """
  ssoUrl: URI!
}

"""
Autogenerated return type of SetEnterpriseIdentityProvider
"""
type SetEnterpriseIdentityProviderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The identity provider for the enterprise.
  """
  identityProvider: EnterpriseIdentityProvider
}

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the organization to set a limit for.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
type SetOrganizationInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization that the interaction limit was set for.
  """
  organization: Organization
}

"""
Autogenerated input type of SetRepositoryInteractionLimit
"""
input SetRepositoryInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the repository to set a limit for.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that the interaction limit was set for.
  """
  repository: Repository
}

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the user to set a limit for.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user that the interaction limit was set for.
  """
  user: User
}

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type SmimeSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  True if the signature is valid and verified by GitHub.
  """
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """
  ASCII-armored signature header from object.
  """
  signature: String!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  True if the signature was made with GitHub's signing key.
  """
  wasSignedByGitHub: Boolean!
}

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Name of the social media account as it appears on the profile.
  """
  displayName: String!

  """
  Software or company that hosts the social media account.
  """
  provider: SocialAccountProvider!

  """
  URL of the social media account.
  """
  url: URI!
}

"""
The connection type for SocialAccount.
"""
type SocialAccountConnection {
  """
  A list of edges.
  """
  edges: [SocialAccountEdge]

  """
  A list of nodes.
  """
  nodes: [SocialAccount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SocialAccount
}

"""
Software or company that hosts social media accounts.
"""
enum SocialAccountProvider {
  """
  Social media and networking website.
  """
  FACEBOOK

  """
  Catch-all for social media providers that do not yet have specific handling.
  """
  GENERIC

  """
  Fork of Mastodon with a greater focus on local posting.
  """
  HOMETOWN

  """
  Social media website with a focus on photo and video sharing.
  """
  INSTAGRAM

  """
  Professional networking website.
  """
  LINKEDIN

  """
  Open-source federated microblogging service.
  """
  MASTODON

  """
  JavaScript package registry.
  """
  NPM

  """
  Social news aggregation and discussion website.
  """
  REDDIT

  """
  Live-streaming service.
  """
  TWITCH

  """
  Microblogging website.
  """
  TWITTER

  """
  Online video platform.
  """
  YOUTUBE
}

"""
Entities that can sponsor others via GitHub Sponsors
"""
union Sponsor = Organization | User

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The amount in cents.
  """
  amountInCents: Int!

  """
  The amount in USD, formatted as a string.
  """
  formattedAmount: String!

  """
  The sponsor's GitHub account.
  """
  sponsor: Sponsorable!

  """
  The maintainer's GitHub account.
  """
  sponsorable: Sponsorable!
}

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  A list of edges.
  """
  edges: [SponsorAndLifetimeValueEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorAndLifetimeValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorAndLifetimeValue
}

"""
Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
"""
input SponsorAndLifetimeValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order results by.
  """
  field: SponsorAndLifetimeValueOrderField!
}

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  LIFETIME_VALUE

  """
  Order results by the sponsor's login (username).
  """
  SPONSOR_LOGIN

  """
  Order results by the sponsor's relevance to the viewer.
  """
  SPONSOR_RELEVANCE
}

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  A list of edges.
  """
  edges: [SponsorEdge]

  """
  A list of nodes.
  """
  nodes: [Sponsor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type SponsorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Sponsor
}

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
input SponsorOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsor entities by.
  """
  field: SponsorOrderField!
}

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN

  """
  Order sponsors by their relevance to the viewer.
  """
  RELEVANCE
}

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  estimatedNextSponsorsPayoutInCents: Int!

  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  hasSponsorsListing: Boolean!

  """
  Whether the given account is sponsoring this user/organization.
  """
  isSponsoredBy(
    """
    The target account's login.
    """
    accountLogin: String!
  ): Boolean!

  """
  True if the viewer is sponsored by this user/organization.
  """
  isSponsoringViewer: Boolean!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!
}

"""
Entities that can be sponsored via GitHub Sponsors
"""
union SponsorableItem = Organization | User

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  Kenya
  """
  edges: [SponsorableItemEdge]

  """
  Kyrgyzstan
  """
  nodes: [SponsorableItem]

"""
Required status check
"""
input StatusCheckConfigurationInput {
  """
  Cambodia
  """
  KH

  """
  Kiribati
  """
  KI

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  """
  Comoros
  """
  KM

  """
  Saint Kitts and Nevis
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  id: ID!

  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

  """
  The user or organization that is being sponsored, the maintainer.
  """
  sponsorable: Sponsorable!

  """
  The associated sponsorship tier.
  """
  sponsorsTier: SponsorsTier

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  The activity was cancelling a sponsorship.
  """
  CANCELLED_SPONSORSHIP

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

  """
  The activity was scheduling a downgrade or cancellation.
  """
  PENDING_CHANGE

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  TIER_CHANGE
}

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  Morocco
  """
  edges: [SponsorsActivityEdge]

  """
  Monaco
  """
  nodes: [SponsorsActivity]

  """
  Moldova
  """
  MD

  """
  Montenegro
  """
  ME

"""
Autogenerated input type of UnsubscribeFromNotifications
"""
type SponsorsActivityEdge {
  """
  Saint Martin (French part)
  """
  MF

  """
  Madagascar
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  Andorra
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  AF

  """
  Antigua and Barbuda
  """
  AG

  """
  Anguilla
  """
  AI

  """
  Albania
  """
  AL

  """
  Armenia
  """
  AM

  """
  Angola
  """
  AO

  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland
  """
  AX

  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  BE

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  BH

"""
Represents an 'unsubscribed' event on a given `Subscribable`.
"""
type UnsubscribedEvent implements Node {
  """
  Burundi
  """
  BI

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  BM

  """
  Brunei Darussalam
  """
  BN

  """
  Bolivia
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  BR

  """
  Bahamas
  """
  BS

  """
  Bhutan
  """
  BT

  """
  Bouvet Island
  """
  BV

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  BY

  """
  Belize
  """
  BZ

  """
  Canada
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Congo (Kinshasa)
  """
  CD

  """
  Central African Republic
  """
  CF

  """
  Congo (Brazzaville)
  """
  CG

"""
A Stripe Connect account for receiving sponsorship funds from GitHub Sponsors.
"""
type StripeConnectAccount {
  """
  Switzerland
  """
  CH

  """
  Côte d'Ivoire
  """
  CI

  """
  Cook Islands
  """
  CK

  """
  Chile
  """
  CL

  """
  Cameroon
  """
  CM

  """
  China
  """
  CN

  """
  Colombia
  """
  CO

  """
  Costa Rica
  """
  CR

  """
  Cape Verde
  """
  CV

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  CX

  """
  Cyprus
  """
  CY

  """
  Czech Republic
  """
  CZ

  """
  Germany
  """
  DE

  """
  Djibouti
  """
  DJ

  """
  Denmark
  """
  DK

  """
  Dominica
  """
  DM

  """
  Dominican Republic
  """
  DO

  """
  Algeria
  """
  DZ

  """
  Ecuador
  """
  EC

  """
  Estonia
  """
  EE

  """
  Egypt
  """
  EG

  """
  Western Sahara
  """
  EH

  """
  Eritrea
  """
  ER

  """
  Spain
  """
  ES

  """
  Ethiopia
  """
  ET

  """
  Finland
  """
  FI

  """
  Fiji
  """
  FJ

  """
  Falkland Islands
  """
  FK

  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  FR

  """
  Gabon
  """
  GA

  """
  United Kingdom
  """
  GB

  """
  Grenada
  """
  GD

  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  GG

  """
  Ghana
  """
  GH

  """
  Gibraltar
  """
  GI

  """
  Greenland
  """
  GL

  """
  Gambia
  """
  GM

"""
Autogenerated input type of UnarchiveProjectV2Item
"""
input UnarchiveProjectV2ItemInput {
  """
  Guinea
  """
  GN

  """
  Guadeloupe
  """
  GP

  """
  Equatorial Guinea
  """
  GQ

  """
  Greece
  """
  GR

  """
  South Georgia and South Sandwich Islands
  """
  GS

  """
  Guatemala
  """
  GT

  """
  Guam
  """
  GU

  """
  Guinea-Bissau
  """
  GW

  """
  Guyana
  """
  GY

  """
  Hong Kong
  """
  HK

  """
  Heard and McDonald Islands
  """
  HM

  """
  Honduras
  """
  HN

  """
  Croatia
  """
  HR

  """
  Haiti
  """
  HT

  """
  Hungary
  """
  HU

  """
  Indonesia
  """
  ID

  """
  Ireland
  """
  IE

  """
  Israel
  """
  IL

  """
  Isle of Man
  """
  IM

  """
  India
  """
  IN

  """
  British Indian Ocean Territory
  """
  IO

  """
  Iraq
  """
  IQ

  """
  Iran
  """
  IR

  """
  Iceland
  """
  IS

  """
  Italy
  """
  IT

  """
  Jersey
  """
  JE

  """
  Jamaica
  """
  JM

  """
  Jordan
  """
  JO

  """
  Japan
  """
  JP

  """
  Kenya
  """
  KE

  """
  Kyrgyzstan
  """
  KG

"""
A team of users in an organization.
"""
type Team implements MemberStatusable & Node & Subscribable {
  """
  Cambodia
  """
  KH

  """
  Kiribati
  """
  KI

  """
  Comoros
  """
  KM

  """
  Saint Kitts and Nevis
  """
  KN

  """
  Korea, South
  """
  KR

  """
  Kuwait
  """
  KW

  """
  Cayman Islands
  """
  KY

  """
  Kazakhstan
  """
  KZ

  """
  Laos
  """
  LA

  """
  Lebanon
  """
  LB

  """
  Saint Lucia
  """
  LC

  """
  Liechtenstein
  """
  LI

  """
  Sri Lanka
  """
  LK

  """
  Liberia
  """
  LR

  """
  Lesotho
  """
  LS

  """
  Lithuania
  """
  LT

  """
  Luxembourg
  """
  LU

  """
  Latvia
  """
  LV

  """
  Libya
  """
  LY

  """
  Morocco
  """
  MA

  """
  Monaco
  """
  MC

  """
  Moldova
  """
  MD

  """
  Montenegro
  """
  ME

  """
  Saint Martin (French part)
  """
  MF

  """
  Madagascar
  """
  MG

"""
The possible team notification values.
"""
enum TeamNotificationSetting {
  """
  Marshall Islands
  """
  MH

  """
  Macedonia
  """
  MK

  """
  Mali
  """
  ML

  """
  Myanmar
  """
  MM

  """
  Mongolia
  """
  MN

  """
  Macau
  """
  MO

  """
  Northern Mariana Islands
  """
  MP

  """
  Martinique
  """
  MQ

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Mauritania
  """
  MR

  """
  Montserrat
  """
  MS

  """
  Malta
  """
  MT

  """
  Mauritius
  """
  MU

  """
  Maldives
  """
  MV

  """
  Malawi
  """
  MW

  """
  Mexico
  """
  MX

  """
  Malaysia
  """
  MY

  """
  Mozambique
  """
  MZ

  """
  Namibia
  """
  NA

  """
  New Caledonia
  """
  NC

  """
  Niger
  """
  NE

  """
  Norfolk Island
  """
  NF

  """
  Nigeria
  """
  NG

  """
  Nicaragua
  """
  NI

  """
  Netherlands
  """
  NL

  """
  Norway
  """
  NO

  """
  Nepal
  """
  NP

  """
  Nauru
  """
  NR

  """
  Niue
  """
  NU

  """
  New Zealand
  """
  NZ

  """
  Oman
  """
  OM

  """
  Panama
  """
  PA

"""
A topic aggregates entities that are related to a subject.
"""
type Topic implements Node & Starrable {
  """
  Peru
  """
  PE

  """
  French Polynesia
  """
  PF

  """
  Papua New Guinea
  """
  PG

  """
  Philippines
  """
  PH

  """
  Pakistan
  """
  PK

  """
  Poland
  """
  PL

  """
  Saint Pierre and Miquelon
  """
  PM

  """
  Pitcairn
  """
  PN

  """
  Puerto Rico
  """
  PR

  """
  Palestine
  """
  PS

  """
  Portugal
  """
  PT

  """
  Palau
  """
  PW

  """
  Paraguay
  """
  PY

  """
  Qatar
  """
  QA

  """
  Reunion
  """
  RE

  """
  Romania
  """
  RO

  """
  Serbia
  """
  RS

  """
  Russian Federation
  """
  RU

  """
  Rwanda
  """
  RW

"""
Autogenerated input type of TransferIssue
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  Saudi Arabia
  """
  SA

  """
  Solomon Islands
  """
  SB

  """
  Seychelles
  """
  SC

  """
  Sudan
  """
  SD

  """
  Sweden
  """
  SE

  """
  Singapore
  """
  SG

  """
  Saint Helena
  """
  SH

"""
The privacy of a sponsorship
"""
type UpdateParameters {
  """
  Slovenia
  """
  SI

  """
  Svalbard and Jan Mayen Islands
  """
  SJ

  """
  Slovakia
  """
  SK

  """
  Sierra Leone
  """
  SL

  """
  San Marino
  """
  SM

  """
  Senegal
  """
  SN

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Somalia
  """
  SO

  """
  Suriname
  """
  SR

  """
  South Sudan
  """
  SS

  """
  Sao Tome and Principe
  """
  ST

  """
  El Salvador
  """
  SV

  """
  Sint Maarten (Dutch part)
  """
  SX

  """
  Swaziland
  """
  SZ

  """
  Turks and Caicos Islands
  """
  TC

  """
  Chad
  """
  TD

  """
  French Southern Lands
  """
  TF

  """
  Togo
  """
  TG

  """
  Thailand
  """
  TH

  """
  Tajikistan
  """
  TJ

  """
  Tokelau
  """
  TK

  """
  Timor-Leste
  """
  TL

  """
  Turkmenistan
  """
  TM

  """
  Tunisia
  """
  TN

  """
  Tonga
  """
  TO

  """
  Türkiye
  """
  TR

  """
  Trinidad and Tobago
  """
  TT

  """
  Tuvalu
  """
  TV

  """
  Taiwan
  """
  TW

  """
  Tanzania
  """
  TZ

  """
  Ukraine
  """
  UA

  """
  Uganda
  """
  UG

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  United States Minor Outlying Islands
  """
  UM

  """
  United States of America
  """
  US

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
interface Starrable {
  """
  Uruguay
  """
  UY

  """
  Uzbekistan
  """
  UZ

  """
  Vatican City
  """
  VA

  """
  Saint Vincent and the Grenadines
  """
  VC

  """
  Venezuela
  """
  VE

  """
  Virgin Islands, British
  """
  VG

  """
  Virgin Islands, U.S.
  """
  VI

  """
  Vietnam
  """
  VN

  """
  Vanuatu
  """
  VU

  """
  Wallis and Futuna Islands
  """
  WF

  """
  Samoa
  """
  WS

  """
  Yemen
  """
  YE

  """
  Mayotte
  """
  YT

  """
  South Africa
  """
  ZA

  """
  Zambia
  """
  ZM

  """
  Zimbabwe
  """
  ZW
}

"""
Autogenerated input type of StartOrganizationMigration
"""
input StartOrganizationMigrationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The migration source access token.
  """
  sourceAccessToken: String!

  """
  The URL of the organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The ID of the enterprise the target organization belongs to.
  """
  targetEnterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The name of the target organization.
  """
  targetOrgName: String!
}

"""
Autogenerated return type of StartOrganizationMigration
"""
type StartOrganizationMigrationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new organization migration.
  """
  orgMigration: OrganizationMigration
}

"""
Autogenerated input type of StartRepositoryMigration
"""
enum ThreadSubscriptionState {
  """
  The migration source access token.
  """
  accessToken: String

  """
  The Stripe Connect account currently in use for payouts for this Sponsors
  listing, if any. Will only return a value when queried by the maintainer
  themselves, or by an admin of the sponsorable organization.
  """
  activeStripeConnectAccount: StripeConnectAccount

  """
  The name of the country or region with the maintainer's bank account or fiscal
  host. Will only return a value when queried by the maintainer themselves, or
  by an admin of the sponsorable organization.
  """
  billingCountryOrRegion: String

  """
  The email address used by GitHub to contact the sponsorable about their GitHub
  Sponsors profile. Will only return a value when queried by the maintainer
  themselves, or by an admin of the sponsorable organization.
  """
  contactEmailAddress: String

  """
  Identifies the date and time when the object was created.
  """
  IGNORING_LIST

  """
  The HTTP path for the Sponsors dashboard for this Sponsors listing.
  """
  dashboardResourcePath: URI!

  """
  The HTTP URL for the Sponsors dashboard for this Sponsors listing.
  """
  dashboardUrl: URI!

  """
  The records featured on the GitHub Sponsors profile.
  """
  featuredItems(
    """
    The types of featured items to return.
    """
    featureableTypes: [SponsorsListingFeaturedItemFeatureableType!] = [REPOSITORY, USER]
  ): [SponsorsListingFeaturedItem!]!

  """
  The fiscal host used for payments, if any. Will only return a value when
  queried by the maintainer themselves, or by an admin of the sponsorable organization.
  """
  fiscalHost: Organization

  """
  The full description of the listing.
  """
  IGNORING_THREAD

  """
  The signed URL to access the user-uploaded git archive.
  """
  fullDescriptionHTML: HTML!

  """
  The Node ID of the SponsorsListing object
  """
  id: ID!

  """
  The User is notified becuase they are watching the list
  """
  bodyVersion: String!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Whether to lock the source repository.
  """
  lockSource: Boolean

  """
  The signed URL to access the user-uploaded metadata archive.
  """
  SUBSCRIBED_TO_THREAD

  """
  The name of the country or region where the maintainer resides. Will only
  return a value when queried by the maintainer themselves, or by an admin of
  the sponsorable organization.
  """
  residenceCountryOrRegion: String

  """
  The HTTP path for this Sponsors listing.
  """
  resourcePath: URI!

  """
  The short description of the listing.
  """
  SUBSCRIBED_TO_THREAD_EVENTS

  """
  The User is notified because they chose custom settings for this thread.
  """
  SUBSCRIBED_TO_THREAD_TYPE

  """
  The subscription status is currently unavailable.
  """
  discussion: TeamDiscussion!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
A topic aggregates entities that are related to a subject.
"""
type Topic implements Node & Starrable {
  """
  The ID of the migration source.
  """
  editor: Actor

  """
  The URL of the source repository.
  """
  sourceRepositoryUrl: URI

  """
  The visibility of the imported repository.
  """
  targetRepoVisibility: String
}

  """
  The name of project.
  """
  number: Int!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The new repository migration.
  """
  pathRaw: Base64String

  """
  The tiers for this GitHub Sponsors profile.
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include tiers that aren't published. Only admins of the Sponsors
    listing can see draft tiers. Only admins of the Sponsors listing and viewers
    who are currently sponsoring on a retired tier can see those retired tiers.
    Defaults to including only published tiers, which are visible to anyone who
    can see the GitHub Sponsors profile.
    """
    includeUnpublished: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: SponsorsTierOrder = {field: MONTHLY_PRICE_IN_CENTS, direction: ASC}
  ): SponsorsTierConnection

  """
  The HTTP URL for this Sponsors listing.
  """
  url: URI!
}

"""
A record that can be featured on a GitHub Sponsors profile.
"""
union SponsorsListingFeatureableItem = Repository | User

"""
A record that is promoted on a GitHub Sponsors profile.
"""
type SponsorsListingFeaturedItem implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Will either be a description from the sponsorable maintainer about why they
  featured this item, or the item's description itself, such as a user's bio
  from their GitHub profile page.
  """
  description: String

  """
  The record that is featured on the GitHub Sponsors profile.
  """
  featureable: SponsorsListingFeatureableItem!

  """
  The Node ID of the SponsorsListingFeaturedItem object
  """
  id: ID!

  """
  The position of this featured item on the GitHub Sponsors profile with a lower
  position indicating higher precedence. Starts at 1.
  """
  position: Int!

  """
  The GitHub Sponsors profile that features this record.
  """
  sponsorsListing: SponsorsListing!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The different kinds of records that can be featured on a GitHub Sponsors profile page.
"""
enum SponsorsListingFeaturedItemFeatureableType {
  """
  A repository owned by the user or organization with the GitHub Sponsors profile.
  """
  REPOSITORY

  """
  A user who belongs to the organization with the GitHub Sponsors profile.
  """
  USER
}

  """
  Entry byte size
  """
  size: Int!

  """
  If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
Autogenerated input type of UnarchiveProjectV2Item
"""
input UnarchiveProjectV2ItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the ProjectV2Item to unarchive.
  """
  descriptionHTML: HTML!

  """
  The Node ID of the SponsorsTier object
  """
  id: ID!

  """
  The ID of the Project to archive the item from.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnarchiveProjectV2Item
"""
type UnarchiveProjectV2ItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  contexts: [StatusContext!]!

  """
  The Node ID of the Status object
  """
  id: ID!

  """
  The item unarchived from the project.
  """
  PERSONAL_PREFERENCE @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

"""
Required status check
"""
type StatusCheckConfiguration {
  """
  The status check context name that must be present on the commit.
  """
  context: String!

  """
  The optional integration ID that this status check must originate from.
  """
  integrationId: Int
}

"""
Required status check
"""
input StatusCheckConfigurationInput {
  """
  The status check context name that must be present on the commit.
  """
  context: String!

  """
  The optional integration ID that this status check must originate from.
  """
  integrationId: Int
}

"""
Represents the rollup for both the check runs and status for a commit.
"""
input UnarchiveRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  bodyVersion: String!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Indicates whether this tier is still a work in progress by the sponsorable and
  not yet published to the associated GitHub Sponsors profile. Draft tiers
  cannot be used for new sponsorships and will not be in use on existing
  sponsorships. Draft tiers cannot be seen by anyone but the admins of the
  GitHub Sponsors profile.
  """
  isDraft: Boolean!

  """
  Indicates whether this tier is published to the associated GitHub Sponsors
  profile. Published tiers are visible to anyone who can see the GitHub Sponsors
  profile, and are available for use in sponsorships if the GitHub Sponsors
  profile is publicly visible.
  """
  isPublished: Boolean!

  """
  Indicates whether this tier has been retired from the associated GitHub
  Sponsors profile. Retired tiers are no longer shown on the GitHub Sponsors
  profile and cannot be chosen for new sponsorships. Existing sponsorships may
  still use retired tiers if the sponsor selected the tier before it was retired.
  """
  isRetired: Boolean!

  """
  The sponsorships using this tier.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to return private sponsorships using this tier. Defaults to
    only returning public sponsorships on this tier.
    """
    fromComment: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): StatusCheckRollupContextConnection!

  """
  The Node ID of the StatusCheckRollup object
  """
  id: ID!

  """
  The combined status for the commit.
  """
  state: StatusState!
}

    """
    Order for connection
    """
    orderBy: TeamDiscussionCommentOrder
  ): TeamDiscussionCommentConnection!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated input type of UnmarkProjectV2AsTemplate
"""
input UnmarkProjectV2AsTemplateInput {
  """
  The number of check runs in this rollup.
  """
  checkRunCount: Int!

  """
  Counts of check runs by state.
  """
  checkRunCountsByState: [CheckRunStateCount!]

  """
  A list of edges.
  """
  edges: [StatusCheckRollupContextEdge]

  """
  A list of nodes.
  """
  commentsResourcePath: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The ID of the Project to unmark as a template.
  """
  commentsUrl: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated input type of TransferEnterpriseOrganization
"""
input TransferEnterpriseOrganizationInput {
  """
  The number of status contexts in this rollup.
  """
  statusContextCount: Int!

  """
  Counts of status contexts by state.
  """
  statusContextCountsByState: [StatusContextStateCount!]

  """
  Identifies the total count of items in the connection.
  """
  clientMutationId: String

  """
  The ID of the enterprise where the organization should be transferred.
  """
  destinationEnterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the organization to transfer.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of TransferEnterpriseOrganization
"""
type TransferEnterpriseOrganizationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: DateTime!

  """
  The Node ID of the Sponsorship object
  """
  id: ID!

  """
  Whether the sponsorship is active. False implies the sponsor is a past sponsor
  of the maintainer, while true implies they are a current sponsor.
  """
  isActive: Boolean!

  """
  Whether this sponsorship represents a one-time payment versus a recurring sponsorship.
  """
  description: String

  """
  Whether the sponsor has chosen to receive sponsorship update emails sent from
  the sponsorable. Only returns a non-null value when the viewer has permission to know this.
  """
  id: ID!

  """
  The organization for which a transfer was initiated.
  """
  organization: Organization
}

"""
Represents a count of the state of a status context.
"""
type StatusContextStateCount {
  """
  The platform that was most recently used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The privacy level for this sponsorship.
  """
  count: Int!

  """
  The state of a status context.
  """
  state: StatusState!
}

"""
The possible commit status states.
"""
type UnmarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  isPinned: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Whether or not the discussion is only visible to team members and organization owners.
  """
  isPrivate: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The Node ID of the issue to be transferred
  """
  id: ID!

  """
  The project.
  """
  number: Int!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
A Stripe Connect account for receiving sponsorship funds from GitHub Sponsors.
"""
type StripeConnectAccount {
  """
  The account number used to identify this Stripe Connect account.
  """
  accountId: String!

  """
  The name of the country or region of an external account, such as a bank
  account, tied to the Stripe Connect account. Will only return a value when
  queried by the maintainer of the associated GitHub Sponsors profile
  themselves, or by an admin of the sponsorable organization.
  """
  billingCountryOrRegion: String

  """
  The name of the country or region of the Stripe Connect account. Will only
  return a value when queried by the maintainer of the associated GitHub
  Sponsors profile themselves, or by an admin of the sponsorable organization.
  """
  countryOrRegion: String

  """
  Whether this Stripe Connect account is currently in use for the associated GitHub Sponsors profile.
  """
  isActive: Boolean!

  """
  The GitHub Sponsors profile associated with this Stripe Connect account.
  """
  sponsorsListing: SponsorsListing!

  """
  The URL to access this Stripe Connect account on Stripe's website.
  """
  stripeDashboardUrl: URI!
}

"""
Autogenerated input type of SubmitPullRequestReview
"""
input UpdateProjectCardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not the ProjectCard should be archived
  """
  isArchived: Boolean

"""
Autogenerated return type of UpdateProjectV2Collaborators
"""
type UpdateProjectV2CollaboratorsPayload {
  """
  The author of the newsletter.
  """
  author: User

  """
  The contents of the newsletter, the message the sponsorable wanted to give.
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the UnmarkedAsDuplicateEvent object
  """
  createdAt: DateTime!

  """
  The Node ID of the SponsorshipNewsletter object
  """
  id: ID!

  """
  The ProjectCard ID to update.
  """
  team: Team!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated return type of UpdateProjectCard
"""
type UpdateProjectCardPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  title: String!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The Node ID of the TransferredEvent object
  """
  id: ID!

  """
  The updated ProjectCard.
  """
  url: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
The possible team notification values.
"""
enum TeamNotificationSetting {
  """
  The name of the submodule in .gitmodules (Base64-encoded)
  """
  nameRaw: Base64String!

  """
  The path in the superproject that this submodule is located in
  """
  resourcePath: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The path in the superproject that this submodule is located in (Base64-encoded)
  """
  pathRaw: Base64String!

  """
  The commit revision of the subproject repository being tracked by the submodule
  """
  team: Team!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Ways in which team connections can be ordered.
"""
input UpdateProjectColumnInput {
  """
  A unique identifier for the client performing the mutation.
  """
  title: String!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The name of project column.
  """
  name: String!

  """
  The value for the allow private repository forking policy on the enterprise.
  """
  url: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The value for the allow private repository forking setting on the enterprise.
  """
  entries: [TreeEntry!]

  """
  The Node ID of the Tree object
  """
  id: ID!

"""
Autogenerated return type of UpdateProjectColumn
"""
interface Subscribable {
  """
  The Node ID of the Subscribable object
  """
  id: ID!

"""
How payment was made for funding a GitHub Sponsors sponsorship.
"""
enum SponsorshipPaymentSource {
  """
  Payment was made through GitHub.
  """
  GITHUB

  """
  Payment was made through Patreon.
  """
  PATREON
}

"""
The privacy of a sponsorship
"""
enum SponsorshipPrivacy {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated project column.
  """
  projectColumn: ProjectColumn
}

"""
The possible default commit messages for squash merges.
"""
enum SquashMergeCommitMessage {
  """
  Default to a blank commit message.
  """
  BLANK

  """
  Default to the branch's commit messages.
  """
  COMMIT_MESSAGES

  """
  Default to the pull request's body.
  """
  PR_BODY
}

"""
The possible default commit titles for squash merges.
"""
enum SquashMergeCommitTitle {
  """
  Default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
  """
  COMMIT_OR_PR_TITLE

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
Represents an SSH signature on a Commit or Tag.
"""
type SshSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  True if the signature is valid and verified by GitHub.
  """
  isValid: Boolean!

  """
  Hex-encoded fingerprint of the key that signed this object.
  """
  keyFingerprint: String

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """
  ASCII-armored signature header from object.
  """
  signature: String!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  True if the signature was made with GitHub's signing key.
  """
  wasSignedByGitHub: Boolean!
}

"""
Ways in which star connections can be ordered.
"""
interface SubscribableThread {
  """
  The Node ID of the SubscribableThread object
  """
  id: ID!

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

"""
Represents a 'subscribed' event on a given `Subscribable`.
"""
input UpdateProjectInput {
  """
  The description of project.
  """
  body: String

  """
  The programming language this file is written in.
  """
  createdAt: DateTime!

  """
  The Node ID of the SubscribedEvent object
  """
  id: ID!

  """
  The ID of the Project to archive the item from.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnarchiveProjectV2Item
"""
type UnarchiveProjectV2ItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  url: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The item unarchived from the project.
  """
  item: ProjectV2Item
}

"""
Autogenerated input type of UnarchiveRepository
"""
interface Starrable {
  """
  The Node ID of the Starrable object
  """
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to unlink from the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of UnlinkProjectV2FromRepository
"""
type UnlinkProjectV2FromRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  commitUrl: URI!

  """
  The Node ID of the Tag object
  """
  id: ID!

  """
  The repository the project is no longer linked to.
  """
  authorAssociation: CommentAuthorAssociation!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated input type of UnlinkProjectV2FromTeam
"""
input UnlinkProjectV2FromTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the team.
  """
  createdAt: DateTime!

"""
Autogenerated input type of StartOrganizationMigration
"""
input StartOrganizationMigrationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The migration source access token.
  """
  sourceAccessToken: String!

  """
  The URL of the organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The ID of the enterprise the target organization belongs to.
  """
  targetEnterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The name of the target organization.
  """
  targetOrgName: String!
}

"""
Autogenerated return type of StartOrganizationMigration
"""
type StartOrganizationMigrationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new organization migration.
  """
  orgMigration: OrganizationMigration
}

"""
Autogenerated input type of StartRepositoryMigration
"""
input StartRepositoryMigrationInput {
  """
  The migration source access token.
  """
  accessToken: String

  """
  The Node ID of the TeamRemoveRepositoryAuditEntry object
  """
  bodyVersion: String!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Whether to continue the migration on error. Defaults to `true`.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Parameters to be used for the tag_name_pattern rule
"""
type TagNamePatternParameters {
  """
  The signed URL to access the user-uploaded git archive.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean!

  """
  Whether to lock the source repository.
  """
  lockSource: Boolean

  """
  The signed URL to access the user-uploaded metadata archive.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
Parameters to be used for the tag_name_pattern rule
"""
input TagNamePatternParametersInput {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean

  """
  The ID of the migration source.
  """
  operator: String!

  """
  The URL of the source repository.
  """
  sourceRepositoryUrl: URI

  """
  The visibility of the imported repository.
  """
  targetRepoVisibility: String
}

"""
A team of users in an organization.
"""
type UnlinkProjectV2FromTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new repository migration.
  """
  team: Team
}

"""
Autogenerated input type of UnlinkRepositoryFromProject
"""
type UpdateProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  discussion: TeamDiscussion!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The updated project.
  """
  editor: Actor

  """
  The Node ID of the TeamDiscussionComment object
  """
  contexts: [StatusContext!]!

  """
  The Node ID of the Status object
  """
  id: ID!

"""
Required status check
"""
type StatusCheckConfiguration {
  """
  The status check context name that must be present on the commit.
  """
  context: String!

  """
  The optional integration ID that this status check must originate from.
  """
  integrationId: Int
}

"""
Required status check
"""
input StatusCheckConfigurationInput {
  """
  The status check context name that must be present on the commit.
  """
  context: String!

  """
  The optional integration ID that this status check must originate from.
  """
  integrationId: Int
}

"""
Represents the rollup for both the check runs and status for a commit.
"""
input UpdateProjectV2CollaboratorsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The collaborators to update.
  """
  contexts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): StatusCheckRollupContextConnection!

  """
  The Node ID of the StatusCheckRollup object
  """
  id: ID!

  """
  The ID of the project to update the collaborators for.
  """
  number: Int!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated input type of UnsubscribeFromNotifications
"""
type StatusCheckRollupContextConnection {
  """
  The number of check runs in this rollup.
  """
  checkRunCount: Int!

  """
  Counts of check runs by state.
  """
  checkRunCountsByState: [CheckRunStateCount!]

  """
  A list of edges.
  """
  edges: [StatusCheckRollupContextEdge]

  """
  A list of nodes.
  """
  nodes: [StatusCheckRollupContext]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The number of status contexts in this rollup.
  """
  statusContextCount: Int!

  """
  Counts of status contexts by state.
  """
  statusContextCountsByState: [StatusContextStateCount!]

  """
  Identifies the total count of items in the connection.
  """
  ids: [ID!]!
    @possibleTypes(
      concreteTypes: ["Commit", "Discussion", "Issue", "PullRequest", "Repository", "Team", "TeamDiscussion"]
      abstractType: "Subscribable"
    )
}

"""
Autogenerated return type of UnsubscribeFromNotifications
"""
type UnsubscribeFromNotificationsPayload
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  editTeamUrl: URI!

  """
  The Node ID of the Team object
  """
  id: ID!

"""
Represents an 'unsubscribed' event on a given `Subscribable`.
"""
type UpdateProjectV2CollaboratorsPayload {
  """
  Include the members of any child teams when assigning
  """
  resourcePath: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Notify the entire team of the PR if it is delegated
  """
  createdAt: DateTime!

  """
  The Node ID of the UnlockedEvent object
  """
  url: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The collaborators granted a role
  """
  description: String

  """
  The Node ID of the StatusContext object
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ActorConnection
}

"""
Autogenerated input type of UpdateUserList
"""
input UpdateUserListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A description of the list
  """
  createdAt: DateTime!

"""
Represents a count of the state of a status context.
"""
type StatusContextStateCount {
  """
  The number of statuses with this state.
  """
  count: Int!

  """
  The state of a status context.
  """
  state: StatusState!
}

"""
The possible commit status states.
"""
enum StatusState {
  """
  The Node ID of the UnlabeledEvent object
  """
  id: ID!

  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean

  """
  The ids of users or teams that can approve deployments to this environment
  """
  The name of the list
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The notification setting that the team has set.
  """
  notificationSetting: TeamNotificationSetting!

  """
  The organization that owns this team.
  """
  updateMethod: PullRequestBranchUpdateMethod
}

"""
A Stripe Connect account for receiving sponsorship funds from GitHub Sponsors.
"""
type StripeConnectAccount {
  """
  The account number used to identify this Stripe Connect account.
  """
  accountId: String!

  """
  The name of the country or region of an external account, such as a bank
  account, tied to the Stripe Connect account. Will only return a value when
  queried by the maintainer of the associated GitHub Sponsors profile
  themselves, or by an admin of the sponsorable organization.
  """
  billingCountryOrRegion: String

  """
  The name of the country or region of the Stripe Connect account. Will only
  return a value when queried by the maintainer of the associated GitHub
  Sponsors profile themselves, or by an admin of the sponsorable organization.
  """
  countryOrRegion: String

  """
  Whether this Stripe Connect account is currently in use for the associated GitHub Sponsors profile.
  """
  isActive: Boolean!

  """
  The GitHub Sponsors profile associated with this Stripe Connect account.
  """
  sponsorsListing: SponsorsListing!

  """
  The URL to access this Stripe Connect account on Stripe's website.
  """
  stripeDashboardUrl: URI!
}

"""
Autogenerated input type of SubmitPullRequestReview
"""
input UnlinkProjectV2FromRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  Finds and returns the project according to the provided project number.
  """
  projectV2(
    """
    The Project number.
    """
    number: Int!
  ): ProjectV2

  """
  List of projects this team has collaborator access to.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filtering options for projects returned from this connection
    """
    filterBy: ProjectV2Filters = {}

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    The query to search projects by.
    """
    query: String = ""
  ): ProjectV2Connection!

  """
  A list of repositories this team has access to.
  """
  repositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Order for the connection.
    """
    orderBy: TeamRepositoryOrder

    """
    The search string to look for. Repositories will be returned where the name contains your search string.
    """
    query: String
  ): TeamRepositoryConnection!

"""
Autogenerated return type of UnlinkProjectV2FromRepository
"""
type UnlinkProjectV2FromRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is no longer linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of UnlinkProjectV2FromTeam
"""
input UnlinkProjectV2FromTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to unlink from the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of UnlinkProjectV2FromTeam
"""
type UnlinkProjectV2FromTeamPayload {
  """
  The name of the submodule in .gitmodules (Base64-encoded)
  """
  nameRaw: Base64String!

  """
  The path in the superproject that this submodule is located in
  """
  clientMutationId: String

  """
  The path in the superproject that this submodule is located in (Base64-encoded)
  """
  pathRaw: Base64String!

  """
  The commit revision of the subproject repository being tracked by the submodule
  """
  team: Team
}

"""
Autogenerated input type of UnlinkRepositoryFromProject
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just updated
  """
  list: UserList
}

"""
The possible team notification values.
"""
enum TeamNotificationSetting {
  """
  No one will receive notifications.
  """
  NOTIFICATIONS_DISABLED

  """
  Everyone will receive notifications when the team is @mentioned.
  """
  NOTIFICATIONS_ENABLED
}

"""
Ways in which team connections can be ordered.
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item to add to the list
  """
  node: Submodule
}

"""
Entities that can be subscribed to for web and email notifications.
"""
interface Subscribable {
  """
  The Node ID of the Subscribable object
  """
  id: ID!

  """
  The lists to which this item should belong
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  The suggested lists to create and add this item to
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Entities that can be subscribed to for web and email notifications.
"""
interface SubscribableThread {
  """
  The Node ID of the SubscribableThread object
  """
  id: ID!

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

"""
Represents a 'subscribed' event on a given `Subscribable`.
"""
enum ThreadSubscriptionFormAction {
  """
  The User cannot subscribe or unsubscribe to the thread
  """
  NONE

  """
  The User can subscribe to the thread
  """
  createdAt: DateTime!

  """
  The Node ID of the SubscribedEvent object
  """
  id: ID!

  """
  The User can unsubscribe to the thread
  """
  UNSUBSCRIBE
}

"""
The possible states of a subscription.
"""
enum ThreadSubscriptionState {
  """
  The subscription status is currently disabled.
  """
  DISABLED

  """
  The User is never notified because they are ignoring the list
  """
  IGNORING_LIST

  """
  The User is never notified because they are ignoring the thread
  """
  IGNORING_THREAD

  """
  The User is not recieving notifications from this thread
  """
  NONE

  """
  The User is notified becuase they are watching the list
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamAddMemberAuditEntry object
  """
  id: ID!

  """
  The User is notified because they are subscribed to the thread
  """
  SUBSCRIBED_TO_THREAD

  """
  The User is notified because they chose custom settings for this thread.
  """
  SUBSCRIBED_TO_THREAD_EVENTS

  """
  The User is notified because they chose custom settings for this thread.
  """
  commitUrl: URI!

  """
  The Node ID of the Tag object
  """
  id: ID!

  """
  The Node ID of the TeamRemoveMemberAuditEntry object
  """
  id: ID!

  """
  The subscription status is currently unavailable.
  """
  UNAVAILABLE
}

"""
A topic aggregates entities that are related to a subject.
"""
type Topic implements Node & Starrable {
  """
  The Node ID of the Topic object
  """
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Will new commits pushed to matching branches dismiss pull request review approvals.
  """
  dismissesStaleReviews: Boolean

  """
  Can admins override branch protection.
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

"""
Parameters to be used for the tag_name_pattern rule
"""
type TagNamePatternParameters {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean!

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
Parameters to be used for the tag_name_pattern rule
"""
input TagNamePatternParametersInput {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
A team of users in an organization.
"""
type Team implements MemberStatusable & Node & Subscribable {
  """
  A list of teams that are ancestors of this team.
  """
  ancestors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If true, only repositories whose owner can be sponsored via GitHub Sponsors will be returned.
    """
    sponsorableOnly: Boolean = false

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Whether users can pull changes from upstream when the branch is locked. Set to
  `true` to allow fork syncing. Set to `false` to prevent fork syncing.
  """
  lockAllowsFetchAndMerge: Boolean

  """
  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
  """
  lockBranch: Boolean

"""
The possible team notification values.
"""
enum TeamNotificationSetting {
  """
  No one will receive notifications.
  """
  NOTIFICATIONS_DISABLED

  """
  Everyone will receive notifications when the team is @mentioned.
  """
  NOTIFICATIONS_ENABLED
}

"""
Ways in which team connections can be ordered.
"""
input TeamOrder {
  """
  The glob-like pattern used to determine matching branches.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnlockedEvent object
  """
  id: ID!

  """
  The user who owns the lists
  """
  user: User
}

"""
Autogenerated input type of UnmarkProjectV2AsTemplate
"""
input UnmarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  NOT_RELEVANT @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  The ID of the Project to unmark as a template.
  """
  PERSONAL_PREFERENCE @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

"""
Autogenerated return type of UnmarkProjectV2AsTemplate
"""
type UnmarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  TOO_GENERAL @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  The project.
  """
  TOO_SPECIFIC @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")
}

"""
Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
"""
input UpdateUserListInput {
  """
  Whether the most recent push must be approved by someone other than the person who pushed it
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamAddRepositoryAuditEntry object
  """
  editTeamUrl: URI!

  """
  The Node ID of the Team object
  """
  id: ID!

  """
  Number of approving reviews required to update matching branches.
  """
  countMembersAlreadyRequested: Boolean = true

"""
Autogenerated input type of TransferEnterpriseOrganization
"""
input TransferEnterpriseOrganizationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise where the organization should be transferred.
  """
  destinationEnterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the organization to transfer.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of TransferEnterpriseOrganization
"""
type TransferEnterpriseOrganizationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamRemoveMemberAuditEntry object
  """
  id: ID!

  """
  The organization for which a transfer was initiated.
  """
  organization: Organization
}

"""
Autogenerated input type of TransferIssue
"""
input TransferIssueInput {
  """
  The list of required deployment environments
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamRemoveRepositoryAuditEntry object
  """
  id: ID!

  """
  Whether to create labels if they don't exist in the target repository (matched by name)
  """
  createLabelsIfMissing: Boolean = false

  """
  The Node ID of the issue to be transferred
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the UnmarkedAsDuplicateEvent object
  """
  id: ID!

  """
  A description of the list
  """
  description: String

  """
  Whether or not the list is private
  """
  isPrivate: Boolean

  """
  Include the members of any child teams when assigning
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

  """
  Notify the entire team of the PR if it is delegated
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  The notification setting that the team has set.
  """
  notificationSetting: TeamNotificationSetting!

  """
  The organization that owns this team.
  """
  removeTeamRequest: Boolean = true

  """
  Are successful deployments required before merging.
  """
  fromRepository: Repository

  """
  The Node ID of the TransferredEvent object
  """
  id: ID!

  """
  Finds and returns the project according to the provided project number.
  """
  projectV2(
    """
    The Project number.
    """
    number: Int!
  ): ProjectV2

  """
  List of projects this team has collaborator access to.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filtering options for projects returned from this connection
    """
    filterBy: ProjectV2Filters = {}

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    The query to search projects by.
    """
    query: String = ""
  ): ProjectV2Connection!

  """
  A list of repositories this team has access to.
  """
  name: String
}

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the pinned issue that was unpinned
  """
  id: ID

"""
Autogenerated input type of UnmarkProjectV2AsTemplate
"""
input UnmarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to unmark as a template.
  """
  entries: [TreeEntry!]

    """
    The search string to look for. Repositories will be returned where the name contains your search string.
    """
    query: String
  ): TeamRepositoryConnection!

  """
  The Node ID of the TeamRemoveRepositoryAuditEntry object
  """
  id: ID!

"""
Autogenerated return type of UnmarkProjectV2AsTemplate
"""
type UnmarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
"""
type UnmarkedAsDuplicateEvent implements Node {
  """
  The issue that was unpinned
  """
  list: UserList
}

"""
Autogenerated input type of UpdateUserListsForItem
"""
input UpdateUserListsForItemInput {
  """
  The programming language this file is written in.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamChangeParentTeamAuditEntry object
  """
  id: ID!

  """
  Number of lines in the file.
  """
  clientMutationId: String

  """
  The item to add to the list
  """
  createdAt: DateTime!

  """
  The Node ID of the UnpinnedEvent object
  """
  duplicate: IssueOrPullRequest

  """
  Entry file name. (Base64-encoded)
  """
  nameRaw: Base64String!

  """
  Entry file object.
  """
  id: ID!

  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  countMembersAlreadyRequested: Boolean = true

  """
  Turn on or off review assignment
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  The full path of the file. (Base64-encoded)
  """
  pathRaw: Base64String

  """
  The Repository the tree entry belongs to
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  Entry byte size
  """
  size: Int!

  """
  If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule
  """
  clientMutationId: String

  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

"""
Autogenerated input type of UnarchiveProjectV2Item
"""
input UnarchiveProjectV2ItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the ProjectV2Item to unarchive.
  """
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])

  """
  The ID of the Project to archive the item from.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnarchiveProjectV2Item
"""
type UnarchiveProjectV2ItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item unarchived from the project.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamAddMemberAuditEntry object
  """
  id: ID!

"""
Autogenerated input type of UnarchiveRepository
"""
input UnsubscribeFromNotificationsInput
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The NotificationThread IDs of the objects to unsubscribe from.
  """
  ids: [ID!]!
    @possibleTypes(
      concreteTypes: ["Commit", "Discussion", "Issue", "PullRequest", "Repository", "Team", "TeamDiscussion"]
      abstractType: "Subscribable"
    )
}

"""
Autogenerated return type of UnsubscribeFromNotifications
"""
type UnsubscribeFromNotificationsPayload
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the pinned issue that was unpinned
  """
  id: ID

  """
  The issue that was unpinned
  """
  success: Boolean
}

"""
The possible states of a thread subscription form action
"""
enum ThreadSubscriptionFormAction {
  """
  The User cannot subscribe or unsubscribe to the thread
  """
  NONE

  """
  The User can subscribe to the thread
  """
  SUBSCRIBE

  """
  The User can unsubscribe to the thread
  """
  UNSUBSCRIBE
}

"""
The possible states of a subscription.
"""
enum ThreadSubscriptionState {
  """
  The subscription status is currently disabled.
  """
  DISABLED

  """
  The User is never notified because they are ignoring the list
  """
  authorAssociation: CommentAuthorAssociation!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The User is never notified because they are ignoring the thread
  """
  IGNORING_THREAD

  """
  The User is not recieving notifications from this thread
  """
  NONE

  """
  The User is notified becuase they are watching the list
  """
  SUBSCRIBED_TO_LIST

  """
  The User is notified because they are subscribed to the thread
  """
  bodyVersion: String!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The User is notified because they chose custom settings for this thread.
  """
  SUBSCRIBED_TO_THREAD_EVENTS

  """
  The User is notified because they chose custom settings for this thread.
  """
  SUBSCRIBED_TO_THREAD_TYPE

  """
  The subscription status is currently unavailable.
  """
  UNAVAILABLE
}

"""
The possible states of a thread subscription form action
"""
enum ThreadSubscriptionFormAction {
  """
  The User cannot subscribe or unsubscribe to the thread
  """
  NONE

    """
    Order for connection
    """
    orderBy: TeamDiscussionCommentOrder
  ): TeamDiscussionCommentConnection!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The User can unsubscribe to the thread
  """
  commentsResourcePath: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
The possible states of a subscription.
"""
enum ThreadSubscriptionState {
  """
  The subscription status is currently disabled.
  """
  commentsUrl: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The User is never notified because they are ignoring the list
  """
  IGNORING_LIST

  """
  The User is never notified because they are ignoring the thread
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamAddRepositoryAuditEntry object
  """
  id: ID!

  """
  The User is not recieving notifications from this thread
  """
  NONE

  """
  The User is notified becuase they are watching the list
  """
  editor: Actor

  """
  The Node ID of the TeamDiscussion object
  """
  id: ID!

  """
  The User is notified because they are subscribed to the thread
  """
  SUBSCRIBED_TO_THREAD

  """
  The User is notified because they chose custom settings for this thread.
  """
  isPinned: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Whether or not the discussion is only visible to team members and organization owners.
  """
  isPrivate: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The subscription status is currently unavailable.
  """
  UNAVAILABLE
}

"""
A topic aggregates entities that are related to a subject.
"""
type Topic implements Node & Starrable {
  """
  The Node ID of the Topic object
  """
  number: Int!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Notify the entire team of the PR if it is delegated
  """
  item: UserListItems

  """
  Remove the team review request when assigning
  """
  createdAt: DateTime!

  """
  The Node ID of the UnpinnedEvent object
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

  """
  The HTTP path for this discussion
  """
  resourcePath: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The team that defines the context of this discussion.
  """
  team: Team!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The title of the discussion
  """
  title: String!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The number of team members to assign
  """
  url: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    orderBy: StarOrder
  ): StargazerConnection!

  """
  Returns a boolean indicating whether the viewing user has starred this starrable.
  """
  viewerHasStarred: Boolean!
}

"""
Metadata for an audit entry with a topic.
"""
interface TopicAuditEntryData {
  """
  The name of the topic added to the repository
  """
  viewerCanPin: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The name of the topic added to the repository
  """
  topicName: String
}

"""
Reason that the suggested topic is declined.
"""
enum TopicSuggestionDeclineReason {
  """
  The suggested topic is not relevant to the repository.
  """
  NOT_RELEVANT @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  The viewer does not like the suggested topic.
  """
  PERSONAL_PREFERENCE @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  The suggested topic is too general for the repository.
  """
  TOO_GENERAL @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  The suggested topic is too specific for the repository (e.g. #ruby-on-rails-version-4-2-1).
  """
  TOO_SPECIFIC @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")
}

"""
Autogenerated input type of TransferEnterpriseOrganization
"""
input TransferEnterpriseOrganizationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise where the organization should be transferred.
  """
  destinationEnterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the organization to transfer.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of TransferEnterpriseOrganization
"""
type TransferEnterpriseOrganizationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization for which a transfer was initiated.
  """
  authorAssociation: CommentAuthorAssociation!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated input type of TransferEnterpriseOrganization
"""
input TransferEnterpriseOrganizationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise where the organization should be transferred.
  """
  destinationEnterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the organization to transfer.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamChangeParentTeamAuditEntry object
  """
  id: ID!

"""
Autogenerated return type of TransferEnterpriseOrganization
"""
type TransferEnterpriseOrganizationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  bodyVersion: String!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The organization for which a transfer was initiated.
  """
  organization: Organization
}

"""
Autogenerated input type of TransferIssue
"""
input UnsubscribeFromNotificationsInput
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether to create labels if they don't exist in the target repository (matched by name)
  """
  createLabelsIfMissing: Boolean = false

  """
  The Node ID of the issue to be transferred
  """
  discussion: TeamDiscussion!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The Node ID of the repository the issue should be transferred to
  """
  editor: Actor

  """
  The Node ID of the TeamDiscussionComment object
  """
  id: ID!

"""
Autogenerated return type of UnsubscribeFromNotifications
"""
type UnsubscribeFromNotificationsPayload
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The issue that was transferred
  """
  issue: Issue
}

"""
Represents a 'transferred' event on a given issue or pull request.
"""
type TransferredEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  number: Int!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The repository this came from
  """
  fromRepository: Repository

  """
  The Node ID of the TransferredEvent object
  """
  id: ID!

  """
  Identifies the issue associated with the event.
  """
  success: Boolean
}

"""
Represents an 'unsubscribed' event on a given `Subscribable`.
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  Indicates if the repository should have the discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnsubscribedEvent object
  """
  entries: [TreeEntry!]

  """
  The Node ID of the Tree object
  """
  entries: [TreeEntry!]

  """
  The Node ID of the Tree object
  """
  resourcePath: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The organization with the updated web commit signoff setting.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  url: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  Can admins override branch protection.
  """
  isPrivate: Boolean

  """
  The programming language this file is written in.
  """
  language: Language

  """
  The programming language this file is written in.
  """
  language: Language

  """
  Number of lines in the file.
  """
  lockAllowsFetchAndMerge: Boolean

  """
  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
  """
  lockBranch: Boolean

  """
  The glob-like pattern used to determine matching branches.
  """
  authorAssociation: CommentAuthorAssociation!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Entry file name. (Base64-encoded)
  """
  nameRaw: Base64String!

  """
  Entry file name. (Base64-encoded)
  """
  nameRaw: Base64String!

  """
  Entry file object.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  Whether the most recent push must be approved by someone other than the person who pushed it
  """
  bodyVersion: String!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Number of approving reviews required to update matching branches.
  """
  createdAt: DateTime!

  """
  The full path of the file. (Base64-encoded)
  """
  pathRaw: Base64String

  """
  The full path of the file. (Base64-encoded)
  """
  pathRaw: Base64String

  """
  The Repository the tree entry belongs to
  """
  id: ID!

  """
  Entry byte size
  """
  size: Int!

    """
    Order for connection
    """
    orderBy: TeamDiscussionCommentOrder
  ): TeamDiscussionCommentConnection!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule
  """
  commentsResourcePath: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Can admins override branch protection.
  """
  commentsUrl: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated input type of UnarchiveProjectV2Item
"""
input UnarchiveProjectV2ItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the ProjectV2Item to unarchive.
  """
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])

  """
  The ID of the Project to archive the item from.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnarchiveProjectV2Item
"""
type UnarchiveProjectV2ItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  editor: Actor

  """
  The Node ID of the TeamDiscussion object
  """
  id: ID!

  """
  The item unarchived from the project.
  """
  item: ProjectV2Item
}

"""
Autogenerated input type of UnarchiveProjectV2Item
"""
input UnarchiveProjectV2ItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  isPinned: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Whether or not the discussion is only visible to team members and organization owners.
  """
  isPrivate: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The ID of the Project to archive the item from.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnarchiveProjectV2Item
"""
type UnarchiveProjectV2ItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  number: Int!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The item unarchived from the project.
  """
  item: ProjectV2Item
}

"""
Autogenerated input type of UnarchiveRepository
"""
input UnlinkProjectV2FromRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to unlink from the project.
  """
  resourcePath: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated return type of UnlinkProjectV2FromRepository
"""
type UnlinkProjectV2FromRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  team: Team!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The repository the project is no longer linked to.
  """
  title: String!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated input type of UnlinkProjectV2FromTeam
"""
input UnlinkProjectV2FromTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the team.
  """
  url: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The ID of the team to unlink from the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of UnlinkProjectV2FromTeam
"""
type UnlinkProjectV2FromTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnassignedEvent object
  """
  id: ID!

  """
  The team the project is unlinked from
  """
  viewerCanPin: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated input type of UnlinkRepositoryFromProject
"""
input UnlinkRepositoryFromProjectInput {
  """
  Whether users can pull changes from upstream when the branch is locked. Set to
  `true` to allow fork syncing. Set to `false` to prevent fork syncing.
  """
  lockAllowsFetchAndMerge: Boolean

  """
  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
  """
  lockBranch: Boolean

  """
  The glob-like pattern used to determine matching branches.
  """
  pattern: String

  """
  A list of User, Team, or App IDs allowed to push to matching branches.
  """
  pushActorIds: [ID!]

  """
  Whether the most recent push must be approved by someone other than the person who pushed it
  """
  requireLastPushApproval: Boolean

  """
  Number of approving reviews required to update matching branches.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  The list of required deployment environments
  """
  requiredDeploymentEnvironments: [String!]

  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  authorAssociation: CommentAuthorAssociation!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  bodyVersion: String!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The Node ID of the UnlockedEvent object
  """
  id: ID!

  """
  Are successful deployments required before merging.
  """
  requiresDeployments: Boolean

  """
  Are successful deployments required before merging.
  """
  requiresDeployments: Boolean

  """
  Are merge commits prohibited from being pushed to this branch.
  """
  discussion: TeamDiscussion!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  editor: Actor

  """
  The Node ID of the TeamDiscussionComment object
  """
  id: ID!

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnlabeledEvent object
  """
  number: Int!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated input type of UnlinkProjectV2FromRepository
"""
input UnlinkProjectV2FromRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to unlink from the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of UnlinkProjectV2FromRepository
"""
type UnlinkProjectV2FromRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is no longer linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of UnlinkProjectV2FromTeam
"""
input UnlinkProjectV2FromTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  resourcePath: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The ID of the project to unlink from the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to unlink from the project.
  """
  url: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
The possible team notification values.
"""
enum TeamNotificationSetting {
  """
  No one will receive notifications.
  """
  NOTIFICATIONS_DISABLED

  """
  Everyone will receive notifications when the team is @mentioned.
  """
  NOTIFICATIONS_ENABLED
}

"""
Ways in which team connections can be ordered.
"""
type UnlinkProjectV2FromTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is unlinked from
  """
  team: Team
}

"""
Autogenerated input type of UnlinkRepositoryFromProject
"""
type UpdatePatreonSponsorabilityPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

"""
Autogenerated input type of UnmarkProjectV2AsTemplate
"""
input UnmarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to unmark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnmarkProjectV2AsTemplate
"""
type UnmarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamRemoveMemberAuditEntry object
  """
  id: ID!

  """
  The Node ID of the UnlockedEvent object
  """
  id: ID!

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
"""
input UpdateProjectV2CollaboratorsInput {
  """
  The organization with the updated web commit signoff setting.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  The value for the allow private repository forking policy on the enterprise.
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the UnmarkedAsDuplicateEvent object
  """
  id: ID!

  """
  The value for the allow private repository forking setting on the enterprise.
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnassignedEvent object
  """
  id: ID!

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateProjectCard
"""
input UpdateProjectCardInput {
  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean

  """
  The ids of users or teams that can approve deployments to this environment
  """
  note: String

  """
  The ProjectCard ID to update.
  """
  projectCardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])
}

"""
Autogenerated return type of UpdateProjectCard
"""
type UpdateProjectCardPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the pinned issue that was unpinned
  """
  id: ID

"""
Autogenerated input type of UnmarkProjectV2AsTemplate
"""
input UnmarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to unmark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnmarkProjectV2AsTemplate
"""
type UnmarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamRemoveRepositoryAuditEntry object
  """
  id: ID!

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
"""
type UnmarkedAsDuplicateEvent implements Node {
  """
  The issue that was unpinned
  """
  projectCard: ProjectCard
}

"""
Autogenerated input type of UpdateProjectColumn
"""
input UpdateProjectColumnInput {
  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean

  """
  The ids of users or teams that can approve deployments to this environment
  """
  createdAt: DateTime!

  """
  The Node ID of the UnpinnedEvent object
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the UnmarkedAsDuplicateEvent object
  """
  id: ID!

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  The ProjectColumn ID to update.
  """
  projectColumnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

"""
Autogenerated return type of UpdateProjectColumn
"""
type UpdateProjectColumnPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

"""
Autogenerated input type of UpdateRepositoryRuleset
"""
input UpdateRepositoryRulesetInput {
  """
  The updated project column.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
Autogenerated input type of UpdateProject
"""
input UpdateProjectInput {
  """
  The description of project.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnlabeledEvent object
  """
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of project.
  """
  name: String

"""
Autogenerated input type of UnlinkProjectV2FromRepository
"""
input UnlinkProjectV2FromRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to unlink from the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
The possible team notification values.
"""
enum TeamNotificationSetting {
  """
  No one will receive notifications.
  """
  NOTIFICATIONS_DISABLED

  """
  Everyone will receive notifications when the team is @mentioned.
  """
  NOTIFICATIONS_ENABLED
}

"""
Ways in which team connections can be ordered.
"""
type UnlinkProjectV2FromRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is no longer linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of UnlinkProjectV2FromTeam
"""
input UnlinkProjectV2FromTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to unlink from the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of UnlinkProjectV2FromTeam
"""
type UnlinkProjectV2FromTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is unlinked from
  """
  team: Team
}

"""
Autogenerated input type of UnlinkRepositoryFromProject
"""
input UnsubscribeFromNotificationsInput
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The NotificationThread IDs of the objects to unsubscribe from.
  """
  ids: [ID!]!
    @possibleTypes(
      concreteTypes: ["Commit", "Discussion", "Issue", "PullRequest", "Repository", "Team", "TeamDiscussion"]
      abstractType: "Subscribable"
    )
}

"""
Autogenerated return type of UnsubscribeFromNotifications
"""
type UnsubscribeFromNotificationsPayload
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the pinned issue that was unpinned
  """
  id: ID

  """
  The issue that was unpinned
  """
  success: Boolean
}

"""
Represents an 'unsubscribed' event on a given `Subscribable`.
"""
type UnsubscribedEvent implements Node {
  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamRemoveMemberAuditEntry object
  """
  id: ID!

  """
  The ids of users or teams that can approve deployments to this environment
  """
  createdAt: DateTime!

  """
  The Node ID of the UnpinnedEvent object
  """
  id: ID!

  """
  Whether the project is open or closed.
  """
  state: ProjectState
}

"""
Autogenerated return type of UpdateProject
"""
type UpdateProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated project.
  """
  project: Project
}

"""
Autogenerated input type of UpdateProjectV2Collaborators
"""
input UpdateProjectV2CollaboratorsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The collaborators to update.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnlockedEvent object
  """
  id: ID!

  """
  The ID of the project to update the collaborators for.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated input type of UnsubscribeFromNotifications
"""
input UnsubscribeFromNotificationsInput
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The NotificationThread IDs of the objects to unsubscribe from.
  """
  ids: [ID!]!
    @possibleTypes(
      concreteTypes: ["Commit", "Discussion", "Issue", "PullRequest", "Repository", "Team", "TeamDiscussion"]
      abstractType: "Subscribable"
    )
}

"""
The possible states of a thread subscription form action
"""
enum ThreadSubscriptionFormAction {
  """
  The User cannot subscribe or unsubscribe to the thread
  """
  NONE

  """
  The User can subscribe to the thread
  """
  SUBSCRIBE

  """
  The User can unsubscribe to the thread
  """
  UNSUBSCRIBE
}

"""
The possible states of a subscription.
"""
enum ThreadSubscriptionState {
  """
  The subscription status is currently disabled.
  """
  DISABLED

  """
  The User is never notified because they are ignoring the list
  """
  IGNORING_LIST

  """
  The User is never notified because they are ignoring the thread
  """
  IGNORING_THREAD

  """
  The User is not recieving notifications from this thread
  """
  NONE

  """
  The User is notified becuase they are watching the list
  """
  SUBSCRIBED_TO_LIST

  """
  The User is notified because they are subscribed to the thread
  """
  SUBSCRIBED_TO_THREAD

  """
  The User is notified because they chose custom settings for this thread.
  """
  SUBSCRIBED_TO_THREAD_EVENTS

  """
  The User is notified because they chose custom settings for this thread.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamRemoveRepositoryAuditEntry object
  """
  id: ID!

  """
  The subscription status is currently unavailable.
  """
  UNAVAILABLE
}

"""
A topic aggregates entities that are related to a subject.
"""
type Topic implements Node & Starrable {
  """
  The Node ID of the Topic object
  """
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Represents an 'unsubscribed' event on a given `Subscribable`.
"""
type UpdateProjectV2CollaboratorsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If true, only repositories whose owner can be sponsored via GitHub Sponsors will be returned.
    """
    sponsorableOnly: Boolean = false

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The collaborators granted a role
  """
  createdAt: DateTime!

  """
  The Node ID of the UnsubscribedEvent object
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ActorConnection
}

"""
Autogenerated input type of UpdateSponsorshipPreferences
"""
input UpdateSponsorshipPreferencesInput {
  """
  The lists to which this item belongs
  """
  lists: [UserList!]

  """
  The value for the allow private repository forking policy on the enterprise.
  """
  policyValue: EnterpriseAllowPrivateRepositoryForkingPolicyValue

  """
  The value for the allow private repository forking policy on the enterprise.
  """
  policyValue: EnterpriseAllowPrivateRepositoryForkingPolicyValue

  """
  Can admins override branch protection.
  """
  user: User
}

"""
Autogenerated input type of UpdateUserList
"""
input UpdateUserListInput {
  """
  Whether users can pull changes from upstream when the branch is locked. Set to
  `true` to allow fork syncing. Set to `false` to prevent fork syncing.
  """
  NOT_RELEVANT @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
  """
  PERSONAL_PREFERENCE @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  The glob-like pattern used to determine matching branches.
  """
  TOO_GENERAL @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  A description of the list
  """
  TOO_SPECIFIC @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")
}

"""
Autogenerated input type of UnmarkProjectV2AsTemplate
"""
input UnmarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to unmark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated input type of TransferEnterpriseOrganization
"""
input TransferEnterpriseOrganizationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise where the organization should be transferred.
  """
  destinationEnterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the organization to transfer.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of TransferEnterpriseOrganization
"""
type TransferEnterpriseOrganizationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization for which a transfer was initiated.
  """
  organization: Organization
}

"""
Autogenerated input type of TransferIssue
"""
type UnmarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether to create labels if they don't exist in the target repository (matched by name)
  """
  createLabelsIfMissing: Boolean = false

  """
  The Node ID of the issue to be transferred
  """
  issueId: ID! @possibleTypes(concreteTypes: ["Issue"])

  """
  The Node ID of the repository the issue should be transferred to
  """
  projectV2: ProjectV2
}

"""
Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
"""
type UnmarkedAsDuplicateEvent implements Node {
  """
  Number of approving reviews required to update matching branches.
  """
  isPrivate: Boolean

  """
  The list of required deployment environments
  """
  requiredDeploymentEnvironments: [String!]

  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  The name of the list
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the UnmarkedAsDuplicateEvent object
  """
  fromRepository: Repository

  """
  The Node ID of the TransferredEvent object
  """
  id: ID!

  """
  The update branch method to use. If omitted, defaults to 'MERGE'
  """
  updateMethod: PullRequestBranchUpdateMethod
}

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just updated
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
Autogenerated input type of UpdateUserListsForItem
"""
input UpdateUserListsForItemInput {
  """
  Can admins override branch protection.
  """
  clientMutationId: String

  """
  Whether users can pull changes from upstream when the branch is locked. Set to
  `true` to allow fork syncing. Set to `false` to prevent fork syncing.
  """
  lockAllowsFetchAndMerge: Boolean

  """
  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
  """
  entries: [TreeEntry!]

  """
  The Node ID of the Tree object
  """
  id: ID!

  """
  The glob-like pattern used to determine matching branches.
  """
  requiresDeployments: Boolean

  """
  Are merge commits prohibited from being pushed to this branch.
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  The id of the pinned issue that was unpinned
  """
  id: ID

  """
  The issue that was unpinned
  """
  text: String!
}

"""
The possible states of a thread subscription form action
"""
enum ThreadSubscriptionFormAction {
  """
  The User cannot subscribe or unsubscribe to the thread
  """
  NONE

  """
  The User can subscribe to the thread
  """
  SUBSCRIBE

  """
  The User can unsubscribe to the thread
  """
  UNSUBSCRIBE
}

"""
The possible states of a subscription.
"""
enum ThreadSubscriptionState {
  """
  The subscription status is currently disabled.
  """
  DISABLED

  """
  The User is never notified because they are ignoring the list
  """
  IGNORING_LIST

  """
  The User is never notified because they are ignoring the thread
  """
  IGNORING_THREAD

  """
  The User is not recieving notifications from this thread
  """
  NONE

  """
  The User is notified becuase they are watching the list
  """
  SUBSCRIBED_TO_LIST

  """
  The User is notified because they are subscribed to the thread
  """
  SUBSCRIBED_TO_THREAD

  """
  The User is notified because they chose custom settings for this thread.
  """
  SUBSCRIBED_TO_THREAD_EVENTS

  """
  The User is notified because they chose custom settings for this thread.
  """
  SUBSCRIBED_TO_THREAD_TYPE

  """
  The subscription status is currently unavailable.
  """
  UNAVAILABLE
}

"""
A topic aggregates entities that are related to a subject.
"""
type Topic implements Node & Starrable {
  """
  The Node ID of the Topic object
  """
  id: ID!

  """
  The programming language this file is written in.
  """
  language: Language

  """
  Number of lines in the file.
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  The list of required deployment environments
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If true, only repositories whose owner can be sponsored via GitHub Sponsors will be returned.
    """
    sponsorableOnly: Boolean = false

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The Node ID of the UnpinnedEvent object
  """
  id: ID!

  """
  Entry file name. (Base64-encoded)
  """
  nameRaw: Base64String!

  """
  Entry file object.
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  countMembersAlreadyRequested: Boolean = true

  """
  The full path of the file. (Base64-encoded)
  """
  NOT_RELEVANT @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  The Repository the tree entry belongs to
  """
  PERSONAL_PREFERENCE @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  Entry byte size
  """
  TOO_GENERAL @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  TOO_SPECIFIC @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")
}

"""
Autogenerated input type of UnsubscribeFromNotifications
"""
Autogenerated input type of UnarchiveProjectV2Item
"""
input UnarchiveProjectV2ItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the ProjectV2Item to unarchive.
  """
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])

  """
  The ID of the Project to archive the item from.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated input type of TransferEnterpriseOrganization
"""
input TransferEnterpriseOrganizationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise where the organization should be transferred.
  """
  destinationEnterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the organization to transfer.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of TransferEnterpriseOrganization
"""
type TransferEnterpriseOrganizationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization for which a transfer was initiated.
  """
  organization: Organization
}

"""
Autogenerated input type of TransferIssue
"""
type UnarchiveProjectV2ItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether to create labels if they don't exist in the target repository (matched by name)
  """
  createLabelsIfMissing: Boolean = false

  """
  The Node ID of the issue to be transferred
  """
  item: ProjectV2Item
}

"""
Autogenerated input type of UnarchiveRepository
"""
input UnarchiveRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The NotificationThread IDs of the objects to unsubscribe from.
  """
  ids: [ID!]!
    @possibleTypes(
      concreteTypes: ["Commit", "Discussion", "Issue", "PullRequest", "Repository", "Team", "TeamDiscussion"]
      abstractType: "Subscribable"
    )
}

"""
Autogenerated return type of UnsubscribeFromNotifications
"""
type UnsubscribeFromNotificationsPayload
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Represents an 'unsubscribed' event on a given `Subscribable`.
"""
type User implements Actor & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  Are successful deployments required before merging.
  """
  requiresDeployments: Boolean

  """
  Are merge commits prohibited from being pushed to this branch.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnsubscribedEvent object
  """
  id: ID!

  """
  Turn on or off review assignment
  """
  createdAt: DateTime!

  """
  The Node ID of the UnassignedEvent object
  """
  fromRepository: Repository

  """
  The Node ID of the TransferredEvent object
  """
  id: ID!

  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

  """
  Notify the entire team of the PR if it is delegated
  """
  notifyTeam: Boolean = true

  """
  Remove the team review request when assigning
  """
  removeTeamRequest: Boolean = true

  """
  The number of team members to assign
  """
  entries: [TreeEntry!]

  """
  The Node ID of the Tree object
  """
  id: ID!

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  The programming language this file is written in.
  """
  language: Language

  """
  Number of lines in the file.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Whether users can pull changes from upstream when the branch is locked. Set to
  `true` to allow fork syncing. Set to `false` to prevent fork syncing.
  """
  lockAllowsFetchAndMerge: Boolean

  """
  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
  """
  lockBranch: Boolean

  """
  Entry file name. (Base64-encoded)
  """
  nameRaw: Base64String!

  """
  Entry file object.
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  Whether the most recent push must be approved by someone other than the person who pushed it
  """
  requireLastPushApproval: Boolean

  """
  The full path of the file. (Base64-encoded)
  """
  pathRaw: Base64String

  """
  The Repository the tree entry belongs to
  """
  isPrivate: Boolean

  """
  Entry byte size
  """
  size: Int!

  """
  If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule
  """
  requiredDeploymentEnvironments: [String!]

  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated input type of UnarchiveProjectV2Item
"""
input UnarchiveProjectV2ItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the ProjectV2Item to unarchive.
  """
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])

  """
  The ID of the Project to archive the item from.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnarchiveProjectV2Item
"""
type UnarchiveProjectV2ItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item unarchived from the project.
  """
  item: ProjectV2Item
}

"""
Autogenerated input type of UnarchiveRepository
"""
type UpdatePatreonSponsorabilityPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnlabeledEvent object
  """
  id: ID!

  """
  Are successful deployments required before merging.
  """
  requiresDeployments: Boolean

  """
  Are merge commits prohibited from being pushed to this branch.
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated input type of UnlinkProjectV2FromRepository
"""
input UnlinkProjectV2FromRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnassignedEvent object
  """
  id: ID!

  """
  The ID of the project to unlink from the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to unlink from the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of UnlinkProjectV2FromRepository
"""
type UnlinkProjectV2FromRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is no longer linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of UnlinkProjectV2FromTeam
"""
input UnlinkProjectV2FromTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to unlink from the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of UnlinkProjectV2FromTeam
"""
type UnlinkProjectV2FromTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is unlinked from
  """
  team: Team
}

"""
Autogenerated input type of UnlinkRepositoryFromProject
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

"""
Autogenerated return type of UpdateRepositoryRuleset
"""
type UpdateRepositoryRulesetPayload {
  """
  The organization with the updated web commit signoff setting.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  Whether the project is public or not.
  """
  public: Boolean

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnlabeledEvent object
  """
  id: ID!

  """
  The organization with the updated web commit signoff setting.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UnlinkProjectV2FromRepository
"""
input UnlinkProjectV2FromRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to unlink from the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of UnlinkProjectV2FromRepository
"""
type UnlinkProjectV2FromRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is no longer linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of UnlinkProjectV2FromTeam
"""
input UnlinkProjectV2FromTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to unlink from the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of UnlinkProjectV2FromTeam
"""
type UnlinkProjectV2FromTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is unlinked from
  """
  team: Team
}

"""
Autogenerated input type of UnlinkRepositoryFromProject
"""
input UpdateParametersInput {
  """
  The value for the allow private repository forking policy on the enterprise.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnlockedEvent object
  """
  id: ID!

  """
  The value for the allow private repository forking setting on the enterprise.
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateProjectCard
"""
input UpdateProjectCardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not the ProjectCard should be archived
  """
  isArchived: Boolean

"""
Autogenerated return type of UpdateProjectV2Collaborators
"""
type UpdateProjectV2CollaboratorsPayload {
  """
  The note of ProjectCard.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnlockedEvent object
  """
  id: ID!

  """
  The ProjectCard ID to update.
  """
  projectCardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])
}

"""
Autogenerated return type of UpdateProjectCard
"""
type UpdateProjectCardPayload {
  """
  The suggested lists to create and add this item to
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  The updated ProjectCard.
  """
  projectCard: ProjectCard
}

"""
Autogenerated input type of UpdateProjectColumn
"""
input UpdateProjectColumnInput {
  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean

  """
  The ids of users or teams that can approve deployments to this environment
  """
  The name of project column.
  """
  name: String!

  """
  The value for the allow private repository forking policy on the enterprise.
  """
  policyValue: EnterpriseAllowPrivateRepositoryForkingPolicyValue

  """
  The value for the allow private repository forking setting on the enterprise.
  """
  projectColumnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

"""
Autogenerated return type of UpdateProjectColumn
"""
type UpdateProjectColumnPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated project column.
  """
  projectColumn: ProjectColumn
}

"""
Autogenerated input type of UnmarkProjectV2AsTemplate
"""
input UnmarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to unmark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnmarkProjectV2AsTemplate
"""
type UnmarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of UnmarkProjectV2AsTemplate
"""
input UnmarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to unmark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnmarkProjectV2AsTemplate
"""
type UnmarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
"""
input UpdateProjectInput {
  """
  The description of project.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of project.
  """
  name: String

  """
  The Project ID to update.
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the UnmarkedAsDuplicateEvent object
  """
  id: ID!

  """
  Whether the project is public or not.
  """
  public: Boolean

  """
  Whether the project is open or closed.
  """
  state: ProjectState
}

"""
Autogenerated return type of UpdateProject
"""
type UpdateProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated project.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
Autogenerated input type of UpdateProjectV2Collaborators
"""
input UpdateProjectV2CollaboratorsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The collaborators to update.
  """
  collaborators: [ProjectV2Collaborator!]!

  """
  The ID of the project to update the collaborators for.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UpdateProjectV2Collaborators
"""
type UpdateProjectV2CollaboratorsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The collaborators granted a role
  """
  collaborators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ActorConnection
}

"""
Autogenerated input type of UpdateRepositoryRuleset
"""
input UpdateRepositoryRulesetInput {
  """
  A list of actors that are allowed to bypass rules in this ruleset.
  """
  bypassActors: [RepositoryRulesetBypassActorInput!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the pinned issue that was unpinned
  """
  id: ID

  """
  The issue that was unpinned
  """
  conditions: RepositoryRuleConditionsInput

  """
  The value for the allow private repository forking policy on the enterprise.
  """
  policyValue: EnterpriseAllowPrivateRepositoryForkingPolicyValue

  """
  The value for the allow private repository forking setting on the enterprise.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnpinnedEvent object
  """
  id: ID!

  """
  The name of the ruleset.
  """
  name: String

  """
  The global relay id of the repository ruleset to be updated.
  """
  repositoryRulesetId: ID! @possibleTypes(concreteTypes: ["RepositoryRuleset"])

  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean

  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean

  """
  The ids of users or teams that can approve deployments to this environment
  """
  rules: [RepositoryRuleInput!]

  """
  The target of the ruleset.
  """
  target: RepositoryRulesetTarget
}

"""
Autogenerated return type of UpdateRepositoryRuleset
"""
type UpdateRepositoryRulesetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created Ruleset.
  """
  ruleset: RepositoryRuleset
}

"""
Autogenerated input type of UnsubscribeFromNotifications
"""
input UnsubscribeFromNotificationsInput
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The NotificationThread IDs of the objects to unsubscribe from.
  """
  ids: [ID!]!
    @possibleTypes(
      concreteTypes: ["Commit", "Discussion", "Issue", "PullRequest", "Repository", "Team", "TeamDiscussion"]
      abstractType: "Subscribable"
    )
}

"""
Autogenerated input type of UnsubscribeFromNotifications
"""
input UnsubscribeFromNotificationsInput
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The NotificationThread IDs of the objects to unsubscribe from.
  """
  ids: [ID!]!
    @possibleTypes(
      concreteTypes: ["Commit", "Discussion", "Issue", "PullRequest", "Repository", "Team", "TeamDiscussion"]
      abstractType: "Subscribable"
    )
}

"""
Autogenerated return type of UnsubscribeFromNotifications
"""
type UnsubscribeFromNotificationsPayload
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Represents an 'unsubscribed' event on a given `Subscribable`.
"""
type UnsubscribeFromNotificationsPayload
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Represents an 'unsubscribed' event on a given `Subscribable`.
"""
input UpdateRepositoryWebCommitSignoffSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnsubscribedEvent object
  """
  id: ID!

  """
  The ID of the repository to update.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  Indicates if the repository should require signoff on web-based commits.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The update branch method to use. If omitted, defaults to 'MERGE'
  """
  updateMethod: PullRequestBranchUpdateMethod
}

"""
Autogenerated return type of UpdateRepositoryWebCommitSignoffSetting
"""
type UpdateRepositoryWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  The updated repository.
  """
  repository: Repository
}

"""
Autogenerated input type of UpdateSponsorshipPreferences
"""
input UpdateUserListInput {
  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  countMembersAlreadyRequested: Boolean = true

  """
  Turn on or off review assignment
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Whether or not the list is private
  """
  isPrivate: Boolean

  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

  """
  Can admins override branch protection.
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  Whether users can pull changes from upstream when the branch is locked. Set to
  `true` to allow fork syncing. Set to `false` to prevent fork syncing.
  """
  lockAllowsFetchAndMerge: Boolean

  """
  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
  """
  lockBranch: Boolean

  """
  Can admins override branch protection.
  """
  removeTeamRequest: Boolean = true

  """
  Whether users can pull changes from upstream when the branch is locked. Set to
  `true` to allow fork syncing. Set to `false` to prevent fork syncing.
  """
  lockAllowsFetchAndMerge: Boolean

  """
  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
  """
  lockBranch: Boolean

  """
  The glob-like pattern used to determine matching branches.
  """
  name: String
}

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  Whether the most recent push must be approved by someone other than the person who pushed it
  """
  requireLastPushApproval: Boolean

  """
  Whether the most recent push must be approved by someone other than the person who pushed it
  """
  requireLastPushApproval: Boolean

  """
  Number of approving reviews required to update matching branches.
  """
  clientMutationId: String

  """
  The list of required deployment environments
  """
  requiredDeploymentEnvironments: [String!]

  """
  The list of required deployment environments
  """
  requiredDeploymentEnvironments: [String!]

  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  list: UserList
}

"""
Autogenerated input type of UpdateUserListsForItem
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item to add to the list
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  countMembersAlreadyRequested: Boolean = true

  """
  Turn on or off review assignment
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  The suggested lists to create and add this item to
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  Are successful deployments required before merging.
  """
  requiresDeployments: Boolean

  """
  Are successful deployments required before merging.
  """
  requiresDeployments: Boolean

  """
  Are merge commits prohibited from being pushed to this branch.
  """
  clientMutationId: String

  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

  """
  Notify the entire team of the PR if it is delegated
  """
  item: UserListItems

  """
  Remove the team review request when assigning
  """
  removeTeamRequest: Boolean = true

  """
  The number of team members to assign
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  user: User
}

"""
A user is an individual's account on GitHub that owns repositories and can make new content.
"""
type User implements Actor & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  Determine if this repository owner has any items that can be pinned to their profile.
  """
  anyPinnableItems(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

"""
Autogenerated input type of UpdateUserList
"""
input UpdateUserListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Indicates if the repository should have the discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean

  """
  Indicates if the repository should have the issues feature enabled.
  """
  hasIssuesEnabled: Boolean

  """
  Indicates if the repository should have the project boards feature enabled.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The update branch method to use. If omitted, defaults to 'MERGE'
  """
  updateMethod: PullRequestBranchUpdateMethod
}

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A list of actors that are allowed to bypass rules in this ruleset.
  """
  bypassActors: [RepositoryRulesetBypassActorInput!]

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  The organization with the updated web commit signoff setting.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  Indicates if the repository should have the wiki feature enabled.
  """
  repositoryRulesetId: ID! @possibleTypes(concreteTypes: ["RepositoryRuleset"])

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

"""
Autogenerated input type of UpdateRepositoryRuleset
"""
input UpdateRepositoryRulesetInput {
  """
  The organization with the updated web commit signoff setting.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  The name of project.
  """
  name: String

  """
  The Project ID to update.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean

  """
  The ids of users or teams that can approve deployments to this environment
  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  The value for the allow private repository forking policy on the enterprise.
  """
  policyValue: EnterpriseAllowPrivateRepositoryForkingPolicyValue

  """
  The value for the allow private repository forking setting on the enterprise.
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  The organization with the updated web commit signoff setting.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  The value for the allow private repository forking policy on the enterprise.
  """
  policyValue: EnterpriseAllowPrivateRepositoryForkingPolicyValue

  """
  The value for the allow private repository forking setting on the enterprise.
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  Whether the project is public or not.
  """
  public: Boolean

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateProjectCard
"""
input UpdateProjectCardInput {
  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean

  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean

  """
  The ids of users or teams that can approve deployments to this environment
  """
  The note of ProjectCard.
  """
  note: String

  """
  The ProjectCard ID to update.
  """
  projectCardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])
}

"""
Autogenerated return type of UpdateProjectCard
"""
type UpdateProjectCardPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated ProjectCard.
  """
  projectCard: ProjectCard
}

"""
Autogenerated input type of UpdateProjectColumn
"""
input UpdateProjectColumnInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of project column.
  """
  name: String!

  """
  The ProjectColumn ID to update.
  """
  projectColumnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

"""
Autogenerated return type of UpdateProjectColumn
"""
type UpdateProjectColumnPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated project column.
  """
  projectColumn: ProjectColumn
}

"""
Autogenerated input type of UpdateProject
"""
input UpdateProjectInput {
  """
  The description of project.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of project.
  """
  name: String

  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean

  """
  The ids of users or teams that can approve deployments to this environment
  """
  public: Boolean

  """
  Whether the project is open or closed.
  """
  state: ProjectState
}

"""
Autogenerated return type of UpdateProject
"""
type UpdateProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated project.
  """
  project: Project
}

"""
Autogenerated input type of UpdateProjectV2Collaborators
"""
input UpdateProjectV2CollaboratorsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The collaborators to update.
  """
  collaborators: [ProjectV2Collaborator!]!

  """
  The ID of the project to update the collaborators for.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UpdateProjectV2Collaborators
"""
type UpdateProjectV2CollaboratorsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The collaborators granted a role
  """
  collaborators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ActorConnection
}

"""
Autogenerated input type of UpdateSponsorshipPreferences
"""
input UpdateUserListInput {
  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  countMembersAlreadyRequested: Boolean = true

  """
  Turn on or off review assignment
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Whether or not the list is private
  """
  isPrivate: Boolean

  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

  """
  Notify the entire team of the PR if it is delegated
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  Remove the team review request when assigning
  """
  removeTeamRequest: Boolean = true

  """
  The number of team members to assign
  """
  name: String
}

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just updated
  """
  list: UserList
}

"""
Autogenerated input type of UpdateUserListsForItem
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item to add to the list
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The update branch method to use. If omitted, defaults to 'MERGE'
  """
  updateMethod: PullRequestBranchUpdateMethod
}

  """
  Turn on or off review assignment
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  The suggested lists to create and add this item to
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item that was added
  """
  item: UserListItems

  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

  """
  Notify the entire team of the PR if it is delegated
  """
  lists: [UserList!]

  """
  Remove the team review request when assigning
  """
  removeTeamRequest: Boolean = true

  """
  The number of team members to assign
  """
  user: User
}

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  Whether or not the list is private
  """
  isPrivate: Boolean

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  The organization with the updated web commit signoff setting.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  The list of conditions for this ruleset
  """
  conditions: RepositoryRuleConditionsInput

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  The organization with the updated web commit signoff setting.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The node ID of the environment.
  """
  environmentId: ID! @possibleTypes(concreteTypes: ["Environment"])

  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean

  """
  The ids of users or teams that can approve deployments to this environment
  """
  message: String

"""
Autogenerated input type of UpdateProjectV2Collaborators
"""
input UpdateProjectV2CollaboratorsInput {
  """
  The organization with the updated web commit signoff setting.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateProjectCard
"""
input UpdateProjectCardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not the ProjectCard should be archived
  """
  isArchived: Boolean

"""
Autogenerated return type of UpdateProjectV2Collaborators
"""
type UpdateProjectV2CollaboratorsPayload {
  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean

  """
  The ids of users or teams that can approve deployments to this environment
  """
  note: String

  """
  The ProjectCard ID to update.
  """
  projectCardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])
}

"""
Autogenerated return type of UpdateProjectCard
"""
type UpdateProjectCardPayload {
  """
  Notify the entire team of the PR if it is delegated
  """
  clientMutationId: String

  """
  The updated ProjectCard.
  """
  projectCard: ProjectCard
}

"""
Autogenerated input type of UpdateProjectColumn
"""
input UpdateProjectColumnInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

"""
Autogenerated input type of UpdateUserList
"""
input UpdateUserListInput {
  """
  The name of project column.
  """
  name: String!

  """
  The ProjectColumn ID to update.
  """
  projectColumnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

"""
Autogenerated return type of UpdateProjectColumn
"""
type UpdateProjectColumnPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated project column.
  """
  projectColumn: ProjectColumn
}

"""
Autogenerated input type of UpdateProject
"""
input UpdateProjectInput {
  """
  The description of project.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of project.
  """
  name: String

  """
  The Project ID to update.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])

  """
  Whether the project is public or not.
  """
  public: Boolean

  """
  Whether the project is open or closed.
  """
  state: ProjectState
}

"""
Autogenerated return type of UpdateProject
"""
type UpdateProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated project.
  """
  project: Project
}

"""
Autogenerated input type of UpdateProjectV2Collaborators
"""
input UpdateProjectV2CollaboratorsInput {
  """
  The lists to which this item belongs
  """
  lists: [UserList!]

  """
  The collaborators to update.
  """
  collaborators: [ProjectV2Collaborator!]!

  """
  The ID of the project to update the collaborators for.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UpdateProjectV2Collaborators
"""
type UpdateProjectV2CollaboratorsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The collaborators granted a role
  """
  collaborators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ActorConnection
}

  """
  The enforcement level for this ruleset
  """
  enforcement: RuleEnforcement

  """
  The name of the ruleset.
  """
  name: String

  """
  The global relay id of the repository ruleset to be updated.
  """
  repositoryRulesetId: ID! @possibleTypes(concreteTypes: ["RepositoryRuleset"])

  """
  The list of rules for this ruleset
  """
  rules: [RepositoryRuleInput!]

  """
  The target of the ruleset.
  """
  target: RepositoryRulesetTarget
}

"""
Autogenerated return type of UpdateRepositoryRuleset
"""
type UpdateRepositoryRulesetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created Ruleset.
  """
  ruleset: RepositoryRuleset
}

"""
Autogenerated input type of UpdateRepositoryWebCommitSignoffSetting
"""
input UpdateRepositoryWebCommitSignoffSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the repository to update.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  Indicates if the repository should require signoff on web-based commits.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The update branch method to use. If omitted, defaults to 'MERGE'
  """
  updateMethod: PullRequestBranchUpdateMethod
}

"""
Autogenerated return type of UpdateRepositoryWebCommitSignoffSetting
"""
type UpdateRepositoryWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  The updated repository.
  """
  repository: Repository
}

"""
Autogenerated input type of UpdateSponsorshipPreferences
"""
input UpdateUserListInput {
  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  countMembersAlreadyRequested: Boolean = true

  """
  Turn on or off review assignment
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Whether or not the list is private
  """
  isPrivate: Boolean

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  The organization with the updated web commit signoff setting.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  Indicates if the repository should have the wiki feature enabled.
  """
  clientMutationId: String

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  The organization with the updated web commit signoff setting.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  The global relay id of the repository ruleset to be updated.
  """
  repositoryRulesetId: ID! @possibleTypes(concreteTypes: ["RepositoryRuleset"])

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  Whether the project is public or not.
  """
  public: Boolean

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateProjectCard
"""
input UpdateProjectCardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not the ProjectCard should be archived
  """
  isArchived: Boolean

  """
  The note of ProjectCard.
  """
  note: String

  """
  The ProjectCard ID to update.
  """
  projectCardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])
}

"""
Autogenerated return type of UpdateProjectCard
"""
type UpdateProjectCardPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated ProjectCard.
  """
  projectCard: ProjectCard
}

"""
Autogenerated input type of UpdateProjectColumn
"""
input UpdateProjectColumnInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of project column.
  """
  name: String!

  """
  The ProjectColumn ID to update.
  """
  projectColumnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

"""
Autogenerated return type of UpdateProjectColumn
"""
type UpdateProjectColumnPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated project column.
  """
  projectColumn: ProjectColumn
}

"""
Autogenerated input type of UpdateProject
"""
input UpdateProjectInput {
  """
  The description of project.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of project.
  """
  name: String

"""
Autogenerated input type of UpdateRepositoryWebCommitSignoffSetting
"""
input UpdateRepositoryWebCommitSignoffSettingInput {
  """
  The Project ID to update.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])

  """
  Whether the project is public or not.
  """
  public: Boolean

  """
  Whether the project is open or closed.
  """
  state: ProjectState
}

"""
Autogenerated return type of UpdateProject
"""
type UpdateProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated project.
  """
  project: Project
}

"""
Autogenerated input type of UpdateProjectV2Collaborators
"""
input UpdateProjectV2CollaboratorsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The collaborators to update.
  """
  collaborators: [ProjectV2Collaborator!]!

  """
  The ID of the project to update the collaborators for.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UpdateProjectV2Collaborators
"""
type UpdateProjectV2CollaboratorsPayload {
  """
  Turn on or off review assignment
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  The collaborators granted a role
  """
  collaborators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ActorConnection
}

  """
  The suggested lists to create and add this item to
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

  """
  Notify the entire team of the PR if it is delegated
  """
  clientMutationId: String

  """
  Remove the team review request when assigning
  """
  removeTeamRequest: Boolean = true

  """
  The number of team members to assign
  """
  item: UserListItems

  """
  The lists to which this item belongs
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  user: User
}

"""
Autogenerated input type of UpdateUserList
"""
input UpdateUserListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Indicates if the repository should have the discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean

  """
  Indicates if the repository should have the issues feature enabled.
  """
  isPrivate: Boolean

  """
  The ID of the list to update.
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean

  """
  Indicates if the repository should have the wiki feature enabled.
  """
  clientMutationId: String

  """
  The list that was just updated
  """
  list: UserList
}

"""
Autogenerated input type of UpdateUserListsForItem
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item to add to the list
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  The lists to which this item should belong
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The update branch method to use. If omitted, defaults to 'MERGE'
  """
  updateMethod: PullRequestBranchUpdateMethod
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item that was added
  """
  item: UserListItems

  """
  The lists to which this item belongs
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  user: User
}

"""
Autogenerated input type of UpdateRepositoryRuleset
"""
input UpdateRepositoryRulesetInput {
  """
  A list of actors that are allowed to bypass rules in this ruleset.
  """
  bypassActors: [RepositoryRulesetBypassActorInput!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list of conditions for this ruleset
  """
  conditions: RepositoryRuleConditionsInput

  """
  The enforcement level for this ruleset
  """
  enforcement: RuleEnforcement

  """
  The name of the ruleset.
  """
  name: String

  """
  The global relay id of the repository ruleset to be updated.
  """
  repositoryRulesetId: ID! @possibleTypes(concreteTypes: ["RepositoryRuleset"])

  """
  The list of rules for this ruleset
  """
  rules: [RepositoryRuleInput!]

  """
  The target of the ruleset.
  """
  target: RepositoryRulesetTarget
}

"""
Autogenerated return type of UpdateRepositoryRuleset
"""
type UpdateRepositoryRulesetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created Ruleset.
  """
  ruleset: RepositoryRuleset
}

"""
Autogenerated input type of UpdateRepositoryWebCommitSignoffSetting
"""
input UpdateRepositoryWebCommitSignoffSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the repository to update.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  Indicates if the repository should require signoff on web-based commits.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The update branch method to use. If omitted, defaults to 'MERGE'
  """
  updateMethod: PullRequestBranchUpdateMethod
}

"""
Autogenerated return type of UpdateRepositoryWebCommitSignoffSetting
"""
type UpdateRepositoryWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  The updated repository.
  """
  repository: Repository
}

"""
Autogenerated input type of UpdateSponsorshipPreferences
"""
input UpdateUserListInput {
  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  countMembersAlreadyRequested: Boolean = true

  """
  Turn on or off review assignment
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Whether or not the list is private
  """
  isPrivate: Boolean

  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

  """
  Notify the entire team of the PR if it is delegated
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  Remove the team review request when assigning
  """
  removeTeamRequest: Boolean = true

  """
  The number of team members to assign
  """
  name: String
}

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just updated
  """
  list: UserList
}

"""
Autogenerated input type of UpdateUserListsForItem
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item to add to the list
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  The lists to which this item should belong
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  countMembersAlreadyRequested: Boolean = true

  """
  Turn on or off review assignment
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item that was added
  """
  item: UserListItems

  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

  """
  Notify the entire team of the PR if it is delegated
  """
  lists: [UserList!]

  """
  Remove the team review request when assigning
  """
  removeTeamRequest: Boolean = true

  """
  The number of team members to assign
  """
  user: User
}

"""
A user is an individual's account on GitHub that owns repositories and can make new content.
"""
type User implements Actor & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  Indicates if the repository should have the discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean

  """
  Indicates if the repository should have the issues feature enabled.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

"""
Autogenerated input type of UpdateUserList
"""
input UpdateUserListInput {
  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean

  """
  Indicates if the repository should have the wiki feature enabled.
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Whether or not the list is private
  """
  isPrivate: Boolean

  """
  The ID of the list to update.
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  The name of the list
  """
  name: String
}

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just updated
  """
  list: UserList
}

"""
Autogenerated input type of UpdateRepositoryRuleset
"""
input UpdateRepositoryRulesetInput {
  """
  A list of actors that are allowed to bypass rules in this ruleset.
  """
  bypassActors: [RepositoryRulesetBypassActorInput!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list of conditions for this ruleset
  """
  conditions: RepositoryRuleConditionsInput

  """
  The enforcement level for this ruleset
  """
  enforcement: RuleEnforcement

  """
  The name of the ruleset.
  """
  name: String

  """
  The global relay id of the repository ruleset to be updated.
  """
  repositoryRulesetId: ID! @possibleTypes(concreteTypes: ["RepositoryRuleset"])

  """
  Indicates if the repository should have the discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean

  """
  Indicates if the repository should have the issues feature enabled.
  """
  rules: [RepositoryRuleInput!]

  """
  The target of the ruleset.
  """
  target: RepositoryRulesetTarget
}

"""
Autogenerated return type of UpdateRepositoryRuleset
"""
type UpdateRepositoryRulesetPayload {
  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean

  """
  Indicates if the repository should have the wiki feature enabled.
  """
  clientMutationId: String

  """
  The newly created Ruleset.
  """
  ruleset: RepositoryRuleset
}

"""
Autogenerated input type of UpdateRepositoryWebCommitSignoffSetting
"""
input UpdateRepositoryWebCommitSignoffSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the repository to update.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  Indicates if the repository should require signoff on web-based commits.
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateRepositoryWebCommitSignoffSetting
"""
type UpdateRepositoryWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  The updated repository.
  """
  repository: Repository
}

"""
Autogenerated input type of UpdateRepositoryRuleset
"""
input UpdateRepositoryRulesetInput {
  """
  A list of actors that are allowed to bypass rules in this ruleset.
  """
  bypassActors: [RepositoryRulesetBypassActorInput!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list of conditions for this ruleset
  """
  conditions: RepositoryRuleConditionsInput

  """
  The enforcement level for this ruleset
  """
  enforcement: RuleEnforcement

  """
  The name of the ruleset.
  """
  name: String

  """
  The global relay id of the repository ruleset to be updated.
  """
  repositoryRulesetId: ID! @possibleTypes(concreteTypes: ["RepositoryRuleset"])

  """
  The list of rules for this ruleset
  """
  rules: [RepositoryRuleInput!]

  """
  The target of the ruleset.
  """
  target: RepositoryRulesetTarget
}

"""
Autogenerated return type of UpdateRepositoryRuleset
"""
type UpdateRepositoryRulesetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created Ruleset.
  """
  ruleset: RepositoryRuleset
}

"""
Autogenerated input type of UpdateRepositoryWebCommitSignoffSetting
"""
input UpdateRepositoryWebCommitSignoffSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the repository to update.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  Indicates if the repository should require signoff on web-based commits.
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateRepositoryWebCommitSignoffSetting
"""
type UpdateRepositoryWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  The updated repository.
  """
  repository: Repository
}

"""
Autogenerated input type of UpdateSponsorshipPreferences
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  countMembersAlreadyRequested: Boolean = true

  """
  Turn on or off review assignment
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  The lists to which this item should belong
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  The suggested lists to create and add this item to
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

  """
  Notify the entire team of the PR if it is delegated
  """
  clientMutationId: String

  """
  Remove the team review request when assigning
  """
  removeTeamRequest: Boolean = true

  """
  The number of team members to assign
  """
  item: UserListItems

  """
  The lists to which this item belongs
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  user: User
}

"""
Autogenerated input type of UpdateUserList
"""
input UpdateUserListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Whether or not the list is private
  """
  isPrivate: Boolean

  """
  The ID of the list to update.
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  The name of the list
  """
  name: String
}

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just updated
  """
  list: UserList
}

"""
Autogenerated input type of UpdateUserListsForItem
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item to add to the list
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  The lists to which this item should belong
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  The suggested lists to create and add this item to
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item that was added
  """
  item: UserListItems

  """
  The lists to which this item belongs
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  user: User
}

"""
Autogenerated input type of UpdateUserList
"""
input UpdateUserListInput {
  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  countMembersAlreadyRequested: Boolean = true

  """
  Turn on or off review assignment
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Whether or not the list is private
  """
  isPrivate: Boolean

  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

  """
  Notify the entire team of the PR if it is delegated
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  Remove the team review request when assigning
  """
  removeTeamRequest: Boolean = true

  """
  The number of team members to assign
  """
  name: String
}

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just updated
  """
  list: UserList
}

"""
Autogenerated input type of UpdateUserListsForItem
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item to add to the list
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  The lists to which this item should belong
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  countMembersAlreadyRequested: Boolean = true

  """
  Turn on or off review assignment
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item that was added
  """
  item: UserListItems

  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

  """
  Notify the entire team of the PR if it is delegated
  """
  lists: [UserList!]

  """
  Remove the team review request when assigning
  """
  removeTeamRequest: Boolean = true

  """
  The number of team members to assign
  """
  user: User
}

"""
A user is an individual's account on GitHub that owns repositories and can make new content.
"""
type User implements Actor & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

"""
Autogenerated input type of UpdateUserList
"""
input UpdateUserListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Whether or not the list is private
  """
  isPrivate: Boolean

  """
  The ID of the list to update.
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  The name of the list
  """
  name: String
}

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just updated
  """
  list: UserList
}

"""
Autogenerated input type of UpdateUserListsForItem
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item to add to the list
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  The lists to which this item should belong
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  The suggested lists to create and add this item to
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item that was added
  """
  item: UserListItems

  """
  The lists to which this item belongs
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  user: User
}

"""
Autogenerated input type of UpdateUserList
"""
input UpdateUserListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Whether or not the list is private
  """
  isPrivate: Boolean

  """
  The ID of the list to update.
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  The name of the list
  """
  name: String
}

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just updated
  """
  list: UserList
}

"""
Autogenerated input type of UpdateUserListsForItem
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item to add to the list
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  The lists to which this item should belong
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  The suggested lists to create and add this item to
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item that was added
  """
  item: UserListItems

  """
  The lists to which this item belongs
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  user: User
}

"""
A user is an individual's account on GitHub that owns repositories and can make new content.
"""
type User implements Actor & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  A user-curated list of repositories
  """
  lists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserListConnection!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  A user-curated list of repositories
  """
  lists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserListConnection!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  A user-curated list of repositories
  """
  lists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for gists returned from the connection
    """
    orderBy: GistOrder

    """
    Filters Gists according to privacy.
    """
    privacy: GistPrivacy
  ): GistConnection!

  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  hasSponsorsListing: Boolean!

  """
  The hovercard information for this user in a given context
  """
  hovercard(
    """
    The ID of the subject to get the hovercard in the context of
    """
    primarySubjectId: ID
  ): Hovercard!

  """
  The Node ID of the User object
  """
  id: ID!

  """
  The interaction ability settings for this user.
  """
  interactionAbility: RepositoryInteractionAbility

  """
  Whether or not this user is a participant in the GitHub Security Bug Bounty.
  """
  isBountyHunter: Boolean!

  """
  Whether or not this user is a participant in the GitHub Campus Experts Program.
  """
  isCampusExpert: Boolean!

  """
  Whether or not this user is a GitHub Developer Program member.
  """
  isDeveloperProgramMember: Boolean!

  """
  Whether or not this user is a GitHub employee.
  """
  isEmployee: Boolean!

  """
  Whether or not this user is following the viewer. Inverse of viewerIsFollowing
  """
  location: String

  """
  The username used to login.
  """
  login: String!

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """
  The user's public profile name.
  """
  name: String

  """
  Whether the given account is sponsoring this user/organization.
  """
  organization(
    """
    The login of the organization to find.
    """
    login: String!
  ): Organization

  """
  Verified email addresses that match verified domains for a specified organization the user is a member of.
  """
  organizationVerifiedDomainEmails(
    """
    The login of the organization to match verified domains from.
    """
    login: String!
  ): [String!]!

  """
  A list of organizations the user belongs to.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  A list of packages under the owner.
  """
  packages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Find a project by number.
  """
  issues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filtering options for issues returned from the connection.
    """
    filterBy: IssueFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    A list of label names to filter the pull requests by.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection.
    """
    orderBy: IssueOrder

    """
    A list of states to filter the issues by.
    """
    states: [IssueState!]
  ): IssueConnection!

  """
  Showcases a selection of repositories and gists that the profile owner has
  either curated or that have been selected automatically based on popularity.
  """
  itemShowcase: ProfileItemShowcase!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  A user-curated list of repositories
  """
  lists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserListConnection!

  """
  The user's public profile location.
  """
  location: String

  """
  The username used to login.
  """
  login: String!

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """
  The user's public profile name.
  """
  name: String

  """
  Find an organization by its login that the user belongs to.
  """
  organization(
    """
    The login of the organization to find.
    """
    login: String!
  ): Organization

  """
  Find a project by number.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  A list of packages under the owner.
  """
  packages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Find packages by their names.
    """
    names: [String]

    """
    Ordering of the returned packages.
    """
    orderBy: PackageOrder = {field: CREATED_AT, direction: DESC}

    """
    Filter registry package by type.
    """
    packageType: PackageType

    """
    Find packages in a repository by ID.
    """
    repositoryId: ID
  ): PackageConnection!

  """
  A list of repositories and gists this profile owner can pin to their profile.
  """
  pinnableItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter the types of pinnable items that are returned.
    """
    types: [PinnableItemType!]
  ): PinnableItemConnection!

  """
  A list of repositories and gists this profile owner has pinned to their profile
  """
  pinnedItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter the types of pinned items that are returned.
    """
    types: [PinnableItemType!]
  ): PinnableItemConnection!

  """
  Returns how many more items this profile owner can pin to their profile.
  """
  pinnedItemsRemaining: Int!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing user's projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing user's projects
  """
  projectsUrl: URI!

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  The user's profile pronouns
  """
  pronouns: String

  """
  A list of public keys associated with this user.
  """
  publicKeys(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PublicKeyConnection!

  """
  A list of pull requests associated with this user.
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    The base ref name to filter the pull requests by.
    """
    baseRefName: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    The head ref name to filter the pull requests by.
    """
    headRefName: String

    """
    A list of label names to filter the pull requests by.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests returned from the connection.
    """
    orderBy: IssueOrder

    """
    A list of states to filter the pull requests by.
    """
    states: [PullRequestState!]
  ): PullRequestConnection!

  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!

  """
  A list of repositories that the user owns.
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  A list of repositories that the user recently contributed to.
  """
  repositoriesContributedTo(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    If non-null, include only the specified types of contributions. The
    GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]
    """
    contributionTypes: [RepositoryContributionType]

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssues: Boolean

    """
    If true, include user repositories
    """
    includeUserRepositories: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    If non-null, filters repositories according to privacy
    """
    privacy: RepositoryPrivacy
  ): RepositoryConnection!

  """
  Find Repository.
  """
  repository(
    """
    Follow repository renames. If disabled, a repository referenced by its old name will return an error.
    """
    followRenames: Boolean = true

    """
    Name of Repository to find.
    """
    name: String!
  ): Repository

  """
  Discussion comments this user has authored.
  """
  repositoryDiscussionComments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter discussion comments to only those that were marked as the answer
    """
    onlyAnswers: Boolean = false

    """
    Filter discussion comments to only those in a specific repository.
    """
    repositoryId: ID
  ): DiscussionCommentConnection!

  """
  Discussions this user has started.
  """
  repositoryDiscussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter discussions to only those that have been answered or not. Defaults to
    including both answered and unanswered discussions.
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: CREATED_AT, direction: DESC}

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  The HTTP path for this user
  """
  resourcePath: URI!

  """
  Replies this user has saved
  """
  savedReplies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The field to order saved replies by.
    """
    orderBy: SavedReplyOrder = {field: UPDATED_AT, direction: DESC}
  ): SavedReplyConnection

  """
  The user's social media accounts, ordered as they appear on the user's profile.
  """
  socialAccounts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SocialAccountConnection!

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Repositories the user has starred.
  """
  starredRepositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Order for connection
    """
    orderBy: StarOrder

    """
    Filters starred repositories to only return repositories owned by the viewer.
    """
    ownedByViewer: Boolean
  ): StarredRepositoryConnection!

  """
  The user's description of what they're currently doing.
  """
  status: UserStatus

  """
  Suggested names for user lists
  """
  suggestedListNames: [UserListSuggestion!]!

  """
  Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created
  """
  topRepositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder!

    """
    How far back in time to fetch contributed repositories
    """
    since: DateTime
  ): RepositoryConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The user's Twitter username.
  """
  twitterUsername: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this user
  """
  url: URI!

  """
  Can the viewer pin repositories and gists to the profile?
  """
  viewerCanChangePinnedItems: Boolean!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!

  """
  Whether or not the viewer is able to follow the user.
  """
  viewerCanFollow: Boolean!

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  Whether or not this user is followed by the viewer. Inverse of isFollowingViewer.
  """
  viewerIsFollowing: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!

  """
  A list of repositories the given user is watching.
  """
  watching(
    """
    Affiliation options for repositories returned from the connection. If none
    specified, the results will include repositories for which the current
    viewer is an owner or collaborator, or member.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  A URL pointing to the user's public website/blog.
  """
  websiteUrl: URI
}

"""
The possible durations that a user can be blocked for.
"""
enum UserBlockDuration {
  """
  The user was blocked for 1 day
  """
  ONE_DAY

  """
  The user was blocked for 30 days
  """
  ONE_MONTH

  """
  The user was blocked for 7 days
  """
  ONE_WEEK

  """
  The user was blocked permanently
  """
  PERMANENT

  """
  The user was blocked for 3 days
  """
  THREE_DAYS
}

"""
Represents a 'user_blocked' event on a given user.
"""
type UserBlockedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Number of days that the user was blocked for.
  """
  blockDuration: UserBlockDuration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the UserBlockedEvent object
  """
  id: ID!

  """
  The user who was blocked.
  """
  subject: User
}

"""
The connection type for User.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edit on user content
"""
type UserContentEdit implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the date and time when the object was deleted.
  """
  deletedAt: DateTime

  """
  The actor who deleted this content
  """
  deletedBy: Actor

  """
  A summary of the changes for this edit
  """
  diff: String

  """
  When this content was edited
  """
  editedAt: DateTime!

  """
  The actor who edited this content
  """
  editor: Actor

  """
  The Node ID of the UserContentEdit object
  """
  id: ID!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A list of edits to content.
"""
type UserContentEditConnection {
  """
  A list of edges.
  """
  edges: [UserContentEditEdge]

  """
  A list of nodes.
  """
  nodes: [UserContentEdit]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type UserContentEditEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: UserContentEdit
}

"""
Represents a user.
"""
type UserEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User
}

"""
Email attributes from External Identity
"""
type UserEmailMetadata {
  """
  Boolean to identify primary emails
  """
  primary: Boolean

  """
  Type of email
  """
  type: String

  """
  Email id
  """
  value: String!
}

"""
A user-curated list of repositories
"""
type UserList implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The description of this list
  """
  description: String

  """
  The Node ID of the UserList object
  """
  id: ID!

  """
  Whether or not this list is private
  """
  isPrivate: Boolean!

  """
  The items associated with this list
  """
  items(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserListItemsConnection!

  """
  The date and time at which this list was created or last had items added to it
  """
  lastAddedAt: DateTime!

  """
  The name of this list
  """
  name: String!

  """
  The slug of this list
  """
  slug: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The user to which this list belongs
  """
  user: User!
}

"""
The connection type for UserList.
"""
type UserListConnection {
  """
  A list of edges.
  """
  edges: [UserListEdge]

  """
  A list of nodes.
  """
  nodes: [UserList]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type UserListEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: UserList
}

"""
Types that can be added to a user list.
"""
union UserListItems = Repository

"""
The connection type for UserListItems.
"""
type UserListItemsConnection {
  """
  A list of edges.
  """
  edges: [UserListItemsEdge]

  """
  A list of nodes.
  """
  nodes: [UserListItems]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type UserListItemsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: UserListItems
}

"""
Represents a suggested user list.
"""
type UserListSuggestion {
  """
  The ID of the suggested user list
  """
  id: ID

  """
  The name of the suggested user list
  """
  name: String
}

"""
The user's description of what they're currently doing.
"""
type UserStatus implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  An emoji summarizing the user's status.
  """
  emoji: String

  """
  The status emoji as HTML.
  """
  emojiHTML: HTML

  """
  If set, the status will not be shown after this date.
  """
  expiresAt: DateTime

  """
  The Node ID of the UserStatus object
  """
  id: ID!

  """
  Whether this status indicates the user is not fully available on GitHub.
  """
  indicatesLimitedAvailability: Boolean!

  """
  A brief message describing what the user is doing.
  """
  message: String

  """
  The organization whose members can see this status. If null, this status is publicly visible.
  """
  organization: Organization

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The user who has this status.
  """
  user: User!
}

"""
The connection type for UserStatus.
"""
type UserStatusConnection {
  """
  A list of edges.
  """
  edges: [UserStatusEdge]

  """
  A list of nodes.
  """
  nodes: [UserStatus]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type UserStatusEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: UserStatus
}

"""
Ordering options for user status connections.
"""
input UserStatusOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order user statuses by.
  """
  field: UserStatusOrderField!
}

"""
Properties by which user status connections can be ordered.
"""
enum UserStatusOrderField {
  """
  Order user statuses by when they were updated.
  """
  UPDATED_AT
}

"""
A domain that can be verified or approved for an organization or an enterprise.
"""
type VerifiableDomain implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The DNS host name that should be used for verification.
  """
  dnsHostName: URI

  """
  The unicode encoded domain.
  """
  domain: URI!

  """
  Whether a TXT record for verification with the expected host name was found.
  """
  hasFoundHostName: Boolean!

  """
  Whether a TXT record for verification with the expected verification token was found.
  """
  hasFoundVerificationToken: Boolean!

  """
  The Node ID of the VerifiableDomain object
  """
  id: ID!

  """
  Whether or not the domain is approved.
  """
  isApproved: Boolean!

  """
  Whether this domain is required to exist for an organization or enterprise policy to be enforced.
  """
  isRequiredForPolicyEnforcement: Boolean!

  """
  Whether or not the domain is verified.
  """
  isVerified: Boolean!

  """
  The owner of the domain.
  """
  owner: VerifiableDomainOwner!

  """
  The punycode encoded domain.
  """
  punycodeEncodedDomain: URI!

  """
  The time that the current verification token will expire.
  """
  tokenExpirationTime: DateTime

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The current verification token for the domain.
  """
  verificationToken: String
}

"""
The connection type for VerifiableDomain.
"""
type VerifiableDomainConnection {
  """
  A list of edges.
  """
  edges: [VerifiableDomainEdge]

  """
  A list of nodes.
  """
  nodes: [VerifiableDomain]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type VerifiableDomainEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: VerifiableDomain
}

"""
Ordering options for verifiable domain connections.
"""
input VerifiableDomainOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order verifiable domains by.
  """
  field: VerifiableDomainOrderField!
}

"""
Properties by which verifiable domain connections can be ordered.
"""
enum VerifiableDomainOrderField {
  """
  Order verifiable domains by their creation date.
  """
  CREATED_AT

  """
  Order verifiable domains by the domain name.
  """
  DOMAIN
}

"""
Types that can own a verifiable domain.
"""
union VerifiableDomainOwner = Enterprise | Organization

"""
Autogenerated input type of VerifyVerifiableDomain
"""
input VerifyVerifiableDomainInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the verifiable domain to verify.
  """
  id: ID! @possibleTypes(concreteTypes: ["VerifiableDomain"])
}

"""
Autogenerated return type of VerifyVerifiableDomain
"""
type VerifyVerifiableDomainPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The verifiable domain that was verified.
  """
  domain: VerifiableDomain
}

"""
A hovercard context with a message describing how the viewer is related.
"""
type ViewerHovercardContext implements HovercardContext {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  Identifies the user who is related to this context.
  """
  viewer: User!
}

"""
A subject that may be upvoted.
"""
interface Votable {
  """
  Number of upvotes that this subject has received.
  """
  upvoteCount: Int!

  """
  Whether or not the current user can add or remove an upvote on this subject.
  """
  viewerCanUpvote: Boolean!

  """
  Whether or not the current user has already upvoted this subject.
  """
  viewerHasUpvoted: Boolean!
}

"""
A workflow contains meta information about an Actions workflow file.
"""
type Workflow implements Node & UniformResourceLocatable {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  name: String!

  """
  The HTTP path for this workflow
  """
  resourcePath: URI!

  """
  The runs of the workflow.
  """
  runs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the connection
    """
    orderBy: WorkflowRunOrder = {field: CREATED_AT, direction: DESC}
  ): WorkflowRunConnection!

  """
  The state of the workflow.
  """
  state: WorkflowState!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this workflow
  """
  url: URI!
}

"""
A workflow that must run for this rule to pass
"""
type WorkflowFileReference {
  """
  The path to the workflow file
  """
  path: String!

  """
  The ref (branch or tag) of the workflow file to use
  """
  ref: String

  """
  The ID of the repository where the workflow is defined
  """
  repositoryId: Int!

  """
  The commit SHA of the workflow file to use
  """
  sha: String
}

"""
A workflow that must run for this rule to pass
"""
input WorkflowFileReferenceInput {
  """
  The path to the workflow file
  """
  path: String!

  """
  The ref (branch or tag) of the workflow file to use
  """
  ref: String

  """
  The ID of the repository where the workflow is defined
  """
  repositoryId: Int!

  """
  The commit SHA of the workflow file to use
  """
  sha: String
}

"""
A workflow run.
"""
type WorkflowRun implements Node & UniformResourceLocatable {
  """
  The check suite this workflow run belongs to.
  """
  checkSuite: CheckSuite!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The log of deployment reviews
  """
  deploymentReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DeploymentReviewConnection!

  """
  The event that triggered the workflow run
  """
  event: String!

  """
  The workflow file
  """
  file: WorkflowRunFile

  """
  The Node ID of the WorkflowRun object
  """
  id: ID!

  """
  The pending deployment requests of all check runs in this workflow run
  """
  pendingDeploymentRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DeploymentRequestConnection!

  """
  The HTTP path for this workflow run
  """
  resourcePath: URI!

  """
  A number that uniquely identifies this workflow run in its parent workflow.
  """
  runNumber: Int!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this workflow run
  """
  url: URI!

  """
  The workflow executed in this workflow run.
  """
  workflow: Workflow!
}

"""
The connection type for WorkflowRun.
"""
type WorkflowRunConnection {
  """
  A list of edges.
  """
  edges: [WorkflowRunEdge]

  """
  A list of nodes.
  """
  nodes: [WorkflowRun]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type WorkflowRunEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: WorkflowRun
}

"""
An executed workflow file for a workflow run.
"""
type WorkflowRunFile implements Node & UniformResourceLocatable {
  """
  The Node ID of the WorkflowRunFile object
  """
  id: ID!

  """
  The path of the workflow file relative to its repository.
  """
  path: String!

  """
  The direct link to the file in the repository which stores the workflow file.
  """
  repositoryFileUrl: URI!

  """
  The repository name and owner which stores the workflow file.
  """
  repositoryName: URI!

  """
  The HTTP path for this workflow run file
  """
  resourcePath: URI!

  """
  The parent workflow run execution for this file.
  """
  run: WorkflowRun!

  """
  The HTTP URL for this workflow run file
  """
  url: URI!

  """
  If the viewer has permissions to push to the repository which stores the workflow.
  """
  viewerCanPushRepository: Boolean!

  """
  If the viewer has permissions to read the repository which stores the workflow.
  """
  viewerCanReadRepository: Boolean!
}

"""
Ways in which lists of workflow runs can be ordered upon return.
"""
input WorkflowRunOrder {
  """
  The direction in which to order workflow runs by the specified field.
  """
  direction: OrderDirection!

  """
  The field by which to order workflows.
  """
  field: WorkflowRunOrderField!
}

"""
Properties by which workflow run connections can be ordered.
"""
enum WorkflowRunOrderField {
  """
  Order workflow runs by most recently created
  """
  CREATED_AT
}

"""
The possible states for a workflow.
"""
enum WorkflowState {
  """
  The workflow is active.
  """
  ACTIVE

  """
  The workflow was deleted from the git repository.
  """
  DELETED

  """
  The workflow was disabled by default on a fork.
  """
  DISABLED_FORK

  """
  The workflow was disabled for inactivity in the repository.
  """
  DISABLED_INACTIVITY

  """
  The workflow was disabled manually.
  """
  DISABLED_MANUALLY
}

"""
Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
"""
type WorkflowsParameters {
  """
  Workflows that must pass for this rule to pass.
  """
  workflows: [WorkflowFileReference!]!
}

"""
Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
"""
input WorkflowsParametersInput {
  """
  Workflows that must pass for this rule to pass.
  """
  workflows: [WorkflowFileReferenceInput!]!
}

"""
A valid x509 certificate string
"""
scalar X509Certificate
